$Suite
$SuiteId MACv520
$SuiteOverviewPart
$Begin_SuiteStructure
$SuiteId MACv520
$StandardsRef /*  */
$PICSref /*  */
$PIXITref /*  */
$TestMethods /*  */
$Comment /*  */
$Structure&Objectives
$Structure&Objective
$TestGroupRef MACv520/MAC/
$SelectExprId 
$Objective /*  */
$End_Structure&Objective
$Structure&Objective
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$SelectExprId 
$Objective /*  */
$End_Structure&Objective
$Structure&Objective
$TestGroupRef MACv520/MAC/CorrectSelectionOfRACH_Parameters/
$SelectExprId 
$Objective /*  */
$End_Structure&Objective
$Structure&Objective
$TestGroupRef MACv520/MAC/PriorityHandlingBetweenDataFlowsOfOneUE/
$SelectExprId 
$Objective /*  */
$End_Structure&Objective
$End_Structure&Objectives
$Comment /*  */
$End_SuiteStructure
$Begin_TestCaseIndex
$CaseIndex
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$TestCaseId tc_7_1_1_1
$SelectExprId AllUE
$Description /* CCCH mapped to RACH/FACH / Invalid TCTF */
$End_CaseIndex
$CaseIndex
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$TestCaseId tc_7_1_1_2
$SelectExprId AllUE
$Description /* DTCH or DCCH mapped to RACH/FACH / Invalid TCTF */
$End_CaseIndex
$CaseIndex
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$TestCaseId tc_7_1_1_3
$SelectExprId AllUE
$Description /* DTCH or DCCH mapped to RACH/FACH / Invalid C/T Field */
$End_CaseIndex
$CaseIndex
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$TestCaseId tc_7_1_1_4
$SelectExprId AllUE
$Description /* DTCH or DCCH mapped to RACH/FACH / Invalid UE ID Type Field */
$End_CaseIndex
$CaseIndex
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$TestCaseId tc_7_1_1_5
$SelectExprId AllUE
$Description /* DTCH or DCCH mapped to RACH/FACH / Incorrect UE ID */
$End_CaseIndex
$CaseIndex
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$TestCaseId tc_7_1_1_8
$SelectExprId AllUE
$Description /* DTCH or DCCH mapped to DCH / Invalid C/T Field */
$End_CaseIndex
$CaseIndex
$TestGroupRef MACv520/MAC/CorrectSelectionOfRACH_Parameters/
$TestCaseId tc_7_1_2_3_1
$SelectExprId FDD_Mode
$Description /* Correct Selection of RACH parameters (FDD) */
$End_CaseIndex
$CaseIndex
$TestGroupRef MACv520/MAC/CorrectSelectionOfRACH_Parameters/
$TestCaseId tc_7_1_2_4a
$SelectExprId RRC_FDD_PS
$Description /* Access Service class selection for RACH transmission */
$End_CaseIndex
$CaseIndex
$TestGroupRef MACv520/MAC/PriorityHandlingBetweenDataFlowsOfOneUE/
$TestCaseId tc_7_1_3_1
$SelectExprId AllUE
$Description /* Priority Handling between data flows of one UE */
$End_CaseIndex
$Comment /*  */
$End_TestCaseIndex
$Begin_TestStepIndex
$StepIndex
$TestStepRef MACv520/Preambles/
$TestStepId ts_MAC_GenericSetupProceduresToBGP6_2Or6_4
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/Preambles/
$TestStepId ts_GenericSetupProceduresToBGP6_1
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/Preambles/
$TestStepId ts_GenericSetupProceduresToIdleUpdate_CCCH
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/Preambles/
$TestStepId ts_SendModifiedSysInfo_Sib6
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/Preambles/
$TestStepId ts_MAC_ModifySIB1_SIB5_And7
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/Preambles/
$TestStepId ts_InitDummyDL_Transfer
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/Preambles/
$TestStepId ts_InitRRC_ConnecSetup
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/Preambles/
$TestStepId pr_CloseUE_TestLoop
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/Preambles/
$TestStepId pr_GenericSetupProcedures
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_SS_RB20_AM_PS_Rel_Cfg_NoTimerPoll
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_ReceiveRRC_RLC_StatusPDU_DCH
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_ReceiveRRC_RLC_StatusPDU_FACH
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_SendDLDirectTransfer
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_MonitorUplinkSpecefiedTime
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_Set_AICH_ACKModeInDefaultCell
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_SetPRACH_MeasurementmodeInDefaultCell
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_GetPRACH_PreambleMeasuremntReportInDefaultCell
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_GetRRC_ConnecSetupSegment
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_SendRRC_ConnecSetup
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_MAC_ReceiveRRC_ConnReqInDefaultCellAndInit
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_MAC_ReceiveRRC_ConnReqInDefaultCell
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/General/
$TestStepId ts_ReceiveLoopBackDataAndCheckASC
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/RRC_Steps/
$TestStepId ts_RRC_ConnEstForMAC_RecIniTDirecTrans
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/MAC_UT_Steps/
$TestStepId ts_MMI_USIM_InsertTypeB
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_General_Steps/
$TestStepId ts_AssignCN_Domain
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_General_Steps/
$TestStepId ts_CountConfiguredCell
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_General_Steps/
$TestStepId ts_InitVariables
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_General_Steps/
$TestStepId ts_NAS_Delay
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_General_Steps/
$TestStepId ts_RRC_Delay
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_General_Steps/
$TestStepId ts_RRC_InitVariables
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_General_Steps/
$TestStepId ts_RRC_InitVariablesCS
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_General_Steps/
$TestStepId ts_RRC_InitVariablesPS
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_General_Steps/
$TestStepId ts_SaveCellInfo
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_General_Steps/
$TestStepId ts_SetCellCfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_General_Steps/
$TestStepId ts_SetTmpCellInfo
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$TestStepId ts_GMM_Authentication
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$TestStepId ts_GMM_AuthenticationInit
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$TestStepId ts_GMM_IdleUpdated
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$TestStepId ts_IdleUpdated
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$TestStepId ts_MM_Authentication
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$TestStepId ts_MM_AuthenticationInit
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$TestStepId ts_MM_IdleUpdated
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$TestStepId ts_MM_PwrOrUSIM_Off
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$TestStepId ts_MM_PwrOrUSIM_On
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Postambles/
$TestStepId po_ConnectionAndSS_Rel
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_RRC_Steps/RRC_RAB_Steps/
$TestStepId ts_RRC_SetUpRAB_UM_7_RLC
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_RRC_Steps/
$TestStepId ts_RRC_ConnEst
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_RRC_Steps/
$TestStepId ts_RRC_ConnEst_DCH_MT_PTMSI
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_RRC_Steps/
$TestStepId ts_RRC_ConnEst_DCH_MT_TMSI
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_RRC_Steps/
$TestStepId ts_RRC_ConnRel
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_RRC_Steps/
$TestStepId ts_RRC_PagType1_DefMAC
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_RRC_Steps/
$TestStepId ts_RRC_ReceiveConnSetupCmpl
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_RRC_Steps/
$TestStepId ts_RRC_ReceiveRB_SetupCmpl
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_CRLC_GetRLC_SeqNumSecurity
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_InitSystemSpecificCap
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_CMAC_DownloadSecurityKey
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_CMAC_DL_CipherCfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_CMAC_UL_CipherCfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_CRLC_DL_CipherCfgRB
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_CRLC_DL_CipherCfgSRB
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_CRLC_DL_Integrity
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_CRLC_UL_CipherCfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_CRLC_UL_CipherCfg_RAB
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_CRLC_UL_Integrity
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_RRC_Security
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_SS_ResetSecurityKey
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_SS_DownloadSecurityKey
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_SS_SecurityDownloadStart
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_SetDL_RRC_MessageSN
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_RB2_UL_IntegrityActivate
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_CMAC_CipherCfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_GetRRC_MessageSN
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_Security_Steps/
$TestStepId ts_CMAC_UL_DL_CipherCfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_CRLC_ReconfRLC_Size
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_CMAC_New_RNTI_Reconf
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_CMAC_Pag1_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_CMAC_Rel
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_CPHY_TrChRelDCH_NoSHO
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_CPHY_TrChRelNonDch
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_CRLC_Rel
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_CRLC_RelReconfSRB
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_CRLC_ResumeSecurity
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_CRLC_SuspendSecurity
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_ReconfigFACH_ToNoDedicated
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_1DCH_DCCH_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_2DCH_Modify
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_AddDPCH
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_BCH_SCH_CPICH_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_CellCfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_CreateCellDCH
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_CreateCellFACH
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_PCH_2FACH_CCCH_DCCH_BCCH_DTCH_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_PCH_FACH_CCCH_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_PrepareCellRRC_ConnEst
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_RACH_CCCH_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_RACH_CCCH_DCCH_DTCH_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_RB0_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_RB1_ToRB4_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_RB20_AM_PS_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_RB_BCCH_BCH_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_RB_BCCH_FACH_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_RB_PCCH_Cfg
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_RB_TM_Cfg_RLC
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_ReconfigRAB_ToSRB
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_ReconfNoDedicatedToCellFACH
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_Rel
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_RelDPCH
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$TestStepId ts_SS_StopRL
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_InitializeSIB11_SIB12
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_InitializeSIB2AndSIB18
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendDefSysInfo
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendNoSegDefSchedul
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendSB1_DefSchedul
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendSIB1
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendSIB11
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendSIB12
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendSIB18
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendSIB2
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendSIB3
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendSIB4
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendSIB5
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendSIB6
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$TestStepId ts_SendSIB7
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$TestStepId ts_CellDependentPara
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$TestStepId ts_ChangeMIB_ValueTag
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$TestStepId ts_ChangeSB1_ValueTag
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$TestStepId ts_Scheduling
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$TestStepId ts_SendMIB
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$TestStepId ts_SendSysInfoChangeInd_InFACHConfig
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$TestStepId ts_SendPage1_ModifySI
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$TestStepId ts_UTRAN_GERAN_ParaInit
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_TC_Steps/
$TestStepId ts_TC_ActivateRB_TestMode
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_TC_Steps/
$TestStepId ts_TC_CloseUE_TestLoop
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_TC_Steps/
$TestStepId ts_TC_DeactivateRB_TestMode
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_UT_Steps/
$TestStepId ts_AT_TriggerGMM_Attach
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_UT_Steps/
$TestStepId ts_MMI_UE_PwrOff
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_UT_Steps/
$TestStepId ts_MMI_UE_PwrOn
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_UT_Steps/
$TestStepId ts_MMI_UE_SwitchOff
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_UT_Steps/
$TestStepId ts_MMI_UE_SwitchOn
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_UT_Steps/
$TestStepId ts_MMI_USIM_Insert
$Description /*  */
$End_StepIndex
$StepIndex
$TestStepRef MACv520/BasicM_UT_Steps/
$TestStepId ts_MMI_USIM_Remove
$Description /*  */
$End_StepIndex
$Comment /*  */
$End_TestStepIndex
$Begin_DefaultIndex
$DefIndex
$DefaultRef MACv520/Init_Defaults/
$DefaultId InitOtherwiseFail
$Description /*  */
$End_DefIndex
$DefIndex
$DefaultRef MACv520/NAS_Defaults/
$DefaultId NAS_OtherwiseFail
$Description /*  */
$End_DefIndex
$DefIndex
$DefaultRef MACv520/NAS_Defaults/
$DefaultId NAS_OtherwiseFailActRB_TM
$Description /*  */
$End_DefIndex
$DefIndex
$DefaultRef MACv520/RRC_Defaults/
$DefaultId RRC_Def1
$Description /*  */
$End_DefIndex
$DefIndex
$DefaultRef MACv520/RRC_Defaults/
$DefaultId RRC_DefConnEst
$Description /*  */
$End_DefIndex
$DefIndex
$DefaultRef MACv520/UT_Defaults/
$DefaultId UT_OtherwiseFail
$Description /*  */
$End_DefIndex
$DefIndex
$DefaultRef MACv520/SS_Defaults/
$DefaultId SS_Def_Special
$Description /*  */
$End_DefIndex
$DefIndex
$DefaultRef MACv520/SS_Defaults/
$DefaultId SS_Def
$Description /*  */
$End_DefIndex
$DefIndex
$DefaultRef MACv520/RLC_Defaults/
$DefaultId RLC_Default
$Description /*  */
$End_DefIndex
$DefIndex
$DefaultRef MACv520/
$DefaultId MAC_Default
$Description /*  */
$End_DefIndex
$DefIndex
$DefaultRef MACv520/
$DefaultId MAC_PRACH_MeasRecDef
$Description /*  */
$End_DefIndex
$Comment /*  */
$End_DefaultIndex
$End_SuiteOverviewPart
$DeclarationsPart
$TS_TypeDefs
$Begin_SimpleTypeDefs
$SimpleTypeDef
$SimpleTypeId CT_Field
$SimpleTypeDefinition BITSTRING[ 4 ]
$Comment /* The C/T field within a MAC PDU. 

When a MAC PDU is transmitted, the TTCN constraint will determine if this field
is present. The Direct Encoding encoder shall use the number of bits provided by
the TTCN, even if the current SS logical channel to transport channel mapping
indicates that the field should not be present.

When a MAC PDU is received, the Direct Encoding decoder shall determine if the
field is present based on the current SS logical channel to transport channel
mapping, and shall always use 4 bits for this field. */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId RLC_Padding
$SimpleTypeDefinition BITSTRING [0..32768]
$Comment /* Padding for RLC UM or AM PDU. Ref 3G TS 25.322 clause 9.2.2.10
Note that this type should ideally be an OCTETSTRING[1..4096], but to accomodate the failure cases where padding need not be Octet bound. */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId TCTF
$SimpleTypeDefinition BITSTRING[ 2..8 ]
$Comment /* The TCTF field may be either 2 or 8 bits for FDD, or 3 or 5 bits for TDD. Bitstrings of length 4, 6, or 7 are invalid for this type.

When a MAC PDU is transmitted, the TTCN constraint will determine if this field
is present, and  how many bits are used. The Direct Encoding encoder shall use
the number of bits provided by the TTCN, even if the current SS logical channel
to transport channel mapping indicates that the TCTF length should be different.

For example, the constraint may specify a 2 bit TCTF value for CCCH mapped to
FACH, even though the correct value for this mapping is 8 bits. The encoder
shall use the given 2 bits for the TCTF field, followed directly by the next
field in the PDU.

When a MAC PDU is received, the Direct Encoding decoder shall determine if the
field is present, and the appropriate number of bits to use for the TCTF based
on the current SS logical channel to transport channel mapping.

For example, for a MAC PDU received on a DCCH mapped to FACH in FDD, 2 bits will
be used for the TCTF field.

Reference 3G TS 25.321 tables 9.2.1.1 to 9.2.1.5 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId UE_Id
$SimpleTypeDefinition BITSTRING[ 16..32 ]
$Comment /* The UE Id used within a MAC PDU. This field will be either 16 or 32 bits (if
present), depending on the UE Id Type field in the same MAC PDU. Bit strings of length 17 to 31 are invalid for this field.

When a MAC PDU is transmitted, the TTCN constraint will determine if this field
is present, and how many bits are used. The Direct Encoding encoder shall use
the number of bits provided by the TTCN, even if the UE Id type field and / or
current SS logical channel to transport channel mapping indicates otherwise.

When a MAC PDU is received, The Direct Encoding decoder shall determine the
number of bits to be used for the UE Id field based on the current SS logical
channel to transport channel mapping, and by inspecting the UE Id Type field
within the same MAC PDU. */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId UE_IdType
$SimpleTypeDefinition BITSTRING[ 2 ]
$Comment /* The type of UE Id used within a MAC PDU.

When a MAC PDU is transmitted, the TTCN constraint will determine if this field
is present. The Direct Encoding encoder shall use the number of bits provided by
the TTCN, even if the current SS logical channel to transport channel mapping
indicates that the field should not be present.

When a MAC PDU is received, the Direct Encoding decoder shall determine if the
field is present based on the current SS logical channel to transport channel
mapping, and shall always use 2 bits for this field.

Ref 3G TS 25.321 table 9.2.1.6 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId MAC_UM_Data
$SimpleTypeDefinition BITSTRING[0..32767]
$Comment /* Data content for a RLC UM PDU with 7 or 15 bit length indicators. Ref 3G TS 25.322 clause 9.2.2.9, Even though the UM Data will be octet bound this is definied as BitString so as to accomadate the Failure test cases, with non statndard MAC header. */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId AccessPtN
$SimpleTypeDefinition OCTETSTRING[1..100]
$Comment /* This is the DNS name. This can take values as per 24.008, 10.5.6.1 
 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId AddressInfo
$SimpleTypeDefinition OCTETSTRING[0..16]
$Comment /* Address information, this is the DNS server name. 
this will be converted into
 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId AM_Data
$SimpleTypeDefinition OCTETSTRING[0..4095]
$Comment /* Data content for a RLC AM PDU with 7 or 15 bit length indicators. Ref 3G TS 25.322 clause 9.2.2.9 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId AM_SeqNum
$SimpleTypeDefinition BITSTRING[12]
$Comment /* Sequence number for an AM RLC PDU. Ref 3G TS 25.322 clause 9.2.2.3 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId AuthRsp
$SimpleTypeDefinition BITSTRING [32]
$Comment /* Authentication Response Prarameter 
3G TS 24.008 cl. 10.5.3.2 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B1
$SimpleTypeDefinition BITSTRING [1]
$Comment /* Generic type for 1 bit value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B128
$SimpleTypeDefinition BITSTRING [128]
$Comment /* Generic type for 128 bit value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B16
$SimpleTypeDefinition BITSTRING [16]
$Comment /* Generic type for 16 bits value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B18
$SimpleTypeDefinition BITSTRING [18]
$Comment /* Generic type for 18 bits value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B2
$SimpleTypeDefinition BITSTRING [2]
$Comment /* Generic type for 2 bits value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B20
$SimpleTypeDefinition BITSTRING [20]
$Comment /* Generic type for 20 bits value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B3
$SimpleTypeDefinition BITSTRING [3]
$Comment /* Generic type for 3 bits value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B4
$SimpleTypeDefinition BITSTRING [4]
$Comment /* Generic type for 4 bits value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B48
$SimpleTypeDefinition BITSTRING [48]
$Comment /* Generic type for 48 bit value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B5
$SimpleTypeDefinition BITSTRING [5]
$Comment /* Generic type for 5 bits value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B6
$SimpleTypeDefinition BITSTRING [6]
$Comment /* Generic type for 6 bits value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B7
$SimpleTypeDefinition BITSTRING [7]
$Comment /* Generic type for 7 bits value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B8
$SimpleTypeDefinition BITSTRING [8]
$Comment /* Generic type for 8 bits value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId B80
$SimpleTypeDefinition BITSTRING [80]
$Comment /* Generic type for 80 bit value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId Bitmap
$SimpleTypeDefinition OCTETSTRING[1..16]
$Comment /* The bitmap within a Bitmap super-field. Ref 3G TS 25.322 clause 9.2.2.11.5 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId BitmapLen
$SimpleTypeDefinition BITSTRING[ 4 ]
$Comment /* The length of a bitmap super field within a STATUS PDU. Ref 3G TS 25.322 clause 9.2.2.11.5 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId BitRate
$SimpleTypeDefinition OCTETSTRING[1]
$Comment /* Maximum bit rates supported */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId CauseValue
$SimpleTypeDefinition OCTETSTRING[1]
$Comment /* SM Cause Value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId CLIR_Invocation
$SimpleTypeDefinition BITSTRING('10100010'B)
$Comment /* CLIR invocation 
3G TS 24.008 cl. 10.5.4.11b */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId CLIR_Suppression
$SimpleTypeDefinition BITSTRING('10100001'B)
$Comment /* CLIR suppression 
3G TS 24.008 cl. 10.5.4.11a */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId CtrlPDU_Type
$SimpleTypeDefinition BITSTRING[3]
$Comment /* PDU type for AM STATUS PDUs. Ref 3G TS 25.322 clause 9.2.2.2 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId CTSPerm
$SimpleTypeDefinition IEI8
$Comment /* CTSPerm 
3G TS 24.008 cl. 10.5.3.10 
value "10100010"B */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId CW_NumberPart
$SimpleTypeDefinition BITSTRING[ 3 ]
$Comment /* The number part (X1X2X3) of a codeword in an RLIST SUFI. Ref 3G TS 25.322 clause 9.2.2.11.6 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId DC_Field
$SimpleTypeDefinition BITSTRING[1]
$Comment /* Control / Data type indicator for AM RLC PDU. Ref 3G TS 25.322 clause 9.2.2.1 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId ExtBit
$SimpleTypeDefinition BITSTRING[1]
$Comment /* Used to indicate if the next octet will be data, or a length indicator and E bit. Ref 3G TS 25.322 clause 9.2.2.5 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId FollowOnProceed
$SimpleTypeDefinition IEI8
$Comment /* Follow On Proceed 
3G TS 24.008 cl. 10.5.3.7 
value "10100001"B */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId Fresh
$SimpleTypeDefinition BITSTRING[32]
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId GSM_CipheringKey
$SimpleTypeDefinition BITSTRING [64]
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId HeaderExt
$SimpleTypeDefinition BITSTRING[2]
$Comment /* Used to indicate if the next octet will be data, or a length indicator and E bit. Ref 3G TS 25.322 clause 9.2.2.7 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId IEI4
$SimpleTypeDefinition B4
$Comment /* information element identifier, type 1 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId IEI8
$SimpleTypeDefinition B8
$Comment /* information element identifier,type 2-4 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId IntegrityKey
$SimpleTypeDefinition BITSTRING[128]
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId KeySeq
$SimpleTypeDefinition B3
$Comment /* ciphering key sequence 
3G TS 24008 cl. 10.5.1.2 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId Length
$SimpleTypeDefinition OCTETSTRING [1]
$Comment /* IE length */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId LenInd15
$SimpleTypeDefinition BITSTRING[15]
$Comment /* 15 bit length indicator for AM or UM RLC PDU. Ref 3G TS 25.322 9.2.2.8 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId LenInd7
$SimpleTypeDefinition BITSTRING[7]
$Comment /* 7 bit length indicator for AM or UM RLC PDU. Ref 3G TS 25.322 9.2.2.8 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId LIST_Len
$SimpleTypeDefinition BITSTRING[ 4 ]
$Comment /* The length of a LIST super field within a STATUS PDU. Ref 3G TS 25.322 clause 9.2.2.11.4 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId LogicChGERAN
$SimpleTypeDefinition IA5String
$Comment /* Logical channel (used for Interworking with GERAN) */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId MaxBitRate
$SimpleTypeDefinition OCTETSTRING[1]
$Comment /* Gaurented Bit rate */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId MaxSDU_Size
$SimpleTypeDefinition OCTETSTRING[1]
$Comment /* Maximum SDU size */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId MM_RAND
$SimpleTypeDefinition BITSTRING [128]
$Comment /* Authentication parameter RAND 
3G TS 24.008 cl. 10.5.3.1 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId MRW_Len
$SimpleTypeDefinition BITSTRING[ 4 ]
$Comment /* The length of a MRW super field within a STATUS PDU. Ref 3G TS 25.322 clause 9.2.2.11.8 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId MsgType
$SimpleTypeDefinition B8
$Comment /* Message Type 
3G TS 24.008 cl. 10.4. This type is also used by the BMC  protocol. */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId N_Length
$SimpleTypeDefinition BITSTRING[ 4 ]
$Comment /* The N_Length field within an MRW superfield. Ref 3G TS 25.322 clause 9.2.2.11.8 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId O0_8
$SimpleTypeDefinition OCTETSTRING[0..8]
$Comment /* Generic type for 0 to 8 byte value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId O3
$SimpleTypeDefinition OCTETSTRING [3]
$Comment /* Generic type for 3 byte value */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId Padding
$SimpleTypeDefinition HEXSTRING[2..8192]
$Comment /* Padding for RLC UM or AM PDU. Ref 3G TS 25.322 clause 9.2.2.10 
Note that this type should ideally be an OCTETSTRING[1..4096], but since TTCN does not have a predefined operator for INT_TO_OCT, a HEXSTRING is used instead. */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId PDP_TypeNo
$SimpleTypeDefinition OCTETSTRING[1]
$Comment /* PDP Type number, this will take values  
00000001: PDP Type PPP 
00000010: PDP Type IHOSS 
01000001: IPv5 
01010111: IPv6 
 
This can take values as per 24.008, clause 10.5.6.4 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId PollingBit
$SimpleTypeDefinition BITSTRING[1]
$Comment /* Polling bit used to request a status report from the receiveing RLC AM entitiy. Ref 3G TS 25.322 clause 9.2.2.4 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId ProtocolDiscriminator
$SimpleTypeDefinition B4
$Comment /* Protocol Discriminator 
3G TS 24.008 cl. 10.2 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId ProtoIdContents
$SimpleTypeDefinition OCTETSTRING[1..251]
$Comment /* 3G TS 24.008 cl. 10.5.6.3
 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId RejCau
$SimpleTypeDefinition OCTETSTRING[1]
$Comment /* Reject Cause 
3G TS 24.008 cl. 10.5.3.6 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId RLIST_Len
$SimpleTypeDefinition BITSTRING[ 4 ]
$Comment /* The length of a RLIST super field within a STATUS PDU. Ref 3G TS 25.322 clause 9.2.2.11.6 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId SapId
$SimpleTypeDefinition OCTETSTRING [1]
$Comment /* SAP Identifier   
??? defined in several places 
GERAN 04.06 and 3G TS 24.008 as bitstring[2] ? */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId SkipIndicator
$SimpleTypeDefinition B4
$Comment /* Skip Indicator 
3G TS 24.008 cl. 10.3.1 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId SS_CN_DomainIdentity
$SimpleTypeDefinition INTEGER (0..1)
$Comment /* CN domain identity type in TTCN tabular format */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId SS_RB_Identity
$SimpleTypeDefinition INTEGER (-31..32)
$Comment /* RB identity type in TTCN tabular format */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId SUFI_ListLi
$SimpleTypeDefinition BITSTRING[4]
$Comment /* Number of consecutive PDUs  not correctly received following PDU with sequence number SNi. Used in List super field. Ref 3G TS 25.322 clause 9.2.2.11.4 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId SUFI_SN_MRWi
$SimpleTypeDefinition BITSTRING[12]
$Comment /* SN_MRWi field to be used within move receiving window super fields. Ref 3G TS 25.322 clause 9.2.2.11.7 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId SUFI_Type
$SimpleTypeDefinition BITSTRING[4]
$Comment /* The type of a super field within a STATUS PDU. Ref 3G TS 25.322 clause 9.2.2.11 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId UE_TestLoopMode
$SimpleTypeDefinition OCTETSTRING[1]
$Comment /* UETestLoopMode 
3G TS 34.109 cl. 6.2 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId UM_SeqNum
$SimpleTypeDefinition BITSTRING[7]
$Comment /* Sequence number for an UM RLC PDU. Ref 3G TS 25.322 clause 9.2.2.3 */
$End_SimpleTypeDef
$SimpleTypeDef
$SimpleTypeId UTRAN_GERAN
$SimpleTypeDefinition IA5String ("UTRAN and GERAN", 
"UTRAN only")
$End_SimpleTypeDef
$Comment /*  */
$End_SimpleTypeDefs
$StructTypeDefs
$Begin_StructTypeDef
$StructId CellInfoCfg
$Comment /* This structure contains relevant information describing a cell configuration as needed for basic test Steps like ts_CreateCell and ts_IdleUpdated. 
NOTE: this information is not related to any PDUs, IEs or ASPs */
$ElemDcls
$ElemDcl
$ElemId cellId
$ElemType INTEGER
$Comment /* Cell Id */
$End_ElemDcl
$ElemDcl
$ElemId frequencyInfo
$ElemType FrequencyInfo
$Comment /* Frequency information for current cell */
$End_ElemDcl
$ElemDcl
$ElemId attenuationLevel
$ElemType INTEGER
$Comment /* Value of RF attenuator */
$End_ElemDcl
$ElemDcl
$ElemId priScrmCode
$ElemType PrimaryScramblingCode
$Comment /* Primary Scrambling Code */
$End_ElemDcl
$ElemDcl
$ElemId powerpCPICH
$ElemType DL_TxPower_PCPICH
$Comment /* Absolute Tx Power of (primary) CPICH */
$End_ElemDcl
$ElemDcl
$ElemId powerpSCH
$ElemType DL_TxPower
$Comment /* Tx power level of primary SCH relative to CPICH */
$End_ElemDcl
$ElemDcl
$ElemId powersSCH
$ElemType DL_TxPower
$Comment /* Tx power level of secondary SCH relative to CPICH */
$End_ElemDcl
$ElemDcl
$ElemId powerpCCPCH
$ElemType DL_TxPower
$Comment /* Tx power level of primary CCPCH relative to CPICH */
$End_ElemDcl
$ElemDcl
$ElemId powersCCPCH
$ElemType DL_TxPower
$Comment /* Tx power level of secondary CCPCH relative to CPICH */
$End_ElemDcl
$ElemDcl
$ElemId powersCCPCH1
$ElemType DL_TxPower
$Comment /* Tx power level of secondary CCPCH1 relative to CPICH */
$End_ElemDcl
$ElemDcl
$ElemId timingsCCPCH1
$ElemType INTEGER
$Comment /* Timing offset for secondary CCPCH1 */
$End_ElemDcl
$ElemDcl
$ElemId powerAICH
$ElemType AICH_PowerOffset
$Comment /* Tx power level of AICH relative to CPICH */
$End_ElemDcl
$ElemDcl
$ElemId powerPICH
$ElemType PICH_PowerOffset
$Comment /* Tx power level of PICH relative to CPICH */
$End_ElemDcl
$ElemDcl
$ElemId cellTxPowerLevel
$ElemType CellTxPowerLevel
$Comment /* Total cell power level (>= sum of all configured physical channels) */
$End_ElemDcl
$ElemDcl
$ElemId tCell
$ElemType Tcell
$Comment /* Cell timing offset (in chips) */
$End_ElemDcl
$ElemDcl
$ElemId sfnOffset
$ElemType INTEGER
$Comment /* SFN offset (in frames) */
$End_ElemDcl
$ElemDcl
$ElemId puncLimit
$ElemType PuncturingLimit
$Comment /* Puncturing limit for PRACH */
$End_ElemDcl
$ElemDcl
$ElemId sf_PRACH
$ElemType SF_PRACH
$Comment /* Spreading factor for PRACH */
$End_ElemDcl
$ElemDcl
$ElemId slotFormatsCCPCH1
$ElemType SCCPCHSlotFormat
$Comment /* Slot format for secondary CCPCH1 */
$End_ElemDcl
$ElemDcl
$ElemId mcc
$ElemType HEXSTRING
$Comment /* MCC */
$End_ElemDcl
$ElemDcl
$ElemId mnc
$ElemType HEXSTRING
$Comment /* MNC */
$End_ElemDcl
$ElemDcl
$ElemId lac
$ElemType OCTETSTRING
$Comment /* LAC */
$End_ElemDcl
$ElemDcl
$ElemId rac
$ElemType OCTETSTRING
$Comment /* RAC */
$End_ElemDcl
$ElemDcl
$ElemId attFlag
$ElemType INTEGER
$Comment /* Attach flag (as  broadcasted in BCCH) */
$End_ElemDcl
$ElemDcl
$ElemId nmo
$ElemType OCTETSTRING
$Comment /* Network mode of operation */
$End_ElemDcl
$ElemDcl
$ElemId ura_Identity
$ElemType BITSTRING
$Comment /* URA Identity (3GPP 25.331 clause 10.3.2.6) */
$End_ElemDcl
$ElemDcl
$ElemId t3212
$ElemType OCTETSTRING
$Comment /* T3212 value */
$End_ElemDcl
$ElemDcl
$ElemId cRNTI
$ElemType C_RNTI
$Comment /* cell radio network temporary identity assigned to the UE under test,   this initial value is for ts_SS_CreateCellFACH. ( from 34.123-1) */
$End_ElemDcl
$ElemDcl
$ElemId uRNTI
$ElemType U_RNTI
$Comment /* srnc_Identity and   s_RNTI */
$End_ElemDcl
$ElemDcl
$ElemId cellConfig
$ElemType RB_ConfigType
$Comment /* Current configuration of the cell */
$End_ElemDcl
$ElemDcl
$ElemId dRX_CycleLength
$ElemType DRX_CycleLengthStructure
$Comment /* To hold the 3 dRX_CycleLength */
$End_ElemDcl
$ElemDcl
$ElemId uL_ScramblingCode
$ElemType UL_ScramblingCode
$Comment /* To hold the UL scrambling to be used in the cell */
$End_ElemDcl
$ElemDcl
$ElemId DL_DPCH_SHO
$ElemType BOOLEAN
$Comment /* To be used in SHO (Active set update) test cases to indicate whether a DL DPCH is configured */
$End_ElemDcl
$ElemDcl
$ElemId UL_DPCH_SHO
$ElemType BOOLEAN
$Comment /* To be used in SHO (Active set update) test cases to indicate whether a DL DPCH is configured */
$End_ElemDcl
$ElemDcl
$ElemId dl_DPCH_2ndScrCode
$ElemType SecondaryScramblingCode
$Comment /* Secondary scrambling code for the DL DPCH */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId DRX_CycleLengthStructure
$Comment /* Structure taht contains CN DRX cycle length (CS and PS) and the UTRAN DRX Cycle length. This type is to be used in the CellInfoCfg in order to keep all DRX values. */
$ElemDcls
$ElemDcl
$ElemId cN_CS_DRX_CycleLength
$ElemType CN_DRX_CycleLengthCoefficient
$End_ElemDcl
$ElemDcl
$ElemId cN_PS_DRX_CycleLength
$ElemType CN_DRX_CycleLengthCoefficient
$End_ElemDcl
$ElemDcl
$ElemId uTRAN_DRX_CycleLength
$ElemType UTRAN_DRX_CycleLengthCoefficient
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId AuthenticationFailureParameter
$Comment /* Authentication Failure Parameter  (TLV) 
3G TS 24.008 cl. 10.5.3.2.2
 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00100010'B for MM (22 hex)
'00110000'B for GMM (30 hex) */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* M 
1 octet */
$End_ElemDcl
$ElemDcl
$ElemId auts
$ElemType BITSTRING[112]
$Comment /* AUTS, 14 octets */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId AC_ReferenceNumber
$Comment /* Cipher Algorithm 
3GPP 24.008 /  10.5.5.19 */
$ElemDcls
$ElemDcl
$ElemId value
$ElemType B4
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId AUTN
$Comment /* Authentication Parameter  AUTN 
3G TS 24.008 cl. 10.5.3.1.1 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00100000'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* '10'O */
$End_ElemDcl
$ElemDcl
$ElemId aUTN
$ElemType BITSTRING[128]
$Comment /* Authentication Parameter AUTN */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId AccessPtName
$Comment /* 24.007, section 10.5.6.1
 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00101000'B (28hex) */
$End_ElemDcl
$ElemDcl
$ElemId length
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId accessPtName
$ElemType AccessPtN
$Comment /* Access point name value
3-102 octets */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId AttachResult
$Comment /* Attach result 
3GPP 24.008 / 10.5.5.1 */
$ElemDcls
$ElemDcl
$ElemId spare
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId result
$ElemType B3
$Comment /* Attach result */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId AttachType
$Comment /* Attach type 
3GPP 24.008 / 10.5.5.2 */
$ElemDcls
$ElemDcl
$ElemId for
$ElemType B1
$Comment /* Follow-on request */
$End_ElemDcl
$ElemDcl
$ElemId type
$ElemType B3
$Comment /* Type of attach */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId AuthRspExt
$Comment /* Authentication Response parameter  (extension) 
3G TS 24.008 cl. 10.5.3.2.1
 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00100001'B for MM (21 hex)
'00101001'B for GMM (29 hex) */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId rES
$ElemType BITSTRING[1..96]
$Comment /* Authentication Parameter RES */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId AuthRsp_tv
$Comment /* Authentication Response parameter (TV, 5 octets) 
3G TS 24.008 cl. 10.5.3.2 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00100010'B (22 hex) */
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType BITSTRING[32]
$Comment /* Authentication Parameter RES */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId AuthenticationParamterRAND
$Comment /* Authentication Parameter  RAND (TV, 17 octets) 
3G TS 24.008 cl. 10.5.3.1 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00100001'B (21 hex) */
$End_ElemDcl
$ElemDcl
$ElemId randValue
$ElemType BITSTRING[128]
$Comment /* Authentication Parameter RAND value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId Bcap
$Comment /* Bearer capability (CC information element) 
3G TS 24.008 cl. 10.5.4.5 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* information element identifier 
'00000100'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId extBit3
$ElemType B1
$Comment /* extension bit */
$End_ElemDcl
$ElemDcl
$ElemId radioChRequi
$ElemType B2
$Comment /* radio channel requirements  ue->n, GSM, 
octet 3 */
$End_ElemDcl
$ElemDcl
$ElemId codingStd
$ElemType B1
$Comment /* coding standard, '0'B,  octet 3 */
$End_ElemDcl
$ElemDcl
$ElemId transferMode
$ElemType B1
$Comment /* transfer mode octet 3 */
$End_ElemDcl
$ElemDcl
$ElemId itc
$ElemType B3
$Comment /* information transfer capability,  octet 3 */
$End_ElemDcl
$ElemDcl
$ElemId bcap3aEtc1
$ElemType Bcap3aEtc
$Comment /* octet 3a etc no.1 */
$End_ElemDcl
$ElemDcl
$ElemId bcap3aEtc2
$ElemType Bcap3aEtc
$Comment /* octet 3a etc no.2 */
$End_ElemDcl
$ElemDcl
$ElemId bcap3aEtc3
$ElemType Bcap3aEtc
$Comment /* octet 3a etc no.3 */
$End_ElemDcl
$ElemDcl
$ElemId bcap3aEtc4
$ElemType Bcap3aEtc
$Comment /* octet 3a etc no.4 */
$End_ElemDcl
$ElemDcl
$ElemId bcap3aEtc5
$ElemType Bcap3aEtc
$Comment /* octet 3a etc no.5 */
$End_ElemDcl
$ElemDcl
$ElemId bcap3aEtc6
$ElemType Bcap3aEtc
$Comment /* octet 3a etc no.6 */
$End_ElemDcl
$ElemDcl
$ElemId extBit4
$ElemType B1
$Comment /* extension bit, octet 4 */
$End_ElemDcl
$ElemDcl
$ElemId compress
$ElemType B1
$Comment /* compression, ue->network,  octet 4 */
$End_ElemDcl
$ElemDcl
$ElemId structure
$ElemType B2
$Comment /* structure, '0, 3',  octet 4 */
$End_ElemDcl
$ElemDcl
$ElemId duplexMode
$ElemType B1
$Comment /* duplex mode,  '1'B, octet 4 */
$End_ElemDcl
$ElemDcl
$ElemId cfg
$ElemType B1
$Comment /* configuration, '0'B,  octet 4 */
$End_ElemDcl
$ElemDcl
$ElemId nirr
$ElemType B1
$Comment /* negotiation of intermediate rate requested,  GSM, octet 4 */
$End_ElemDcl
$ElemDcl
$ElemId establish
$ElemType B1
$Comment /* establishment, '0'B,  octet 4 */
$End_ElemDcl
$ElemDcl
$ElemId extBit5
$ElemType B1
$Comment /* extension bit, octet 5 */
$End_ElemDcl
$ElemDcl
$ElemId accessId
$ElemType B2
$Comment /* access identify, '00'B,  octet 5 */
$End_ElemDcl
$ElemDcl
$ElemId rateAdapt
$ElemType B2
$Comment /* rate adaption,  octet 5 */
$End_ElemDcl
$ElemDcl
$ElemId sacp
$ElemType B3
$Comment /* signalling access protocol, '1 - 6',  octet 5 */
$End_ElemDcl
$ElemDcl
$ElemId extBit5a
$ElemType B1
$Comment /* extension bit, octet 5a */
$End_ElemDcl
$ElemDcl
$ElemId OherItc
$ElemType B2
$Comment /* Other ITC , octet 5a */
$End_ElemDcl
$ElemDcl
$ElemId OtherRateAdapt
$ElemType B2
$Comment /* Other Rate adaptation, octet5a */
$End_ElemDcl
$ElemDcl
$ElemId spare3
$ElemType B3
$Comment /* spare bits - 3 bits */
$End_ElemDcl
$ElemDcl
$ElemId extBit5b
$ElemType B1
$Comment /* extension bit, '1'B,  octet 5b */
$End_ElemDcl
$ElemDcl
$ElemId rateAdaptHeader
$ElemType B1
$Comment /* rate adaptation header,  octet 5b */
$End_ElemDcl
$ElemDcl
$ElemId multiFrame
$ElemType B1
$Comment /* Multi frame,  octet 5b */
$End_ElemDcl
$ElemDcl
$ElemId mode
$ElemType B1
$Comment /* Mode of operation, octet 5b */
$End_ElemDcl
$ElemDcl
$ElemId logLinkId
$ElemType B1
$Comment /* logical link identifier negotiation, octet 5b */
$End_ElemDcl
$ElemDcl
$ElemId assignorAssignee
$ElemType B1
$Comment /* assignor/assignee, octet 5b */
$End_ElemDcl
$ElemDcl
$ElemId inBandOutBand
$ElemType B1
$Comment /* in band/out band negotiation, octet 5b */
$End_ElemDcl
$ElemDcl
$ElemId spare1
$ElemType B1
$Comment /* sapre bit - 1 bit */
$End_ElemDcl
$ElemDcl
$ElemId extBit6
$ElemType B1
$Comment /* extension bit,  octet 6 */
$End_ElemDcl
$ElemDcl
$ElemId layer1Id
$ElemType B2
$Comment /* Layter 1 identity, '01'B,  octet 6 */
$End_ElemDcl
$ElemDcl
$ElemId userInfoLayer1
$ElemType B4
$Comment /* user information Layer 1 protocol, '0000'B, octet 6 */
$End_ElemDcl
$ElemDcl
$ElemId syncAsync
$ElemType B1
$Comment /* synchronous bit,  octet 6 */
$End_ElemDcl
$ElemDcl
$ElemId extBit6a
$ElemType B1
$Comment /* extension bit, octet 6a */
$End_ElemDcl
$ElemDcl
$ElemId numStopBits
$ElemType B1
$Comment /* number of stop bits,  octet 6a */
$End_ElemDcl
$ElemDcl
$ElemId nego
$ElemType B1
$Comment /* negotiation bit,  '0'B, octet 6a */
$End_ElemDcl
$ElemDcl
$ElemId numDataBits
$ElemType B1
$Comment /* number of data bits,  octet 6a */
$End_ElemDcl
$ElemDcl
$ElemId userRate
$ElemType B4
$Comment /* user rate, GSM, octet 6a */
$End_ElemDcl
$ElemDcl
$ElemId extBit6b
$ElemType B1
$Comment /* extension bit,  octet 6b */
$End_ElemDcl
$ElemDcl
$ElemId intermRate
$ElemType B2
$Comment /* intermediate rate,  octet 6b */
$End_ElemDcl
$ElemDcl
$ElemId nicTx
$ElemType B1
$Comment /* network independent clock on transmission,  GSM, octet 6b */
$End_ElemDcl
$ElemDcl
$ElemId nicRx
$ElemType B1
$Comment /* network independent clock on reception,  GSM, octet 6b */
$End_ElemDcl
$ElemDcl
$ElemId parity
$ElemType B3
$Comment /* parity information,   octet 6b */
$End_ElemDcl
$ElemDcl
$ElemId extBit6c
$ElemType B1
$Comment /* extension bit,  octet 6c */
$End_ElemDcl
$ElemDcl
$ElemId connectElem
$ElemType B2
$Comment /* connection element,  octet 6c */
$End_ElemDcl
$ElemDcl
$ElemId modemType
$ElemType B5
$Comment /* modem type, octet 6c */
$End_ElemDcl
$ElemDcl
$ElemId extBit6d
$ElemType B1
$Comment /* extension bit,  octet 6d */
$End_ElemDcl
$ElemDcl
$ElemId OtherModemType
$ElemType B2
$Comment /* Other Modem type, octet 6d */
$End_ElemDcl
$ElemDcl
$ElemId FixedNtwUserRate
$ElemType B5
$Comment /* Fixed Network user rate, octet 6d */
$End_ElemDcl
$ElemDcl
$ElemId extBit6e
$ElemType B1
$Comment /* extension bit,  octet 6e */
$End_ElemDcl
$ElemDcl
$ElemId acceptChCoding
$ElemType B4
$Comment /* acceptable channel coding, octet 6e */
$End_ElemDcl
$ElemDcl
$ElemId maxNumTrafficCh
$ElemType B3
$Comment /* maximum number of traffic channel, octet 6e */
$End_ElemDcl
$ElemDcl
$ElemId extBit6f
$ElemType B1
$Comment /* extension bit,  octet 6f */
$End_ElemDcl
$ElemDcl
$ElemId uIMI
$ElemType B3
$Comment /* User initiated modification indication, octet 6f */
$End_ElemDcl
$ElemDcl
$ElemId wAIUR
$ElemType B4
$Comment /* wanted air interface user rate, octet 6f */
$End_ElemDcl
$ElemDcl
$ElemId extBit6g
$ElemType B1
$Comment /* extension bit,  octet 6g */
$End_ElemDcl
$ElemDcl
$ElemId acceptChCodingExt
$ElemType B3
$Comment /* acceptable channel coding extended, octet 6g */
$End_ElemDcl
$ElemDcl
$ElemId asymInd
$ElemType B2
$Comment /* asymmetry indication, octet 6g */
$End_ElemDcl
$ElemDcl
$ElemId spare2
$ElemType B2
$Comment /* spare 2 bits , octet 6g */
$End_ElemDcl
$ElemDcl
$ElemId extBit7
$ElemType B1
$Comment /* extension bit,  octet 7 */
$End_ElemDcl
$ElemDcl
$ElemId layer2id
$ElemType B2
$Comment /* L2 identity, octet 7 */
$End_ElemDcl
$ElemDcl
$ElemId userInfoLayer2
$ElemType B5
$Comment /* user information L2 protocol, octet 7 */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId Bcap3aEtc
$Comment /* Speech Versions preferences as supported by the EFR mobile - see 3G TS 24.008 cl. 10.5.4.5/octet 3a etc/"speech version indication" */
$ElemDcls
$ElemDcl
$ElemId extBit
$ElemType B1
$Comment /* extension bit ('0'B) */
$End_ElemDcl
$ElemDcl
$ElemId coding
$ElemType B1
$Comment /* Octet a1, Coding ('0'B) */
$End_ElemDcl
$ElemDcl
$ElemId spare2
$ElemType B2
$Comment /* Octet a1, Spare bits ('00'B) */
$End_ElemDcl
$ElemDcl
$ElemId speechVersion
$ElemType B4
$Comment /* Octet a1, Speech version indication */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId CC_Capabilities
$Comment /* Call Control Capabilities 
3G TS 24.008 cl. 10.5.4.5a */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* information element identifier 
'00010101'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId maxNumBearer
$ElemType B4
$Comment /* maximum number o fudpported bearer */
$End_ElemDcl
$ElemDcl
$ElemId spare2
$ElemType B2
$Comment /* spare bits */
$End_ElemDcl
$ElemDcl
$ElemId pcp
$ElemType B1
$Comment /* PCP */
$End_ElemDcl
$ElemDcl
$ElemId dtmf
$ElemType B1
$Comment /* indication of supporting DTMF */
$End_ElemDcl
$ElemDcl
$ElemId spare4
$ElemType B4
$Comment /* spare bits */
$End_ElemDcl
$ElemDcl
$ElemId maxNumSpeechBearer
$ElemType B4
$Comment /* maximum number of speech bearers */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId CDPN
$Comment /* Called party BCD number (CC information element) 
3G TS 24.008 cl. 10.5.4.7 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* information element identifier 
'01011110'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId typeOfNumPlan
$ElemType TypeOfNumPlan
$Comment /* type of number and numbering plan identification */
$End_ElemDcl
$ElemDcl
$ElemId digits
$ElemType OCTETSTRING[0..40]
$Comment /* BCD numbers */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId CDPS
$Comment /* Called party subaddress (CC information element) 
3G TS cl. 10.5.4.8 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* information element identifier 
'01101101'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId subadrs
$ElemType Subadrs
$Comment /* Subaddress */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId CGPS
$Comment /* Calling party subaddress (CC information element) 
3G TS 24.008 cl. 10.5.4.10 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* information element identifier 
'01011101'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId subadrs
$ElemType Subadrs
$Comment /* Subaddress */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId CellIndependantInfo
$Comment /* This structure contains relevant information independant from the cell */
$ElemDcls
$ElemDcl
$ElemId cs_cipheringStarted
$ElemType BOOLEAN
$Comment /* Set to TRUE when ciphering is started, to be initiated in Security Steps and used in RAB establishment Steps */
$End_ElemDcl
$ElemDcl
$ElemId ps_cipheringStarted
$ElemType BOOLEAN
$Comment /* Set to TRUE when ciphering is started, to be initiated in Security Steps and used in RAB establishment Steps */
$End_ElemDcl
$ElemDcl
$ElemId recentSecureDomain
$ElemType CN_DomainIdentity
$Comment /* the domain on which security was recently started, and hence the SRB are ciphered and Integrit protected with this domain. */
$End_ElemDcl
$ElemDcl
$ElemId dL_CipherMode
$ElemType CipheringModeCommand
$Comment /* To hold the DL cipher mode to be used in RAB Steps. */
$End_ElemDcl
$ElemDcl
$ElemId uL_CipherMode
$ElemType RB_ActivationTimeInfoList
$Comment /* To hold the UL cipher mode to be used in RAB Steps. */
$End_ElemDcl
$ElemDcl
$ElemId cipheringAlgorithmCapability
$ElemType BITSTRING
$Comment /* BITSTRING thats hold the ciphering algorithm capability supported by UE */
$End_ElemDcl
$ElemDcl
$ElemId integrityStarted
$ElemType BOOLEAN
$Comment /* Set to TRUE when integrity is started */
$End_ElemDcl
$ElemDcl
$ElemId dL_Integrity
$ElemType IntegrityProtectionModeInfo
$Comment /* To hold the DL integrity protection active during a test case */
$End_ElemDcl
$ElemDcl
$ElemId uL_Integrity
$ElemType IntegrityProtActivationInfo
$Comment /* To hold the UL integrity protection active during a test case */
$End_ElemDcl
$ElemDcl
$ElemId dl_IntegrityCheckInfo
$ElemType IntegrityCheckInfo
$Comment /* To hold the integrity information to be sent */
$End_ElemDcl
$ElemDcl
$ElemId start_CS
$ElemType START_Value
$Comment /* To hold the START value for CS Domain */
$End_ElemDcl
$ElemDcl
$ElemId start_PS
$ElemType START_Value
$Comment /* To hold the START value for PS Domain */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId CellNotification
$Comment /* Cell notification 
3GPP 24.008 / 10.5.5.21
 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '10001100'B (8C hex) */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId CiphAlgorithm
$Comment /* Cipher Algorithm 
3GPP 24.008 /  10.5.5.3 */
$ElemDcls
$ElemDcl
$ElemId spare1
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId algorithm
$ElemType B3
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId CiphKeySeqNum
$Comment /* Ciphering Key Sequence Number 
3G TS 24.008 cl. 10.5.1.2 */
$ElemDcls
$ElemDcl
$ElemId spare1
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId keySeq
$ElemType KeySeq
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId CiphKeySeqNum_tv
$Comment /* Ciphering Key Sequence Number 
3G TS 24.008 cl. 10.5.1.2 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI4
$Comment /* '1000'B */
$End_ElemDcl
$ElemDcl
$ElemId spare1
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId keySeq
$ElemType KeySeq
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId Codec
$Comment /* Codec
3G TS 24.008 cl. 10.5.4.32
 */
$ElemDcls
$ElemDcl
$ElemId sysId
$ElemType OCTETSTRING[1]
$Comment /* system identifcation */
$End_ElemDcl
$ElemDcl
$ElemId len
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId bitMap1to8
$ElemType BITSTRING[8]
$Comment /* codec bitmap bits 1-8 */
$End_ElemDcl
$ElemDcl
$ElemId bitMap9to16
$ElemType BITSTRING[8]
$Comment /* codec bitmap bits 9-16 */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId CodecList
$Comment /* Supported Codec List 
3G TS 24.008 cl. 10.5.3.32
 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '01000000'B (40 hex) */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId codec1
$ElemType Codec
$Comment /* Codec */
$End_ElemDcl
$ElemDcl
$ElemId codec2
$ElemType Codec
$Comment /* Codec */
$End_ElemDcl
$ElemDcl
$ElemId codec3
$ElemType Codec
$Comment /* Codec */
$End_ElemDcl
$ElemDcl
$ElemId codec4
$ElemType Codec
$Comment /* Codec */
$End_ElemDcl
$ElemDcl
$ElemId codec5
$ElemType Codec
$Comment /* Codec */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId CodeWord
$Comment /* Code word within an RList super field. Ref 3G TS 25.322 clause 9.2.2.11.6 */
$ElemDcls
$ElemDcl
$ElemId numberPart
$ElemType CW_NumberPart
$End_ElemDcl
$ElemDcl
$ElemId statusInd
$ElemType BITSTRING[ 1 ]
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId DRXparamter
$Comment /* DRX paramter 
3GPP 24.008 / 10.5.5.6 */
$ElemDcls
$ElemDcl
$ElemId splitPGcycleCode
$ElemType B8
$Comment /* Split PG cycle code */
$End_ElemDcl
$ElemDcl
$ElemId cnDRXcoef
$ElemType B4
$Comment /* CN specific DRX cycle length coefficient */
$End_ElemDcl
$ElemDcl
$ElemId splitOnCCCH
$ElemType B1
$Comment /* Split on CCCCH */
$End_ElemDcl
$ElemDcl
$ElemId nonDRXtimer
$ElemType B3
$Comment /* non-DRX timer */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId DRXparamter_tv
$Comment /* DRX paramter 
3GPP 24.008 / 10.5.5.6 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00100111'B (hex 27) */
$End_ElemDcl
$ElemDcl
$ElemId splitPGcycleCode
$ElemType B8
$Comment /* Split PG cycle code */
$End_ElemDcl
$ElemDcl
$ElemId cnDRXcoef
$ElemType B4
$Comment /* CN specific DRX cycle length coefficient */
$End_ElemDcl
$ElemDcl
$ElemId splitOnCCCH
$ElemType B1
$Comment /* Split on CCCCH */
$End_ElemDcl
$ElemDcl
$ElemId nonDRXtimer
$ElemType B3
$Comment /* non-DRX timer */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId DetachType
$Comment /* Detach type 
3GPP 24.008 / 10.5.5.5 */
$ElemDcls
$ElemDcl
$ElemId powOff
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId type
$ElemType B3
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId EmergNum
$Comment /* Emergency Number 
3G TS 24.008 cl. 10.5.3.13
 */
$ElemDcls
$ElemDcl
$ElemId len
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId emergServCat
$ElemType EmergServCat
$Comment /* Emergency Service Category */
$End_ElemDcl
$ElemDcl
$ElemId digits
$ElemType OCTETSTRING[0..10]
$Comment /* BCD numbers */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId EmergNumList
$Comment /* Emergency Number List 
3G TS 24.008 cl. 10.5.3.13
 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00110100'B (34 hex) */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId emergNum1
$ElemType EmergNum
$Comment /* Emergency Number */
$End_ElemDcl
$ElemDcl
$ElemId emergNum2
$ElemType EmergNum
$Comment /* Emergency Number */
$End_ElemDcl
$ElemDcl
$ElemId emergNum3
$ElemType EmergNum
$Comment /* Emergency Number */
$End_ElemDcl
$ElemDcl
$ElemId emergNum4
$ElemType EmergNum
$Comment /* Emergency Number */
$End_ElemDcl
$ElemDcl
$ElemId emergNum5
$ElemType EmergNum
$Comment /* Emergency Number */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId EmergServCat
$Comment /* Emergency Service Category 
3GPP 24.008 / 10.5.4.33
 */
$ElemDcls
$ElemDcl
$ElemId spare
$ElemType B3
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType B5
$Comment /* Emergency Service Category value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId Facility
$Comment /* Facility information element 
3G TS 24.008 cl. 10.5.4.15 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* information element identifier 
'00011100'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId comps
$ElemType OCTETSTRING
$Comment /* Component */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId ForceToStandby
$Comment /* Force to standby 
3GPP 24.008 / 10.5.5.7 */
$ElemDcls
$ElemDcl
$ElemId spare
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType B3
$Comment /* Force to standby value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId GMM_AUTN
$Comment /* Authentication Parameter  AUTN- to be used in GMM constraints 
3G TS 24.008 cl. 10.5.3.1.1 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00101000'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* '10'O */
$End_ElemDcl
$ElemDcl
$ElemId aUTN
$ElemType BITSTRING[128]
$Comment /* Authentication Parameter AUTN */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId GMM_Cause
$Comment /* GMM cause 
3GPP 24.008 / 10.5.5.14 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00100101'B (25 hex) */
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType B8
$Comment /* Cause  value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId GMM_MS_Identity
$Comment /* Mobile Identity 
3G TS 24.008 cl. 10.5.1.4 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00100011'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId iDigit1
$ElemType B4
$Comment /* 1st identitity digit */
$End_ElemDcl
$ElemDcl
$ElemId oddEvenInd
$ElemType B1
$Comment /* Odd/even indicator */
$End_ElemDcl
$ElemDcl
$ElemId typeOfId
$ElemType B3
$Comment /* Type of identity */
$End_ElemDcl
$ElemDcl
$ElemId otherDigits
$ElemType OCTETSTRING[0..8]
$Comment /* Other identity digits */
$End_ElemDcl
$End_ElemDcls
$Comment /* Maximum number of digits is 16 (IMEISV). Filler may be used. */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId GMM_MS_IdentityPTMSI
$Comment /* Mobile Identity 
3G TS 24.008 cl. 10.5.1.4 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00011000'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId iDigit1
$ElemType B4
$Comment /* 1st identitity digit */
$End_ElemDcl
$ElemDcl
$ElemId oddEvenInd
$ElemType B1
$Comment /* Odd/even indicator */
$End_ElemDcl
$ElemDcl
$ElemId typeOfId
$ElemType B3
$Comment /* Type of identity */
$End_ElemDcl
$ElemDcl
$ElemId otherDigits
$ElemType OCTETSTRING[0..8]
$Comment /* Other identity digits */
$End_ElemDcl
$End_ElemDcls
$Comment /* Maximum number of digits is 16 (IMEISV). Filler may be used. */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId GPRS_Timer
$Comment /* GPRS timer 
3GPP 24.008 / 10.5.7.3 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* 00010111'B (17 hex) */
$End_ElemDcl
$ElemDcl
$ElemId unit
$ElemType B3
$Comment /* Unit */
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType B5
$Comment /* Timer  value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId GPRS_Timer2
$Comment /* GPRS timer 
3GPP 24.008 / 10.5.7.4
 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00101010'B (2A hex) */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId unit
$ElemType B3
$Comment /* Unit */
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType B5
$Comment /* Timer  value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId GPRS_Timer_v
$Comment /* GPRS timer 
3GPP 24.008 / 10.5.7.3 */
$ElemDcls
$ElemDcl
$ElemId unit
$ElemType B3
$Comment /* Unit */
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType B5
$Comment /* Timer  value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId HLC
$Comment /* High layer compatibility (CC information element) 
3G TS 24.008 cl. 10.5.4.16, ITU Q.931 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* information element identifier 
'01111101'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId extBit3
$ElemType B1
$Comment /* extension bit ('1'B) */
$End_ElemDcl
$ElemDcl
$ElemId codingStd
$ElemType B2
$Comment /* coding standard */
$End_ElemDcl
$ElemDcl
$ElemId interpretation
$ElemType B3
$Comment /* interpretation */
$End_ElemDcl
$ElemDcl
$ElemId presentModeProtocolProfile
$ElemType B2
$Comment /* presentation method of protocol profile */
$End_ElemDcl
$ElemDcl
$ElemId extBit4
$ElemType B1
$Comment /* extension bit,  octet 4 */
$End_ElemDcl
$ElemDcl
$ElemId hlcId
$ElemType B7
$Comment /* high layer characteristics identification */
$End_ElemDcl
$ElemDcl
$ElemId extBit4a
$ElemType B1
$Comment /* extension bit, '1'B,  octet 4a */
$End_ElemDcl
$ElemDcl
$ElemId exteHlcId
$ElemType B7
$Comment /* extended high layer characteristics identification */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId IMEISVRequest
$Comment /* IMEISV Request 
3GPP 24.008 /  10.5.5.10 */
$ElemDcls
$ElemDcl
$ElemId spare1
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType B3
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId LB_SetupRB_IE
$Comment /* LB Setup RAB Subflow 
3G TS 34.109 cl. 6.2 */
$ElemDcls
$ElemDcl
$ElemId rLC_SDU_Size
$ElemType BITSTRING [16]
$Comment /* RLC SDU size */
$End_ElemDcl
$ElemDcl
$ElemId spare_2
$ElemType BITSTRING [3]
$End_ElemDcl
$ElemDcl
$ElemId rB_Identity
$ElemType BITSTRING[5]
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId LLC
$Comment /* Low layer compatibility (CC information element) 
3G TS 24.008 cl. 10.5.4.18 and ETS DE/SPS-5034-1 (update of ETS 300 102-1) */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* information element identifier 
'01111100'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId extBit3
$ElemType B1
$Comment /* extension bit */
$End_ElemDcl
$ElemDcl
$ElemId codingStd
$ElemType B2
$Comment /* coding standard, octet 3 */
$End_ElemDcl
$ElemDcl
$ElemId itc
$ElemType B5
$Comment /* information transfer capability,  octet 3 */
$End_ElemDcl
$ElemDcl
$ElemId extBit3a
$ElemType B1
$Comment /* extension bit, octet 3a */
$End_ElemDcl
$ElemDcl
$ElemId negoInd
$ElemType B1
$Comment /* negotiation indicator, octet 3a */
$End_ElemDcl
$ElemDcl
$ElemId spare6
$ElemType B6
$Comment /* 6 spare bits */
$End_ElemDcl
$ElemDcl
$ElemId extBit4
$ElemType B1
$Comment /* extension bit, octet 4 */
$End_ElemDcl
$ElemDcl
$ElemId transferMode
$ElemType B2
$Comment /* transfer mode */
$End_ElemDcl
$ElemDcl
$ElemId infoTransferRate
$ElemType B5
$Comment /* information transfer rate,  octet 4 */
$End_ElemDcl
$ElemDcl
$ElemId extBit4_1
$ElemType B1
$Comment /* extension bit, octet 4.1 */
$End_ElemDcl
$ElemDcl
$ElemId rateMultiplier
$ElemType B7
$Comment /* rate multiplier, octet 4.1 */
$End_ElemDcl
$ElemDcl
$ElemId extBit5
$ElemType B1
$Comment /* extension bit, octet 5 */
$End_ElemDcl
$ElemDcl
$ElemId layer1Id
$ElemType B2
$Comment /* Layter 1 identity, '01'B, octet 5 */
$End_ElemDcl
$ElemDcl
$ElemId userInfoLayer1
$ElemType B5
$Comment /* user information Layer 1 protocol, '0000'B, octet 5 */
$End_ElemDcl
$ElemDcl
$ElemId extBit5a
$ElemType B1
$Comment /* extension bit, octet 5a */
$End_ElemDcl
$ElemDcl
$ElemId syncAsync
$ElemType B1
$Comment /* synchronous bit, octet 5a */
$End_ElemDcl
$ElemDcl
$ElemId nego
$ElemType B1
$Comment /* negotiation bit,  octet 5a */
$End_ElemDcl
$ElemDcl
$ElemId userRate
$ElemType B5
$Comment /* user rate, octet 5a */
$End_ElemDcl
$ElemDcl
$ElemId extBit5b1
$ElemType B1
$Comment /* extension bit, octet 5b1 */
$End_ElemDcl
$ElemDcl
$ElemId intermRate
$ElemType B2
$Comment /* intermediate rate,  octet 5b1 */
$End_ElemDcl
$ElemDcl
$ElemId nicTx
$ElemType B1
$Comment /* network independent clock on transmission,  octet 5b1 */
$End_ElemDcl
$ElemDcl
$ElemId nicRx
$ElemType B1
$Comment /* network independent clock on reception,  octet 5b1 */
$End_ElemDcl
$ElemDcl
$ElemId flowCtrlTx
$ElemType B1
$Comment /* flow control on transmission,  octet 5b1 */
$End_ElemDcl
$ElemDcl
$ElemId flowCtrlRx
$ElemType B1
$Comment /* flow control on reception,  octet 5b1 */
$End_ElemDcl
$ElemDcl
$ElemId spare1
$ElemType B1
$Comment /* 1 spare bit, '0'B, octet 5b1 */
$End_ElemDcl
$ElemDcl
$ElemId extBit5b2
$ElemType B1
$Comment /* extension bit,  octet 5b2 */
$End_ElemDcl
$ElemDcl
$ElemId rateAdaptHeader
$ElemType B1
$Comment /* rate adaptation header,  octet 5b2 */
$End_ElemDcl
$ElemDcl
$ElemId multiFrame
$ElemType B1
$Comment /* Multi frame,  octet 5b2 */
$End_ElemDcl
$ElemDcl
$ElemId mode
$ElemType B1
$Comment /* Mode of operation, octet 5b2 */
$End_ElemDcl
$ElemDcl
$ElemId logLinkId
$ElemType B1
$Comment /* logical link identifier negotiation, octet 5b2 */
$End_ElemDcl
$ElemDcl
$ElemId assignorAssignee
$ElemType B1
$Comment /* assignor/assignee, octet 5b2 */
$End_ElemDcl
$ElemDcl
$ElemId inBandOutBand
$ElemType B1
$Comment /* in band/out band negotiation, octet 5b2 */
$End_ElemDcl
$ElemDcl
$ElemId spare1_5b2
$ElemType B1
$Comment /* sapre bit - 1 bit, octet 5b2 */
$End_ElemDcl
$ElemDcl
$ElemId extBit5c
$ElemType B1
$Comment /* extension bit,  octet 5c */
$End_ElemDcl
$ElemDcl
$ElemId numStopBits
$ElemType B2
$Comment /* number of stop bits,  octet 5c */
$End_ElemDcl
$ElemDcl
$ElemId numDataBits
$ElemType B2
$Comment /* number of data bits,  octet 5c */
$End_ElemDcl
$ElemDcl
$ElemId parity
$ElemType B3
$Comment /* parity, octet 5c */
$End_ElemDcl
$ElemDcl
$ElemId extBit5d
$ElemType B1
$Comment /* extension bit, octet 5d */
$End_ElemDcl
$ElemDcl
$ElemId duplexMode
$ElemType B1
$Comment /* duplex mode,  octet 5d */
$End_ElemDcl
$ElemDcl
$ElemId modemType
$ElemType B6
$Comment /* modem type, octet 5d */
$End_ElemDcl
$ElemDcl
$ElemId extBit6
$ElemType B1
$Comment /* extension bit,  octet 6 */
$End_ElemDcl
$ElemDcl
$ElemId layer2id
$ElemType B2
$Comment /* L2 identity, octet 6 */
$End_ElemDcl
$ElemDcl
$ElemId userInfoLayer2
$ElemType B5
$Comment /* user information L2 protocol, octet 6 */
$End_ElemDcl
$ElemDcl
$ElemId extBit6a1
$ElemType B1
$Comment /* extension bit,   octet 6a1 */
$End_ElemDcl
$ElemDcl
$ElemId modeLayer2
$ElemType B2
$Comment /* mode, octet 6a1 */
$End_ElemDcl
$ElemDcl
$ElemId spare3
$ElemType B3
$Comment /* spare bits , '000'B, octet 6a1 */
$End_ElemDcl
$ElemDcl
$ElemId q933
$ElemType B2
$Comment /* Q.933 use, octet 6a1 */
$End_ElemDcl
$ElemDcl
$ElemId extBit6a2
$ElemType B1
$Comment /* extension bit,  octet 6a2 */
$End_ElemDcl
$ElemDcl
$ElemId userSpecifLayer2
$ElemType B7
$Comment /* user specified layer 2 protocol information, octet 6a2 */
$End_ElemDcl
$ElemDcl
$ElemId extBit6b
$ElemType B1
$Comment /* extension bit, octet 6b */
$End_ElemDcl
$ElemDcl
$ElemId windowSize
$ElemType B7
$Comment /* window size, octet 6b */
$End_ElemDcl
$ElemDcl
$ElemId extBit7
$ElemType B1
$Comment /* extension bit,  octet 7 */
$End_ElemDcl
$ElemDcl
$ElemId layer3id
$ElemType B2
$Comment /* L3 identity, octet 7 */
$End_ElemDcl
$ElemDcl
$ElemId userInfoLayer3
$ElemType B5
$Comment /* user information L3 protocol, octet 7 */
$End_ElemDcl
$ElemDcl
$ElemId extBit7a1
$ElemType B1
$Comment /* extension bit, octet 7a2 */
$End_ElemDcl
$ElemDcl
$ElemId OptionUserSpecifLayer3
$ElemType B7
$Comment /* user specified layer 3 protocol information, octet 7a2 */
$End_ElemDcl
$ElemDcl
$ElemId extBit7a2
$ElemType B1
$Comment /* extension bit, '1'B, octet 7a2 */
$End_ElemDcl
$ElemDcl
$ElemId modeLayer3
$ElemType B2
$Comment /* mode, octet 7a2 */
$End_ElemDcl
$ElemDcl
$ElemId spare5
$ElemType B5
$Comment /* spare bits , '00000'B, octet 7a2 */
$End_ElemDcl
$ElemDcl
$ElemId extb7b
$ElemType B1
$Comment /* extension bit, octet 7b */
$End_ElemDcl
$ElemDcl
$ElemId spare3_7b
$ElemType B3
$Comment /* spare bits , '000'B, octet 7b */
$End_ElemDcl
$ElemDcl
$ElemId defaultPacketSize
$ElemType B4
$Comment /* default packet size, octet 7b */
$End_ElemDcl
$ElemDcl
$ElemId extBit7c
$ElemType B1
$Comment /* extension bit, '1'B,  octet 7c */
$End_ElemDcl
$ElemDcl
$ElemId packetWindowSize
$ElemType B7
$Comment /* packet window size, octet 7bc */
$End_ElemDcl
$ElemDcl
$ElemId extBit7a3
$ElemType B1
$Comment /* extension bit, octet 7a3 */
$End_ElemDcl
$ElemDcl
$ElemId spare3_7a3
$ElemType B3
$Comment /* 3 spare bits */
$End_ElemDcl
$ElemDcl
$ElemId addLayer3ProtocolInfo
$ElemType B4
$Comment /* additional layer 3 protocol information (most significant bits), octet 7a3 */
$End_ElemDcl
$ElemDcl
$ElemId extBit7a4
$ElemType B1
$Comment /* extension bit, octet 7a4 */
$End_ElemDcl
$ElemDcl
$ElemId spare3_7a4
$ElemType B3
$Comment /* 3 spare bits */
$End_ElemDcl
$ElemDcl
$ElemId addLayer3ProtocolInfoL
$ElemType B4
$Comment /* additional layer 3 protocol information (least significant bits), octet 7a4 */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId LLC_SAPI_v
$Comment /* 24.007, clause 10.5.6.9
 */
$ElemDcls
$ElemDcl
$ElemId spare
$ElemType B4
$End_ElemDcl
$ElemDcl
$ElemId lLC_SAPI_Value
$ElemType B4
$Comment /* LLC SAPI Value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId LenInd15AndE_Bit
$Comment /* This type is used to represent a 15 bit length indicator and an extension bit, used in both AMD and UMD PDUs. Ref 3G TS 25.322 clauses 9.2.1.3 and 9.2.1.4. */
$ElemDcls
$ElemDcl
$ElemId lenInd
$ElemType LenInd15
$End_ElemDcl
$ElemDcl
$ElemId extBit
$ElemType ExtBit
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId LenInd7AndE_Bit
$Comment /* This type is used to represent a 7 bit length indicator and an extension bit, used in both AMD and UMD PDUs. Ref 3G TS 25.322 clauses 9.2.1.3 and 9.2.1.4. */
$ElemDcls
$ElemDcl
$ElemId lenInd
$ElemType LenInd7
$End_ElemDcl
$ElemDcl
$ElemId extBit
$ElemType ExtBit
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId LenInds
$Comment /* This type is used to represent a Length Indicator group.  
  
Note that this type definitions supports up to 5 seven bit length indicators, or   
up to 3 fifteen bit length indicators. If any test cases require more LIs than   
this, the test suite will need to be updated.  
  
LI groups using this type definition shall never contain both 15 and 7 bit   
length indicators.  
  
When transmitting an AMD PDU, the TTCN author is responsible for ensuring that   
the PDU either:  
  
  1. Contains no length indicators, by using c_LIsEmpty, and setting the   
  headerExt field in the AMD_PDU constraint to tsc_HE_Data.  
  
  2. Contains 1 to 5 seven bit length indicators, by using one of the   
  constraints c_LIs1_7BitLI, c_LIs2_7BitLIs, c_LIs3_7BitLIs, or c_LIs5_7BitLIs and setting the   
  headerExt field in the AMD_PDU to tsc_HE_LI_AndE_Bit.Note that use of these   
  constraints ensures that that the fields lenInd15_1, lenInd15_2, and lenInd15_3 are omitted.  
  
  3. Contains 1 to 3 fifteen bit length indicators, by using one of the   
  constraints c_LIs1_15BitLI, c_LIs2_15BitLIs, or c_LIs3_15BitLIs, and setting   
  the headerExt field in the AMD_PDU to tsc_HE_LI_AndE_Bit. Note that use of   
  these constraints ensures that that the fields lenInd7_1, lenInd7_2, and   
  lenInd7_3 are omitted.  
  
When receiving an AMD PDU, the SS is responsible for the following:  
  1. Examining the headerExt field in the AMD PDU header to decide if any length   
  indicators are present.  
    
  2. Deciding whether 7 or 15 bit length indicators are being used for received   
  PDUs based on the currently configured RLC PDU size.  
  
  3. Examining the E-bit following each LI that is present to determine if any   
  further LIs are present. If more than 3 resp. 5 LIs are present, a test case error   
  shall be reported, and the test suite will need to be updated to support more   
  than 3 resp. 5 length indicators.  
  
  4. Passing the received LI group back to the TTCN in such a way that it will   
  match one of the following constraints:  
  
    c_LIsEmpty  
    c_LIs1_7BitLI  
    c_LIs2_7BitLIs  
    c_LIs3_7BitLIs  
    c_LIs5_7BitLIs  
    c_LIs1_15BitLI  
    c_LIs2_15BitLIs  
    c_LIs3_15BitLIs  
  
  
Reference 3G TS 25.322 clause 9.2.2.8 */
$ElemDcls
$ElemDcl
$ElemId lenInd7_1
$ElemType LenInd7AndE_Bit
$End_ElemDcl
$ElemDcl
$ElemId lenInd7_2
$ElemType LenInd7AndE_Bit
$End_ElemDcl
$ElemDcl
$ElemId lenInd7_3
$ElemType LenInd7AndE_Bit
$End_ElemDcl
$ElemDcl
$ElemId lenInd7_4
$ElemType LenInd7AndE_Bit
$End_ElemDcl
$ElemDcl
$ElemId lenInd7_5
$ElemType LenInd7AndE_Bit
$End_ElemDcl
$ElemDcl
$ElemId lenInd15_1
$ElemType LenInd15AndE_Bit
$End_ElemDcl
$ElemDcl
$ElemId lenInd15_2
$ElemType LenInd15AndE_Bit
$End_ElemDcl
$ElemDcl
$ElemId lenInd15_3
$ElemType LenInd15AndE_Bit
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId LocAreaId_v
$Comment /* Location Area Identification Value 
3G TS 24.008 cl. 10.5.1.3 */
$ElemDcls
$ElemDcl
$ElemId plmn
$ElemType OCTETSTRING[3]
$Comment /* MCC  + MNC 3 digits each */
$End_ElemDcl
$ElemDcl
$ElemId lac
$ElemType OCTETSTRING[2]
$Comment /* LAC */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId LocUpdType
$Comment /* Location Updating Type  
 3G TS 24.008 cl. 10.5.3.5 */
$ElemDcls
$ElemDcl
$ElemId fOR
$ElemType B1
$Comment /* Follow-On Request */
$End_ElemDcl
$ElemDcl
$ElemId spare1
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId lUT
$ElemType B2
$Comment /* Location Updating Type */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId MM_MS_Identity
$Comment /* Mobile Identity 
3G TS 24.008 cl. 10.5.1.4 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00010111'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId iDigit1
$ElemType B4
$Comment /* 1st identitity digit */
$End_ElemDcl
$ElemDcl
$ElemId oddEvenInd
$ElemType B1
$Comment /* Odd/even indicator */
$End_ElemDcl
$ElemDcl
$ElemId typeOfId
$ElemType B3
$Comment /* Type of identity */
$End_ElemDcl
$ElemDcl
$ElemId otherDigits
$ElemType OCTETSTRING[0..8]
$Comment /* Other identity digits */
$End_ElemDcl
$End_ElemDcls
$Comment /* Maximum number of digits is 16 (IMEISV). Filler may be used. */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId MSRadioAccessCap_lv
$Comment /* MS radio access capability 
3GPP 24.008 /  10.5.5.12a
 */
$ElemDcls
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType OCTETSTRING[0..50]
$Comment /* MS radio access capability value (CSN.1 coding) */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId MS_Clsmk1
$Comment /* Mobile Station Classmark 1 
3G TS 24.008 cl. 10.5.1.5 */
$ElemDcls
$ElemDcl
$ElemId spare1
$ElemType B1
$Comment /* Spare bit */
$End_ElemDcl
$ElemDcl
$ElemId revLvl
$ElemType B2
$Comment /* Revision Level */
$End_ElemDcl
$ElemDcl
$ElemId eSIND
$ElemType B1
$Comment /* Early Sending Indication */
$End_ElemDcl
$ElemDcl
$ElemId a5_1
$ElemType B1
$Comment /* Algorithm A5/1 supported */
$End_ElemDcl
$ElemDcl
$ElemId rFPwrCap
$ElemType B3
$Comment /* RF Power Capability */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId MS_Clsmk2
$Comment /* Mobile Station Classmark 2 
3G TS 24.008 cl. 10.5.1.6 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId spare1_1
$ElemType B1
$Comment /* Spare bit */
$End_ElemDcl
$ElemDcl
$ElemId revLvl
$ElemType B2
$Comment /* Revision Level */
$End_ElemDcl
$ElemDcl
$ElemId eSIND
$ElemType B1
$Comment /* Early Sending Indication */
$End_ElemDcl
$ElemDcl
$ElemId a5_1
$ElemType B1
$Comment /* Algorithm A5/1 Support */
$End_ElemDcl
$ElemDcl
$ElemId rFPwrCap
$ElemType B3
$Comment /* RF Power Capability */
$End_ElemDcl
$ElemDcl
$ElemId spare1_2
$ElemType B1
$Comment /* Spare bit */
$End_ElemDcl
$ElemDcl
$ElemId pSCap
$ElemType B1
$Comment /* Pseudo Synchronisation Capability */
$End_ElemDcl
$ElemDcl
$ElemId sSSI
$ElemType B2
$Comment /* SS Screen Indicator */
$End_ElemDcl
$ElemDcl
$ElemId sMCap
$ElemType B1
$Comment /* Short Message Capability */
$End_ElemDcl
$ElemDcl
$ElemId vBS
$ElemType B1
$Comment /* VBS Capability */
$End_ElemDcl
$ElemDcl
$ElemId vGCS
$ElemType B1
$Comment /* VGCS Capability */
$End_ElemDcl
$ElemDcl
$ElemId fC
$ElemType B1
$Comment /* Frequency Capability */
$End_ElemDcl
$ElemDcl
$ElemId cM3
$ElemType B1
$Comment /* Classmark 3 Indicator */
$End_ElemDcl
$ElemDcl
$ElemId spare1_3
$ElemType B1
$Comment /* Spare bit */
$End_ElemDcl
$ElemDcl
$ElemId lCSVA
$ElemType B1
$Comment /* LCS VA Capability */
$End_ElemDcl
$ElemDcl
$ElemId uCS2
$ElemType B1
$Comment /* UCS2 Encoding  Support */
$End_ElemDcl
$ElemDcl
$ElemId soLSA
$ElemType B1
$Comment /* SoLSA  Support */
$End_ElemDcl
$ElemDcl
$ElemId cMSP
$ElemType B1
$Comment /* CM Service Prompt Support */
$End_ElemDcl
$ElemDcl
$ElemId a5_3
$ElemType B1
$Comment /* Algorithm A5/3 Support */
$End_ElemDcl
$ElemDcl
$ElemId a5_2
$ElemType B1
$Comment /* Algorithm A5/2 Support */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId MS_Clsmk2_lv
$Comment /* Mobile Station Classmark 2 
3G TS 24.008 cl. 10.5.1.6 */
$ElemDcls
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId spare1_1
$ElemType B1
$Comment /* Spare bit */
$End_ElemDcl
$ElemDcl
$ElemId revLvl
$ElemType B2
$Comment /* Revision Level */
$End_ElemDcl
$ElemDcl
$ElemId eSIND
$ElemType B1
$Comment /* Early Sending Indication */
$End_ElemDcl
$ElemDcl
$ElemId a5_1
$ElemType B1
$Comment /* Algorithm A5/1 Support */
$End_ElemDcl
$ElemDcl
$ElemId rFPwrCap
$ElemType B3
$Comment /* RF Power Capability */
$End_ElemDcl
$ElemDcl
$ElemId spare1_2
$ElemType B1
$Comment /* Spare bit */
$End_ElemDcl
$ElemDcl
$ElemId pSCap
$ElemType B1
$Comment /* Pseudo Synchronisation Capability */
$End_ElemDcl
$ElemDcl
$ElemId sSSI
$ElemType B2
$Comment /* SS Screen Indicator */
$End_ElemDcl
$ElemDcl
$ElemId sMCap
$ElemType B1
$Comment /* Short Message Capability */
$End_ElemDcl
$ElemDcl
$ElemId vBS
$ElemType B1
$Comment /* VBS Capability */
$End_ElemDcl
$ElemDcl
$ElemId vGCS
$ElemType B1
$Comment /* VGCS Capability */
$End_ElemDcl
$ElemDcl
$ElemId fC
$ElemType B1
$Comment /* Frequency Capability */
$End_ElemDcl
$ElemDcl
$ElemId cM3
$ElemType B1
$Comment /* Classmark 3 Indicator */
$End_ElemDcl
$ElemDcl
$ElemId spare1_3
$ElemType B1
$Comment /* Spare bit */
$End_ElemDcl
$ElemDcl
$ElemId lCSVA
$ElemType B1
$Comment /* LCS VA Capability */
$End_ElemDcl
$ElemDcl
$ElemId uCS2
$ElemType B1
$Comment /* UCS2 Encoding  Support */
$End_ElemDcl
$ElemDcl
$ElemId soLSA
$ElemType B1
$Comment /* SoLSA  Support */
$End_ElemDcl
$ElemDcl
$ElemId cMSP
$ElemType B1
$Comment /* CM Service Prompt Support */
$End_ElemDcl
$ElemDcl
$ElemId a5_3
$ElemType B1
$Comment /* Algorithm A5/3 Support */
$End_ElemDcl
$ElemDcl
$ElemId a5_2
$ElemType B1
$Comment /* Algorithm A5/2 Support */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId MS_Identity_lv
$Comment /* Mobile Identity LV 
3G TS 24.008 cl. 10.5.1.4 */
$ElemDcls
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId iDigit1
$ElemType B4
$Comment /* 1st identitity digit */
$End_ElemDcl
$ElemDcl
$ElemId oddEvenInd
$ElemType B1
$Comment /* Odd/even indicator */
$End_ElemDcl
$ElemDcl
$ElemId typeOfId
$ElemType B3
$Comment /* Type of identity */
$End_ElemDcl
$ElemDcl
$ElemId otherDigits
$ElemType OCTETSTRING[0..8]
$Comment /* Other identity digits */
$End_ElemDcl
$End_ElemDcls
$Comment /* Maximum number of digits is 16 (IMEISV). Filler may be used. */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId MS_NetworkCap_lv
$Comment /* MS network capabilityt LV 
3GPP 24.008 /  10.5.5.12 */
$ElemDcls
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType OCTETSTRING[0..8]
$Comment /* MS network capability value (CSN.1 coding) */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId MS_NetworkCap_tlv
$Comment /* MS network capabilityt T LV 
3GPP 24.008 /  10.5.5.12 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00110001'B (hex 31) */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType OCTETSTRING[0..8]
$Comment /* MS network capability value (CSN.1 coding) */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId NSAPI_v
$Comment /* 24.007, clause 10.5.6.2
 */
$ElemDcls
$ElemDcl
$ElemId spare
$ElemType B4
$End_ElemDcl
$ElemDcl
$ElemId nSAPI_Value
$ElemType B4
$Comment /* NSAPI value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId NtwFeatureSupport_tv
$Comment /* Network Feature Support
3G TS 24.008 cl. 10.5.5.23
 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI4
$Comment /* '1011'B (B- hex) */
$End_ElemDcl
$ElemDcl
$ElemId lCS_MOLR
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId spare3
$ElemType B3
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId PDP_ContextStatus
$Comment /* PDP_ContextStatus 
3G TS 24.008 cl. 10.5.7.1 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00110010'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId nSAPI
$ElemType BITSTRING[16]
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId PLMN_List
$Comment /* PLMN list 
3G TS 24.008 cl. 10.5.1.13 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '01001010''B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId plmn1
$ElemType OCTETSTRING[3]
$Comment /* PLMN 1 */
$End_ElemDcl
$ElemDcl
$ElemId plmn2
$ElemType OCTETSTRING[3]
$Comment /* PLMN 2 */
$End_ElemDcl
$ElemDcl
$ElemId plmn3
$ElemType OCTETSTRING[3]
$Comment /* PLMN 3 */
$End_ElemDcl
$ElemDcl
$ElemId plmn4
$ElemType OCTETSTRING[3]
$Comment /* PLMN 4 */
$End_ElemDcl
$ElemDcl
$ElemId plmn5
$ElemType OCTETSTRING[3]
$Comment /* PLMN 5 */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId PS_LCS_Capability
$Comment /* PS LCS Capability 
3GPP 24.008 / 10.5.5.22
 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00110011'B (33 hex) */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* '01'O */
$End_ElemDcl
$ElemDcl
$ElemId spare
$ElemType B3
$End_ElemDcl
$ElemDcl
$ElemId oTD_A
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId oTD_B
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId gPS_A
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId gPS_B
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId gPS_C
$ElemType B1
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId PTMSI_Signature
$Comment /* P-TMSI signature 
3GPP 24.008 /  10.5.5.8 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00011001'B (19 hex) */
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType OCTETSTRING[3]
$Comment /* P-TMSI signature value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId PTMSI_Signature_tlv
$Comment /* P-TMSI signature 
3GPP 24.008 /  10.5.5.8 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00011001'B (19 hex) */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType OCTETSTRING[3]
$Comment /* P-TMSI signature value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId PktDataProtoAddr_lv
$Comment /* 24.007, clause 10.5.6.4
 */
$ElemDcls
$ElemDcl
$ElemId length
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId spare
$ElemType B4
$End_ElemDcl
$ElemDcl
$ElemId pDP_TypeOrg
$ElemType B4
$Comment /* PDP type organisation */
$End_ElemDcl
$ElemDcl
$ElemId pDP_TypeNo
$ElemType PDP_TypeNo
$Comment /* PDP type number */
$End_ElemDcl
$ElemDcl
$ElemId addrInfo
$ElemType AddressInfo
$Comment /* Address Information */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId ProtoCfgOpt
$Comment /* 24.007, clause 10.5.6.3
 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* '00101000'B (27hex) */
$End_ElemDcl
$ElemDcl
$ElemId length
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId ext
$ElemType B1
$Comment /* extension bit */
$End_ElemDcl
$ElemDcl
$ElemId spare
$ElemType B4
$End_ElemDcl
$ElemDcl
$ElemId configprotocol
$ElemType B3
$Comment /* configuration protocol */
$End_ElemDcl
$ElemDcl
$ElemId protocolIdContents
$ElemType ProtoIdContents
$Comment /* information related to additional external protocols */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId QualityOfService_lv
$Comment /* 24.008, clause 10.5.6.5
 */
$ElemDcls
$ElemDcl
$ElemId length
$ElemType Length
$End_ElemDcl
$ElemDcl
$ElemId spare
$ElemType B2
$End_ElemDcl
$ElemDcl
$ElemId dlyClass
$ElemType B3
$Comment /* Delay Class */
$End_ElemDcl
$ElemDcl
$ElemId relabilityClass
$ElemType B3
$Comment /* Reliability Class */
$End_ElemDcl
$ElemDcl
$ElemId peakThroughput
$ElemType B4
$Comment /* Peak Throughput */
$End_ElemDcl
$ElemDcl
$ElemId spare1
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId precedenceClass
$ElemType B3
$Comment /* Precedence Class */
$End_ElemDcl
$ElemDcl
$ElemId spare2
$ElemType B3
$End_ElemDcl
$ElemDcl
$ElemId meanThroughput
$ElemType B5
$Comment /* Mean Throughput */
$End_ElemDcl
$ElemDcl
$ElemId trafficClass
$ElemType B3
$Comment /* Traffic Class */
$End_ElemDcl
$ElemDcl
$ElemId deliveryOrder
$ElemType B2
$Comment /* Delivery Order */
$End_ElemDcl
$ElemDcl
$ElemId deliveryErrorSDU
$ElemType B3
$Comment /* Delivery of erroneous SDU */
$End_ElemDcl
$ElemDcl
$ElemId maxSDUSize
$ElemType MaxSDU_Size
$Comment /* Maximum SDU Size */
$End_ElemDcl
$ElemDcl
$ElemId maxBitRateUplink
$ElemType MaxBitRate
$Comment /* Maximum Bit Rate for Uplink */
$End_ElemDcl
$ElemDcl
$ElemId maxBitRateDnlink
$ElemType MaxBitRate
$Comment /* Maximum Bit Rate for Downlink */
$End_ElemDcl
$ElemDcl
$ElemId residualBER
$ElemType B4
$Comment /* Residual BER */
$End_ElemDcl
$ElemDcl
$ElemId sduErrRatio
$ElemType B4
$Comment /* SDU Error Ratio */
$End_ElemDcl
$ElemDcl
$ElemId transDly
$ElemType B6
$Comment /* Transfer Delay */
$End_ElemDcl
$ElemDcl
$ElemId trafficHandpro
$ElemType B2
$Comment /* Traffic Handling Priority */
$End_ElemDcl
$ElemDcl
$ElemId bitRateUplink
$ElemType BitRate
$Comment /* Guaranteed bit rate for uplink */
$End_ElemDcl
$ElemDcl
$ElemId bitRateDnlink
$ElemType BitRate
$Comment /* Guaranteed bit rate for downlink */
$End_ElemDcl
$ElemDcl
$ElemId spare3
$ElemType B3
$End_ElemDcl
$ElemDcl
$ElemId signallingInd
$ElemType B1
$Comment /* Signalling Indication */
$End_ElemDcl
$ElemDcl
$ElemId srcStatsDescr
$ElemType B4
$Comment /* Source Statistics Descriptor */
$End_ElemDcl
$ElemDcl
$ElemId maxBitRateDnlinkExt
$ElemType BitRate
$Comment /* Maximum bit rate for downlink (extended) */
$End_ElemDcl
$ElemDcl
$ElemId bitRateDnlinkExt
$ElemType BitRate
$Comment /* Guaranteed bit rate for downlink (extended) */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId RAI_v
$Comment /* Routing Area Identification 
3GPP 24.008 /  10.5.5.15 */
$ElemDcls
$ElemDcl
$ElemId plmn
$ElemType OCTETSTRING[3]
$Comment /* MCC  + MNC 3 digits each */
$End_ElemDcl
$ElemDcl
$ElemId lac
$ElemType OCTETSTRING[2]
$Comment /* LAC */
$End_ElemDcl
$ElemDcl
$ElemId rac
$ElemType OCTETSTRING[1]
$Comment /* RAC */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId RadioPriority_v
$Comment /* Radio priority 
3GPP 24.008 / 10.5.7.2 */
$ElemDcls
$ElemDcl
$ElemId spare
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType B3
$Comment /* Radio priority value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId RadioPriority2_v
$Comment /* Radio priority 2
3GPP 24.008 / 10.5.7.5
 */
$ElemDcls
$ElemDcl
$ElemId spare
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType B3
$Comment /* Radio priority value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId RepeatInd
$Comment /* Repeat indicator 
 3G TS 24.008 cl. 10.5.4.22 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI4
$End_ElemDcl
$ElemDcl
$ElemId repeatInd
$ElemType B4
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId ResAndSUFIs
$Comment /* This type is used as type of the RETURN value of TSO o_SUFI_Handler which provides: 
- a BOOLEAN result 
- a SUFI List of type SuperFields */
$ElemDcls
$ElemDcl
$ElemId result
$ElemType BOOLEAN
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId sUFI_ListRec
$ElemType SuperFields
$Comment /* 2 */
$End_ElemDcl
$End_ElemDcls
$Comment /* 1. overall result of the operation of TSO o_SUFI_Handler 
2. Super Fields received and transferred into the SuperFields structure according to the rules specified in TSO o_SUFI_Handler */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SM_Cause_v
$Comment /* Ref 24.008, 10.5.6.6 */
$ElemDcls
$ElemDcl
$ElemId causeValue
$ElemType CauseValue
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SNiLiPair
$ElemDcls
$ElemDcl
$ElemId sNi
$ElemType AM_SeqNum
$End_ElemDcl
$ElemDcl
$ElemId li
$ElemType SUFI_ListLi
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SS_VersionInd
$Comment /* SS version indicator 
3G TS 24.008 cl. 10.5.4.24
 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* information element identifier 
'01111111'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId sS_VersionInfo
$ElemType OCTETSTRING [1]
$Comment /* ss version information
1. */
$End_ElemDcl
$End_ElemDcls
$Comment /* 1. Usually this IE has only one octet of content.
Exact definition see TS 24.080 */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SUFI_Ack
$Comment /* Acknowledgement super field. Ref 3G TS 25.322 clause 9.2.2.11.2. The ACK SUFI shall always be placed as the last SUFI if it is included in a STATUS PDU. */
$ElemDcls
$ElemDcl
$ElemId type
$ElemType SUFI_Type
$Comment /* Always tsc_SUFI_Ack */
$End_ElemDcl
$ElemDcl
$ElemId lsn
$ElemType AM_SeqNum
$Comment /* 1. */
$End_ElemDcl
$End_ElemDcls
$Comment /* 1. Acknowledges the reception of all PDUs  with sequence numbers < LSN that are not indicated to be erroneous in earlier parts of the STATUS PDU. */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SUFI_Bitmap
$Comment /* Bitmap super field. Ref 3G TS 25.322 clause 9.2.2.11.5 */
$ElemDcls
$ElemDcl
$ElemId type
$ElemType SUFI_Type
$Comment /* Always tsc_SUFI_Bitmap */
$End_ElemDcl
$ElemDcl
$ElemId len
$ElemType BitmapLen
$Comment /* 1. */
$End_ElemDcl
$ElemDcl
$ElemId fsn
$ElemType AM_SeqNum
$Comment /* 2. */
$End_ElemDcl
$ElemDcl
$ElemId bitmap
$ElemType Bitmap
$Comment /* 3. */
$End_ElemDcl
$End_ElemDcls
$Comment /* 1. The size of the bitmap in octets = len+1. len='0000'B means that the bitmap is one octet, and len='1111'B means that the bitmap is the maximum size of  16 octets 
2. The sequence number for the first bit in the bitmap. 
3. Status of the SNs in the interval [ FSN, FSN + ( len + 1 ) * 8 -1 ] where each bit_position can take on the following values:-  
  * '1'B indicates that FSN + bit_position has been correctly received 
  * '0'B indicates that FSN + bit_position has not been correctly received */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SUFI_List
$Comment /* List super field. Ref 3G TS 25.322 clause 9.2.2.11.4 
This type definition assumes that a maximum of 3 (SNi, Li) pairs will be required for RLC test purposes. */
$ElemDcls
$ElemDcl
$ElemId type
$ElemType SUFI_Type
$Comment /* Always tsc_SUFI_List */
$End_ElemDcl
$ElemDcl
$ElemId len
$ElemType LIST_Len
$Comment /* 1. */
$End_ElemDcl
$ElemDcl
$ElemId sN1L1
$ElemType SNiLiPair
$Comment /* 2. */
$End_ElemDcl
$ElemDcl
$ElemId sN2L2
$ElemType SNiLiPair
$Comment /* 2. */
$End_ElemDcl
$ElemDcl
$ElemId sN3L3
$ElemType SNiLiPair
$Comment /* 2. */
$End_ElemDcl
$End_ElemDcls
$Comment /* 1. The number of (SNi, Li) pairs in the super field. 
2. SNi: Sequence number  of PDU which was not correctly received; Li: The number  of consecutive PDUs  not correctly received following PDU with sequence number SNi. */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SUFI_MRW
$Comment /* Move receiving window super field. Ref 3G TS 25.322 clause 9.2.2.11.8 
This type definition assumes that a maximum of three SN_MRWi  will be required for RLC testing. */
$ElemDcls
$ElemDcl
$ElemId type
$ElemType SUFI_Type
$Comment /* Always tsc_SUFI_MRW */
$End_ElemDcl
$ElemDcl
$ElemId len
$ElemType MRW_Len
$Comment /* 1. */
$End_ElemDcl
$ElemDcl
$ElemId sN_MRW1
$ElemType SUFI_SN_MRWi
$Comment /* 2. */
$End_ElemDcl
$ElemDcl
$ElemId sN_MRW2
$ElemType SUFI_SN_MRWi
$Comment /* 2. */
$End_ElemDcl
$ElemDcl
$ElemId sN_MRW3
$ElemType SUFI_SN_MRWi
$Comment /* 2. */
$End_ElemDcl
$ElemDcl
$ElemId nLength
$ElemType N_Length
$Comment /* 3. */
$End_ElemDcl
$End_ElemDcls
$Comment /* 1. The number of SN_MRWi fields in the super-field. 
2. Each SN_MRWi is used to indicate the end of each discarded SDU. SN_MRWi is the sequenec number of the PDU that contains the LI of the i:th discarded SDU. 
3. nLength is used together with SN_MRW_Length to indicate the end of the last discarded SDU */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SUFI_MRW_ACK
$Comment /* Move receiving window acknowledgement super field. Ref 3G TS 25.322 clause 9.2.2.11.7 */
$ElemDcls
$ElemDcl
$ElemId type
$ElemType SUFI_Type
$Comment /* Always tsc_SUFI_MRW_ACK */
$End_ElemDcl
$ElemDcl
$ElemId n
$ElemType N_Length
$Comment /* 1. */
$End_ElemDcl
$ElemDcl
$ElemId sN_ACK
$ElemType AM_SeqNum
$Comment /* 2. */
$End_ElemDcl
$End_ElemDcls
$Comment /* 1. The N field shall be set equal to the N_Length field in the received MRW SUFI if the SN_ACK field is equal to the SN_MRW_Length field. Otherwise N shall be set to 0. 
2. The SN_ACK field indicates the updated value of VR(R) after the reception of the MRW SUFI. */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SUFI_NoMore
$Comment /* No more data super field. Ref 3G TS 25.322 clause 9.2.2.11.1 */
$ElemDcls
$ElemDcl
$ElemId type
$ElemType SUFI_Type
$Comment /* Always tsc_SUFI_NoMore */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SUFI_Params
$Comment /* This type is a list of parameters to be used as input for TSO o_SUFI_Handler which treats a HEXSTRING containing received SUFIs. 
Refer to this TSO and the description of the test methodolgy. */
$ElemDcls
$ElemDcl
$ElemId LB
$ElemType AM_SeqNum
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId UB
$ElemType AM_SeqNum
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId WSN_presence
$ElemType BOOLEAN
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId MRW_presence
$ElemType BOOLEAN
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId Nack1
$ElemType AM_SeqNum
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId Nack2
$ElemType AM_SeqNum
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId Nack3
$ElemType AM_SeqNum
$Comment /* 1 */
$End_ElemDcl
$End_ElemDcls
$Comment /* 1. ... */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SUFI_RList
$Comment /* Relative list super field. Ref 3G TS 25.322 clause 9.2.2.11.6 
This type definition assumes that a maximum of three codewords will be required for RLC testing */
$ElemDcls
$ElemDcl
$ElemId type
$ElemType SUFI_Type
$Comment /* Always tsc_SUFI_RList */
$End_ElemDcl
$ElemDcl
$ElemId len
$ElemType RLIST_Len
$Comment /* 1. */
$End_ElemDcl
$ElemDcl
$ElemId fsn
$ElemType AM_SeqNum
$Comment /* 2. */
$End_ElemDcl
$ElemDcl
$ElemId CW1
$ElemType CodeWord
$Comment /* 3. */
$End_ElemDcl
$ElemDcl
$ElemId CW2
$ElemType CodeWord
$Comment /* 3. */
$End_ElemDcl
$ElemDcl
$ElemId CW3
$ElemType CodeWord
$Comment /* 3. */
$End_ElemDcl
$End_ElemDcls
$Comment /* 1. The number of codewords in the super-field 
2. The sequence number of the first erroneous PDU in the RLIST. Note that len = '0000'B means that only FSN is present in the SUFI. 
3. Each CW consists of 4 bits where the first three bits are part of a number, and the last bit is a status indicator. see 3G TS 25.25.322 clause 9.2.2.11.6 for a detailed description. */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SUFI_WindowSize
$Comment /* Window size super field. Ref 3G TS 25.322 clause 9.2.2.11.3 */
$ElemDcls
$ElemDcl
$ElemId type
$ElemType SUFI_Type
$Comment /* Always tsc_SUFI_WindowSize */
$End_ElemDcl
$ElemDcl
$ElemId wsn
$ElemType BITSTRING[12]
$Comment /* 1. */
$End_ElemDcl
$End_ElemDcls
$Comment /* 1. The allowed Tx window size to be used by the transmitter. */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId ServiceType_v
$Comment /* Service type 
3GPP 24.008 / 10.5.5.20 */
$ElemDcls
$ElemDcl
$ElemId spare1
$ElemType B1
$End_ElemDcl
$ElemDcl
$ElemId type
$ElemType B3
$Comment /* type */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId StreamId
$Comment /* stream identifier 
3G TS 24.008 cl. 10.5.4.28 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* information element identifier 
'00101101'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId val
$ElemType B8
$Comment /* stream identifier value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId Subadrs
$Comment /* Subaddress 
3G TS 24.008 cl. 10.5.4.8, 10.5.4.10, 10.5.4.14 */
$ElemDcls
$ElemDcl
$ElemId extBit
$ElemType B1
$Comment /* extension bit */
$End_ElemDcl
$ElemDcl
$ElemId typrOfSubadrs
$ElemType B3
$Comment /* Type of subaddress */
$End_ElemDcl
$ElemDcl
$ElemId oddEven
$ElemType B1
$Comment /* odd/even indicator */
$End_ElemDcl
$ElemDcl
$ElemId spare3
$ElemType B3
$Comment /* 3 spare bits */
$End_ElemDcl
$ElemDcl
$ElemId subadrsInfo
$ElemType OCTETSTRING [0..20]
$Comment /* subaddress information */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId SuperFields
$Comment /* This type is used to represent the set of super-fields within a STATUS PDU. Ref 3G TS 25.322 clause 9.2.1.5. */
$ElemDcls
$ElemDcl
$ElemId windowSize
$ElemType SUFI_WindowSize
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId list
$ElemType SUFI_List
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId rList
$ElemType SUFI_RList
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId bitmap
$ElemType SUFI_Bitmap
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId mRW
$ElemType SUFI_MRW
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId mRW_Ack
$ElemType SUFI_MRW_ACK
$Comment /* 1 */
$End_ElemDcl
$ElemDcl
$ElemId noMore
$ElemType SUFI_NoMore
$Comment /* 2 */
$End_ElemDcl
$ElemDcl
$ElemId ack
$ElemType SUFI_Ack
$Comment /* 2, 3 */
$End_ElemDcl
$End_ElemDcls
$Comment /* 1. These super fields may arrive in any order, and may or may not be present. This type definition only supports a single super-field, followed by either a NO_MORE SUFI, or an ACK SUFI.  
2. The NO_MORE SUFI, and the ACK SUFI are mutually exclusive, and should never both be present in the same STATUS PDU. 
3. The ACK SUFI is used to acknowledge reception of all PDUs  up to LSN, EXCEPT for any PDUs  indicated as incorrectly received in the previous SUFIs. */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId TI
$Comment /* Transaction identifier 
3G TS 24.007 cl. 11.2.3.1.3 */
$ElemDcls
$ElemDcl
$ElemId tiFlag
$ElemType B1
$Comment /* Flag */
$End_ElemDcl
$ElemDcl
$ElemId tiVal
$ElemType B3
$Comment /* TIO */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId TMSI_Status
$Comment /* TMSI status 
3GPP 24.008 cl. 10.5.5.4 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI4
$Comment /* '1001'B */
$End_ElemDcl
$ElemDcl
$ElemId spare3
$ElemType B3
$End_ElemDcl
$ElemDcl
$ElemId flag
$ElemType B1
$Comment /* Flag */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId TearDwnInd_tv
$Comment /* Ref 24.008, clause 10.5.6.10
 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI4
$Comment /* '1001'B (9 hex) */
$End_ElemDcl
$ElemDcl
$ElemId spare
$ElemType B3
$End_ElemDcl
$ElemDcl
$ElemId tdiflag
$ElemType B1
$Comment /* TDI Flag */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId TypeOfNumPlan
$Comment /* Type of number and numbering plan 
3G TS 24.008 cl.10.5.4.7, 10.5.4.9, 10.5.4.13 */
$ElemDcls
$ElemDcl
$ElemId extBit
$ElemType B1
$Comment /* extension bit */
$End_ElemDcl
$ElemDcl
$ElemId typeOfNum
$ElemType B3
$Comment /* Type of number */
$End_ElemDcl
$ElemDcl
$ElemId numbPlanId
$ElemType B4
$Comment /* Numbering plan id. */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId UE_TestLoopMode1LB_Setup
$Comment /* UE Test Loop Mode 1 LB Setup  3G TS 34.109 cl. 6.2 */
$ElemDcls
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId lB_SetupRB_IE1
$ElemType LB_SetupRB_IE
$Comment /* LB Setup RB IE #1 */
$End_ElemDcl
$ElemDcl
$ElemId lB_SetupRB_IE2
$ElemType LB_SetupRB_IE
$Comment /* LB Setup RB IE #2 */
$End_ElemDcl
$ElemDcl
$ElemId lB_SetupRB_IE3
$ElemType LB_SetupRB_IE
$Comment /* LB Setup RB IE #3 */
$End_ElemDcl
$ElemDcl
$ElemId lB_SetupRB_IE4
$ElemType LB_SetupRB_IE
$Comment /* LB Setup RB IE #4 */
$End_ElemDcl
$ElemDcl
$ElemId lB_SetupRB_IE5
$ElemType LB_SetupRB_IE
$Comment /* LB Setup RB IE #5  */
$End_ElemDcl
$End_ElemDcls
$Comment /* The maximum number of LB entities in the LB setup list is less than or equal to 5. */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId UpdateType_v
$Comment /* Update result 
3GPP 24.008 / 10.5.5.18 */
$ElemDcls
$ElemDcl
$ElemId for
$ElemType B1
$Comment /* Follow-on request */
$End_ElemDcl
$ElemDcl
$ElemId value
$ElemType B3
$Comment /* Update type value */
$End_ElemDcl
$End_ElemDcls
$Comment /*  */
$End_StructTypeDef
$Begin_StructTypeDef
$StructId UserUser
$Comment /* User-user 
3G TS 24.008 cl. 10.5.4.25 */
$ElemDcls
$ElemDcl
$ElemId iei
$ElemType IEI8
$Comment /* information element identifier 
01111110'B */
$End_ElemDcl
$ElemDcl
$ElemId iel
$ElemType Length
$Comment /* length */
$End_ElemDcl
$ElemDcl
$ElemId userUserProtocolDiscr
$ElemType B8
$Comment /* user-user protocol discriminator */
$End_ElemDcl
$ElemDcl
$ElemId userUserInfo
$ElemType OCTETSTRING [1..128]
$Comment /* user user information */
$End_ElemDcl
$End_ElemDcls
$Comment /* In SETUP, ALERTING, CONNECT, DISCONNECT, RELEASE and RELEASE COMPLETE messages the userUserInfo length is of 0 - 32 bytes. 
In USER INFORMATION messages the userUserInfo length is of 1 - 128. */
$End_StructTypeDef
$End_StructTypeDefs
$ASN1_TypeDefs
$Begin_ASN1_TypeDef
$ASN1_TypeId RB_ConfigType
$ASN1_TypeDefinition
ENUMERATED {
  cell_NotConfigured (0),
  -- Configurations on DPCH
  cell_DCH_StandAloneSRB_NoConn (1),
  cell_NoDPCH (2),
  cell_DCH_StandAloneSRB (3),
  cell_DCH_Speech (4),
  cell_DCH_64kCS_RAB_SRB (5),
  cell_DCH_57_6kCS_RAB_SRB (6),
  cell_DCH_64kPS_RAB_SRB (7),
  cell_RLC_DCH_AM_RAB_15Lis (8),
  cell_RLC_DCH_AM_RAB_7Lis (9),
  cell_RLC_DCH_UM_RAB_15Lis (10),
  cell_RLC_DCH_UM_RAB_7Lis (11),
  cell_PDCP_AM_RAB (12),
  cell_PDCP_UM_RAB (13),
  cell_PDCP_AM_UM_RAB (14),
  cell_DCH_MAC_SRB_NoConn (15),
  cell_DCH_MAC_SRB (16),
  cell_DCH_2AM_PS (17),
  -- Configurations on FACH
  cell_FACH_NoConn (18),
  cell_FACH (19),
  cell_FACH_NoDedicated (20),
  cell_FACH_PS (21),
  cell_FACH_BMC (22),
  cell_FACH_BMC_NoConn (23),
  cell_FACH_2_PRACH_NoConn (24), --no RAB
  cell_FACH_2_PRACH (25), -- no RAB
  cell_FACH_2_SCCPCH_NoConn (26), --used in BMC
  cell_FACH_2_SCCPCH (27), --Used in BMC
  cell_FACH_MAC_SRB_NoConn (28),
  cell_FACH_MAC_SRB (29),
  cell_FACH_MAC_SRB0_NoConn (30),
  cell_FACH_MAC_SRB0 (31),
  
  -- Configurations for RAB test cases
  -- for these configuarations Security step does not handle RAB eastablished situation, as in RAB test procedure
  -- Security procedure is called before RAB establishment
  cell_FACH_2SCCPCH_StandAlonePCH_NoConn (32),
  cell_FACH_2SCCPCH_StandAlonePCH (33),
  cell_FACH_2SCCPCH_StandAlonePCH_PS (34),
  cell_Two_DTCH (35),
  cell_Four_DTCH_CS (36),
  cell_Two_DTCH_CS_PS (37),
  cell_Four_DTCH_CS_PS ( 38 ),
  cell_FACH_3_SCCPCH_4_FACH_Cnfg1_NoConn (39),
  cell_FACH_3_SCCPCH_4_FACH_Cnfg1 (40),
  cell_FACH_3_SCCPCH_3_FACH_CTCH_NoConn (41),
  cell_FACH_3_SCCPCH_3_FACH_CTCH (42),
  cell_Two_DTCH_PS_CS (43),
  cell_Four_DTCH_PS_CS (44) ,
  cell_FACH_3_SCCPCH_4_FACH_Cnfg2_NoConn (45),
  cell_FACH_3_SCCPCH_4_FACH_Cnfg2 (46),
  cell_DCH_2_PS_Call(47),
  -- Configurations for DSCH RAB test cases
  cell_DCH_DSCH_PS (48),
  cell_DCH_DSCH_CS_PS ( 49 ), 
  cell_FACH_2SCCPCH_StandAlonePCH_PS_2a(50),
  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1_NoConn (51),
  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1 (52),
  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2_NoConn (53),
  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2 (54),
  cell_FACH_3_SCCPCH_3_FACH_2a_CTCH_NoConn (55),
  cell_FACH_3_SCCPCH_3_FACH_2a_CTCH (56),
  cell_Two_DTCH_CS_PS_Init (57),
  cell_Four_DTCH_CS_PS_Init ( 58 ),
  cell_FACH_2SCCPCH_StandAlonePCH_2a_NoConn (59),
  cell_FACH_2SCCPCH_StandAlonePCH_2a (60),
  cell_Two_DTCH_PS_CS_Init (61), 
  cell_Four_DTCH_PS_CS_Init (62), 
  cell_DCH_HS_DSCH(63),
  cell_FACH_HS(64),
  cell_DCH_64kPS_RAB_SRB_HS(65),
  cell_One_DTCH_HS_DSCH_MAC(66),
  cell_5_UM_DCH_HS_DSCH (67), 
  cell_DCH_Speech_WAMR (68), 
  cell_Four_DTCH_HS_CS_Init (69), 
  cell_Four_DTCH_HS_CS (70), 
  cell_Two_DTCH_HS_CS_Init (71), 
  cell_Two_DTCH_HS_CS (72), 
  cell_Four_DTCH_CS_HS_Init (73), 
  cell_DCH_2AM_HS_DSCH (74) 
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId AICHInfo
$ASN1_TypeDefinition
SEQUENCE {
  aichinfo AICH_Info,
  dl_TxPower AICH_PowerOffset
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId AICH_Mode
$Comment /* Normal operation: The AICH will operate as normal, and will acknowledge or negatively acknowledge on all UE RACH transmission attempts, appropriately.No Acknowledge: The AICH shall not transmit acknowledge or Negative Acknowledge on all UE RACH transmission attempts.Negative Acknowledge: The AICH shall transmit Negative Acknowledge on all UE RACH transmission attempts */
$ASN1_TypeDefinition
ENUMERATED {
  normal (0),
  noAck (1),
  negACK (2)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId AmConfirmationRequest
$Comment /* If the noConfirmationRequested option is used, then an RLC_AM_DATA_CNF is not expected from the RLC AM entity. 
If the confirmationRequested option is used, then the RLC AM entity is being requested to provide an RLC_DATA_CNF primitive containing the same mui value. */
$ASN1_TypeDefinition
CHOICE {
  noConfirmationRequest NULL,
  confirmationRequested Mui
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId COUNT_I_MSB
$Comment /* 28 bits long */
$ASN1_TypeDefinition
INTEGER (0..268435455 )
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CellToBeCreated
$ASN1_TypeDefinition
ENUMERATED { cell_DCH (0), cell_FACH (10) }
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CellTxPowerLevel
$Comment /* The defaultCellTxPowerLvl is a default setting and is used for the most signalling tests. The real total cell DL Tx power level equals to the sum of the DL Tx power of the individual physical channels configured. 
The totalCellTxPowerLvl applies to e.g. the idle mode tests in a non-default multi-cell radio environment. */
$ASN1_TypeDefinition
CHOICE
{
  defaultCellTxPowerLvl NULL,
  totalCellTxPowerLvl DL_TxPower
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CiphActivationInfo
$Comment /* DL or UL ciphering activation infoIf RB is omitted in rB_UL_CiphActivationTimeInfo the SS takes no action on this RB and the ciphering configuration keeps unchanged on this RB. CipheringModeCommand = dummy NULL means no ciphering. */
$ASN1_TypeDefinition
CHOICE {
  cipheringModeInfo CipheringModeInfo,
  rb_UL_CipheringActivationTimeInfo RB_ActivationTimeInfoList
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CmacConfigReq
$Comment /* To request to configure MAC */
$ASN1_TypeDefinition
SEQUENCE {
  activationTime SS_ActivationTime,
  uE_Info UE_Info,
  trCHInfo TrCHInfo,
  trCH_LogCHMapping TrCH_LogCHMappingList1
  -- RACHTransmissionCtrolElements
  -- CPCHTransmissionControlElements
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CmacPagingConfigReq
$ASN1_TypeDefinition
SEQUENCE {
  pI_BitMapInfo CHOICE {
    e18 BIT STRING (SIZE (18)),
    e36 BIT STRING (SIZE (36)),
    e72 BIT STRING (SIZE (72)),
    e144 BIT STRING (SIZE (144))},
  dRX_CycleLength INTEGER (3..9),
  iMSI IMSI_GSM_MAP,
  t_pich_T_sccpch BOOLEAN -- T_pich > T_sccpch then FALSE
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CmacSysinfoConfigReq
$Comment /* if bcch_ModificationTime = OMIT SS shall modify the Sysinfo immediately */
$ASN1_TypeDefinition
SEQUENCE {
  sg_REP INTEGER (2..12),
  -- Repetition period is the sg_REP-th power of 2.
  sg_POS INTEGER (0..2047),
  -- The position of each segment is 2 * sg_POS.
  bcch_ModificationTime BCCH_ModificationTime OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CommonOrDedicatedTFS
$Comment /* Transport Format Set */
$ASN1_TypeDefinition
SEQUENCE {
  tti CHOICE {
    tti10 CommonOrDedicatedTF_InfoList,
    tti20 CommonOrDedicatedTF_InfoList,
    tti40 CommonOrDedicatedTF_InfoList,
    tti80 CommonOrDedicatedTF_InfoList,
    dynamic CommonOrDedicatedTF_InfoList_DynamicTTI
  },
  semistaticTF_Information SemistaticTF_Information
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CommonOrDedicatedTF_Info
$Comment /* Transport Format Set */
$ASN1_TypeDefinition
SEQUENCE {
  tb_Size INTEGER (0..5035),
  numberOfTbSizeList SEQUENCE (SIZE (1..maxTF)) OF NumberOfTransportBlocks,
  logicalChannelList LogicalChannelList
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CommonOrDedicatedTF_InfoList
$Comment /* Transport Format Set */
$ASN1_TypeDefinition
SEQUENCE (SIZE (1..maxTF)) OF CommonOrDedicatedTF_Info
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CommonOrDedicatedTF_InfoList_DynamicTTI
$ASN1_TypeDefinition
SEQUENCE
{
  tb_Size INTEGER (0..5035),
  numberOfTbSizeList SEQUENCE (SIZE (1..maxTF)) OF NumberOfTransportBlocks,
  logicalChannelList LogicalChannelList
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CphyRlModifyReq
$Comment /*  */
$ASN1_TypeDefinition
SEQUENCE {
  activationTime SS_ActivationTime,
  physicalChannelInfo
  CHOICE {
    dpch_CompressedModeStatusInfo DPCH_CompressedModeStatusInfo,
    secondaryCCPCHInfo SecondaryCCPCHInfo,
    pRACHInfo PRACHInfo,
    dPCHInfo DPCHInfo,
    dPCHInfo_r5 DPCHInfo_r5, -- Rel-5 or later
    hS_PDSCHInfo HS_PDSCHInfo -- Rel-5 or later
  },
  trchConfigToFollow BOOLEAN DEFAULT TRUE 
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CphyRlSetupReq
$Comment /* To request to setup the Radio Link
 */
$ASN1_TypeDefinition
SEQUENCE {
  physicalChannelInfo CHOICE {
    primaryCPICHInfo PrimaryCPICHInfo,
    secondaryCPICHInfo SecondaryCPICHInfo,
    primarySCHInfo PrimarySCHInfo,
    secondarySCHInfo SecondarySCHInfo,
    primaryCCPCHInfo PrimaryCCPCHInfo,
    secondaryCCPCHInfo SecondaryCCPCHInfo,
    pRACHInfo PRACHInfo,
    pICHInfo PICHInfo,
    aICHInfo AICHInfo,
    dPCHInfo DPCHInfo,
    pDSCHInfo PDSCHInfo,
    dPCHInfo_r5 DPCHInfo_r5, -- Rel-5 or later
    hS_PDSCHInfo HS_PDSCHInfo -- Rel-5 or later
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CphyTrchConfigReq
$Comment /* To request to configure the transport channel.The same TFCS information should be provided to the PHY and MAC layers at all times. When a CPHY_TrCH_Config_REQ is used to configure the PHY layer, a corresponding CMAC_Config_REQ should be sent to the MAC  layer to ensure that the configuration is consistent.
For configuring HS-DSCH transport channel, the ulconnectedTrCHList, ulTFCS, dlconnectedTrCHList and dlTFCS shall be omitted.
 */
$ASN1_TypeDefinition
SEQUENCE {
  activationTime SS_ActivationTime,
  ulconnectedTrCHList SEQUENCE (SIZE (0..maxTrCH)) OF SEQUENCE {
    trchid TransportChannelIdentity,
    ul_TransportChannelType SS_UL_TransportChannelType,
    transportChannelInfo CommonOrDedicatedTFS
  } OPTIONAL,
  ulTFCS TFCS OPTIONAL,
  dlconnectedTrCHList SEQUENCE (SIZE (0..maxTrCH)) OF SEQUENCE {
    trchid TransportChannelIdentity,
    dl_TransportChannelType SS_DL_TransportChannelType,
    transportChannelInfo CommonOrDedicatedTFS
  } OPTIONAL ,
  dlTFCS TFCS OPTIONAL,
  hsDSCHMacdFlows HS_DSCHMACdFlows OPTIONAL -- Rel-5 or later
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId CrlcConfigReq
$Comment /* To request to setup, re_configure or release RLC entityThe Stop parameter indicates that the RLC entity shall not transmit or receive RLC PDUs. The Continue parameter indicates that the RLC entity shall continue transmission and reception of RLC PDUs. When the RLC entity is stopped, the RLC timers are not affected. Triggered polls and status transmissions are delayed until the RLC entity is continued. */
$ASN1_TypeDefinition
CHOICE {
  setup RBInfo,
  reconfigure RBInfo,
  release NULL,
  sS_stop NULL,
  sS_continue NULL 
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId DL_DPCHInfo
$Comment /* The range for powerOffsetOfTPC_PO2 and powerOffsetOfTFCI_PO1 and powerOffsetOfPILOT_PO3 is 0-6 dB, 0.25 dB per step. */
$ASN1_TypeDefinition
SEQUENCE {
  dl_CommonInformation DL_CommonInformation,
  dl_DPCH_InfoPerRL DL_DPCH_InfoPerRL,
  powerOffsetOfTFCI_PO1 INTEGER (0..24),
  powerOffsetOfTPC_PO2 INTEGER (0..24),
  powerOffsetOfPILOT_PO3 INTEGER (0..24),
  dl_TxPower DL_TxPower,
  dl_TxPowerMax DL_TxPower,
  dl_TxPowerMin DL_TxPower
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId DL_DPCHInfo_r5
$Comment /* Applicable Rel-5 or later
 */
$ASN1_TypeDefinition
SEQUENCE	{
  dl_CommonInformation DL_CommonInformation_r5,
  dl_DPCH_InfoPerRL DL_DPCH_InfoPerRL_r5,
  powerOffsetOfTFCI_PO1 INTEGER (0..24),
  powerOffsetOfTPC_PO2 INTEGER (0..24),
  powerOffsetOfPILOT_PO3 INTEGER (0..24),
  dl_TxPower DL_TxPower,
  dl_TxPowerMax DL_TxPower,
  dl_TxPowerMin DL_TxPower
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId DL_TxPower
$Comment /* Downlink Tx Power relative to PCPICH */
$ASN1_TypeDefinition
INTEGER (-35..15)
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId DL_TxPower_PCPICH
$Comment /* Absolute Tx Power of PCPICH */
$ASN1_TypeDefinition
INTEGER (-60..-30)
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId DPCHInfo
$Comment /* The range for powerOffsetOfTPC_PO2 and powerOffsetOfTFCI_PO1 and powerOffsetOfPILOT_PO3 is 0 dB to 6 dB, 0,25 dB per step. */
$ASN1_TypeDefinition
SEQUENCE {
  ul_DPCHInfo UL_DPCH_Info OPTIONAL,
  dl_DPCHInfo DL_DPCHInfo OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId DPCHInfo_r5
$Comment /* Applicable Rel-5 or later
At least one of the first two fields shall be present.
Presence of hs_DPCCHInd (value = truevalue) means that the HS-DPCCH shall be configured in the uplink DPCH. If hs_DPCCHInd is absent no HS-DPCCH shall be configured in the uplink DPCH, or the configured HS-DPCCH shall be removed in the modify ASP. In the active set which has radio links from more than one cell the HS-DPCCH is configured only in the HS-DSCH serving cell.
Three combinations are valid: ul_DPCH_Info only, dl_DPCHInfo only and ul_DPCH_Info + hs_DPCCHInd.
 */
$ASN1_TypeDefinition
SEQUENCE {
  ul_DPCHInfo UL_DPCH_Info_r5 OPTIONAL,
  dl_DPCHInfo DL_DPCHInfo_r5 OPTIONAL,
  hs_DPCCHInd HS_DPCCHInfo OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId HS_DPCCHInfo
$ASN1_TypeDefinition
SEQUENCE {
  cqi_RepetitionFactor CQI_RepetitionFactor,
  ackNackRepetitionFactor ACK_NACK_repetitionFactor
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId HS_DSCHMACdFlows
$Comment /* Applicable Rel-5 or later.
Within the ACK/NACK repetition period indicated by ackNackRepetitionFactor the SS shall not transmit MAC-hs PDU's on HS-PDSCH.
 */
$ASN1_TypeDefinition
SEQUENCE {
  harqInfo HARQ_Info OPTIONAL,
  addOrReconfMACdFlow SS_AddOrReconfMAC_dFlow OPTIONAL,
  ackNackRepetitionFactor ACK_NACK_repetitionFactor OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId HS_PDSCHInfo
$Comment /* Applicable Rel-5 or later
When CHY_RL_Setup_REQ is called with CHOICE of hS_PDSCHInfo the SS shall not only configure the HS_PDSCH but also the HS-SCCH;
The following HS-DSCH related parameters are passed to the SS implicitly by HSDSCH_physical_layer_category: "Maximum number of HS-DSCH codes can be received by UE", "Minimum inter-TTI interval", "Maximum number of bits of an HS-DSCH transport block within an HS-DSCH TTI" and "Total number of soft channel bits".
The HSDSCH_physical_Layer_category is also used for interpret the meaning of CQI value.
 */
$ASN1_TypeDefinition
SEQUENCE{
  hSDSCHPhysicalLayerCategory HSDSCH_physical_layer_category,
  h_RNTI H_RNTI,
  dlHSPDSCHInformation DL_HSPDSCH_Information,
  sttd_Indicator BOOLEAN,
  hs_SCCH_TxPower DL_TxPower -- offset related to pilot bits on DL-DPCCH
  -- (TS 25.433 subcluse 9.2.2.18I)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId HyperFrameNumber
$ASN1_TypeDefinition
BIT STRING (SIZE (20))
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Increment_Mode
$Comment /*  */
$ASN1_TypeDefinition
ENUMERATED {incPerCFN_Cycle(0), notInc(1), incByOne_IncPerCFN_Cycle(2)}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId IntegrityActivationInfo
$Comment /* Comment	DL or UL integrity activation info.At the RRC message sequence numbers specified in the ul_IntegProtActivationInfo the SS shall initialise COUNT-I for the SRB's indicated in the ul_IntegProtActivationInfo and start using the new configuration on uplink for the indicated SRB's.If the START value is omitted in the CRLC_SecurityMode_Config_REQ above COUNT-I initialisation shall not be performed. 
Type Definition */
$ASN1_TypeDefinition
CHOICE {
  integrityProtectionModeInfo IntegrityProtectionModeInfo,
  ul_IntegProtActivationInfo IntegrityProtActivationInfoList
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId IntegrityProtActivationInfoList
$Comment /* List of SS IntegrityProtActivationInfo */
$ASN1_TypeDefinition
SEQUENCE (SIZE (1..maxRB ) ) OF SS_IntegrityProtActivationTimeInfo
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId IntegrityResult
$ASN1_TypeDefinition
CHOICE {
  integrityNotUsed NULL,
  integrityUsed IntegrityStatus
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId IntegrityStatus
$ASN1_TypeDefinition
ENUMERATED {
  i_pass(0),
  i_fail(1)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_ActiveSetUpdate
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE {
  r3 SEQUENCE {
    activeSetUpdate_r3 ActiveSetUpdate_r3_IEs,
    nonCriticalExtensions SEQUENCE {} OPTIONAL
  },
  later_than_r3 SEQUENCE {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_CCCH_MsgShort
$ASN1_TypeDefinition
NULL
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_CellUpdateConfirm
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    cellUpdateConfirm_r3 CellUpdateConfirm_r3_IEs,
    v3a0NonCriticalExtensions SEQUENCE
    {
      cellUpdateConfirm_v3a0ext CellUpdateConfirm_v3a0ext,
      nonCriticalExtensions SEQUENCE {} OPTIONAL
    } OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_DCCH_MsgShort
$ASN1_TypeDefinition
NULL
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_DL_CCCH_MsgType
$ASN1_TypeDefinition
CHOICE {
  invalid_cellUpdateConfirm [0] Invalid_CCCH_MsgShort,
  invalid_rrcConnectionReject [1] Invalid_CCCH_MsgShort,
  invalid_rrcConnectionRelease [2] Invalid_CCCH_MsgShort,
  invalid_rrcConnectionSetup [3] Invalid_RRCConnectionSetup, -- Specific invalid message
  invalid_uraUpdateConfirm [4] Invalid_UraUpdateConfirm,
  invalid_extension [5] NULL,
  unkown_Type_CCCH_message [6] Invalid_CCCH_MsgShort
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_DL_DCCH_MsgType
$ASN1_TypeDefinition
CHOICE {
  invalid_activeSetUpdate [0] Invalid_ActiveSetUpdate,
  invalid_assistanceDataDelivery [1] Invalid_DCCH_MsgShort,
  invalid_cellChangeOrderFromUTRAN [2] Invalid_DCCH_MsgShort,
  invalid_cellUpdateConfirm [3] Invalid_CellUpdateConfirm ,
  invalid_counterCheck [4] Invalid_DCCH_MsgShort,
  invalid_downlinkDirectTransfer [5] Invalid_DownlinkDirectTransfer,
  invalid_handoverFromUTRANCommand_GSM [6] Invalid_HandoverFromUTRANCommand_GSM, 
  invalid_handoverFromUTRANCommand_CDMA2000 [7] Invalid_DCCH_MsgShort,
  invalid_measurementControl [8] Invalid_MeasurementControl,
  invalid_pagingType2 [9] Invalid_DCCH_MsgShort,
  invalid_physicalChannelReconfiguration [10] Invalid_PhysicalChannelReconfiguration,
  invalid_physicalSharedChannelAllocation [11] Invalid_DCCH_MsgShort,
  invalid_radioBearerReconfiguration [12] Invalid_RadioBearerReconfiguration,
  invalid_radioBearerRelease [13] Invalid_RadioBearerRelease,
  invalid_radioBearerSetup [14] Invalid_RadioBearerSetup,
  invalid_rrcConnectionRelease [15] Invalid_RRC_ConnectionRelease,
  invalid_securityModeCommand [16] Invalid_SecurityModeCommand,
  invalid_signallingConnectionRelease [17] Invalid_DCCH_MsgShort,
  invalid_transportChannelReconfiguration [18] Invalid_TransportChannelReconfiguration,
  invalid_transportFormatCombinationControl [19] Invalid_DCCH_MsgShort,
  invalid_ueCapabilityEnquiry [20] Invalid_UECapabilityEnquiry, -- Specific invalid message
  invalid_ueCapabilityInformationConfirm [21] Invalid_UECapabilityInformationConfirm, -- Specific invalid message
  invalid_uplinkPhysicalChannelControl [22] Invalid_DCCH_MsgShort,
  invalid_uraUpdateConfirm [23] Invalid_UraUpdateConfirm,
  invalid_utranMobilityInformation [24] Invalid_UtranMobilityInformation,
  invalid_extension [25] NULL,
  unkown_Type_DCCH_message [26] Invalid_DCCH_MsgShort
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_DL_SHCCH_MsgType
$ASN1_TypeDefinition
CHOICE {
  invalid_physicalSharedChannelAllocation [0] Invalid_SHCCH_Message_short,
  extension [1] NULL,
  unkown_Type_SHCCH_message [2] Invalid_SHCCH_Message_short
  
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_DownlinkDirectTransfer
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    downlinkDirectTransfer_r3 DownlinkDirectTransfer_r3_IEs,
    nonCriticalExtensions SEQUENCE {} OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_HandoverFromUTRANCommand_GSM
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    handoverFromUTRANCommand_GSM_r3 HandoverFromUTRANCommand_GSM_r3_IEs,
    laterNonCriticalExtensions SEQUENCE
    {
      handoverFromUTRANCommand_GSM_r3_add_ext BIT STRING OPTIONAL,
      nonCriticalExtensions SEQUENCE {} OPTIONAL
    } OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_MeasurementControl
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    measurementControl_r3 MeasurementControl_r3_IEs,
    v390nonCriticalExtensions SEQUENCE
    {
      measurementControl_v390ext MeasurementControl_v390ext,
      v3a0NonCriticalExtensions SEQUENCE
      {
        measurementControl_v3a0ext MeasurementControl_v3a0ext,
        nonCriticalExtensions SEQUENCE {} OPTIONAL
      } OPTIONAL
    } OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_PhysicalChannelReconfiguration
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    physicalChannelReconfiguration_r3 PhysicalChannelReconfiguration_r3_IEs,
    v3a0NonCriticalExtensions SEQUENCE
    {
      physicalChannelReconfiguration_v3a0ext PhysicalChannelReconfiguration_v3a0ext,
      nonCriticalExtensions SEQUENCE {} OPTIONAL
    } OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_RRCConnectionSetup
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    rrcConnectionSetup_r3 RRCConnectionSetup_r3_IEs,
    nonCriticalExtensions SEQUENCE {} OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_RRC_ConnectionRelease
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    rrcConnectionRelease_r3 RRCConnectionRelease_r3_IEs,
    laterNonCriticalExtensions SEQUENCE
    {
      rrcConnectionRelease_r3_add_ext BIT STRING OPTIONAL,
      nonCriticalExtensions SEQUENCE {} OPTIONAL
    } OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- instead of SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_RadioBearerReconfiguration
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    radioBearerReconfiguration_r3 RadioBearerReconfiguration_r3_IEs,
    v3aoNonCriticalExtensions SEQUENCE
    {
      radioBearerReconfiguration_v3a0ext RadioBearerReconfiguration_v3a0ext,
      nonCriticalExtensions SEQUENCE {} OPTIONAL
    } OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_RadioBearerRelease
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    radioBearerRelease_r3 RadioBearerRelease_r3_IEs,
    v3a0NonCriticalExtensions SEQUENCE
    {
      radioBearerRelease_v3a0ext RadioBearerRelease_v3a0ext,
      nonCriticalExtensions SEQUENCE {} OPTIONAL
    } OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_RadioBearerSetup
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    radioBearerSetup_r3 RadioBearerSetup_r3_IEs,
    v3a0NonCriticalExtensions SEQUENCE
    {
      radioBearerSetup_v3a0ext RadioBearerSetup_v3a0ext,
      nonCriticalExtensions SEQUENCE {} OPTIONAL
    } OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_SHCCH_Message_short
$ASN1_TypeDefinition
CounterCheckResponse
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_SecurityModeCommand
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    securityModeCommand_r3 SecurityModeCommand_r3_IEs,
    nonCriticalExtensions SEQUENCE {} OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_TransportChannelReconfiguration
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    transportChannelReconfiguration_r3 TransportChannelReconfiguration_r3_IEs,
    v3a0NonCriticalExtensions SEQUENCE
    {
      transportChannelReconfiguration_v3a0ext TransportChannelReconfiguration_v3a0ext,
      nonCriticalExtensions SEQUENCE {} OPTIONAL
    } OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_UECapabilityEnquiry
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    ueCapabilityEnquiry_r3 UECapabilityEnquiry_r3_IEs,
    nonCriticalExtensions SEQUENCE {} OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_UECapabilityInformationConfirm
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    ueCapabilityInformationConfirm_r3 UECapabilityInformationConfirm_r3_IEs,
    nonCriticalExtensions SEQUENCE {} OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_UraUpdateConfirm
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    uraUpdateConfirm_r3 URAUpdateConfirm_r3_IEs,
    nonCriticalExtensions SEQUENCE {} OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Invalid_UtranMobilityInformation
$Comment /* This invalid type should cause an undefined critical extension error */
$ASN1_TypeDefinition
CHOICE
{
  r3 SEQUENCE
  {
    utranMobilityInformation_r3 UTRANMobilityInformation_r3_IEs,
    v3a0NonCriticalExtensions SEQUENCE
    {
      utranMobilityInformation_v3a0ext UTRANMobilityInformation_v3a0ext_IEs,
      nonCriticalExtensions SEQUENCE {} OPTIONAL
    } OPTIONAL
  },
  later_than_r3 SEQUENCE
  {
    rrc_TransactionIdentifier RRC_TransactionIdentifier,
    criticalExtensions BIT STRING (SIZE(8)) -- INSTEAD OF SEQUENCE {}
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId KeyCiphering
$ASN1_TypeDefinition
BIT STRING (SIZE (128))
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId LogicalChannelType
$ASN1_TypeDefinition
ENUMERATED
{
  bCCH (0),
  pCCH (1),
  cCCH (2),
  cTCH (3),
  dCCH (4),
  dTCH (5),
  sHCCH (6)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId MAC_HeaderManipulation
$ASN1_TypeDefinition
ENUMERATED
{
  normalMacHeader (0),
  omitMacHeader (1)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Mui
$ASN1_TypeDefinition
INTEGER (0..4095)
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId PDSCHInfo
$ASN1_TypeDefinition
SEQUENCE {
  fdd_tdd CHOICE	{
    fdd SEQUENCE {
      pdsch_CodeMapping PDSCH_CodeMapping
    } ,
    tdd SEQUENCE {
      -- pdsch-Identity PDSCH-Identity,
      -- pdsch-Info PDSCH-Info,
      -- pdsch-PowerControlInfo PDSCH-PowerControlInfo OPTIONAL
    }
  },
  dl_TxPower DL_TxPower
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId PICHInfo
$ASN1_TypeDefinition
SEQUENCE {
  pichinfo PICH_Info,
  dl_TxPower PICH_PowerOffset,
  sccpchId_associated INTEGER (0..31)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId PRACHInfo
$ASN1_TypeDefinition
SEQUENCE {
  fdd_tdd CHOICE {
    fdd SEQUENCE {
      preambleSignature AvailableSignatures,
      spreadingFactorForDataPart SF_PRACH,
      preambleScramblingCode PreambleScramblingCodeWordNumber,
      puncturingLimit PuncturingLimit,
      accessSlot AvailableSubChannelNumbers
    },
    tdd SEQUENCE {
      -- timeSlot TimeSlot,
      -- spreadingCode SpreadingCode,
      -- midambleCode MidambleCode,
    }
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId PRACH_MeasurementInd
$Comment /* 1.  StartMeas : The SS shall start the sending PRACH parameters Measurement report on CPHY PCO, for each PRACH Preamble/Message received from the UE by primitive CPHY_PRACH_Measurement_Report_IND on CPHY PCO 
2.   StopMeas : The SS shall stop sending of PRACH parameters Measurement report on CPHY PCO, for each PRACH Preamble received from the UE by primitive CPHY_PRACH_Measurement_Report_IND on CPHY PCO. */
$ASN1_TypeDefinition
ENUMERATED {
  startMeas (0),
  stopMeas (1)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId PRACH_MeasurementReport
$ASN1_TypeDefinition
SEQUENCE {
  usedPRACH_AcessSlot INTEGER (0..14),
  usedPRACH_Signature INTEGER (0..15) OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId PayloadSize
$ASN1_TypeDefinition
INTEGER (0..4992)
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId PhysicalChannelIdentity
$ASN1_TypeDefinition
INTEGER (0..31)
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId PrimaryCCPCHInfo
$ASN1_TypeDefinition
SEQUENCE {
  sttd_Indicator BOOLEAN,
  dl_TxPower DL_TxPower
  -- timeSlot TimeSlot OPTIONAL,
  -- burstType BurstType OPTIONAL,
  -- offset Offset OPTIONAL,
  -- repetitionPeriod RepetitionPeriod OPTIONAL,
  -- repetitionLength RepetitionLength OPTIONAL,
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId PrimaryCPICHInfo
$ASN1_TypeDefinition
SEQUENCE {
  dl_TxPower_PCPICH DL_TxPower_PCPICH,
  txdiversityIndicator BOOLEAN
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId PrimarySCHInfo
$ASN1_TypeDefinition
SEQUENCE {
  tstdIndicator BOOLEAN,
  dl_TxPower DL_TxPower
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId RBInfo
$ASN1_TypeDefinition
SEQUENCE {
  sS_rlc_Info SS_RLC_Info OPTIONAL,
  rB_LogCH_Mapping RB_LogCH_Mapping
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId RB_LogCH_Mapping
$ASN1_TypeDefinition
SEQUENCE {
  uLlogicalChannelIdentity LogicalChannelIdentity OPTIONAL,
  dLlogicalChannelIdentity LogicalChannelIdentity OPTIONAL,
  logicalChannelType LogicalChannelType OPTIONAL,
  cn_DomainIdentity CN_DomainIdentity OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId RLC_IncMode
$ASN1_TypeDefinition
ENUMERATED {notInc(0), inc(1)}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId RRC_Rel_Status
$ASN1_TypeDefinition
ENUMERATED {
  cell_Dch(0),
  cell_Fach_Dcch(1),
  cell_Fach_Ccch(2)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId RRC_SequenceNumber
$Comment /* 4 bits long */
$ASN1_TypeDefinition
INTEGER (0..15 )
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId RRC_ServTested
$ASN1_TypeDefinition
ENUMERATED {
  speech (0),
  conversational_64k (1),
  streaming_57_6k (2),
  ps_Interactive (3),
  ps_Background (4)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId RatType
$Comment /* To select route between each channels */
$ASN1_TypeDefinition
ENUMERATED {
  fdd(0),
  tdd(1)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId RegOr_MO
$ASN1_TypeDefinition
ENUMERATED {
  est_Reg(0),
  est_MO(1),
  est_MT(2)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId RoutingInfo
$ASN1_TypeDefinition
CHOICE {
  physicalChannelIdentity INTEGER (0..31),
  transportChannelIdentity TransportChannelIdentity,
  logicalChannelIdentity LogicalChannelIdentity,
  rB_Identity INTEGER (-31..32),
  cn_DomainIdentity CN_DomainIdentity
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SCCPCHSlotFormat
$Comment /* Reference to TS25.211 */
$ASN1_TypeDefinition
INTEGER (0..17)
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SIB
$Comment /* Union of all system information blocks */
$ASN1_TypeDefinition
CHOICE {
  sIB1 SysInfoType1,
  sIB2 SysInfoType2,
  sIB3 SysInfoType3,
  sIB4 SysInfoType4,
  sIB5 SysInfoType5,
  sIB6 SysInfoType6,
  sIB7 SysInfoType7,
  sIB8 SysInfoType8,
  sIB9 SysInfoType9,
  sIB10 SysInfoType10,
  sIB11 SysInfoType11,
  sIB12 SysInfoType12,
  sIB13 SysInfoType13,
  sIB13_1 SysInfoType13_1,
  sIB13_2 SysInfoType13_2,
  sIB13_3 SysInfoType13_3,
  sIB13_4 SysInfoType13_4,
  sIB14 SysInfoType14,
  sIB15 SysInfoType15,
  sIB15_1 SysInfoType15_1,
  sIB15_2 SysInfoType15_2,
  sIB15_3 SysInfoType15_3,
  sIB16 SysInfoType16,
  sIB17 SysInfoType17,
  sIB18 SysInfoType18,
  mIB MasterInformationBlock,
  sB1 SysInfoTypeSB1,
  sB2 SysInfoTypeSB2
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SS_ActivationTime
$ASN1_TypeDefinition
CHOICE {
  activationCFN ActivationTime,
  activateNow NULL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SS_AddOrReconfMAC_dFlow
$Comment /* Applicable Rel-5 or later.
 */
$ASN1_TypeDefinition
SEQUENCE {
  mac_hs_AddReconfQueue_List SEQUENCE (SIZE(1..maxQueueIDs)) OF	SEQUENCE {
    mac_hs_AddReconfQueue SS_MAC_hs_AddReconfQueue } OPTIONAL,
  mac_hs_DelQueue_List SEQUENCE (SIZE(1..maxQueueIDs)) OF SEQUENCE {
    mac_hsQueueId INTEGER(0..7)
  } OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SS_DL_LogicalChannelMapping
$Comment /* If the macHeaderManipulation field is 'normalMacHeader', then data transmitted on this logical channel shall have an appropriate MAC header added before it is sent to lower layers for transmission. 
If the macHeaderManipulation field is 'OmitMacHeader', then data transmitted on this logical channel shall not have any MAC header information added, even if the logical channel type and mapping indicates that there should be a MAC header present. This allows the entire MAC PDU to be specified in the TTCN, so individual fields in the MAC header can be modified.
When used for logical channel to MAC_d flow mapping rlc_SizeList should choose RLC_SizeExplicitList. */
$ASN1_TypeDefinition
SEQUENCE {
  macHeaderManipulation MAC_HeaderManipulation,
  dl_TransportChannelType SS_DL_TransportChannelType,
  logicalChannelIdentity LogicalChannelIdentity,
  logicalChannelType LogicalChannelType ,
  rlc_SizeList CHOICE {
    allSizes NULL,
    configured NULL,
    explicitList RLC_SizeExplicitList
  },
  mac_LogicalChannelPriority MAC_LogicalChannelPriority OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SS_DL_RLC_Mode
$ASN1_TypeDefinition
SEQUENCE {
  dl_PayloadSize PayloadSize OPTIONAL,
  dl_RLCModeInfo UL_RLC_Mode
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SS_DL_TransportChannelType
$Comment /*  */
$ASN1_TypeDefinition
ENUMERATED {
  dch(0),
  fach(1),
  bch(2),
  pch(3),
  dsch(4),
  hsdsch(5) -- Rel-5 or later
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SS_IntegrityProtActivationTimeInfo
$Comment /* Omitting rrc_MessageSequenceNumber means activation time set to "now". */
$ASN1_TypeDefinition
SEQUENCE
{
  rb_Identity INTEGER (-31..32),
  rrc_MessageSequenceNumber RRC_MessageSequenceNumber OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SS_MAC_hs_AddReconfQueue
$Comment /* Applicable Rel-5 or later.
When writing TTCN constraints the TTCN writer shall set the priority of PriorityQueue in this object correctly acoording to the priority of logical channels which is mapped on to this priority queue. 
And please note that : the range of priority of PriorityQueue is from 0 to 7 and 0 is the lowest priority.
 */
$ASN1_TypeDefinition
SEQUENCE {
  mAChsAddReconfQueue MAC_hs_AddReconfQueue,
  logicalChannelList SEQUENCE OF LogicalChannelIdentity,
  -- logical channels mapping onto the priority queue
  -- which is specified in maChsAddReconfQueue
  priority INTEGER(0..7),
  discardTimer ENUMERATED { v20(0),v40(1),v60(2),v80(3),v100(4),
    v120(5),v140(6),v160(7),v180(8),v200(9),
    v250(10),v300(11),v400(12),v500(13),
    v750(14),v1000(15),v1250(16),v1500(17),
    v1750(18),v2000(19),v2500(20),v3000(21),
    v3500(22),v4000(23),v4500(24),v5000(25),
    v7500(26)
  } OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SS_RLC_Info
$Comment /*  */
$ASN1_TypeDefinition
SEQUENCE {
  sS_ul_RLC_Mode DL_RLC_Mode OPTIONAL,
  sS_dl_RLC_Mode SS_DL_RLC_Mode OPTIONAL,
  sS_ul_RLC_Mode_r5 DL_RLC_Mode_r5 OPTIONAL -- Rel-5 or later
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SS_UL_LogicalChannelMapping
$Comment /* If the macHeaderManipulation field is 'normalMacHeader', then data received on the transport channel supporting this logical channel shall have it's MAC header inspected to determine the appropriate routing, and removed as normal. The MAC SDU shall be passed to the appropriate logical channel. 
If the macHeaderManipulation field field is 'OmitMacHeader', then data received on the transport channel supporting this logical channel shall have it's MAC header inspected to determine the appropriate routing, but the MAC layer shall not remove the MAC header. Thus the entire MAC PDU shall be passed to the appropriate logical channel, and the MAC header can be checked by the TTCN. */
$ASN1_TypeDefinition
SEQUENCE {
  macHeaderManipulation MAC_HeaderManipulation,
  ul_TransportChannelType SS_UL_TransportChannelType,
  logicalChannelIdentity LogicalChannelIdentity,
  logicalChannelType LogicalChannelType
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SS_UL_TransportChannelType
$ASN1_TypeDefinition
ENUMERATED {
  dch(0),
  rach(1),
  cpch(2),
  usch(3)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SecondaryCCPCHInfo
$Comment /* The range for powerOffsetOfTFCI_PO1 and powerOffsetOfPILOT_PO3 is 0-6 dB, 0.25 dB per step. */
$ASN1_TypeDefinition
SEQUENCE {
  scramblingCode INTEGER(0..15),
  dl_ChannelizationCode SF256_AndCodeNumber,
  sCCPCHSlotFormat SCCPCHSlotFormat,
  timingOffset INTEGER (0..149),
  positionFixedOrFlexible PositionFixedOrFlexible,
  sttd_Indicator BOOLEAN,
  dl_TxPower DL_TxPower,
  powerOffsetOfTFCI_PO1 INTEGER (0..24),
  powerOffsetOfPILOT_PO3 INTEGER (0..24)
  -- timeSlot TimeSlot OPTIONAL,
  -- burstType BurstType OPTIONAL,
  -- midambleShift MidambleShift OPTIONAL,
  -- offset Offset OPTIONAL,
  -- repetitionPeriod RepetitionPeriod OPTIONAL,
  -- repetitionLength RepetitionLength OPTIONAL,
  -- tFCIPresence TFCIPresence OPTIONAL,
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SecondaryCPICHInfo
$ASN1_TypeDefinition
SEQUENCE {
  scramblingCode INTEGER(0..63),
  dl_ChannelizationCode SF512_AndCodeNumber,
  dl_TxPower DL_TxPower
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SecondarySCHInfo
$ASN1_TypeDefinition
SEQUENCE {
  tstdIndicator BOOLEAN,
  dl_TxPower DL_TxPower
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SecurityInfo
$Comment /* The integrityKey is not applicable to MAC */
$ASN1_TypeDefinition
SEQUENCE {
  cn_DomainIdentity CN_DomainIdentity,
  startValue START_Value OPTIONAL,
  cipheringKey BIT STRING (SIZE (128)) OPTIONAL,
  integrityKey BIT STRING (SIZE (128)) OPTIONAL,
  gsmCipheringKey BIT STRING (SIZE (64)) OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /* When the SS receives SecuritiyInfo, the SS first stores the contents. The SecurityInfo contents is not activated ion of the contents follows until receiving the subsequent ASP, CRLC_Ciphering_Activate_REQ, CMAC_Ciphering_Activate_REQ or CRLC_Integrity_Activate_REQ. Omitted fields of SecurityInfo shall not be affected by the subsequent ASP at the activation time.EXAMPLE:	Omitting of startValue indicates not to re-initialize the relevant 				COUNT?C or COUNT-I, omitting of cipheringKey indicates that the 				current ciphering key  is valid.. */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId SegmentsOfSysInfoBlock
$Comment /* The structure holding the segments of a MIB/SIB/SB, maximum number of segments is 16. */
$ASN1_TypeDefinition
SEQUENCE
{
  segCount INTEGER (1..16),
  seg1 BIT STRING (SIZE (1..226)),
  seg2 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg3 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg4 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg5 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg6 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg7 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg8 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg9 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg10 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg11 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg12 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg13 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg14 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg15 BIT STRING (SIZE (1..222)) OPTIONAL,
  seg16 BIT STRING (SIZE (1..222)) OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId Tcell
$Comment /* Timing offset between reference channel and this channel ( unit : 256 chips ) */
$ASN1_TypeDefinition
INTEGER (0..38399)
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId TrCHInfo
$Comment /* The same TFCS information should be provided to the PHY and MAC layers at all times. When a CMAC_Config_REQ is used to configure the MAC layer, a corresponding CPHY_TrCH_Config_REQ should be sent to the PHY layer to ensure that the configuration is consistent.
For MAC-hs configuration:
When ulconnectedTrCHList, ulTFCS, dlconnectedTrCHList and dlTFCS are omitted this ASP configures an MAC-hs entity.
 */
$ASN1_TypeDefinition
SEQUENCE
{
  ulconnectedTrCHList SEQUENCE (SIZE (1..maxulTrCH)) OF SEQUENCE {
    trchid TransportChannelIdentity,
    transportChannelInfo CommonOrDedicatedTFS
  } OPTIONAL,
  ulTFCS TFCS OPTIONAL,
  dlconnectedTrCHList SEQUENCE (SIZE (1..maxdlTrCH)) OF SEQUENCE {
    trchid TransportChannelIdentity,
    transportChannelInfo CommonOrDedicatedTFS
  } OPTIONAL,
  dlTFCS TFCS OPTIONAL,
  hsDSCHMacdFlows HS_DSCHMACdFlows OPTIONAL -- Rel-5 or later
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId TrCH_LogCHMappingList
$Comment /* maxLogCHperTrCH = 8 */
$ASN1_TypeDefinition
SEQUENCE (SIZE (1..maxLogCHperTrCH)) OF TrCH_LogicalChannelMapping
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId TrCH_LogCHMappingList1
$Comment /* maxulTrCH = maxdlTrCH = 16
 */
$ASN1_TypeDefinition
SEQUENCE
{
  ulconnectedTrCHList SEQUENCE (SIZE (1..maxulTrCH)) OF SEQUENCE {
    trchid TransportChannelIdentity,
    trCH_LogCHMappingList TrCH_LogCHMappingList} OPTIONAL,
  dlconnectedTrCHList SEQUENCE (SIZE (1..maxdlTrCH)) OF SEQUENCE {
    trchid TransportChannelIdentity,
    trCH_LogCHMappingList TrCH_LogCHMappingList} OPTIONAL,
  dlconnectedMACdFlows SEQUENCE (SIZE (1..8)) OF SEQUENCE {
    mac_dFlowId MAC_d_FlowIdentity,
    trCH_LogCHMappingList TrCH_LogCHMappingList
  } OPTIONAL -- Rel-5 or later
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId TrCH_LogicalChannelMapping
$Comment /* When used for logical channel to MAC_d flow mapping dl_LogicalChannelMapping shall be chosen, */
$ASN1_TypeDefinition
SEQUENCE {
  logicalChannel_Mapping CHOICE {
    ul_LogicalChannelMapping SS_UL_LogicalChannelMapping,
    dl_LogicalChannelMapping SS_DL_LogicalChannelMapping
  },
  rB_Identity INTEGER (-31..32) OPTIONAL,
  cn_DomainIdentity CN_DomainIdentity OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId TrChConfigType
$ASN1_TypeDefinition
CHOICE {
  nonDch NULL,
  dch ENUMERATED {normal(0), softHO(1)}} 
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId UE_Info
$Comment /* The value of c_RNTI_DSCH_RNTI is 16 bits, used either for C-RNTI or DSCH-RNTI. DSCH is configured if the physical channel in CMAC_config_REQ is a PDSCH. Otherwise, C-RNTI is applied. For MAC-hs configuration both u_RNTI and c_RNTI_DSCH_RNTI are omitted. */
$ASN1_TypeDefinition
SEQUENCE {
  u_RNTI U_RNTI OPTIONAL,
  c_RNTI C_RNTI OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$Begin_ASN1_TypeDef
$ASN1_TypeId UE_OperationMode
$ASN1_TypeDefinition
ENUMERATED { opModeA (0), opModeC (1) }
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_TypeDef
$End_ASN1_TypeDefs
$Begin_ASN1_TypeRefs
$ASN1_TypeRef
$ASN1_TypeId DL_DCCH_MessageType
$ASN1_TypeReference DL-DCCH-MessageType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_DCCH_MessageType
$ASN1_TypeReference UL-DCCH-MessageType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CCCH_MessageType
$ASN1_TypeReference DL-CCCH-MessageType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_CCCH_MessageType
$ASN1_TypeReference UL-CCCH-MessageType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PCCH_MessageType
$ASN1_TypeReference PCCH-MessageType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_SHCCH_MessageType
$ASN1_TypeReference DL-SHCCH-MessageType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_SHCCH_MessageType
$ASN1_TypeReference UL-SHCCH-MessageType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BCCH_FACH_MessageType
$ASN1_TypeReference BCCH-FACH-MessageType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ActiveSetUpdate
$ASN1_TypeReference ActiveSetUpdate
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ActiveSetUpdate_r3_IEs
$ASN1_TypeReference ActiveSetUpdate-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ActiveSetUpdate_v4b0ext_IEs
$ASN1_TypeReference ActiveSetUpdate-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ActiveSetUpdate_v590ext_IEs
$ASN1_TypeReference ActiveSetUpdate-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ActiveSetUpdateComplete
$ASN1_TypeReference ActiveSetUpdateComplete
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ActiveSetUpdateFailure
$ASN1_TypeReference ActiveSetUpdateFailure
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AssistanceDataDelivery
$ASN1_TypeReference AssistanceDataDelivery
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AssistanceDataDelivery_r3_IEs
$ASN1_TypeReference AssistanceDataDelivery-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AssistanceDataDelivery_v3a0ext
$ASN1_TypeReference AssistanceDataDelivery-v3a0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AssistanceDataDelivery_v4b0ext_IEs
$ASN1_TypeReference AssistanceDataDelivery-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellChangeOrderFromUTRAN
$ASN1_TypeReference CellChangeOrderFromUTRAN
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellChangeOrderFromUTRAN_r3_IEs
$ASN1_TypeReference CellChangeOrderFromUTRAN-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellChangeOrderFromUTRAN_v590ext_IEs
$ASN1_TypeReference CellChangeOrderFromUTRAN-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellChangeOrderFromUTRANFailure
$ASN1_TypeReference CellChangeOrderFromUTRANFailure
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellChangeOrderFromUTRANFailure_r3_IEs
$ASN1_TypeReference CellChangeOrderFromUTRANFailure-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellUpdate
$ASN1_TypeReference CellUpdate
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellUpdate_v590ext
$ASN1_TypeReference CellUpdate-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellUpdateConfirm
$ASN1_TypeReference CellUpdateConfirm
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellUpdateConfirm_r3_IEs
$ASN1_TypeReference CellUpdateConfirm-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellUpdateConfirm_v3a0ext
$ASN1_TypeReference CellUpdateConfirm-v3a0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellUpdateConfirm_v4b0ext_IEs
$ASN1_TypeReference CellUpdateConfirm-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellUpdateConfirm_v590ext_IEs
$ASN1_TypeReference CellUpdateConfirm-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellUpdateConfirm_r4_IEs
$ASN1_TypeReference CellUpdateConfirm-r4-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellUpdateConfirm_r5_IEs
$ASN1_TypeReference CellUpdateConfirm-r5-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellUpdateConfirm_CCCH
$ASN1_TypeReference CellUpdateConfirm-CCCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CounterCheck
$ASN1_TypeReference CounterCheck
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CounterCheck_r3_IEs
$ASN1_TypeReference CounterCheck-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CounterCheckResponse
$ASN1_TypeReference CounterCheckResponse
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DownlinkDirectTransfer
$ASN1_TypeReference DownlinkDirectTransfer
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DownlinkDirectTransfer_r3_IEs
$ASN1_TypeReference DownlinkDirectTransfer-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HandoverToUTRANComplete
$ASN1_TypeReference HandoverToUTRANComplete
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InitialDirectTransfer
$ASN1_TypeReference InitialDirectTransfer
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InitialDirectTransfer_v3a0ext
$ASN1_TypeReference InitialDirectTransfer-v3a0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InitialDirectTransfer_v590ext
$ASN1_TypeReference InitialDirectTransfer-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HandoverFromUTRANCommand_GSM
$ASN1_TypeReference HandoverFromUTRANCommand-GSM
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HandoverFromUTRANCommand_GSM_r3_IEs
$ASN1_TypeReference HandoverFromUTRANCommand-GSM-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HandoverFromUTRANCommand_GERANIu
$ASN1_TypeReference HandoverFromUTRANCommand-GERANIu
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HandoverFromUTRANCommand_GERANIu_r5_IEs
$ASN1_TypeReference HandoverFromUTRANCommand-GERANIu-r5-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HandoverFromUTRANCommand_CDMA2000
$ASN1_TypeReference HandoverFromUTRANCommand-CDMA2000
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HandoverFromUTRANCommand_CDMA2000_r3_IEs
$ASN1_TypeReference HandoverFromUTRANCommand-CDMA2000-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HandoverFromUTRANFailure
$ASN1_TypeReference HandoverFromUTRANFailure
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HandoverFromUtranFailure_v590ext_IEs
$ASN1_TypeReference HandoverFromUtranFailure-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementControl
$ASN1_TypeReference MeasurementControl
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementControl_r3_IEs
$ASN1_TypeReference MeasurementControl-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementControl_v390ext
$ASN1_TypeReference MeasurementControl-v390ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementControl_v3a0ext
$ASN1_TypeReference MeasurementControl-v3a0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementControl_r4_IEs
$ASN1_TypeReference MeasurementControl-r4-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementControl_v590ext_IEs
$ASN1_TypeReference MeasurementControl-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementControl_v5b0ext_IEs
$ASN1_TypeReference MeasurementControl-v5b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementControlFailure
$ASN1_TypeReference MeasurementControlFailure
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementControlFailure_v590ext_IEs
$ASN1_TypeReference MeasurementControlFailure-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementReport
$ASN1_TypeReference MeasurementReport
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementReport_v390ext
$ASN1_TypeReference MeasurementReport-v390ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementReport_v4b0ext_IEs
$ASN1_TypeReference MeasurementReport-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementReport_v590ext_IEs
$ASN1_TypeReference MeasurementReport-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementReport_v5b0ext_IEs
$ASN1_TypeReference MeasurementReport-v5b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PagingType1
$ASN1_TypeReference PagingType1
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PagingType1_v590ext_IEs
$ASN1_TypeReference PagingType1-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PagingType2
$ASN1_TypeReference PagingType2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalChannelReconfiguration
$ASN1_TypeReference PhysicalChannelReconfiguration
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalChannelReconfiguration_r3_IEs
$ASN1_TypeReference PhysicalChannelReconfiguration-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalChannelReconfiguration_v3a0ext
$ASN1_TypeReference PhysicalChannelReconfiguration-v3a0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalChannelReconfiguration_v4b0ext_IEs
$ASN1_TypeReference PhysicalChannelReconfiguration-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalChannelReconfiguration_v590ext_IEs
$ASN1_TypeReference PhysicalChannelReconfiguration-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalChannelReconfiguration_r4_IEs
$ASN1_TypeReference PhysicalChannelReconfiguration-r4-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalChannelReconfiguration_r5_IEs
$ASN1_TypeReference PhysicalChannelReconfiguration-r5-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalChannelReconfigurationComplete
$ASN1_TypeReference PhysicalChannelReconfigurationComplete
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalChannelReconfigurationFailure
$ASN1_TypeReference PhysicalChannelReconfigurationFailure
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalSharedChannelAllocation
$ASN1_TypeReference PhysicalSharedChannelAllocation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalSharedChannelAllocation_r3_IEs
$ASN1_TypeReference PhysicalSharedChannelAllocation-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalSharedChannelAllocation_r4_IEs
$ASN1_TypeReference PhysicalSharedChannelAllocation-r4-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCHCapacityRequest
$ASN1_TypeReference PUSCHCapacityRequest
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCHCapacityRequest_v590ext
$ASN1_TypeReference PUSCHCapacityRequest-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerReconfiguration
$ASN1_TypeReference RadioBearerReconfiguration
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerReconfiguration_r3_IEs
$ASN1_TypeReference RadioBearerReconfiguration-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerReconfiguration_v3a0ext
$ASN1_TypeReference RadioBearerReconfiguration-v3a0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerReconfiguration_v4b0ext_IEs
$ASN1_TypeReference RadioBearerReconfiguration-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerReconfiguration_v590ext_IEs
$ASN1_TypeReference RadioBearerReconfiguration-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerReconfiguration_r4_IEs
$ASN1_TypeReference RadioBearerReconfiguration-r4-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerReconfiguration_r5_IEs
$ASN1_TypeReference RadioBearerReconfiguration-r5-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerReconfigurationComplete
$ASN1_TypeReference RadioBearerReconfigurationComplete
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerReconfigurationFailure
$ASN1_TypeReference RadioBearerReconfigurationFailure
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerRelease
$ASN1_TypeReference RadioBearerRelease
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerRelease_r3_IEs
$ASN1_TypeReference RadioBearerRelease-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerRelease_v3a0ext
$ASN1_TypeReference RadioBearerRelease-v3a0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerRelease_v4b0ext_IEs
$ASN1_TypeReference RadioBearerRelease-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerRelease_v590ext_IEs
$ASN1_TypeReference RadioBearerRelease-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerRelease_r4_IEs
$ASN1_TypeReference RadioBearerRelease-r4-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerRelease_r5_IEs
$ASN1_TypeReference RadioBearerRelease-r5-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerReleaseComplete
$ASN1_TypeReference RadioBearerReleaseComplete
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerReleaseFailure
$ASN1_TypeReference RadioBearerReleaseFailure
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerSetup
$ASN1_TypeReference RadioBearerSetup
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerSetup_r3_IEs
$ASN1_TypeReference RadioBearerSetup-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerSetup_v3a0ext
$ASN1_TypeReference RadioBearerSetup-v3a0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerSetup_v4b0ext_IEs
$ASN1_TypeReference RadioBearerSetup-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerSetup_v590ext_IEs
$ASN1_TypeReference RadioBearerSetup-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerSetup_r4_IEs
$ASN1_TypeReference RadioBearerSetup-r4-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerSetup_r5_IEs
$ASN1_TypeReference RadioBearerSetup-r5-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerSetupComplete
$ASN1_TypeReference RadioBearerSetupComplete
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioBearerSetupFailure
$ASN1_TypeReference RadioBearerSetupFailure
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionReject
$ASN1_TypeReference RRCConnectionReject
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionReject_r3_IEs
$ASN1_TypeReference RRCConnectionReject-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionRelease
$ASN1_TypeReference RRCConnectionRelease
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionRelease_r3_IEs
$ASN1_TypeReference RRCConnectionRelease-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionRelease_r4_IEs
$ASN1_TypeReference RRCConnectionRelease-r4-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionRelease_CCCH
$ASN1_TypeReference RRCConnectionRelease-CCCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionRelease_CCCH_r3_IEs
$ASN1_TypeReference RRCConnectionRelease-CCCH-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionRelease_CCCH_r4_IEs
$ASN1_TypeReference RRCConnectionRelease-CCCH-r4-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionRelease_CCCH_r5_IEs
$ASN1_TypeReference RRCConnectionRelease-CCCH-r5-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionReleaseComplete
$ASN1_TypeReference RRCConnectionReleaseComplete
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionRequest
$ASN1_TypeReference RRCConnectionRequest
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionRequest_v3d0ext_IEs
$ASN1_TypeReference RRCConnectionRequest-v3d0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionRequest_v4b0ext_IEs
$ASN1_TypeReference RRCConnectionRequest-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionRequest_v590ext_IEs
$ASN1_TypeReference RRCConnectionRequest-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetup
$ASN1_TypeReference RRCConnectionSetup
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetup_r3_IEs
$ASN1_TypeReference RRCConnectionSetup-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetup_v4b0ext_IEs
$ASN1_TypeReference RRCConnectionSetup-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetup_v590ext_IEs
$ASN1_TypeReference RRCConnectionSetup-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetup_r4_IEs
$ASN1_TypeReference RRCConnectionSetup-r4-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetup_r5_IEs
$ASN1_TypeReference RRCConnectionSetup-r5-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetupComplete
$ASN1_TypeReference RRCConnectionSetupComplete
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetupComplete_v370ext
$ASN1_TypeReference RRCConnectionSetupComplete-v370ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetupComplete_v380ext_IEs
$ASN1_TypeReference RRCConnectionSetupComplete-v380ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetupComplete_v3a0ext_IEs
$ASN1_TypeReference RRCConnectionSetupComplete-v3a0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetupComplete_v3g0ext_IEs
$ASN1_TypeReference RRCConnectionSetupComplete-v3g0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetupComplete_v4b0ext_IEs
$ASN1_TypeReference RRCConnectionSetupComplete-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCConnectionSetupComplete_v590ext_IEs
$ASN1_TypeReference RRCConnectionSetupComplete-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRCStatus
$ASN1_TypeReference RRCStatus
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SecurityModeCommand
$ASN1_TypeReference SecurityModeCommand
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SecurityModeCommand_r3_IEs
$ASN1_TypeReference SecurityModeCommand-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SecurityModeComplete
$ASN1_TypeReference SecurityModeComplete
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SecurityModeFailure
$ASN1_TypeReference SecurityModeFailure
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SignallingConnectionRelease
$ASN1_TypeReference SignallingConnectionRelease
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SignallingConnectionRelease_r3_IEs
$ASN1_TypeReference SignallingConnectionRelease-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SignallingConnectionReleaseIndication
$ASN1_TypeReference SignallingConnectionReleaseIndication
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SystemInformation_BCH
$ASN1_TypeReference SystemInformation-BCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SystemInformation_FACH
$ASN1_TypeReference SystemInformation-FACH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FirstSegment
$ASN1_TypeReference FirstSegment
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FirstSegmentShort
$ASN1_TypeReference FirstSegmentShort
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SubsequentSegment
$ASN1_TypeReference SubsequentSegment
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId LastSegment
$ASN1_TypeReference LastSegment
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId LastSegmentShort
$ASN1_TypeReference LastSegmentShort
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CompleteSIB_List
$ASN1_TypeReference CompleteSIB-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CompleteSIB
$ASN1_TypeReference CompleteSIB
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CompleteSIBshort
$ASN1_TypeReference CompleteSIBshort
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SystemInformationChangeIndication
$ASN1_TypeReference SystemInformationChangeIndication
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportChannelReconfiguration
$ASN1_TypeReference TransportChannelReconfiguration
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportChannelReconfiguration_r3_IEs
$ASN1_TypeReference TransportChannelReconfiguration-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportChannelReconfiguration_v3a0ext
$ASN1_TypeReference TransportChannelReconfiguration-v3a0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportChannelReconfiguration_v4b0ext_IEs
$ASN1_TypeReference TransportChannelReconfiguration-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportChannelReconfiguration_v590ext_IEs
$ASN1_TypeReference TransportChannelReconfiguration-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportChannelReconfiguration_r4_IEs
$ASN1_TypeReference TransportChannelReconfiguration-r4-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportChannelReconfiguration_r5_IEs
$ASN1_TypeReference TransportChannelReconfiguration-r5-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportChannelReconfigurationComplete
$ASN1_TypeReference TransportChannelReconfigurationComplete
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportChannelReconfigurationFailure
$ASN1_TypeReference TransportChannelReconfigurationFailure
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportFormatCombinationControl
$ASN1_TypeReference TransportFormatCombinationControl
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportFormatCombinationControlFailure
$ASN1_TypeReference TransportFormatCombinationControlFailure
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UECapabilityEnquiry
$ASN1_TypeReference UECapabilityEnquiry
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UECapabilityEnquiry_r3_IEs
$ASN1_TypeReference UECapabilityEnquiry-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UECapabilityEnquiry_v4b0ext_IEs
$ASN1_TypeReference UECapabilityEnquiry-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UECapabilityEnquiry_v590ext_IEs
$ASN1_TypeReference UECapabilityEnquiry-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UECapabilityInformation
$ASN1_TypeReference UECapabilityInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UECapabilityInformation_v370ext
$ASN1_TypeReference UECapabilityInformation-v370ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UECapabilityInformation_v380ext_IEs
$ASN1_TypeReference UECapabilityInformation-v380ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UECapabilityInformation_v3a0ext_IEs
$ASN1_TypeReference UECapabilityInformation-v3a0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UECapabilityInformation_v4b0ext
$ASN1_TypeReference UECapabilityInformation-v4b0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UECapabilityInformation_v590ext
$ASN1_TypeReference UECapabilityInformation-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UECapabilityInformationConfirm
$ASN1_TypeReference UECapabilityInformationConfirm
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UECapabilityInformationConfirm_r3_IEs
$ASN1_TypeReference UECapabilityInformationConfirm-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UplinkDirectTransfer
$ASN1_TypeReference UplinkDirectTransfer
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UplinkPhysicalChannelControl
$ASN1_TypeReference UplinkPhysicalChannelControl
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UplinkPhysicalChannelControl_r3_IEs
$ASN1_TypeReference UplinkPhysicalChannelControl-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UplinkPhysicalChannelControl_v4b0ext_IEs
$ASN1_TypeReference UplinkPhysicalChannelControl-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UplinkPhysicalChannelControl_r4_IEs
$ASN1_TypeReference UplinkPhysicalChannelControl-r4-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UplinkPhysicalChannelControl_r5_IEs
$ASN1_TypeReference UplinkPhysicalChannelControl-r5-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId URAUpdate
$ASN1_TypeReference URAUpdate
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId URAUpdateConfirm
$ASN1_TypeReference URAUpdateConfirm
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId URAUpdateConfirm_r3_IEs
$ASN1_TypeReference URAUpdateConfirm-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId URAUpdateConfirm_r5_IEs
$ASN1_TypeReference URAUpdateConfirm-r5-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId URAUpdateConfirm_CCCH
$ASN1_TypeReference URAUpdateConfirm-CCCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId URAUpdateConfirm_CCCH_r3_IEs
$ASN1_TypeReference URAUpdateConfirm-CCCH-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UTRANMobilityInformation
$ASN1_TypeReference UTRANMobilityInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UTRANMobilityInformation_r3_IEs
$ASN1_TypeReference UTRANMobilityInformation-r3-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UTRANMobilityInformation_v3a0ext_IEs
$ASN1_TypeReference UTRANMobilityInformation-v3a0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UTRANMobilityInformation_r5_IEs
$ASN1_TypeReference UTRANMobilityInformation-r5-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UTRANMobilityInformationConfirm
$ASN1_TypeReference UTRANMobilityInformationConfirm
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UTRANMobilityInformationFailure
$ASN1_TypeReference UTRANMobilityInformationFailure
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Ansi_41_IDNNS
$ASN1_TypeReference Ansi-41-IDNNS
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CN_DomainIdentity
$ASN1_TypeReference CN-DomainIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CN_DomainInformation
$ASN1_TypeReference CN-DomainInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CN_DomainInformationFull
$ASN1_TypeReference CN-DomainInformationFull
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CN_DomainInformationList
$ASN1_TypeReference CN-DomainInformationList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CN_DomainInformationListFull
$ASN1_TypeReference CN-DomainInformationListFull
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CN_DomainSysInfo
$ASN1_TypeReference CN-DomainSysInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CN_DomainSysInfoList
$ASN1_TypeReference CN-DomainSysInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CN_InformationInfo
$ASN1_TypeReference CN-InformationInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CN_InformationInfoFull
$ASN1_TypeReference CN-InformationInfoFull
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Digit
$ASN1_TypeReference Digit
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Gsm_map_IDNNS
$ASN1_TypeReference Gsm-map-IDNNS
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IMEI
$ASN1_TypeReference IMEI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IMEI_Digit
$ASN1_TypeReference IMEI-Digit
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IMSI_GSM_MAP
$ASN1_TypeReference IMSI-GSM-MAP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraDomainNasNodeSelector
$ASN1_TypeReference IntraDomainNasNodeSelector
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId LAI
$ASN1_TypeReference LAI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MCC
$ASN1_TypeReference MCC
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MNC
$ASN1_TypeReference MNC
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NAS_Message
$ASN1_TypeReference NAS-Message
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NAS_Synchronisation_Indicator
$ASN1_TypeReference NAS-Synchronisation-Indicator
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NAS_SystemInformationGSM_MAP
$ASN1_TypeReference NAS-SystemInformationGSM-MAP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId P_TMSI_GSM_MAP
$ASN1_TypeReference P-TMSI-GSM-MAP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PagingRecordTypeID
$ASN1_TypeReference PagingRecordTypeID
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PLMN_Identity
$ASN1_TypeReference PLMN-Identity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PLMN_Type
$ASN1_TypeReference PLMN-Type
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAB_Identity
$ASN1_TypeReference RAB-Identity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAI
$ASN1_TypeReference RAI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RoutingAreaCode
$ASN1_TypeReference RoutingAreaCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RoutingParameter
$ASN1_TypeReference RoutingParameter
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TMSI_GSM_MAP
$ASN1_TypeReference TMSI-GSM-MAP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AccessClassBarred
$ASN1_TypeReference AccessClassBarred
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AccessClassBarredList
$ASN1_TypeReference AccessClassBarredList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AllowedIndicator
$ASN1_TypeReference AllowedIndicator
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellAccessRestriction
$ASN1_TypeReference CellAccessRestriction
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellBarred
$ASN1_TypeReference CellBarred
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellIdentity
$ASN1_TypeReference CellIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellIdentity_PerRL_List
$ASN1_TypeReference CellIdentity-PerRL-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellSelectReselectInfoSIB_3_4
$ASN1_TypeReference CellSelectReselectInfoSIB-3-4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MapParameter
$ASN1_TypeReference MapParameter
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Mapping
$ASN1_TypeReference Mapping
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Mapping_LCR_r4
$ASN1_TypeReference Mapping-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MappingFunctionParameter
$ASN1_TypeReference MappingFunctionParameter
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MappingFunctionParameterList
$ASN1_TypeReference MappingFunctionParameterList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MappingFunctionType
$ASN1_TypeReference MappingFunctionType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MappingInfo
$ASN1_TypeReference MappingInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Q_Hyst_S
$ASN1_TypeReference Q-Hyst-S
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Q_Hyst_S_Fine
$ASN1_TypeReference Q-Hyst-S-Fine
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAT
$ASN1_TypeReference RAT
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAT_FDD_Info
$ASN1_TypeReference RAT-FDD-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAT_FDD_InfoList
$ASN1_TypeReference RAT-FDD-InfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAT_Identifier
$ASN1_TypeReference RAT-Identifier
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAT_TDD_Info
$ASN1_TypeReference RAT-TDD-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAT_TDD_InfoList
$ASN1_TypeReference RAT-TDD-InfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReservedIndicator
$ASN1_TypeReference ReservedIndicator
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId S_SearchQual
$ASN1_TypeReference S-SearchQual
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId S_SearchRXLEV
$ASN1_TypeReference S-SearchRXLEV
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_Barred
$ASN1_TypeReference T-Barred
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_Reselection_S
$ASN1_TypeReference T-Reselection-S
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_Reselection_S_Fine
$ASN1_TypeReference T-Reselection-S-Fine
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UpperLimit
$ASN1_TypeReference UpperLimit
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId URA_Identity
$ASN1_TypeReference URA-Identity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId URA_IdentityList
$ASN1_TypeReference URA-IdentityList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AccessStratumReleaseIndicator
$ASN1_TypeReference AccessStratumReleaseIndicator
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ActivationTime
$ASN1_TypeReference ActivationTime
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BackoffControlParams
$ASN1_TypeReference BackoffControlParams
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId C_RNTI
$ASN1_TypeReference C-RNTI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CapabilityUpdateRequirement
$ASN1_TypeReference CapabilityUpdateRequirement
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CapabilityUpdateRequirement_r4_ext
$ASN1_TypeReference CapabilityUpdateRequirement-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CapabilityUpdateRequirement_r4
$ASN1_TypeReference CapabilityUpdateRequirement-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellUpdateCause
$ASN1_TypeReference CellUpdateCause
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ChipRateCapability
$ASN1_TypeReference ChipRateCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CipheringAlgorithm
$ASN1_TypeReference CipheringAlgorithm
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CipheringModeCommand
$ASN1_TypeReference CipheringModeCommand
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CipheringModeInfo
$ASN1_TypeReference CipheringModeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CN_DRX_CycleLengthCoefficient
$ASN1_TypeReference CN-DRX-CycleLengthCoefficient
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CN_PagedUE_Identity
$ASN1_TypeReference CN-PagedUE-Identity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CompressedModeMeasCapability
$ASN1_TypeReference CompressedModeMeasCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CompressedModeMeasCapability_LCR_r4
$ASN1_TypeReference CompressedModeMeasCapability-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CompressedModeMeasCapabFDDList
$ASN1_TypeReference CompressedModeMeasCapabFDDList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CompressedModeMeasCapabFDD
$ASN1_TypeReference CompressedModeMeasCapabFDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CompressedModeMeasCapabTDDList
$ASN1_TypeReference CompressedModeMeasCapabTDDList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CompressedModeMeasCapabTDD
$ASN1_TypeReference CompressedModeMeasCapabTDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CompressedModeMeasCapabGSMList
$ASN1_TypeReference CompressedModeMeasCapabGSMList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CompressedModeMeasCapabGSM
$ASN1_TypeReference CompressedModeMeasCapabGSM
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CompressedModeMeasCapabMC
$ASN1_TypeReference CompressedModeMeasCapabMC
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CPCH_Parameters
$ASN1_TypeReference CPCH-Parameters
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CapabilityWithSimultaneousHS_DSCHConfig
$ASN1_TypeReference DL-CapabilityWithSimultaneousHS-DSCHConfig
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_DPCCH_BER
$ASN1_TypeReference DL-DPCCH-BER
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_PhysChCapabilityFDD
$ASN1_TypeReference DL-PhysChCapabilityFDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_PhysChCapabilityFDD_v380ext
$ASN1_TypeReference DL-PhysChCapabilityFDD-v380ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SupportOfDedicatedPilotsForChEstimation
$ASN1_TypeReference SupportOfDedicatedPilotsForChEstimation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_PhysChCapabilityTDD
$ASN1_TypeReference DL-PhysChCapabilityTDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_PhysChCapabilityTDD_LCR_r4
$ASN1_TypeReference DL-PhysChCapabilityTDD-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TransChCapability
$ASN1_TypeReference DL-TransChCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DRAC_SysInfo
$ASN1_TypeReference DRAC-SysInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DRAC_SysInfoList
$ASN1_TypeReference DRAC-SysInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DSCH_RNTI
$ASN1_TypeReference DSCH-RNTI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ESN_DS_41
$ASN1_TypeReference ESN-DS-41
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId EstablishmentCause
$ASN1_TypeReference EstablishmentCause
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FailureCauseWithProtErr
$ASN1_TypeReference FailureCauseWithProtErr
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FailureCauseWithProtErrTrId
$ASN1_TypeReference FailureCauseWithProtErrTrId
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GroupIdentityWithReleaseInformation
$ASN1_TypeReference GroupIdentityWithReleaseInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GroupReleaseInformation
$ASN1_TypeReference GroupReleaseInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GSM_Measurements
$ASN1_TypeReference GSM-Measurements
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId H_RNTI
$ASN1_TypeReference H-RNTI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HSDSCH_physical_layer_category
$ASN1_TypeReference HSDSCH-physical-layer-category
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UESpecificBehaviourInformation1idle
$ASN1_TypeReference UESpecificBehaviourInformation1idle
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IMSI_and_ESN_DS_41
$ASN1_TypeReference IMSI-and-ESN-DS-41
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IMSI_DS_41
$ASN1_TypeReference IMSI-DS-41
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InitialPriorityDelayList
$ASN1_TypeReference InitialPriorityDelayList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InitialUE_Identity
$ASN1_TypeReference InitialUE-Identity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntegrityCheckInfo
$ASN1_TypeReference IntegrityCheckInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntegrityProtActivationInfo
$ASN1_TypeReference IntegrityProtActivationInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntegrityProtectionAlgorithm
$ASN1_TypeReference IntegrityProtectionAlgorithm
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntegrityProtectionModeCommand
$ASN1_TypeReference IntegrityProtectionModeCommand
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntegrityProtectionModeInfo
$ASN1_TypeReference IntegrityProtectionModeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntegrityProtInitNumber
$ASN1_TypeReference IntegrityProtInitNumber
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxHcContextSpace
$ASN1_TypeReference MaxHcContextSpace
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxHcContextSpace_r5_ext
$ASN1_TypeReference MaxHcContextSpace-r5-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxROHC_ContextSessions_r4
$ASN1_TypeReference MaxROHC-ContextSessions-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaximumAM_EntityNumberRLC_Cap
$ASN1_TypeReference MaximumAM-EntityNumberRLC-Cap
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaximumBitRate
$ASN1_TypeReference MaximumBitRate
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaximumRLC_WindowSize
$ASN1_TypeReference MaximumRLC-WindowSize
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxNoDPDCH_BitsTransmitted
$ASN1_TypeReference MaxNoDPDCH-BitsTransmitted
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxNoBits
$ASN1_TypeReference MaxNoBits
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxNoPhysChBitsReceived
$ASN1_TypeReference MaxNoPhysChBitsReceived
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxNoSCCPCH_RL
$ASN1_TypeReference MaxNoSCCPCH-RL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxNumberOfTF
$ASN1_TypeReference MaxNumberOfTF
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxNumberOfTFC_DL
$ASN1_TypeReference MaxNumberOfTFC-DL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxNumberOfTFC_UL
$ASN1_TypeReference MaxNumberOfTFC-UL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxPhysChPerFrame
$ASN1_TypeReference MaxPhysChPerFrame
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxPhysChPerSubFrame_r4
$ASN1_TypeReference MaxPhysChPerSubFrame-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxPhysChPerTimeslot
$ASN1_TypeReference MaxPhysChPerTimeslot
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxPhysChPerTS
$ASN1_TypeReference MaxPhysChPerTS
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxSimultaneousCCTrCH_Count
$ASN1_TypeReference MaxSimultaneousCCTrCH-Count
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxSimultaneousTransChsDL
$ASN1_TypeReference MaxSimultaneousTransChsDL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxSimultaneousTransChsUL
$ASN1_TypeReference MaxSimultaneousTransChsUL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxTransportBlocksDL
$ASN1_TypeReference MaxTransportBlocksDL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxTransportBlocksUL
$ASN1_TypeReference MaxTransportBlocksUL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxTS_PerFrame
$ASN1_TypeReference MaxTS-PerFrame
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxTS_PerSubFrame_r4
$ASN1_TypeReference MaxTS-PerSubFrame-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementCapability
$ASN1_TypeReference MeasurementCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementCapabilityExt
$ASN1_TypeReference MeasurementCapabilityExt
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementCapability_r4_ext
$ASN1_TypeReference MeasurementCapability-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MessageAuthenticationCode
$ASN1_TypeReference MessageAuthenticationCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MinimumSF_DL
$ASN1_TypeReference MinimumSF-DL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MinimumSF_UL
$ASN1_TypeReference MinimumSF-UL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MultiModeCapability
$ASN1_TypeReference MultiModeCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MultiRAT_Capability
$ASN1_TypeReference MultiRAT-Capability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MultiModeRAT_Capability_v590ext
$ASN1_TypeReference MultiModeRAT-Capability-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_300
$ASN1_TypeReference N-300
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_301
$ASN1_TypeReference N-301
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_302
$ASN1_TypeReference N-302
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_304
$ASN1_TypeReference N-304
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_308
$ASN1_TypeReference N-308
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_310
$ASN1_TypeReference N-310
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_312
$ASN1_TypeReference N-312
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_312ext
$ASN1_TypeReference N-312ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_312_r5
$ASN1_TypeReference N-312-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_313
$ASN1_TypeReference N-313
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_315
$ASN1_TypeReference N-315
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_315ext
$ASN1_TypeReference N-315ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_315_r5
$ASN1_TypeReference N-315-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_AccessFails
$ASN1_TypeReference N-AccessFails
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_AP_RetransMax
$ASN1_TypeReference N-AP-RetransMax
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NetworkAssistedGPS_Supported
$ASN1_TypeReference NetworkAssistedGPS-Supported
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NF_BO_AllBusy
$ASN1_TypeReference NF-BO-AllBusy
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NF_BO_NoAICH
$ASN1_TypeReference NF-BO-NoAICH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NF_BO_Mismatch
$ASN1_TypeReference NF-BO-Mismatch
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NS_BO_Busy
$ASN1_TypeReference NS-BO-Busy
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NS_IP
$ASN1_TypeReference NS-IP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId P_TMSI_and_RAI_GSM_MAP
$ASN1_TypeReference P-TMSI-and-RAI-GSM-MAP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PagingCause
$ASN1_TypeReference PagingCause
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PagingRecord
$ASN1_TypeReference PagingRecord
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PagingRecord2_r5
$ASN1_TypeReference PagingRecord2-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PagingRecordList
$ASN1_TypeReference PagingRecordList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PagingRecord2List_r5
$ASN1_TypeReference PagingRecord2List-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDCP_Capability
$ASN1_TypeReference PDCP-Capability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDCP_Capability_r4_ext
$ASN1_TypeReference PDCP-Capability-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDCP_Capability_r5_ext
$ASN1_TypeReference PDCP-Capability-r5-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalChannelCapability
$ASN1_TypeReference PhysicalChannelCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalChannelCapability_LCR_r4
$ASN1_TypeReference PhysicalChannelCapability-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PhysicalChannelCapability_hspdsch_r5
$ASN1_TypeReference PhysicalChannelCapability-hspdsch-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PNBSCH_Allocation_r4
$ASN1_TypeReference PNBSCH-Allocation-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ProtocolErrorCause
$ASN1_TypeReference ProtocolErrorCause
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ProtocolErrorIndicator
$ASN1_TypeReference ProtocolErrorIndicator
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ProtocolErrorIndicatorWithMoreInfo
$ASN1_TypeReference ProtocolErrorIndicatorWithMoreInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ProtocolErrorMoreInformation
$ASN1_TypeReference ProtocolErrorMoreInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioFrequencyBandFDD
$ASN1_TypeReference RadioFrequencyBandFDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioFrequencyBandTDDList
$ASN1_TypeReference RadioFrequencyBandTDDList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioFrequencyBandTDD
$ASN1_TypeReference RadioFrequencyBandTDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RadioFrequencyBandGSM
$ASN1_TypeReference RadioFrequencyBandGSM
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Rb_timer_indicator
$ASN1_TypeReference Rb-timer-indicator
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Re_EstablishmentTimer
$ASN1_TypeReference Re-EstablishmentTimer
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RedirectionInfo
$ASN1_TypeReference RedirectionInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RejectionCause
$ASN1_TypeReference RejectionCause
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReleaseCause
$ASN1_TypeReference ReleaseCause
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RF_Capability
$ASN1_TypeReference RF-Capability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RF_Capability_r4_ext
$ASN1_TypeReference RF-Capability-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RLC_Capability
$ASN1_TypeReference RLC-Capability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RLC_Capability_r5_ext
$ASN1_TypeReference RLC-Capability-r5-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRC_ConnectionReleaseInformation
$ASN1_TypeReference RRC-ConnectionReleaseInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRC_MessageSequenceNumber
$ASN1_TypeReference RRC-MessageSequenceNumber
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRC_MessageSequenceNumberList
$ASN1_TypeReference RRC-MessageSequenceNumberList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRC_StateIndicator
$ASN1_TypeReference RRC-StateIndicator
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRC_TransactionIdentifier
$ASN1_TypeReference RRC-TransactionIdentifier
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId S_RNTI
$ASN1_TypeReference S-RNTI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SecurityCapability
$ASN1_TypeReference SecurityCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SimultaneousSCCPCH_DPCH_Reception
$ASN1_TypeReference SimultaneousSCCPCH-DPCH-Reception
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SRNC_Identity
$ASN1_TypeReference SRNC-Identity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId START_Value
$ASN1_TypeReference START-Value
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId STARTList
$ASN1_TypeReference STARTList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId STARTSingle
$ASN1_TypeReference STARTSingle
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CapabilityUpdateRequirement_r5
$ASN1_TypeReference CapabilityUpdateRequirement-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SystemSpecificCapUpdateReq
$ASN1_TypeReference SystemSpecificCapUpdateReq
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SystemSpecificCapUpdateReq_v590ext
$ASN1_TypeReference SystemSpecificCapUpdateReq-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SystemSpecificCapUpdateReq_r5
$ASN1_TypeReference SystemSpecificCapUpdateReq-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SystemSpecificCapUpdateReqList
$ASN1_TypeReference SystemSpecificCapUpdateReqList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SystemSpecificCapUpdateReqList_r5
$ASN1_TypeReference SystemSpecificCapUpdateReqList-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_300
$ASN1_TypeReference T-300
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_301
$ASN1_TypeReference T-301
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_302
$ASN1_TypeReference T-302
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_304
$ASN1_TypeReference T-304
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_305
$ASN1_TypeReference T-305
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_307
$ASN1_TypeReference T-307
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_308
$ASN1_TypeReference T-308
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_309
$ASN1_TypeReference T-309
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_310
$ASN1_TypeReference T-310
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_311
$ASN1_TypeReference T-311
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_312
$ASN1_TypeReference T-312
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_313
$ASN1_TypeReference T-313
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_314
$ASN1_TypeReference T-314
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_315
$ASN1_TypeReference T-315
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_316
$ASN1_TypeReference T-316
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_317
$ASN1_TypeReference T-317
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_CPCH
$ASN1_TypeReference T-CPCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TMSI_and_LAI_GSM_MAP
$ASN1_TypeReference TMSI-and-LAI-GSM-MAP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TMSI_DS_41
$ASN1_TypeReference TMSI-DS-41
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TotalRLC_AM_BufferSize
$ASN1_TypeReference TotalRLC-AM-BufferSize
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TotalRLC_AM_BufferSize_r5_ext
$ASN1_TypeReference TotalRLC-AM-BufferSize-r5-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransmissionProbability
$ASN1_TypeReference TransmissionProbability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportChannelCapability
$ASN1_TypeReference TransportChannelCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TurboSupport
$ASN1_TypeReference TurboSupport
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TxRxFrequencySeparation
$ASN1_TypeReference TxRxFrequencySeparation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId U_RNTI
$ASN1_TypeReference U-RNTI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId U_RNTI_Group
$ASN1_TypeReference U-RNTI-Group
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_ConnTimersAndConstants
$ASN1_TypeReference UE-ConnTimersAndConstants
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_ConnTimersAndConstants_v3a0ext
$ASN1_TypeReference UE-ConnTimersAndConstants-v3a0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_ConnTimersAndConstants_r5
$ASN1_TypeReference UE-ConnTimersAndConstants-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_IdleTimersAndConstants
$ASN1_TypeReference UE-IdleTimersAndConstants
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_IdleTimersAndConstants_v3a0ext
$ASN1_TypeReference UE-IdleTimersAndConstants-v3a0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_MultiModeRAT_Capability
$ASN1_TypeReference UE-MultiModeRAT-Capability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_PowerClass
$ASN1_TypeReference UE-PowerClass
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_PowerClassExt
$ASN1_TypeReference UE-PowerClassExt
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RadioAccessCapability
$ASN1_TypeReference UE-RadioAccessCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RadioAccessCapability_v370ext
$ASN1_TypeReference UE-RadioAccessCapability-v370ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RadioAccessCapability_v380ext
$ASN1_TypeReference UE-RadioAccessCapability-v380ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RadioAccessCapability_v3a0ext
$ASN1_TypeReference UE-RadioAccessCapability-v3a0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RadioAccessCapability_v3g0ext
$ASN1_TypeReference UE-RadioAccessCapability-v3g0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_PositioningCapabilityExt_v380
$ASN1_TypeReference UE-PositioningCapabilityExt-v380
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_PositioningCapabilityExt_v3a0
$ASN1_TypeReference UE-PositioningCapabilityExt-v3a0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_PositioningCapabilityExt_v3g0
$ASN1_TypeReference UE-PositioningCapabilityExt-v3g0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RadioAccessCapabBandFDDList
$ASN1_TypeReference UE-RadioAccessCapabBandFDDList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RadioAccessCapabBandFDD
$ASN1_TypeReference UE-RadioAccessCapabBandFDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RadioAccessCapability_v4b0ext
$ASN1_TypeReference UE-RadioAccessCapability-v4b0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RadioAccessCapability_v590ext
$ASN1_TypeReference UE-RadioAccessCapability-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_PhysChCapabilityFDD
$ASN1_TypeReference UL-PhysChCapabilityFDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_PhysChCapabilityTDD
$ASN1_TypeReference UL-PhysChCapabilityTDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_PhysChCapabilityTDD_LCR_r4
$ASN1_TypeReference UL-PhysChCapabilityTDD-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_TransChCapability
$ASN1_TypeReference UL-TransChCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_Capability
$ASN1_TypeReference UE-Positioning-Capability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId URA_UpdateCause
$ASN1_TypeReference URA-UpdateCause
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UTRAN_DRX_CycleLengthCoefficient
$ASN1_TypeReference UTRAN-DRX-CycleLengthCoefficient
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId WaitTime
$ASN1_TypeReference WaitTime
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AlgorithmSpecificInfo
$ASN1_TypeReference AlgorithmSpecificInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AlgorithmSpecificInfo_r4
$ASN1_TypeReference AlgorithmSpecificInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CID_InclusionInfo_r4
$ASN1_TypeReference CID-InclusionInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId COUNT_C
$ASN1_TypeReference COUNT-C
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId COUNT_C_MSB
$ASN1_TypeReference COUNT-C-MSB
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DefaultConfigIdentity_r5
$ASN1_TypeReference DefaultConfigIdentity-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DefaultConfigMode
$ASN1_TypeReference DefaultConfigMode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_AM_RLC_Mode
$ASN1_TypeReference DL-AM-RLC-Mode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_AM_RLC_Mode_r5
$ASN1_TypeReference DL-AM-RLC-Mode-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CounterSynchronisationInfo
$ASN1_TypeReference DL-CounterSynchronisationInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CounterSynchronisationInfo_r5
$ASN1_TypeReference DL-CounterSynchronisationInfo-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_LogicalChannelMapping
$ASN1_TypeReference DL-LogicalChannelMapping
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_LogicalChannelMapping_r5
$ASN1_TypeReference DL-LogicalChannelMapping-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_LogicalChannelMappingList
$ASN1_TypeReference DL-LogicalChannelMappingList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_LogicalChannelMappingList_r5
$ASN1_TypeReference DL-LogicalChannelMappingList-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_RFC3095_r4
$ASN1_TypeReference DL-RFC3095-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_RLC_Mode
$ASN1_TypeReference DL-RLC-Mode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_RLC_Mode_r5
$ASN1_TypeReference DL-RLC-Mode-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_RLC_StatusInfo
$ASN1_TypeReference DL-RLC-StatusInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TM_RLC_Mode
$ASN1_TypeReference DL-TM-RLC-Mode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TransportChannelType
$ASN1_TypeReference DL-TransportChannelType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TransportChannelType_r5
$ASN1_TypeReference DL-TransportChannelType-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_UM_RLC_LI_size
$ASN1_TypeReference DL-UM-RLC-LI-size
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_UM_RLC_Mode_r5
$ASN1_TypeReference DL-UM-RLC-Mode-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ExpectReordering
$ASN1_TypeReference ExpectReordering
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ExplicitDiscard
$ASN1_TypeReference ExplicitDiscard
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HeaderCompressionInfo
$ASN1_TypeReference HeaderCompressionInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HeaderCompressionInfoList
$ASN1_TypeReference HeaderCompressionInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HeaderCompressionInfo_r4
$ASN1_TypeReference HeaderCompressionInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HeaderCompressionInfoList_r4
$ASN1_TypeReference HeaderCompressionInfoList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId LogicalChannelIdentity
$ASN1_TypeReference LogicalChannelIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId LosslessSRNS_RelocSupport
$ASN1_TypeReference LosslessSRNS-RelocSupport
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MAC_d_HFN_initial_value
$ASN1_TypeReference MAC-d-HFN-initial-value
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MAC_LogicalChannelPriority
$ASN1_TypeReference MAC-LogicalChannelPriority
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxDAT
$ASN1_TypeReference MaxDAT
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxDAT_Retransmissions
$ASN1_TypeReference MaxDAT-Retransmissions
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxMRW
$ASN1_TypeReference MaxMRW
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxPDCP_SN_WindowSize
$ASN1_TypeReference MaxPDCP-SN-WindowSize
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxRST
$ASN1_TypeReference MaxRST
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NoExplicitDiscard
$ASN1_TypeReference NoExplicitDiscard
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDCP_Info
$ASN1_TypeReference PDCP-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDCP_Info_r4
$ASN1_TypeReference PDCP-Info-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDCP_InfoReconfig
$ASN1_TypeReference PDCP-InfoReconfig
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDCP_InfoReconfig_r4
$ASN1_TypeReference PDCP-InfoReconfig-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDCP_PDU_Header
$ASN1_TypeReference PDCP-PDU-Header
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDCP_SN_Info
$ASN1_TypeReference PDCP-SN-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Poll_PDU
$ASN1_TypeReference Poll-PDU
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Poll_SDU
$ASN1_TypeReference Poll-SDU
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PollingInfo
$ASN1_TypeReference PollingInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PollWindow
$ASN1_TypeReference PollWindow
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PredefinedConfigIdentity
$ASN1_TypeReference PredefinedConfigIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PredefinedConfigValueTag
$ASN1_TypeReference PredefinedConfigValueTag
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PredefinedRB_Configuration
$ASN1_TypeReference PredefinedRB-Configuration
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PreDefRadioConfiguration
$ASN1_TypeReference PreDefRadioConfiguration
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAB_Info
$ASN1_TypeReference RAB-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAB_InformationList
$ASN1_TypeReference RAB-InformationList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAB_InformationReconfigList
$ASN1_TypeReference RAB-InformationReconfigList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAB_InformationReconfig
$ASN1_TypeReference RAB-InformationReconfig
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAB_InformationSetup
$ASN1_TypeReference RAB-InformationSetup
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAB_InformationSetup_r4
$ASN1_TypeReference RAB-InformationSetup-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAB_InformationSetup_r5
$ASN1_TypeReference RAB-InformationSetup-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAB_InformationSetupList
$ASN1_TypeReference RAB-InformationSetupList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAB_InformationSetupList_r4
$ASN1_TypeReference RAB-InformationSetupList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAB_InformationSetupList_r5
$ASN1_TypeReference RAB-InformationSetupList-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_ActivationTimeInfo
$ASN1_TypeReference RB-ActivationTimeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_ActivationTimeInfoList
$ASN1_TypeReference RB-ActivationTimeInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_COUNT_C_Information
$ASN1_TypeReference RB-COUNT-C-Information
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_COUNT_C_InformationList
$ASN1_TypeReference RB-COUNT-C-InformationList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_COUNT_C_MSB_Information
$ASN1_TypeReference RB-COUNT-C-MSB-Information
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_COUNT_C_MSB_InformationList
$ASN1_TypeReference RB-COUNT-C-MSB-InformationList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_Identity
$ASN1_TypeReference RB-Identity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_IdentityList
$ASN1_TypeReference RB-IdentityList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationAffected
$ASN1_TypeReference RB-InformationAffected
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationAffected_r5
$ASN1_TypeReference RB-InformationAffected-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationAffectedList
$ASN1_TypeReference RB-InformationAffectedList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationAffectedList_r5
$ASN1_TypeReference RB-InformationAffectedList-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationReconfig
$ASN1_TypeReference RB-InformationReconfig
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationReconfig_r4
$ASN1_TypeReference RB-InformationReconfig-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationReconfig_r5
$ASN1_TypeReference RB-InformationReconfig-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationReconfigList
$ASN1_TypeReference RB-InformationReconfigList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationReconfigList_r4
$ASN1_TypeReference RB-InformationReconfigList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationReconfigList_r5
$ASN1_TypeReference RB-InformationReconfigList-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationReleaseList
$ASN1_TypeReference RB-InformationReleaseList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationSetup
$ASN1_TypeReference RB-InformationSetup
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationSetup_r4
$ASN1_TypeReference RB-InformationSetup-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationSetup_r5
$ASN1_TypeReference RB-InformationSetup-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationSetupList
$ASN1_TypeReference RB-InformationSetupList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationSetupList_r4
$ASN1_TypeReference RB-InformationSetupList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_InformationSetupList_r5
$ASN1_TypeReference RB-InformationSetupList-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_MappingInfo
$ASN1_TypeReference RB-MappingInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_MappingInfo_r5
$ASN1_TypeReference RB-MappingInfo-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_MappingOption
$ASN1_TypeReference RB-MappingOption
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_MappingOption_r5
$ASN1_TypeReference RB-MappingOption-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_PDCPContextRelocation
$ASN1_TypeReference RB-PDCPContextRelocation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_PDCPContextRelocationList
$ASN1_TypeReference RB-PDCPContextRelocationList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_StopContinue
$ASN1_TypeReference RB-StopContinue
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_WithPDCP_Info
$ASN1_TypeReference RB-WithPDCP-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RB_WithPDCP_InfoList
$ASN1_TypeReference RB-WithPDCP-InfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReceivingWindowSize
$ASN1_TypeReference ReceivingWindowSize
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RFC2507_Info
$ASN1_TypeReference RFC2507-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RFC3095_Info_r4
$ASN1_TypeReference RFC3095-Info-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RLC_Info
$ASN1_TypeReference RLC-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RLC_Info_r5
$ASN1_TypeReference RLC-Info-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RLC_InfoChoice
$ASN1_TypeReference RLC-InfoChoice
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RLC_InfoChoice_r5
$ASN1_TypeReference RLC-InfoChoice-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RLC_SequenceNumber
$ASN1_TypeReference RLC-SequenceNumber
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RLC_SizeInfo
$ASN1_TypeReference RLC-SizeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RLC_SizeExplicitList
$ASN1_TypeReference RLC-SizeExplicitList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ROHC_Profile_r4
$ASN1_TypeReference ROHC-Profile-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ROHC_ProfileList_r4
$ASN1_TypeReference ROHC-ProfileList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ROHC_PacketSize_r4
$ASN1_TypeReference ROHC-PacketSize-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ROHC_PacketSizeList_r4
$ASN1_TypeReference ROHC-PacketSizeList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SRB_InformationSetup
$ASN1_TypeReference SRB-InformationSetup
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SRB_InformationSetup_r5
$ASN1_TypeReference SRB-InformationSetup-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SRB_InformationSetupList
$ASN1_TypeReference SRB-InformationSetupList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SRB_InformationSetupList_r5
$ASN1_TypeReference SRB-InformationSetupList-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SRB_InformationSetupList2
$ASN1_TypeReference SRB-InformationSetupList2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimerDiscard
$ASN1_TypeReference TimerDiscard
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimerEPC
$ASN1_TypeReference TimerEPC
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimerMRW
$ASN1_TypeReference TimerMRW
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimerPoll
$ASN1_TypeReference TimerPoll
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimerPollPeriodic
$ASN1_TypeReference TimerPollPeriodic
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimerPollProhibit
$ASN1_TypeReference TimerPollProhibit
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimerRST
$ASN1_TypeReference TimerRST
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimerStatusPeriodic
$ASN1_TypeReference TimerStatusPeriodic
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimerStatusProhibit
$ASN1_TypeReference TimerStatusProhibit
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransmissionRLC_Discard
$ASN1_TypeReference TransmissionRLC-Discard
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransmissionWindowSize
$ASN1_TypeReference TransmissionWindowSize
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_AM_RLC_Mode
$ASN1_TypeReference UL-AM-RLC-Mode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_CounterSynchronisationInfo
$ASN1_TypeReference UL-CounterSynchronisationInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_LogicalChannelMapping
$ASN1_TypeReference UL-LogicalChannelMapping
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_LogicalChannelMappingList
$ASN1_TypeReference UL-LogicalChannelMappingList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_LogicalChannelMappings
$ASN1_TypeReference UL-LogicalChannelMappings
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_RFC3095_r4
$ASN1_TypeReference UL-RFC3095-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_RLC_Mode
$ASN1_TypeReference UL-RLC-Mode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_TM_RLC_Mode
$ASN1_TypeReference UL-TM-RLC-Mode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_UM_RLC_Mode
$ASN1_TypeReference UL-UM-RLC-Mode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_TransportChannelType
$ASN1_TypeReference UL-TransportChannelType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AddOrReconfMAC_dFlow
$ASN1_TypeReference AddOrReconfMAC-dFlow
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AllowedTFC_List
$ASN1_TypeReference AllowedTFC-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AllowedTFI_List
$ASN1_TypeReference AllowedTFI-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BitModeRLC_SizeInfo
$ASN1_TypeReference BitModeRLC-SizeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BLER_QualityValue
$ASN1_TypeReference BLER-QualityValue
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ChannelCodingType
$ASN1_TypeReference ChannelCodingType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CodingRate
$ASN1_TypeReference CodingRate
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CommonDynamicTF_Info
$ASN1_TypeReference CommonDynamicTF-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CommonDynamicTF_Info_DynamicTTI
$ASN1_TypeReference CommonDynamicTF-Info-DynamicTTI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CommonDynamicTF_InfoList
$ASN1_TypeReference CommonDynamicTF-InfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CommonDynamicTF_InfoList_DynamicTTI
$ASN1_TypeReference CommonDynamicTF-InfoList-DynamicTTI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CommonTransChTFS
$ASN1_TypeReference CommonTransChTFS
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CommonTransChTFS_LCR
$ASN1_TypeReference CommonTransChTFS-LCR
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CPCH_SetID
$ASN1_TypeReference CPCH-SetID
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CRC_Size
$ASN1_TypeReference CRC-Size
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DedicatedDynamicTF_Info
$ASN1_TypeReference DedicatedDynamicTF-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DedicatedDynamicTF_Info_DynamicTTI
$ASN1_TypeReference DedicatedDynamicTF-Info-DynamicTTI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DedicatedDynamicTF_InfoList
$ASN1_TypeReference DedicatedDynamicTF-InfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DedicatedDynamicTF_InfoList_DynamicTTI
$ASN1_TypeReference DedicatedDynamicTF-InfoList-DynamicTTI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DedicatedTransChTFS
$ASN1_TypeReference DedicatedTransChTFS
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_AddReconfTransChInfo2List
$ASN1_TypeReference DL-AddReconfTransChInfo2List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_AddReconfTransChInfoList
$ASN1_TypeReference DL-AddReconfTransChInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_AddReconfTransChInfoList_r4
$ASN1_TypeReference DL-AddReconfTransChInfoList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_AddReconfTransChInfoList_r5
$ASN1_TypeReference DL-AddReconfTransChInfoList-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_AddReconfTransChInformation
$ASN1_TypeReference DL-AddReconfTransChInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_AddReconfTransChInformation_r4
$ASN1_TypeReference DL-AddReconfTransChInformation-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_AddReconfTransChInformation_r5
$ASN1_TypeReference DL-AddReconfTransChInformation-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_AddReconfTransChInformation2
$ASN1_TypeReference DL-AddReconfTransChInformation2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CommonTransChInfo
$ASN1_TypeReference DL-CommonTransChInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CommonTransChInfo_r4
$ASN1_TypeReference DL-CommonTransChInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_DeletedTransChInfoList
$ASN1_TypeReference DL-DeletedTransChInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_DeletedTransChInfoList_r5
$ASN1_TypeReference DL-DeletedTransChInfoList-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TransportChannelIdentity
$ASN1_TypeReference DL-TransportChannelIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TransportChannelIdentity_r5
$ASN1_TypeReference DL-TransportChannelIdentity-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TrCH_Type
$ASN1_TypeReference DL-TrCH-Type
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TrCH_TypeId1_r5
$ASN1_TypeReference DL-TrCH-TypeId1-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TrCH_TypeId2_r5
$ASN1_TypeReference DL-TrCH-TypeId2-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DRAC_ClassIdentity
$ASN1_TypeReference DRAC-ClassIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DRAC_StaticInformation
$ASN1_TypeReference DRAC-StaticInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DRAC_StaticInformationList
$ASN1_TypeReference DRAC-StaticInformationList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ExplicitTFCS_Configuration
$ASN1_TypeReference ExplicitTFCS-Configuration
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GainFactor
$ASN1_TypeReference GainFactor
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GainFactorInformation
$ASN1_TypeReference GainFactorInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HSDSCH_Info
$ASN1_TypeReference HSDSCH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HARQ_Info
$ASN1_TypeReference HARQ-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HARQMemorySize
$ASN1_TypeReference HARQMemorySize
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IndividualDL_CCTrCH_Info
$ASN1_TypeReference IndividualDL-CCTrCH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IndividualDL_CCTrCH_InfoList
$ASN1_TypeReference IndividualDL-CCTrCH-InfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IndividualUL_CCTrCH_Info
$ASN1_TypeReference IndividualUL-CCTrCH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IndividualUL_CCTrCH_InfoList
$ASN1_TypeReference IndividualUL-CCTrCH-InfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId LogicalChannelByRB
$ASN1_TypeReference LogicalChannelByRB
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId LogicalChannelList
$ASN1_TypeReference LogicalChannelList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MAC_d_FlowIdentityDCHandHSDSCH
$ASN1_TypeReference MAC-d-FlowIdentityDCHandHSDSCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MAC_d_FlowIdentity
$ASN1_TypeReference MAC-d-FlowIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MAC_d_PDU_SizeInfo_List
$ASN1_TypeReference MAC-d-PDU-SizeInfo-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MAC_d_PDUsizeInfo
$ASN1_TypeReference MAC-d-PDUsizeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MAC_hs_AddReconfQueue_List
$ASN1_TypeReference MAC-hs-AddReconfQueue-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MAC_hs_AddReconfQueue
$ASN1_TypeReference MAC-hs-AddReconfQueue
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MAC_hs_DelQueue_List
$ASN1_TypeReference MAC-hs-DelQueue-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MAC_hs_DelQueue
$ASN1_TypeReference MAC-hs-DelQueue
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MAC_hs_WindowSize
$ASN1_TypeReference MAC-hs-WindowSize
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NumberOfTbSizeAndTTIList
$ASN1_TypeReference NumberOfTbSizeAndTTIList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MessType
$ASN1_TypeReference MessType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Non_allowedTFC_List
$ASN1_TypeReference Non-allowedTFC-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NumberOfTransportBlocks
$ASN1_TypeReference NumberOfTransportBlocks
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId OctetModeRLC_SizeInfoType1
$ASN1_TypeReference OctetModeRLC-SizeInfoType1
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId OctetModeRLC_SizeInfoType2
$ASN1_TypeReference OctetModeRLC-SizeInfoType2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PowerOffsetInformation
$ASN1_TypeReference PowerOffsetInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PowerOffsetPp_m
$ASN1_TypeReference PowerOffsetPp-m
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PreDefTransChConfiguration
$ASN1_TypeReference PreDefTransChConfiguration
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId QualityTarget
$ASN1_TypeReference QualityTarget
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RateMatchingAttribute
$ASN1_TypeReference RateMatchingAttribute
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReferenceTFC_ID
$ASN1_TypeReference ReferenceTFC-ID
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RestrictedTrChInfo
$ASN1_TypeReference RestrictedTrChInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RestrictedTrChInfoList
$ASN1_TypeReference RestrictedTrChInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SemistaticTF_Information
$ASN1_TypeReference SemistaticTF-Information
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SignalledGainFactors
$ASN1_TypeReference SignalledGainFactors
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SplitTFCI_Signalling
$ASN1_TypeReference SplitTFCI-Signalling
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SplitType
$ASN1_TypeReference SplitType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T1_ReleaseTimer
$ASN1_TypeReference T1-ReleaseTimer
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFC_Subset
$ASN1_TypeReference TFC-Subset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFC_SubsetList
$ASN1_TypeReference TFC-SubsetList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFC_Value
$ASN1_TypeReference TFC-Value
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFCI_Field2_Information
$ASN1_TypeReference TFCI-Field2-Information
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFCI_Range
$ASN1_TypeReference TFCI-Range
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFCI_RangeList
$ASN1_TypeReference TFCI-RangeList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFCS
$ASN1_TypeReference TFCS
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFCS_Identity
$ASN1_TypeReference TFCS-Identity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFCS_IdentityPlain
$ASN1_TypeReference TFCS-IdentityPlain
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFCS_InfoForDSCH
$ASN1_TypeReference TFCS-InfoForDSCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFCS_ReconfAdd
$ASN1_TypeReference TFCS-ReconfAdd
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFCS_Removal
$ASN1_TypeReference TFCS-Removal
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFCS_RemovalList
$ASN1_TypeReference TFCS-RemovalList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeDurationBeforeRetry
$ASN1_TypeReference TimeDurationBeforeRetry
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TM_SignallingInfo
$ASN1_TypeReference TM-SignallingInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransmissionTimeInterval
$ASN1_TypeReference TransmissionTimeInterval
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransmissionTimeValidity
$ASN1_TypeReference TransmissionTimeValidity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportChannelIdentity
$ASN1_TypeReference TransportChannelIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportChannelIdentityDCHandDSCH
$ASN1_TypeReference TransportChannelIdentityDCHandDSCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportFormatSet
$ASN1_TypeReference TransportFormatSet
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransportFormatSet_LCR
$ASN1_TypeReference TransportFormatSet-LCR
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_AddReconfTransChInfoList
$ASN1_TypeReference UL-AddReconfTransChInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_AddReconfTransChInformation
$ASN1_TypeReference UL-AddReconfTransChInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_CommonTransChInfo
$ASN1_TypeReference UL-CommonTransChInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_CommonTransChInfo_r4
$ASN1_TypeReference UL-CommonTransChInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_ControlledTrChList
$ASN1_TypeReference UL-ControlledTrChList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_DeletedTransChInfoList
$ASN1_TypeReference UL-DeletedTransChInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_TransportChannelIdentity
$ASN1_TypeReference UL-TransportChannelIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_TrCH_Type
$ASN1_TypeReference UL-TrCH-Type
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId USCH_TransportChannelsInfo
$ASN1_TypeReference USCH-TransportChannelsInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ACK_NACK_repetitionFactor
$ASN1_TypeReference ACK-NACK-repetitionFactor
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AC_To_ASC_Mapping
$ASN1_TypeReference AC-To-ASC-Mapping
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AC_To_ASC_MappingTable
$ASN1_TypeReference AC-To-ASC-MappingTable
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AccessServiceClass_FDD
$ASN1_TypeReference AccessServiceClass-FDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AccessServiceClass_TDD
$ASN1_TypeReference AccessServiceClass-TDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AccessServiceClass_TDD_LCR_r4
$ASN1_TypeReference AccessServiceClass-TDD-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AICH_Info
$ASN1_TypeReference AICH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AICH_PowerOffset
$ASN1_TypeReference AICH-PowerOffset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AICH_TransmissionTiming
$ASN1_TypeReference AICH-TransmissionTiming
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AllocationPeriodInfo
$ASN1_TypeReference AllocationPeriodInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Alpha
$ASN1_TypeReference Alpha
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AP_AICH_ChannelisationCode
$ASN1_TypeReference AP-AICH-ChannelisationCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AP_PreambleScramblingCode
$ASN1_TypeReference AP-PreambleScramblingCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AP_Signature
$ASN1_TypeReference AP-Signature
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AP_Signature_VCAM
$ASN1_TypeReference AP-Signature-VCAM
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AP_Subchannel
$ASN1_TypeReference AP-Subchannel
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ASCSetting_FDD
$ASN1_TypeReference ASCSetting-FDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ASCSetting_TDD
$ASN1_TypeReference ASCSetting-TDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ASCSetting_TDD_LCR_r4
$ASN1_TypeReference ASCSetting-TDD-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AvailableAP_Signature_VCAMList
$ASN1_TypeReference AvailableAP-Signature-VCAMList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AvailableAP_SignatureList
$ASN1_TypeReference AvailableAP-SignatureList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AvailableAP_SubchannelList
$ASN1_TypeReference AvailableAP-SubchannelList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AvailableMinimumSF_ListVCAM
$ASN1_TypeReference AvailableMinimumSF-ListVCAM
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AvailableMinimumSF_VCAM
$ASN1_TypeReference AvailableMinimumSF-VCAM
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AvailableSignatures
$ASN1_TypeReference AvailableSignatures
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AvailableSubChannelNumbers
$ASN1_TypeReference AvailableSubChannelNumbers
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BurstType
$ASN1_TypeReference BurstType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Bler_Target
$ASN1_TypeReference Bler-Target
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CCTrCH_PowerControlInfo
$ASN1_TypeReference CCTrCH-PowerControlInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CCTrCH_PowerControlInfo_r4
$ASN1_TypeReference CCTrCH-PowerControlInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CCTrCH_PowerControlInfo_r5
$ASN1_TypeReference CCTrCH-PowerControlInfo-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CD_AccessSlotSubchannel
$ASN1_TypeReference CD-AccessSlotSubchannel
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CD_AccessSlotSubchannelList
$ASN1_TypeReference CD-AccessSlotSubchannelList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CD_CA_ICH_ChannelisationCode
$ASN1_TypeReference CD-CA-ICH-ChannelisationCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CD_PreambleScramblingCode
$ASN1_TypeReference CD-PreambleScramblingCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CD_SignatureCode
$ASN1_TypeReference CD-SignatureCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CD_SignatureCodeList
$ASN1_TypeReference CD-SignatureCodeList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellAndChannelIdentity
$ASN1_TypeReference CellAndChannelIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellParametersID
$ASN1_TypeReference CellParametersID
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Cfntargetsfnframeoffset
$ASN1_TypeReference Cfntargetsfnframeoffset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ChannelAssignmentActive
$ASN1_TypeReference ChannelAssignmentActive
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ChannelisationCode256
$ASN1_TypeReference ChannelisationCode256
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ChannelReqParamsForUCSM
$ASN1_TypeReference ChannelReqParamsForUCSM
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ClosedLoopTimingAdjMode
$ASN1_TypeReference ClosedLoopTimingAdjMode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CodeNumberDSCH
$ASN1_TypeReference CodeNumberDSCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CodeRange
$ASN1_TypeReference CodeRange
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CodeWordSet
$ASN1_TypeReference CodeWordSet
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CommonTimeslotInfo
$ASN1_TypeReference CommonTimeslotInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CommonTimeslotInfoSCCPCH
$ASN1_TypeReference CommonTimeslotInfoSCCPCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ConstantValue
$ASN1_TypeReference ConstantValue
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ConstantValueTdd
$ASN1_TypeReference ConstantValueTdd
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CPCH_PersistenceLevels
$ASN1_TypeReference CPCH-PersistenceLevels
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CPCH_PersistenceLevelsList
$ASN1_TypeReference CPCH-PersistenceLevelsList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CPCH_SetInfo
$ASN1_TypeReference CPCH-SetInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CPCH_SetInfoList
$ASN1_TypeReference CPCH-SetInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CPCH_StatusIndicationMode
$ASN1_TypeReference CPCH-StatusIndicationMode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CQI_RepetitionFactor
$ASN1_TypeReference CQI-RepetitionFactor
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CSICH_PowerOffset
$ASN1_TypeReference CSICH-PowerOffset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DefaultDPCH_OffsetValueFDD
$ASN1_TypeReference DefaultDPCH-OffsetValueFDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DefaultDPCH_OffsetValueTDD
$ASN1_TypeReference DefaultDPCH-OffsetValueTDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DeltaPp_m
$ASN1_TypeReference DeltaPp-m
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DeltaCQI
$ASN1_TypeReference DeltaCQI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DeltaNACK
$ASN1_TypeReference DeltaNACK
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DeltaACK
$ASN1_TypeReference DeltaACK
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DeltaSIR
$ASN1_TypeReference DeltaSIR
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CCTrCh
$ASN1_TypeReference DL-CCTrCh
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CCTrCh_r4
$ASN1_TypeReference DL-CCTrCh-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CCTrChList
$ASN1_TypeReference DL-CCTrChList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CCTrChList_r4
$ASN1_TypeReference DL-CCTrChList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CCTrChListToRemove
$ASN1_TypeReference DL-CCTrChListToRemove
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_ChannelisationCode
$ASN1_TypeReference DL-ChannelisationCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_ChannelisationCodeList
$ASN1_TypeReference DL-ChannelisationCodeList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CommonInformation
$ASN1_TypeReference DL-CommonInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CommonInformation_r4
$ASN1_TypeReference DL-CommonInformation-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CommonInformation_r5
$ASN1_TypeReference DL-CommonInformation-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CommonInformationPredef
$ASN1_TypeReference DL-CommonInformationPredef
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_CompressedModeMethod
$ASN1_TypeReference DL-CompressedModeMethod
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_DPCH_InfoCommon
$ASN1_TypeReference DL-DPCH-InfoCommon
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_DPCH_InfoCommon_r4
$ASN1_TypeReference DL-DPCH-InfoCommon-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_DPCH_InfoCommonPredef
$ASN1_TypeReference DL-DPCH-InfoCommonPredef
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_DPCH_InfoPerRL
$ASN1_TypeReference DL-DPCH-InfoPerRL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_DPCH_InfoPerRL_r4
$ASN1_TypeReference DL-DPCH-InfoPerRL-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_DPCH_InfoPerRL_r5
$ASN1_TypeReference DL-DPCH-InfoPerRL-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_DPCH_PowerControlInfo
$ASN1_TypeReference DL-DPCH-PowerControlInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_FrameType
$ASN1_TypeReference DL-FrameType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_HSPDSCH_Information
$ASN1_TypeReference DL-HSPDSCH-Information
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_HSPDSCH_TS_Configuration
$ASN1_TypeReference DL-HSPDSCH-TS-Configuration
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_InformationPerRL
$ASN1_TypeReference DL-InformationPerRL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_InformationPerRL_r4
$ASN1_TypeReference DL-InformationPerRL-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_InformationPerRL_r5
$ASN1_TypeReference DL-InformationPerRL-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_InformationPerRL_r5bis
$ASN1_TypeReference DL-InformationPerRL-r5bis
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_InformationPerRL_List
$ASN1_TypeReference DL-InformationPerRL-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_InformationPerRL_List_r4
$ASN1_TypeReference DL-InformationPerRL-List-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_InformationPerRL_List_r5
$ASN1_TypeReference DL-InformationPerRL-List-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_InformationPerRL_List_r5bis
$ASN1_TypeReference DL-InformationPerRL-List-r5bis
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_PDSCH_Information
$ASN1_TypeReference DL-PDSCH-Information
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Dl_rate_matching_restriction
$ASN1_TypeReference Dl-rate-matching-restriction
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TPC_PowerOffsetPerRL
$ASN1_TypeReference DL-TPC-PowerOffsetPerRL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TPC_PowerOffsetPerRL_List
$ASN1_TypeReference DL-TPC-PowerOffsetPerRL-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TS_ChannelisationCode
$ASN1_TypeReference DL-TS-ChannelisationCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TS_ChannelisationCodesShort
$ASN1_TypeReference DL-TS-ChannelisationCodesShort
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DownlinkAdditionalTimeslots
$ASN1_TypeReference DownlinkAdditionalTimeslots
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DownlinkAdditionalTimeslots_LCR_r4
$ASN1_TypeReference DownlinkAdditionalTimeslots-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DownlinkTimeslotsCodes
$ASN1_TypeReference DownlinkTimeslotsCodes
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DownlinkTimeslotsCodes_LCR_r4
$ASN1_TypeReference DownlinkTimeslotsCodes-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DPC_Mode
$ASN1_TypeReference DPC-Mode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DPCCH_PowerOffset
$ASN1_TypeReference DPCCH-PowerOffset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DPCH_CompressedModeInfo
$ASN1_TypeReference DPCH-CompressedModeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DPCH_CompressedModeStatusInfo
$ASN1_TypeReference DPCH-CompressedModeStatusInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DPCH_FrameOffset
$ASN1_TypeReference DPCH-FrameOffset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DSCH_Mapping
$ASN1_TypeReference DSCH-Mapping
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DSCH_MappingList
$ASN1_TypeReference DSCH-MappingList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DSCH_RadioLinkIdentifier
$ASN1_TypeReference DSCH-RadioLinkIdentifier
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DSCH_TransportChannelsInfo
$ASN1_TypeReference DSCH-TransportChannelsInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DurationTimeInfo
$ASN1_TypeReference DurationTimeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DynamicPersistenceLevel
$ASN1_TypeReference DynamicPersistenceLevel
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DynamicPersistenceLevelList
$ASN1_TypeReference DynamicPersistenceLevelList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DynamicPersistenceLevelTF_List
$ASN1_TypeReference DynamicPersistenceLevelTF-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FACH_PCH_Information
$ASN1_TypeReference FACH-PCH-Information
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FACH_PCH_InformationList
$ASN1_TypeReference FACH-PCH-InformationList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Feedback_cycle
$ASN1_TypeReference Feedback-cycle
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FPACH_Info_r4
$ASN1_TypeReference FPACH-Info-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FrequencyInfo
$ASN1_TypeReference FrequencyInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FrequencyInfoFDD
$ASN1_TypeReference FrequencyInfoFDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FrequencyInfoTDD
$ASN1_TypeReference FrequencyInfoTDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HS_ChannelisationCode_LCR
$ASN1_TypeReference HS-ChannelisationCode-LCR
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HS_PDSCH_Midamble_Configuration_TDD128
$ASN1_TypeReference HS-PDSCH-Midamble-Configuration-TDD128
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HS_SCCH_Info
$ASN1_TypeReference HS-SCCH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HS_SCCH_Codes
$ASN1_TypeReference HS-SCCH-Codes
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HS_SCCH_TDD128
$ASN1_TypeReference HS-SCCH-TDD128
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HS_SICH_Configuration_TDD128
$ASN1_TypeReference HS-SICH-Configuration-TDD128
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HS_SCCH_TDD384
$ASN1_TypeReference HS-SCCH-TDD384
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HS_SICH_Configuration_TDD384
$ASN1_TypeReference HS-SICH-Configuration-TDD384
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HS_SICH_Power_Control_Info_TDD384
$ASN1_TypeReference HS-SICH-Power-Control-Info-TDD384
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IndividualTimeslotInfo
$ASN1_TypeReference IndividualTimeslotInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IndividualTimeslotInfo_LCR_r4
$ASN1_TypeReference IndividualTimeslotInfo-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IndividualTimeslotInfo_LCR_r4_ext
$ASN1_TypeReference IndividualTimeslotInfo-LCR-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IndividualTS_Interference
$ASN1_TypeReference IndividualTS-Interference
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IndividualTS_InterferenceList
$ASN1_TypeReference IndividualTS-InterferenceList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ITP
$ASN1_TypeReference ITP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NidentifyAbort
$ASN1_TypeReference NidentifyAbort
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxAllowedUL_TX_Power
$ASN1_TypeReference MaxAllowedUL-TX-Power
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxAvailablePCPCH_Number
$ASN1_TypeReference MaxAvailablePCPCH-Number
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxPowerIncrease_r4
$ASN1_TypeReference MaxPowerIncrease-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxTFCI_Field2Value
$ASN1_TypeReference MaxTFCI-Field2Value
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Measurement_Feedback_Info
$ASN1_TypeReference Measurement-Feedback-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MidambleConfigurationBurstType1and3
$ASN1_TypeReference MidambleConfigurationBurstType1and3
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MidambleConfigurationBurstType2
$ASN1_TypeReference MidambleConfigurationBurstType2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MidambleShiftAndBurstType
$ASN1_TypeReference MidambleShiftAndBurstType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MidambleShiftAndBurstType_LCR_r4
$ASN1_TypeReference MidambleShiftAndBurstType-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MidambleShiftAndBurstType_DL
$ASN1_TypeReference MidambleShiftAndBurstType-DL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MidambleShiftLong
$ASN1_TypeReference MidambleShiftLong
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MidambleShiftShort
$ASN1_TypeReference MidambleShiftShort
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MinimumSpreadingFactor
$ASN1_TypeReference MinimumSpreadingFactor
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MultiCodeInfo
$ASN1_TypeReference MultiCodeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_EOT
$ASN1_TypeReference N-EOT
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_GAP
$ASN1_TypeReference N-GAP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_PCH
$ASN1_TypeReference N-PCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_StartMessage
$ASN1_TypeReference N-StartMessage
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NB01
$ASN1_TypeReference NB01
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NF_Max
$ASN1_TypeReference NF-Max
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NumberOfDPDCH
$ASN1_TypeReference NumberOfDPDCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NumberOfFBI_Bits
$ASN1_TypeReference NumberOfFBI-Bits
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId OpenLoopPowerControl_TDD
$ASN1_TypeReference OpenLoopPowerControl-TDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId OpenLoopPowerControl_IPDL_TDD_r4
$ASN1_TypeReference OpenLoopPowerControl-IPDL-TDD-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PagingIndicatorLength
$ASN1_TypeReference PagingIndicatorLength
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PC_Preamble
$ASN1_TypeReference PC-Preamble
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PCP_Length
$ASN1_TypeReference PCP-Length
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PCPCH_ChannelInfo
$ASN1_TypeReference PCPCH-ChannelInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PCPCH_ChannelInfoList
$ASN1_TypeReference PCPCH-ChannelInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PCPICH_UsageForChannelEst
$ASN1_TypeReference PCPICH-UsageForChannelEst
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_CapacityAllocationInfo
$ASN1_TypeReference PDSCH-CapacityAllocationInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_CapacityAllocationInfo_r4
$ASN1_TypeReference PDSCH-CapacityAllocationInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_CodeInfo
$ASN1_TypeReference PDSCH-CodeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_CodeInfoList
$ASN1_TypeReference PDSCH-CodeInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_CodeMap
$ASN1_TypeReference PDSCH-CodeMap
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_CodeMapList
$ASN1_TypeReference PDSCH-CodeMapList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_CodeMapping
$ASN1_TypeReference PDSCH-CodeMapping
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_Identity
$ASN1_TypeReference PDSCH-Identity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_Info
$ASN1_TypeReference PDSCH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_Info_r4
$ASN1_TypeReference PDSCH-Info-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_Info_LCR_r4
$ASN1_TypeReference PDSCH-Info-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_PowerControlInfo
$ASN1_TypeReference PDSCH-PowerControlInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_SHO_DCH_Info
$ASN1_TypeReference PDSCH-SHO-DCH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_SysInfo
$ASN1_TypeReference PDSCH-SysInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_SysInfo_HCR_r5
$ASN1_TypeReference PDSCH-SysInfo-HCR-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_SysInfo_LCR_r4
$ASN1_TypeReference PDSCH-SysInfo-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_SysInfoList
$ASN1_TypeReference PDSCH-SysInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_SysInfoList_HCR_r5
$ASN1_TypeReference PDSCH-SysInfoList-HCR-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_SysInfoList_LCR_r4
$ASN1_TypeReference PDSCH-SysInfoList-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_SysInfoList_SFN
$ASN1_TypeReference PDSCH-SysInfoList-SFN
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_SysInfoList_SFN_HCR_r5
$ASN1_TypeReference PDSCH-SysInfoList-SFN-HCR-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PDSCH_SysInfoList_SFN_LCR_r4
$ASN1_TypeReference PDSCH-SysInfoList-SFN-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PersistenceScalingFactor
$ASN1_TypeReference PersistenceScalingFactor
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PersistenceScalingFactorList
$ASN1_TypeReference PersistenceScalingFactorList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PI_CountPerFrame
$ASN1_TypeReference PI-CountPerFrame
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PichChannelisationCodeList_LCR_r4
$ASN1_TypeReference PichChannelisationCodeList-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PICH_Info
$ASN1_TypeReference PICH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PICH_Info_LCR_r4
$ASN1_TypeReference PICH-Info-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PICH_PowerOffset
$ASN1_TypeReference PICH-PowerOffset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PilotBits128
$ASN1_TypeReference PilotBits128
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PilotBits256
$ASN1_TypeReference PilotBits256
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementPowerOffset
$ASN1_TypeReference MeasurementPowerOffset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PositionFixedOrFlexible
$ASN1_TypeReference PositionFixedOrFlexible
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PowerControlAlgorithm
$ASN1_TypeReference PowerControlAlgorithm
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PowerOffsetPilot_pdpdch
$ASN1_TypeReference PowerOffsetPilot-pdpdch
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PowerOffsetTPC_pdpdch
$ASN1_TypeReference PowerOffsetTPC-pdpdch
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PowerRampStep
$ASN1_TypeReference PowerRampStep
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRACH_ChanCodes_LCR_r4
$ASN1_TypeReference PRACH-ChanCodes-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRACH_Definition_LCR_r4
$ASN1_TypeReference PRACH-Definition-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRACH_Midamble
$ASN1_TypeReference PRACH-Midamble
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRACH_Partitioning
$ASN1_TypeReference PRACH-Partitioning
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRACH_Partitioning_LCR_r4
$ASN1_TypeReference PRACH-Partitioning-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRACH_PowerOffset
$ASN1_TypeReference PRACH-PowerOffset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRACH_RACH_Info
$ASN1_TypeReference PRACH-RACH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRACH_RACH_Info_LCR_r4
$ASN1_TypeReference PRACH-RACH-Info-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRACH_SystemInformation
$ASN1_TypeReference PRACH-SystemInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRACH_SystemInformation_LCR_r4
$ASN1_TypeReference PRACH-SystemInformation-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRACH_SystemInformationList
$ASN1_TypeReference PRACH-SystemInformationList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRACH_SystemInformationList_LCR_r4
$ASN1_TypeReference PRACH-SystemInformationList-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PreambleRetransMax
$ASN1_TypeReference PreambleRetransMax
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PreambleScramblingCodeWordNumber
$ASN1_TypeReference PreambleScramblingCodeWordNumber
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PreDefPhyChConfiguration
$ASN1_TypeReference PreDefPhyChConfiguration
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PrimaryCCPCH_Info
$ASN1_TypeReference PrimaryCCPCH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PrimaryCCPCH_Info_r4
$ASN1_TypeReference PrimaryCCPCH-Info-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PrimaryCCPCH_Info_LCR_r4
$ASN1_TypeReference PrimaryCCPCH-Info-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PrimaryCCPCH_Info_LCR_r4_ext
$ASN1_TypeReference PrimaryCCPCH-Info-LCR-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PrimaryCCPCH_TX_Power
$ASN1_TypeReference PrimaryCCPCH-TX-Power
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PrimaryCPICH_Info
$ASN1_TypeReference PrimaryCPICH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PrimaryCPICH_TX_Power
$ASN1_TypeReference PrimaryCPICH-TX-Power
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PrimaryScramblingCode
$ASN1_TypeReference PrimaryScramblingCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PuncturingLimit
$ASN1_TypeReference PuncturingLimit
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_CapacityAllocationInfo
$ASN1_TypeReference PUSCH-CapacityAllocationInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_CapacityAllocationInfo_r4
$ASN1_TypeReference PUSCH-CapacityAllocationInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_Identity
$ASN1_TypeReference PUSCH-Identity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_Info
$ASN1_TypeReference PUSCH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_Info_r4
$ASN1_TypeReference PUSCH-Info-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_Info_LCR_r4
$ASN1_TypeReference PUSCH-Info-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_PowerControlInfo_r4
$ASN1_TypeReference PUSCH-PowerControlInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_SysInfo
$ASN1_TypeReference PUSCH-SysInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_SysInfo_HCR_r5
$ASN1_TypeReference PUSCH-SysInfo-HCR-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_SysInfo_LCR_r4
$ASN1_TypeReference PUSCH-SysInfo-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_SysInfoList
$ASN1_TypeReference PUSCH-SysInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_SysInfoList_HCR_r5
$ASN1_TypeReference PUSCH-SysInfoList-HCR-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_SysInfoList_LCR_r4
$ASN1_TypeReference PUSCH-SysInfoList-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_SysInfoList_SFN
$ASN1_TypeReference PUSCH-SysInfoList-SFN
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_SysInfoList_SFN_HCR_r5
$ASN1_TypeReference PUSCH-SysInfoList-SFN-HCR-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PUSCH_SysInfoList_SFN_LCR_r4
$ASN1_TypeReference PUSCH-SysInfoList-SFN-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RACH_TransmissionParameters
$ASN1_TypeReference RACH-TransmissionParameters
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RepetitionPeriodAndLength
$ASN1_TypeReference RepetitionPeriodAndLength
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RepetitionPeriodLengthAndOffset
$ASN1_TypeReference RepetitionPeriodLengthAndOffset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReplacedPDSCH_CodeInfo
$ASN1_TypeReference ReplacedPDSCH-CodeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReplacedPDSCH_CodeInfoList
$ASN1_TypeReference ReplacedPDSCH-CodeInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RepPerLengthOffset_PICH
$ASN1_TypeReference RepPerLengthOffset-PICH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RestrictedTrCH
$ASN1_TypeReference RestrictedTrCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RestrictedTrCH_InfoList
$ASN1_TypeReference RestrictedTrCH-InfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RL_AdditionInformation
$ASN1_TypeReference RL-AdditionInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RL_AdditionInformationList
$ASN1_TypeReference RL-AdditionInformationList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RL_IdentifierList
$ASN1_TypeReference RL-IdentifierList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RL_RemovalInformationList
$ASN1_TypeReference RL-RemovalInformationList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RPP
$ASN1_TypeReference RPP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId S_Field
$ASN1_TypeReference S-Field
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SCCPCH_ChannelisationCode
$ASN1_TypeReference SCCPCH-ChannelisationCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SCCPCH_ChannelisationCodeList
$ASN1_TypeReference SCCPCH-ChannelisationCodeList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SCCPCH_InfoForFACH
$ASN1_TypeReference SCCPCH-InfoForFACH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SCCPCH_InfoForFACH_r4
$ASN1_TypeReference SCCPCH-InfoForFACH-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SCCPCH_SystemInformation
$ASN1_TypeReference SCCPCH-SystemInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SCCPCH_SystemInformation_LCR_r4_ext
$ASN1_TypeReference SCCPCH-SystemInformation-LCR-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SCCPCH_SystemInformationList
$ASN1_TypeReference SCCPCH-SystemInformationList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SCCPCH_SystemInformationList_LCR_r4_ext
$ASN1_TypeReference SCCPCH-SystemInformationList-LCR-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ScramblingCodeChange
$ASN1_TypeReference ScramblingCodeChange
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ScramblingCodeType
$ASN1_TypeReference ScramblingCodeType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SecondaryCCPCH_Info
$ASN1_TypeReference SecondaryCCPCH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SecondaryCCPCH_Info_r4
$ASN1_TypeReference SecondaryCCPCH-Info-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SecondaryCCPCH_Info_LCR_r4_ext
$ASN1_TypeReference SecondaryCCPCH-Info-LCR-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SecondaryCPICH_Info
$ASN1_TypeReference SecondaryCPICH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SecondaryScramblingCode
$ASN1_TypeReference SecondaryScramblingCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SecondInterleavingMode
$ASN1_TypeReference SecondInterleavingMode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SF256_AndCodeNumber
$ASN1_TypeReference SF256-AndCodeNumber
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SF512_AndCodeNumber
$ASN1_TypeReference SF512-AndCodeNumber
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SF512_AndPilot
$ASN1_TypeReference SF512-AndPilot
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SF_PDSCH
$ASN1_TypeReference SF-PDSCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SF_PRACH
$ASN1_TypeReference SF-PRACH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SFN_TimeInfo
$ASN1_TypeReference SFN-TimeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SpecialBurstScheduling
$ASN1_TypeReference SpecialBurstScheduling
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SpreadingFactor
$ASN1_TypeReference SpreadingFactor
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SRB_delay
$ASN1_TypeReference SRB-delay
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SSDT_CellIdentity
$ASN1_TypeReference SSDT-CellIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SSDT_Information
$ASN1_TypeReference SSDT-Information
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SSDT_Information_r4
$ASN1_TypeReference SSDT-Information-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SSDT_UL
$ASN1_TypeReference SSDT-UL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SynchronisationParameters_r4
$ASN1_TypeReference SynchronisationParameters-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SYNC_UL_Procedure_r4
$ASN1_TypeReference SYNC-UL-Procedure-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SYNC_UL_Info_r4
$ASN1_TypeReference SYNC-UL-Info-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TDD_FPACH_CCode16_r4
$ASN1_TypeReference TDD-FPACH-CCode16-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TDD_UL_Interference
$ASN1_TypeReference TDD-UL-Interference
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TDD_PICH_CCode
$ASN1_TypeReference TDD-PICH-CCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TDD_PRACH_CCode8
$ASN1_TypeReference TDD-PRACH-CCode8
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TDD_PRACH_CCode16
$ASN1_TypeReference TDD-PRACH-CCode16
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TDD_PRACH_CCode_LCR_r4
$ASN1_TypeReference TDD-PRACH-CCode-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TDD_PRACH_CCodeList
$ASN1_TypeReference TDD-PRACH-CCodeList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFC_ControlDuration
$ASN1_TypeReference TFC-ControlDuration
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TFCI_Coding
$ASN1_TypeReference TFCI-Coding
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGCFN
$ASN1_TypeReference TGCFN
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGD
$ASN1_TypeReference TGD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGL
$ASN1_TypeReference TGL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGMP
$ASN1_TypeReference TGMP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGP_Sequence
$ASN1_TypeReference TGP-Sequence
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGPS_Reconfiguration_CFN
$ASN1_TypeReference TGPS-Reconfiguration-CFN
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGP_SequenceList
$ASN1_TypeReference TGP-SequenceList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGP_SequenceShort
$ASN1_TypeReference TGP-SequenceShort
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGPL
$ASN1_TypeReference TGPL
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGPRC
$ASN1_TypeReference TGPRC
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGPS_ConfigurationParams
$ASN1_TypeReference TGPS-ConfigurationParams
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGPSI
$ASN1_TypeReference TGPSI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TGSN
$ASN1_TypeReference TGSN
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeInfo
$ASN1_TypeReference TimeInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotList
$ASN1_TypeReference TimeslotList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotList_r4
$ASN1_TypeReference TimeslotList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotNumber
$ASN1_TypeReference TimeslotNumber
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotNumber_LCR_r4
$ASN1_TypeReference TimeslotNumber-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotNumber_PRACH_LCR_r4
$ASN1_TypeReference TimeslotNumber-PRACH-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotSync2
$ASN1_TypeReference TimeslotSync2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimingOffset
$ASN1_TypeReference TimingOffset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TPC_CombinationIndex
$ASN1_TypeReference TPC-CombinationIndex
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TPC_StepSizeFDD
$ASN1_TypeReference TPC-StepSizeFDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TPC_StepSizeTDD
$ASN1_TypeReference TPC-StepSizeTDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TreconfirmAbort
$ASN1_TypeReference TreconfirmAbort
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TX_DiversityMode
$ASN1_TypeReference TX-DiversityMode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UARFCN
$ASN1_TypeReference UARFCN
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UCSM_Info
$ASN1_TypeReference UCSM-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_CCTrCH
$ASN1_TypeReference UL-CCTrCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_CCTrCH_r4
$ASN1_TypeReference UL-CCTrCH-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_CCTrCHList
$ASN1_TypeReference UL-CCTrCHList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_CCTrCHList_r4
$ASN1_TypeReference UL-CCTrCHList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_CCTrCHListToRemove
$ASN1_TypeReference UL-CCTrCHListToRemove
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_CCTrChTPCList
$ASN1_TypeReference UL-CCTrChTPCList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_ChannelRequirement
$ASN1_TypeReference UL-ChannelRequirement
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_ChannelRequirement_r4
$ASN1_TypeReference UL-ChannelRequirement-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_ChannelRequirement_r5
$ASN1_TypeReference UL-ChannelRequirement-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_ChannelRequirementWithCPCH_SetID
$ASN1_TypeReference UL-ChannelRequirementWithCPCH-SetID
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_ChannelRequirementWithCPCH_SetID_r4
$ASN1_TypeReference UL-ChannelRequirementWithCPCH-SetID-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_ChannelRequirementWithCPCH_SetID_r5
$ASN1_TypeReference UL-ChannelRequirementWithCPCH-SetID-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_CompressedModeMethod
$ASN1_TypeReference UL-CompressedModeMethod
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_DL_Mode
$ASN1_TypeReference UL-DL-Mode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_DPCCH_SlotFormat
$ASN1_TypeReference UL-DPCCH-SlotFormat
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_DPCH_Info
$ASN1_TypeReference UL-DPCH-Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_DPCH_Info_r4
$ASN1_TypeReference UL-DPCH-Info-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_DPCH_Info_r5
$ASN1_TypeReference UL-DPCH-Info-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_DPCH_InfoPredef
$ASN1_TypeReference UL-DPCH-InfoPredef
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_DPCH_PowerControlInfo
$ASN1_TypeReference UL-DPCH-PowerControlInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_DPCH_PowerControlInfo_r4
$ASN1_TypeReference UL-DPCH-PowerControlInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_DPCH_PowerControlInfo_r5
$ASN1_TypeReference UL-DPCH-PowerControlInfo-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_DPCH_PowerControlInfoPredef
$ASN1_TypeReference UL-DPCH-PowerControlInfoPredef
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_Interference
$ASN1_TypeReference UL-Interference
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_ScramblingCode
$ASN1_TypeReference UL-ScramblingCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_SynchronisationParameters_r4
$ASN1_TypeReference UL-SynchronisationParameters-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_TargetSIR
$ASN1_TypeReference UL-TargetSIR
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_TimingAdvance
$ASN1_TypeReference UL-TimingAdvance
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_TimingAdvanceControl
$ASN1_TypeReference UL-TimingAdvanceControl
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_TimingAdvanceControl_r4
$ASN1_TypeReference UL-TimingAdvanceControl-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_TS_ChannelisationCode
$ASN1_TypeReference UL-TS-ChannelisationCode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_TS_ChannelisationCodeList
$ASN1_TypeReference UL-TS-ChannelisationCodeList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UplinkAdditionalTimeslots
$ASN1_TypeReference UplinkAdditionalTimeslots
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UplinkAdditionalTimeslots_LCR_r4
$ASN1_TypeReference UplinkAdditionalTimeslots-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UplinkTimeslotsCodes
$ASN1_TypeReference UplinkTimeslotsCodes
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UplinkTimeslotsCodes_LCR_r4
$ASN1_TypeReference UplinkTimeslotsCodes-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Wi_LCR
$ASN1_TypeReference Wi-LCR
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AcquisitionSatInfo
$ASN1_TypeReference AcquisitionSatInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AcquisitionSatInfoList
$ASN1_TypeReference AcquisitionSatInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AdditionalMeasurementID_List
$ASN1_TypeReference AdditionalMeasurementID-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AlmanacSatInfo
$ASN1_TypeReference AlmanacSatInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AlmanacSatInfoList
$ASN1_TypeReference AlmanacSatInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AverageRLC_BufferPayload
$ASN1_TypeReference AverageRLC-BufferPayload
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId AzimuthAndElevation
$ASN1_TypeReference AzimuthAndElevation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BadSatList
$ASN1_TypeReference BadSatList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Frequency_Band
$ASN1_TypeReference Frequency-Band
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BCCH_ARFCN
$ASN1_TypeReference BCCH-ARFCN
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BLER_MeasurementResults
$ASN1_TypeReference BLER-MeasurementResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BLER_MeasurementResultsList
$ASN1_TypeReference BLER-MeasurementResultsList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BLER_TransChIdList
$ASN1_TypeReference BLER-TransChIdList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BSIC_VerificationRequired
$ASN1_TypeReference BSIC-VerificationRequired
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BSICReported
$ASN1_TypeReference BSICReported
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BurstModeParameters
$ASN1_TypeReference BurstModeParameters
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellDCH_ReportCriteria
$ASN1_TypeReference CellDCH-ReportCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellDCH_ReportCriteria_LCR_r4
$ASN1_TypeReference CellDCH-ReportCriteria-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellIndividualOffset
$ASN1_TypeReference CellIndividualOffset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellInfo
$ASN1_TypeReference CellInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellInfo_r4
$ASN1_TypeReference CellInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellInfoSI_RSCP
$ASN1_TypeReference CellInfoSI-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellInfoSI_RSCP_LCR_r4
$ASN1_TypeReference CellInfoSI-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellInfoSI_ECN0
$ASN1_TypeReference CellInfoSI-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellInfoSI_ECN0_LCR_r4
$ASN1_TypeReference CellInfoSI-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellInfoSI_HCS_RSCP
$ASN1_TypeReference CellInfoSI-HCS-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellInfoSI_HCS_RSCP_LCR_r4
$ASN1_TypeReference CellInfoSI-HCS-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellInfoSI_HCS_ECN0
$ASN1_TypeReference CellInfoSI-HCS-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellInfoSI_HCS_ECN0_LCR_r4
$ASN1_TypeReference CellInfoSI-HCS-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellMeasuredResults
$ASN1_TypeReference CellMeasuredResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellMeasurementEventResults
$ASN1_TypeReference CellMeasurementEventResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellMeasurementEventResults_LCR_r4
$ASN1_TypeReference CellMeasurementEventResults-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellReportingQuantities
$ASN1_TypeReference CellReportingQuantities
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellSelectReselectInfoSIB_11_12
$ASN1_TypeReference CellSelectReselectInfoSIB-11-12
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellSelectReselectInfoSIB_11_12_RSCP
$ASN1_TypeReference CellSelectReselectInfoSIB-11-12-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellSelectReselectInfoSIB_11_12_ECN0
$ASN1_TypeReference CellSelectReselectInfoSIB-11-12-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellSelectReselectInfoSIB_11_12_HCS_RSCP
$ASN1_TypeReference CellSelectReselectInfoSIB-11-12-HCS-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellSelectReselectInfoSIB_11_12_HCS_ECN0
$ASN1_TypeReference CellSelectReselectInfoSIB-11-12-HCS-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellSelectReselectInfo_v590ext
$ASN1_TypeReference CellSelectReselectInfo-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellSelectReselectInfoPCHFACH_v5b0ext
$ASN1_TypeReference CellSelectReselectInfoPCHFACH-v5b0ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellsForInterFreqMeasList
$ASN1_TypeReference CellsForInterFreqMeasList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellsForInterRATMeasList
$ASN1_TypeReference CellsForInterRATMeasList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellsForIntraFreqMeasList
$ASN1_TypeReference CellsForIntraFreqMeasList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellSynchronisationInfo
$ASN1_TypeReference CellSynchronisationInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellToReport
$ASN1_TypeReference CellToReport
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellToReportList
$ASN1_TypeReference CellToReportList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CodePhaseSearchWindow
$ASN1_TypeReference CodePhaseSearchWindow
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CountC_SFN_Frame_difference
$ASN1_TypeReference CountC-SFN-Frame-difference
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CPICH_Ec_N0
$ASN1_TypeReference CPICH-Ec-N0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CPICH_RSCP
$ASN1_TypeReference CPICH-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DeltaPRC
$ASN1_TypeReference DeltaPRC
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DeltaQrxlevmin
$ASN1_TypeReference DeltaQrxlevmin
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DeltaRSCP
$ASN1_TypeReference DeltaRSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DeltaRSCPPerCell
$ASN1_TypeReference DeltaRSCPPerCell
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DeltaRRC
$ASN1_TypeReference DeltaRRC
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DGPS_CorrectionSatInfo
$ASN1_TypeReference DGPS-CorrectionSatInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DGPS_CorrectionSatInfoList
$ASN1_TypeReference DGPS-CorrectionSatInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DiffCorrectionStatus
$ASN1_TypeReference DiffCorrectionStatus
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DL_TransportChannelBLER
$ASN1_TypeReference DL-TransportChannelBLER
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId DopplerUncertainty
$ASN1_TypeReference DopplerUncertainty
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId EllipsoidPoint
$ASN1_TypeReference EllipsoidPoint
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId EllipsoidPointAltitude
$ASN1_TypeReference EllipsoidPointAltitude
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId EllipsoidPointAltitudeEllipsoide
$ASN1_TypeReference EllipsoidPointAltitudeEllipsoide
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId EllipsoidPointUncertCircle
$ASN1_TypeReference EllipsoidPointUncertCircle
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId EllipsoidPointUncertEllipse
$ASN1_TypeReference EllipsoidPointUncertEllipse
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId EnvironmentCharacterisation
$ASN1_TypeReference EnvironmentCharacterisation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event1a
$ASN1_TypeReference Event1a
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event1a_r4
$ASN1_TypeReference Event1a-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event1a_LCR_r4
$ASN1_TypeReference Event1a-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event1b
$ASN1_TypeReference Event1b
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event1b_r4
$ASN1_TypeReference Event1b-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event1b_LCR_r4
$ASN1_TypeReference Event1b-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event1c
$ASN1_TypeReference Event1c
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event1e
$ASN1_TypeReference Event1e
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event1f
$ASN1_TypeReference Event1f
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event2a
$ASN1_TypeReference Event2a
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event2b
$ASN1_TypeReference Event2b
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event2c
$ASN1_TypeReference Event2c
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event2d
$ASN1_TypeReference Event2d
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event2e
$ASN1_TypeReference Event2e
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event2f
$ASN1_TypeReference Event2f
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event3a
$ASN1_TypeReference Event3a
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event3b
$ASN1_TypeReference Event3b
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event3c
$ASN1_TypeReference Event3c
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Event3d
$ASN1_TypeReference Event3d
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId EventIDInterFreq
$ASN1_TypeReference EventIDInterFreq
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId EventIDInterRAT
$ASN1_TypeReference EventIDInterRAT
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId EventIDIntraFreq
$ASN1_TypeReference EventIDIntraFreq
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId EventResults
$ASN1_TypeReference EventResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ExtraDopplerInfo
$ASN1_TypeReference ExtraDopplerInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FACH_MeasurementOccasionInfo
$ASN1_TypeReference FACH-MeasurementOccasionInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FACH_MeasurementOccasionInfo_LCR_r4_ext
$ASN1_TypeReference FACH-MeasurementOccasionInfo-LCR-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FilterCoefficient
$ASN1_TypeReference FilterCoefficient
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FineSFN_SFN
$ASN1_TypeReference FineSFN-SFN
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ForbiddenAffectCell
$ASN1_TypeReference ForbiddenAffectCell
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ForbiddenAffectCell_r4
$ASN1_TypeReference ForbiddenAffectCell-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ForbiddenAffectCell_LCR_r4
$ASN1_TypeReference ForbiddenAffectCell-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ForbiddenAffectCellList
$ASN1_TypeReference ForbiddenAffectCellList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ForbiddenAffectCellList_r4
$ASN1_TypeReference ForbiddenAffectCellList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ForbiddenAffectCellList_LCR_r4
$ASN1_TypeReference ForbiddenAffectCellList-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FreqQualityEstimateQuantity_FDD
$ASN1_TypeReference FreqQualityEstimateQuantity-FDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FreqQualityEstimateQuantity_TDD
$ASN1_TypeReference FreqQualityEstimateQuantity-TDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GPS_MeasurementParam
$ASN1_TypeReference GPS-MeasurementParam
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GPS_MeasurementParamList
$ASN1_TypeReference GPS-MeasurementParamList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GSM_CarrierRSSI
$ASN1_TypeReference GSM-CarrierRSSI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GSM_MeasuredResults
$ASN1_TypeReference GSM-MeasuredResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GSM_MeasuredResultsList
$ASN1_TypeReference GSM-MeasuredResultsList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GPS_TOW_1msec
$ASN1_TypeReference GPS-TOW-1msec
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GPS_TOW_Assist
$ASN1_TypeReference GPS-TOW-Assist
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GPS_TOW_AssistList
$ASN1_TypeReference GPS-TOW-AssistList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HCS_CellReselectInformation_RSCP
$ASN1_TypeReference HCS-CellReselectInformation-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HCS_CellReselectInformation_ECN0
$ASN1_TypeReference HCS-CellReselectInformation-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HCS_NeighbouringCellInformation_RSCP
$ASN1_TypeReference HCS-NeighbouringCellInformation-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HCS_NeighbouringCellInformation_ECN0
$ASN1_TypeReference HCS-NeighbouringCellInformation-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HCS_PRIO
$ASN1_TypeReference HCS-PRIO
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HCS_ServingCellInformation
$ASN1_TypeReference HCS-ServingCellInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Hysteresis
$ASN1_TypeReference Hysteresis
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId HysteresisInterFreq
$ASN1_TypeReference HysteresisInterFreq
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCell
$ASN1_TypeReference InterFreqCell
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCell_LCR_r4
$ASN1_TypeReference InterFreqCell-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellID
$ASN1_TypeReference InterFreqCellID
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellInfoList
$ASN1_TypeReference InterFreqCellInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellInfoList_r4
$ASN1_TypeReference InterFreqCellInfoList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellInfoSI_List_RSCP
$ASN1_TypeReference InterFreqCellInfoSI-List-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellInfoSI_List_ECN0
$ASN1_TypeReference InterFreqCellInfoSI-List-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellInfoSI_List_HCS_RSCP
$ASN1_TypeReference InterFreqCellInfoSI-List-HCS-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellInfoSI_List_HCS_ECN0
$ASN1_TypeReference InterFreqCellInfoSI-List-HCS-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellInfoSI_List_RSCP_LCR
$ASN1_TypeReference InterFreqCellInfoSI-List-RSCP-LCR
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellInfoSI_List_ECN0_LCR
$ASN1_TypeReference InterFreqCellInfoSI-List-ECN0-LCR
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellInfoSI_List_HCS_RSCP_LCR
$ASN1_TypeReference InterFreqCellInfoSI-List-HCS-RSCP-LCR
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellInfoSI_List_HCS_ECN0_LCR
$ASN1_TypeReference InterFreqCellInfoSI-List-HCS-ECN0-LCR
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellList
$ASN1_TypeReference InterFreqCellList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellList_LCR_r4_ext
$ASN1_TypeReference InterFreqCellList-LCR-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqCellMeasuredResultsList
$ASN1_TypeReference InterFreqCellMeasuredResultsList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqEvent
$ASN1_TypeReference InterFreqEvent
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqEventList
$ASN1_TypeReference InterFreqEventList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFrequencyMeasuredResultsList_v590ext
$ASN1_TypeReference InterFrequencyMeasuredResultsList-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Inter_FreqEventCriteria_v590ext
$ASN1_TypeReference Inter-FreqEventCriteria-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Inter_FreqEventCriteriaList_v590ext
$ASN1_TypeReference Inter-FreqEventCriteriaList-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Intra_FreqEventCriteriaList_v590ext
$ASN1_TypeReference Intra-FreqEventCriteriaList-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFrequencyMeasuredResultsList_v590ext
$ASN1_TypeReference IntraFrequencyMeasuredResultsList-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqReportingCriteria_1b_r5
$ASN1_TypeReference IntraFreqReportingCriteria-1b-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PeriodicReportingInfo_1b
$ASN1_TypeReference PeriodicReportingInfo-1b
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqEventResults
$ASN1_TypeReference InterFreqEventResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqEventResults_LCR_r4_ext
$ASN1_TypeReference InterFreqEventResults-LCR-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqMeasQuantity
$ASN1_TypeReference InterFreqMeasQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqMeasuredResults
$ASN1_TypeReference InterFreqMeasuredResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqMeasuredResultsList
$ASN1_TypeReference InterFreqMeasuredResultsList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqMeasurementSysInfo_RSCP
$ASN1_TypeReference InterFreqMeasurementSysInfo-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqMeasurementSysInfo_ECN0
$ASN1_TypeReference InterFreqMeasurementSysInfo-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqMeasurementSysInfo_HCS_RSCP
$ASN1_TypeReference InterFreqMeasurementSysInfo-HCS-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqMeasurementSysInfo_HCS_ECN0
$ASN1_TypeReference InterFreqMeasurementSysInfo-HCS-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqMeasurementSysInfo_RSCP_LCR_r4
$ASN1_TypeReference InterFreqMeasurementSysInfo-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqMeasurementSysInfo_ECN0_LCR_r4
$ASN1_TypeReference InterFreqMeasurementSysInfo-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqMeasurementSysInfo_HCS_RSCP_LCR_r4
$ASN1_TypeReference InterFreqMeasurementSysInfo-HCS-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqMeasurementSysInfo_HCS_ECN0_LCR_r4
$ASN1_TypeReference InterFreqMeasurementSysInfo-HCS-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqReportCriteria
$ASN1_TypeReference InterFreqReportCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqReportCriteria_r4
$ASN1_TypeReference InterFreqReportCriteria-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqReportingCriteria
$ASN1_TypeReference InterFreqReportingCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFreqReportingQuantity
$ASN1_TypeReference InterFreqReportingQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFrequencyMeasurement
$ASN1_TypeReference InterFrequencyMeasurement
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterFrequencyMeasurement_r4
$ASN1_TypeReference InterFrequencyMeasurement-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRAT_TargetCellDescription
$ASN1_TypeReference InterRAT-TargetCellDescription
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATCellID
$ASN1_TypeReference InterRATCellID
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATCellInfoIndication
$ASN1_TypeReference InterRATCellInfoIndication
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATCellInfoList
$ASN1_TypeReference InterRATCellInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATCellInfoList_B
$ASN1_TypeReference InterRATCellInfoList-B
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATCellInfoList_r4
$ASN1_TypeReference InterRATCellInfoList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATCellIndividualOffset
$ASN1_TypeReference InterRATCellIndividualOffset
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATEvent
$ASN1_TypeReference InterRATEvent
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATEventList
$ASN1_TypeReference InterRATEventList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATEventResults
$ASN1_TypeReference InterRATEventResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATInfo
$ASN1_TypeReference InterRATInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATMeasQuantity
$ASN1_TypeReference InterRATMeasQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATMeasuredResults
$ASN1_TypeReference InterRATMeasuredResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATMeasuredResultsList
$ASN1_TypeReference InterRATMeasuredResultsList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATMeasurement
$ASN1_TypeReference InterRATMeasurement
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATMeasurement_r4
$ASN1_TypeReference InterRATMeasurement-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATMeasurementSysInfo
$ASN1_TypeReference InterRATMeasurementSysInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATMeasurementSysInfo_B
$ASN1_TypeReference InterRATMeasurementSysInfo-B
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATReportCriteria
$ASN1_TypeReference InterRATReportCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATReportingCriteria
$ASN1_TypeReference InterRATReportingCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRATReportingQuantity
$ASN1_TypeReference InterRATReportingQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqCellID
$ASN1_TypeReference IntraFreqCellID
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqCellInfoList
$ASN1_TypeReference IntraFreqCellInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqCellInfoList_r4
$ASN1_TypeReference IntraFreqCellInfoList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqCellInfoSI_List_RSCP
$ASN1_TypeReference IntraFreqCellInfoSI-List-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqCellInfoSI_List_ECN0
$ASN1_TypeReference IntraFreqCellInfoSI-List-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqCellInfoSI_List_HCS_RSCP
$ASN1_TypeReference IntraFreqCellInfoSI-List-HCS-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqCellInfoSI_List_HCS_ECN0
$ASN1_TypeReference IntraFreqCellInfoSI-List-HCS-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqCellInfoSI_List_RSCP_LCR_r4
$ASN1_TypeReference IntraFreqCellInfoSI-List-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqCellInfoSI_List_ECN0_LCR_r4
$ASN1_TypeReference IntraFreqCellInfoSI-List-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqCellInfoSI_List_HCS_RSCP_LCR_r4
$ASN1_TypeReference IntraFreqCellInfoSI-List-HCS-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqCellInfoSI_List_HCS_ECN0_LCR_r4
$ASN1_TypeReference IntraFreqCellInfoSI-List-HCS-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqEvent
$ASN1_TypeReference IntraFreqEvent
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqEvent_r4
$ASN1_TypeReference IntraFreqEvent-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqEvent_LCR_r4
$ASN1_TypeReference IntraFreqEvent-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqEvent_1d_r5
$ASN1_TypeReference IntraFreqEvent-1d-r5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqEventCriteria
$ASN1_TypeReference IntraFreqEventCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqEventCriteria_r4
$ASN1_TypeReference IntraFreqEventCriteria-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqEventCriteria_LCR_r4
$ASN1_TypeReference IntraFreqEventCriteria-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqEventCriteriaList
$ASN1_TypeReference IntraFreqEventCriteriaList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqEventCriteriaList_r4
$ASN1_TypeReference IntraFreqEventCriteriaList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqEventCriteriaList_LCR_r4
$ASN1_TypeReference IntraFreqEventCriteriaList-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqEventResults
$ASN1_TypeReference IntraFreqEventResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasQuantity
$ASN1_TypeReference IntraFreqMeasQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasQuantity_FDD
$ASN1_TypeReference IntraFreqMeasQuantity-FDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasQuantity_TDD
$ASN1_TypeReference IntraFreqMeasQuantity-TDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasQuantity_TDDList
$ASN1_TypeReference IntraFreqMeasQuantity-TDDList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasuredResultsList
$ASN1_TypeReference IntraFreqMeasuredResultsList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasurementSysInfo_RSCP
$ASN1_TypeReference IntraFreqMeasurementSysInfo-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasurementSysInfo_ECN0
$ASN1_TypeReference IntraFreqMeasurementSysInfo-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasurementSysInfo_HCS_RSCP
$ASN1_TypeReference IntraFreqMeasurementSysInfo-HCS-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasurementSysInfo_HCS_ECN0
$ASN1_TypeReference IntraFreqMeasurementSysInfo-HCS-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasurementSysInfo_RSCP_LCR_r4
$ASN1_TypeReference IntraFreqMeasurementSysInfo-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasurementSysInfo_ECN0_LCR_r4
$ASN1_TypeReference IntraFreqMeasurementSysInfo-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasurementSysInfo_HCS_RSCP_LCR_r4
$ASN1_TypeReference IntraFreqMeasurementSysInfo-HCS-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqMeasurementSysInfo_HCS_ECN0_LCR_r4
$ASN1_TypeReference IntraFreqMeasurementSysInfo-HCS-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqReportCriteria
$ASN1_TypeReference IntraFreqReportCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqReportCriteria_r4
$ASN1_TypeReference IntraFreqReportCriteria-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqReportingCriteria
$ASN1_TypeReference IntraFreqReportingCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqReportingCriteria_r4
$ASN1_TypeReference IntraFreqReportingCriteria-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqReportingCriteria_LCR_r4
$ASN1_TypeReference IntraFreqReportingCriteria-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqReportingQuantity
$ASN1_TypeReference IntraFreqReportingQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqReportingQuantityForRACH
$ASN1_TypeReference IntraFreqReportingQuantityForRACH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqRepQuantityRACH_FDD
$ASN1_TypeReference IntraFreqRepQuantityRACH-FDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqRepQuantityRACH_TDD
$ASN1_TypeReference IntraFreqRepQuantityRACH-TDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFreqRepQuantityRACH_TDDList
$ASN1_TypeReference IntraFreqRepQuantityRACH-TDDList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFrequencyMeasurement
$ASN1_TypeReference IntraFrequencyMeasurement
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IntraFrequencyMeasurement_r4
$ASN1_TypeReference IntraFrequencyMeasurement-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IODE
$ASN1_TypeReference IODE
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IP_Length
$ASN1_TypeReference IP-Length
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IP_PCCPCH_r4
$ASN1_TypeReference IP-PCCPCH-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IP_Spacing
$ASN1_TypeReference IP-Spacing
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IP_Spacing_TDD
$ASN1_TypeReference IP-Spacing-TDD
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IS_2000SpecificMeasInfo
$ASN1_TypeReference IS-2000SpecificMeasInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxNumberOfReportingCellsType1
$ASN1_TypeReference MaxNumberOfReportingCellsType1
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxNumberOfReportingCellsType2
$ASN1_TypeReference MaxNumberOfReportingCellsType2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxNumberOfReportingCellsType3
$ASN1_TypeReference MaxNumberOfReportingCellsType3
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MaxReportedCellsOnRACH
$ASN1_TypeReference MaxReportedCellsOnRACH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasuredResults
$ASN1_TypeReference MeasuredResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasuredResults_v390ext
$ASN1_TypeReference MeasuredResults-v390ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasuredResults_v590ext
$ASN1_TypeReference MeasuredResults-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasuredResults_LCR_r4
$ASN1_TypeReference MeasuredResults-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasuredResultsList
$ASN1_TypeReference MeasuredResultsList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasuredResultsList_LCR_r4_ext
$ASN1_TypeReference MeasuredResultsList-LCR-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasuredResultsOnRACH
$ASN1_TypeReference MeasuredResultsOnRACH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementCommand
$ASN1_TypeReference MeasurementCommand
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementCommand_r4
$ASN1_TypeReference MeasurementCommand-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementControlSysInfo
$ASN1_TypeReference MeasurementControlSysInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementControlSysInfo_LCR_r4_ext
$ASN1_TypeReference MeasurementControlSysInfo-LCR-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementIdentity
$ASN1_TypeReference MeasurementIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementQuantityGSM
$ASN1_TypeReference MeasurementQuantityGSM
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementReportingMode
$ASN1_TypeReference MeasurementReportingMode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementType
$ASN1_TypeReference MeasurementType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementType_r4
$ASN1_TypeReference MeasurementType-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MeasurementValidity
$ASN1_TypeReference MeasurementValidity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MonitoredCellRACH_List
$ASN1_TypeReference MonitoredCellRACH-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MonitoredCellRACH_Result
$ASN1_TypeReference MonitoredCellRACH-Result
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MultipathIndicator
$ASN1_TypeReference MultipathIndicator
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId N_CR_T_CRMaxHyst
$ASN1_TypeReference N-CR-T-CRMaxHyst
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NavigationModelSatInfo
$ASN1_TypeReference NavigationModelSatInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NavigationModelSatInfoList
$ASN1_TypeReference NavigationModelSatInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId EphemerisParameter
$ASN1_TypeReference EphemerisParameter
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NC_Mode
$ASN1_TypeReference NC-Mode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Neighbour
$ASN1_TypeReference Neighbour
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Neighbour_v390ext
$ASN1_TypeReference Neighbour-v390ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NeighbourList
$ASN1_TypeReference NeighbourList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NeighbourList_v390ext
$ASN1_TypeReference NeighbourList-v390ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NeighbourQuality
$ASN1_TypeReference NeighbourQuality
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCell
$ASN1_TypeReference NewInterFreqCell
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCell_r4
$ASN1_TypeReference NewInterFreqCell-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellList
$ASN1_TypeReference NewInterFreqCellList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellList_r4
$ASN1_TypeReference NewInterFreqCellList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_RSCP
$ASN1_TypeReference NewInterFreqCellSI-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_ECN0
$ASN1_TypeReference NewInterFreqCellSI-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_HCS_RSCP
$ASN1_TypeReference NewInterFreqCellSI-HCS-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_HCS_ECN0
$ASN1_TypeReference NewInterFreqCellSI-HCS-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_RSCP_LCR_r4
$ASN1_TypeReference NewInterFreqCellSI-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_ECN0_LCR_r4
$ASN1_TypeReference NewInterFreqCellSI-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_HCS_RSCP_LCR_r4
$ASN1_TypeReference NewInterFreqCellSI-HCS-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_HCS_ECN0_LCR_r4
$ASN1_TypeReference NewInterFreqCellSI-HCS-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_List_ECN0
$ASN1_TypeReference NewInterFreqCellSI-List-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_List_HCS_RSCP
$ASN1_TypeReference NewInterFreqCellSI-List-HCS-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_List_HCS_ECN0
$ASN1_TypeReference NewInterFreqCellSI-List-HCS-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_List_RSCP
$ASN1_TypeReference NewInterFreqCellSI-List-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_List_ECN0_LCR_r4
$ASN1_TypeReference NewInterFreqCellSI-List-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_List_HCS_RSCP_LCR_r4
$ASN1_TypeReference NewInterFreqCellSI-List-HCS-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_List_HCS_ECN0_LCR_r4
$ASN1_TypeReference NewInterFreqCellSI-List-HCS-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterFreqCellSI_List_RSCP_LCR_r4
$ASN1_TypeReference NewInterFreqCellSI-List-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterRATCell
$ASN1_TypeReference NewInterRATCell
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterRATCell_B
$ASN1_TypeReference NewInterRATCell-B
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterRATCellList
$ASN1_TypeReference NewInterRATCellList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewInterRATCellList_B
$ASN1_TypeReference NewInterRATCellList-B
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCell
$ASN1_TypeReference NewIntraFreqCell
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCell_r4
$ASN1_TypeReference NewIntraFreqCell-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellList
$ASN1_TypeReference NewIntraFreqCellList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellList_r4
$ASN1_TypeReference NewIntraFreqCellList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_RSCP
$ASN1_TypeReference NewIntraFreqCellSI-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_ECN0
$ASN1_TypeReference NewIntraFreqCellSI-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_HCS_RSCP
$ASN1_TypeReference NewIntraFreqCellSI-HCS-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_HCS_ECN0
$ASN1_TypeReference NewIntraFreqCellSI-HCS-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_RSCP_LCR_r4
$ASN1_TypeReference NewIntraFreqCellSI-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_ECN0_LCR_r4
$ASN1_TypeReference NewIntraFreqCellSI-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_HCS_RSCP_LCR_r4
$ASN1_TypeReference NewIntraFreqCellSI-HCS-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_HCS_ECN0_LCR_r4
$ASN1_TypeReference NewIntraFreqCellSI-HCS-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_List_RSCP
$ASN1_TypeReference NewIntraFreqCellSI-List-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_List_ECN0
$ASN1_TypeReference NewIntraFreqCellSI-List-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_List_HCS_RSCP
$ASN1_TypeReference NewIntraFreqCellSI-List-HCS-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_List_HCS_ECN0
$ASN1_TypeReference NewIntraFreqCellSI-List-HCS-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_List_RSCP_LCR_r4
$ASN1_TypeReference NewIntraFreqCellSI-List-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_List_ECN0_LCR_r4
$ASN1_TypeReference NewIntraFreqCellSI-List-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_List_HCS_RSCP_LCR_r4
$ASN1_TypeReference NewIntraFreqCellSI-List-HCS-RSCP-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NewIntraFreqCellSI_List_HCS_ECN0_LCR_r4
$ASN1_TypeReference NewIntraFreqCellSI-List-HCS-ECN0-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NonUsedFreqParameter
$ASN1_TypeReference NonUsedFreqParameter
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NonUsedFreqParameterList
$ASN1_TypeReference NonUsedFreqParameterList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ObservedTimeDifferenceToGSM
$ASN1_TypeReference ObservedTimeDifferenceToGSM
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId OTDOA_SearchWindowSize
$ASN1_TypeReference OTDOA-SearchWindowSize
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Pathloss
$ASN1_TypeReference Pathloss
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PenaltyTime_RSCP
$ASN1_TypeReference PenaltyTime-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PenaltyTime_ECN0
$ASN1_TypeReference PenaltyTime-ECN0
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PendingTimeAfterTrigger
$ASN1_TypeReference PendingTimeAfterTrigger
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PeriodicalOrEventTrigger
$ASN1_TypeReference PeriodicalOrEventTrigger
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PeriodicalReportingCriteria
$ASN1_TypeReference PeriodicalReportingCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PeriodicalWithReportingCellStatus
$ASN1_TypeReference PeriodicalWithReportingCellStatus
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PLMNIdentitiesOfNeighbourCells
$ASN1_TypeReference PLMNIdentitiesOfNeighbourCells
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PLMNsOfInterFreqCellsList
$ASN1_TypeReference PLMNsOfInterFreqCellsList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PLMNsOfIntraFreqCellsList
$ASN1_TypeReference PLMNsOfIntraFreqCellsList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PLMNsOfInterRATCellsList
$ASN1_TypeReference PLMNsOfInterRATCellsList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PositionEstimate
$ASN1_TypeReference PositionEstimate
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PositioningMethod
$ASN1_TypeReference PositioningMethod
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PRC
$ASN1_TypeReference PRC
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PrimaryCCPCH_RSCP
$ASN1_TypeReference PrimaryCCPCH-RSCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Q_HCS
$ASN1_TypeReference Q-HCS
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Q_OffsetS_N
$ASN1_TypeReference Q-OffsetS-N
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Q_QualMin
$ASN1_TypeReference Q-QualMin
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Q_RxlevMin
$ASN1_TypeReference Q-RxlevMin
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId QualityEventResults
$ASN1_TypeReference QualityEventResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId QualityMeasuredResults
$ASN1_TypeReference QualityMeasuredResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId QualityMeasurement
$ASN1_TypeReference QualityMeasurement
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId QualityReportCriteria
$ASN1_TypeReference QualityReportCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId QualityReportingCriteria
$ASN1_TypeReference QualityReportingCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId QualityReportingCriteriaSingle
$ASN1_TypeReference QualityReportingCriteriaSingle
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId QualityReportingQuantity
$ASN1_TypeReference QualityReportingQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RAT_Type
$ASN1_TypeReference RAT-Type
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReferenceCellPosition
$ASN1_TypeReference ReferenceCellPosition
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReferenceLocation
$ASN1_TypeReference ReferenceLocation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReferenceTimeDifferenceToCell
$ASN1_TypeReference ReferenceTimeDifferenceToCell
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RemovedInterFreqCellList
$ASN1_TypeReference RemovedInterFreqCellList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RemovedInterRATCellList
$ASN1_TypeReference RemovedInterRATCellList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RemovedIntraFreqCellList
$ASN1_TypeReference RemovedIntraFreqCellList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReplacementActivationThreshold
$ASN1_TypeReference ReplacementActivationThreshold
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReportDeactivationThreshold
$ASN1_TypeReference ReportDeactivationThreshold
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReportingAmount
$ASN1_TypeReference ReportingAmount
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReportingCellStatus
$ASN1_TypeReference ReportingCellStatus
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReportingCellStatusOpt
$ASN1_TypeReference ReportingCellStatusOpt
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReportingInfoForCellDCH
$ASN1_TypeReference ReportingInfoForCellDCH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReportingInfoForCellDCH_LCR_r4
$ASN1_TypeReference ReportingInfoForCellDCH-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReportingInterval
$ASN1_TypeReference ReportingInterval
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReportingIntervalLong
$ASN1_TypeReference ReportingIntervalLong
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReportingRange
$ASN1_TypeReference ReportingRange
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RL_AdditionInfoList
$ASN1_TypeReference RL-AdditionInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RL_InformationLists
$ASN1_TypeReference RL-InformationLists
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RLC_BuffersPayload
$ASN1_TypeReference RLC-BuffersPayload
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId RRC
$ASN1_TypeReference RRC
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SatData
$ASN1_TypeReference SatData
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SatDataList
$ASN1_TypeReference SatDataList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SatelliteStatus
$ASN1_TypeReference SatelliteStatus
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SatID
$ASN1_TypeReference SatID
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SFN_Offset_Validity
$ASN1_TypeReference SFN-Offset-Validity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SFN_SFN_Drift
$ASN1_TypeReference SFN-SFN-Drift
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SFN_SFN_ObsTimeDifference
$ASN1_TypeReference SFN-SFN-ObsTimeDifference
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SFN_SFN_ObsTimeDifference1
$ASN1_TypeReference SFN-SFN-ObsTimeDifference1
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SFN_SFN_ObsTimeDifference2
$ASN1_TypeReference SFN-SFN-ObsTimeDifference2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SFN_SFN_OTD_Type
$ASN1_TypeReference SFN-SFN-OTD-Type
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SFN_SFN_RelTimeDifference1
$ASN1_TypeReference SFN-SFN-RelTimeDifference1
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SFN_TOW_Uncertainty
$ASN1_TypeReference SFN-TOW-Uncertainty
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIR
$ASN1_TypeReference SIR
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIR_MeasurementList
$ASN1_TypeReference SIR-MeasurementList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIR_MeasurementResults
$ASN1_TypeReference SIR-MeasurementResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIR_TFCS
$ASN1_TypeReference SIR-TFCS
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIR_TFCS_List
$ASN1_TypeReference SIR-TFCS-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIR_TimeslotList
$ASN1_TypeReference SIR-TimeslotList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SubFrame1Reserved
$ASN1_TypeReference SubFrame1Reserved
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_ADVinfo
$ASN1_TypeReference T-ADVinfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_CRMax
$ASN1_TypeReference T-CRMax
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId T_CRMaxHyst
$ASN1_TypeReference T-CRMaxHyst
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TemporaryOffset1
$ASN1_TypeReference TemporaryOffset1
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TemporaryOffset2
$ASN1_TypeReference TemporaryOffset2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TemporaryOffsetList
$ASN1_TypeReference TemporaryOffsetList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Threshold
$ASN1_TypeReference Threshold
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ThreholdNonUsedFrequency_deltaList
$ASN1_TypeReference ThreholdNonUsedFrequency-deltaList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ThresholdPositionChange
$ASN1_TypeReference ThresholdPositionChange
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ThresholdSFN_GPS_TOW
$ASN1_TypeReference ThresholdSFN-GPS-TOW
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ThresholdSFN_SFN_Change
$ASN1_TypeReference ThresholdSFN-SFN-Change
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ThresholdUsedFrequency
$ASN1_TypeReference ThresholdUsedFrequency
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeInterval
$ASN1_TypeReference TimeInterval
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotInfo
$ASN1_TypeReference TimeslotInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotInfo_LCR_r4
$ASN1_TypeReference TimeslotInfo-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotInfoList
$ASN1_TypeReference TimeslotInfoList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotInfoList_LCR_r4
$ASN1_TypeReference TimeslotInfoList-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotInfoList_r4
$ASN1_TypeReference TimeslotInfoList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotISCP
$ASN1_TypeReference TimeslotISCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotISCP_List
$ASN1_TypeReference TimeslotISCP-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotListWithISCP
$ASN1_TypeReference TimeslotListWithISCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeslotWithISCP
$ASN1_TypeReference TimeslotWithISCP
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TimeToTrigger
$ASN1_TypeReference TimeToTrigger
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeEventParam
$ASN1_TypeReference TrafficVolumeEventParam
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeEventResults
$ASN1_TypeReference TrafficVolumeEventResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeEventType
$ASN1_TypeReference TrafficVolumeEventType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeMeasQuantity
$ASN1_TypeReference TrafficVolumeMeasQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeMeasSysInfo
$ASN1_TypeReference TrafficVolumeMeasSysInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeMeasuredResults
$ASN1_TypeReference TrafficVolumeMeasuredResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeMeasuredResultsList
$ASN1_TypeReference TrafficVolumeMeasuredResultsList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeMeasurement
$ASN1_TypeReference TrafficVolumeMeasurement
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeMeasurementObjectList
$ASN1_TypeReference TrafficVolumeMeasurementObjectList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeReportCriteria
$ASN1_TypeReference TrafficVolumeReportCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeReportCriteriaSysInfo
$ASN1_TypeReference TrafficVolumeReportCriteriaSysInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeReportingCriteria
$ASN1_TypeReference TrafficVolumeReportingCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeReportingQuantity
$ASN1_TypeReference TrafficVolumeReportingQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TrafficVolumeThreshold
$ASN1_TypeReference TrafficVolumeThreshold
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransChCriteria
$ASN1_TypeReference TransChCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransChCriteriaList
$ASN1_TypeReference TransChCriteriaList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransferMode
$ASN1_TypeReference TransferMode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TransmittedPowerThreshold
$ASN1_TypeReference TransmittedPowerThreshold
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TriggeringCondition1
$ASN1_TypeReference TriggeringCondition1
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TriggeringCondition2
$ASN1_TypeReference TriggeringCondition2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TX_InterruptionAfterTrigger
$ASN1_TypeReference TX-InterruptionAfterTrigger
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UDRE
$ASN1_TypeReference UDRE
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_6AB_Event
$ASN1_TypeReference UE-6AB-Event
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_6FG_Event
$ASN1_TypeReference UE-6FG-Event
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_AutonomousUpdateMode
$ASN1_TypeReference UE-AutonomousUpdateMode
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalEventParam
$ASN1_TypeReference UE-InternalEventParam
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalEventParamList
$ASN1_TypeReference UE-InternalEventParamList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalEventResults
$ASN1_TypeReference UE-InternalEventResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalMeasQuantity
$ASN1_TypeReference UE-InternalMeasQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalMeasuredResults
$ASN1_TypeReference UE-InternalMeasuredResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalMeasuredResults_LCR_r4
$ASN1_TypeReference UE-InternalMeasuredResults-LCR-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalMeasurement
$ASN1_TypeReference UE-InternalMeasurement
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalMeasurement_r4
$ASN1_TypeReference UE-InternalMeasurement-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalMeasurementSysInfo
$ASN1_TypeReference UE-InternalMeasurementSysInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalReportCriteria
$ASN1_TypeReference UE-InternalReportCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalReportingCriteria
$ASN1_TypeReference UE-InternalReportingCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalReportingQuantity
$ASN1_TypeReference UE-InternalReportingQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_InternalReportingQuantity_r4
$ASN1_TypeReference UE-InternalReportingQuantity-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_MeasurementQuantity
$ASN1_TypeReference UE-MeasurementQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RX_TX_ReportEntry
$ASN1_TypeReference UE-RX-TX-ReportEntry
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RX_TX_ReportEntryList
$ASN1_TypeReference UE-RX-TX-ReportEntryList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RX_TX_TimeDifferenceType1
$ASN1_TypeReference UE-RX-TX-TimeDifferenceType1
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RX_TX_TimeDifferenceType2
$ASN1_TypeReference UE-RX-TX-TimeDifferenceType2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RX_TX_TimeDifferenceType2Info
$ASN1_TypeReference UE-RX-TX-TimeDifferenceType2Info
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_RX_TX_TimeDifferenceThreshold
$ASN1_TypeReference UE-RX-TX-TimeDifferenceThreshold
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_TransmittedPower
$ASN1_TypeReference UE-TransmittedPower
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_TransmittedPowerTDD_List
$ASN1_TypeReference UE-TransmittedPowerTDD-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UL_TrCH_Identity
$ASN1_TypeReference UL-TrCH-Identity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_Accuracy
$ASN1_TypeReference UE-Positioning-Accuracy
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_CipherParameters
$ASN1_TypeReference UE-Positioning-CipherParameters
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_Error
$ASN1_TypeReference UE-Positioning-Error
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_ErrorCause
$ASN1_TypeReference UE-Positioning-ErrorCause
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_EventParam
$ASN1_TypeReference UE-Positioning-EventParam
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_EventParamList
$ASN1_TypeReference UE-Positioning-EventParamList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_EventSpecificInfo
$ASN1_TypeReference UE-Positioning-EventSpecificInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_GPS_AcquisitionAssistance
$ASN1_TypeReference UE-Positioning-GPS-AcquisitionAssistance
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_GPS_AdditionalAssistanceDataRequest
$ASN1_TypeReference UE-Positioning-GPS-AdditionalAssistanceDataRequest
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_GPS_Almanac
$ASN1_TypeReference UE-Positioning-GPS-Almanac
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_GPS_AssistanceData
$ASN1_TypeReference UE-Positioning-GPS-AssistanceData
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_GPS_DGPS_Corrections
$ASN1_TypeReference UE-Positioning-GPS-DGPS-Corrections
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_GPS_IonosphericModel
$ASN1_TypeReference UE-Positioning-GPS-IonosphericModel
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_GPS_MeasurementResults
$ASN1_TypeReference UE-Positioning-GPS-MeasurementResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_GPS_NavigationModel
$ASN1_TypeReference UE-Positioning-GPS-NavigationModel
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_GPS_NavModelAddDataReq
$ASN1_TypeReference UE-Positioning-GPS-NavModelAddDataReq
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_GPS_ReferenceCellInfo
$ASN1_TypeReference UE-Positioning-GPS-ReferenceCellInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_GPS_ReferenceTime
$ASN1_TypeReference UE-Positioning-GPS-ReferenceTime
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_GPS_UTC_Model
$ASN1_TypeReference UE-Positioning-GPS-UTC-Model
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_IPDL_Parameters
$ASN1_TypeReference UE-Positioning-IPDL-Parameters
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_IPDL_Parameters_r4
$ASN1_TypeReference UE-Positioning-IPDL-Parameters-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_IPDL_Parameters_TDD_r4_ext
$ASN1_TypeReference UE-Positioning-IPDL-Parameters-TDD-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_MeasuredResults
$ASN1_TypeReference UE-Positioning-MeasuredResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_MeasuredResults_v390ext
$ASN1_TypeReference UE-Positioning-MeasuredResults-v390ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_Measurement
$ASN1_TypeReference UE-Positioning-Measurement
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_Measurement_v390ext
$ASN1_TypeReference UE-Positioning-Measurement-v390ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_Measurement_r4
$ASN1_TypeReference UE-Positioning-Measurement-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_MeasurementEventResults
$ASN1_TypeReference UE-Positioning-MeasurementEventResults
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_MeasurementInterval
$ASN1_TypeReference UE-Positioning-MeasurementInterval
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_MethodType
$ASN1_TypeReference UE-Positioning-MethodType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_AssistanceData
$ASN1_TypeReference UE-Positioning-OTDOA-AssistanceData
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_AssistanceData_r4
$ASN1_TypeReference UE-Positioning-OTDOA-AssistanceData-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_AssistanceData_r4ext
$ASN1_TypeReference UE-Positioning-OTDOA-AssistanceData-r4ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_AssistanceData_UEB
$ASN1_TypeReference UE-Positioning-OTDOA-AssistanceData-UEB
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_IPDL_Parameters_TDDList_r4_ext
$ASN1_TypeReference UE-Positioning-IPDL-Parameters-TDDList-r4-ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_Measurement
$ASN1_TypeReference UE-Positioning-OTDOA-Measurement
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_Measurement_v390ext
$ASN1_TypeReference UE-Positioning-OTDOA-Measurement-v390ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_NeighbourCellInfo
$ASN1_TypeReference UE-Positioning-OTDOA-NeighbourCellInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_NeighbourCellInfo_r4
$ASN1_TypeReference UE-Positioning-OTDOA-NeighbourCellInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_NeighbourCellInfo_UEB
$ASN1_TypeReference UE-Positioning-OTDOA-NeighbourCellInfo-UEB
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_NeighbourCellList
$ASN1_TypeReference UE-Positioning-OTDOA-NeighbourCellList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_NeighbourCellList_r4
$ASN1_TypeReference UE-Positioning-OTDOA-NeighbourCellList-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_NeighbourCellList_UEB
$ASN1_TypeReference UE-Positioning-OTDOA-NeighbourCellList-UEB
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_Quality
$ASN1_TypeReference UE-Positioning-OTDOA-Quality
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_ReferenceCellInfo
$ASN1_TypeReference UE-Positioning-OTDOA-ReferenceCellInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_ReferenceCellInfo_r4
$ASN1_TypeReference UE-Positioning-OTDOA-ReferenceCellInfo-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_OTDOA_ReferenceCellInfo_UEB
$ASN1_TypeReference UE-Positioning-OTDOA-ReferenceCellInfo-UEB
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_PositionEstimateInfo
$ASN1_TypeReference UE-Positioning-PositionEstimateInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_ReportCriteria
$ASN1_TypeReference UE-Positioning-ReportCriteria
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_ReportingQuantity
$ASN1_TypeReference UE-Positioning-ReportingQuantity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_ReportingQuantity_v390ext
$ASN1_TypeReference UE-Positioning-ReportingQuantity-v390ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_ReportingQuantity_r4
$ASN1_TypeReference UE-Positioning-ReportingQuantity-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UE_Positioning_ResponseTime
$ASN1_TypeReference UE-Positioning-ResponseTime
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UTRA_CarrierRSSI
$ASN1_TypeReference UTRA-CarrierRSSI
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UTRAN_GPS_DriftRate
$ASN1_TypeReference UTRAN-GPS-DriftRate
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UTRAN_GPSReferenceTime
$ASN1_TypeReference UTRAN-GPSReferenceTime
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId UTRAN_GPSReferenceTimeResult
$ASN1_TypeReference UTRAN-GPSReferenceTimeResult
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId VarianceOfRLC_BufferPayload
$ASN1_TypeReference VarianceOfRLC-BufferPayload
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId W
$ASN1_TypeReference W
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BCC
$ASN1_TypeReference BCC
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BCCH_ModificationInfo
$ASN1_TypeReference BCCH-ModificationInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BCCH_ModificationTime
$ASN1_TypeReference BCCH-ModificationTime
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId BSIC
$ASN1_TypeReference BSIC
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CBS_DRX_Level1Information
$ASN1_TypeReference CBS-DRX-Level1Information
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CDMA2000_Message
$ASN1_TypeReference CDMA2000-Message
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CDMA2000_MessageList
$ASN1_TypeReference CDMA2000-MessageList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CDMA2000_UMTS_Frequency_List
$ASN1_TypeReference CDMA2000-UMTS-Frequency-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId CellValueTag
$ASN1_TypeReference CellValueTag
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ExpirationTimeFactor
$ASN1_TypeReference ExpirationTimeFactor
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FDD_UMTS_Frequency_List
$ASN1_TypeReference FDD-UMTS-Frequency-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId FrequencyInfoCDMA2000
$ASN1_TypeReference FrequencyInfoCDMA2000
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GERAN_SystemInfoBlock
$ASN1_TypeReference GERAN-SystemInfoBlock
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GERAN_SystemInformation
$ASN1_TypeReference GERAN-SystemInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GSM_BA_Range
$ASN1_TypeReference GSM-BA-Range
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GSM_BA_Range_List
$ASN1_TypeReference GSM-BA-Range-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GSM_Classmark2
$ASN1_TypeReference GSM-Classmark2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GSM_Classmark3
$ASN1_TypeReference GSM-Classmark3
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GSM_MessageList
$ASN1_TypeReference GSM-MessageList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GsmSecurityCapability
$ASN1_TypeReference GsmSecurityCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId IdentificationOfReceivedMessage
$ASN1_TypeReference IdentificationOfReceivedMessage
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRAT_ChangeFailureCause
$ASN1_TypeReference InterRAT-ChangeFailureCause
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GERANIu_MessageList
$ASN1_TypeReference GERANIu-MessageList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId GERANIu_RadioAccessCapability
$ASN1_TypeReference GERANIu-RadioAccessCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRAT_UE_RadioAccessCapability
$ASN1_TypeReference InterRAT-UE-RadioAccessCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRAT_UE_RadioAccessCapabilityList
$ASN1_TypeReference InterRAT-UE-RadioAccessCapabilityList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRAT_UE_RadioAccessCapability_v590ext
$ASN1_TypeReference InterRAT-UE-RadioAccessCapability-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRAT_UE_SecurityCapability
$ASN1_TypeReference InterRAT-UE-SecurityCapability
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRAT_UE_SecurityCapList
$ASN1_TypeReference InterRAT-UE-SecurityCapList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId InterRAT_HO_FailureCause
$ASN1_TypeReference InterRAT-HO-FailureCause
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MasterInformationBlock
$ASN1_TypeReference MasterInformationBlock
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId MIB_ValueTag
$ASN1_TypeReference MIB-ValueTag
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NCC
$ASN1_TypeReference NCC
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PLMN_ValueTag
$ASN1_TypeReference PLMN-ValueTag
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId PredefinedConfigIdentityAndValueTag
$ASN1_TypeReference PredefinedConfigIdentityAndValueTag
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ProtocolErrorInformation
$ASN1_TypeReference ProtocolErrorInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ReceivedMessageType
$ASN1_TypeReference ReceivedMessageType
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Rplmn_Information
$ASN1_TypeReference Rplmn-Information
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Rplmn_Information_r4
$ASN1_TypeReference Rplmn-Information-r4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SchedulingInformation
$ASN1_TypeReference SchedulingInformation
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SchedulingInformationSIB
$ASN1_TypeReference SchedulingInformationSIB
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SchedulingInformationSIBSb
$ASN1_TypeReference SchedulingInformationSIBSb
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SegCount
$ASN1_TypeReference SegCount
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SegmentIndex
$ASN1_TypeReference SegmentIndex
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SFN_Prime
$ASN1_TypeReference SFN-Prime
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIB_Data_fixed
$ASN1_TypeReference SIB-Data-fixed
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIB_Data_variable
$ASN1_TypeReference SIB-Data-variable
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIBOccurIdentity
$ASN1_TypeReference SIBOccurIdentity
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIBOccurrenceIdentityAndValueTag
$ASN1_TypeReference SIBOccurrenceIdentityAndValueTag
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIBOccurValueTag
$ASN1_TypeReference SIBOccurValueTag
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIB_ReferenceList
$ASN1_TypeReference SIB-ReferenceList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIBSb_ReferenceList
$ASN1_TypeReference SIBSb-ReferenceList
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIB_ReferenceListFACH
$ASN1_TypeReference SIB-ReferenceListFACH
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIB_Type
$ASN1_TypeReference SIB-Type
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIB_TypeAndTag
$ASN1_TypeReference SIB-TypeAndTag
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SIBSb_TypeAndTag
$ASN1_TypeReference SIBSb-TypeAndTag
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SibOFF
$ASN1_TypeReference SibOFF
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SibOFF_List
$ASN1_TypeReference SibOFF-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType1
$ASN1_TypeReference SysInfoType1
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType1_v3a0ext_IEs
$ASN1_TypeReference SysInfoType1-v3a0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType2
$ASN1_TypeReference SysInfoType2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType3
$ASN1_TypeReference SysInfoType3
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType3_v4b0ext_IEs
$ASN1_TypeReference SysInfoType3-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType3_v590ext
$ASN1_TypeReference SysInfoType3-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType4
$ASN1_TypeReference SysInfoType4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType4_v4b0ext_IEs
$ASN1_TypeReference SysInfoType4-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType4_v590ext
$ASN1_TypeReference SysInfoType4-v590ext
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType4_v5b0ext_IEs
$ASN1_TypeReference SysInfoType4-v5b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType5
$ASN1_TypeReference SysInfoType5
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType5_v4b0ext_IEs
$ASN1_TypeReference SysInfoType5-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType5_v590ext_IEs
$ASN1_TypeReference SysInfoType5-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType6
$ASN1_TypeReference SysInfoType6
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType6_v4b0ext_IEs
$ASN1_TypeReference SysInfoType6-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType6_v590ext_IEs
$ASN1_TypeReference SysInfoType6-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType7
$ASN1_TypeReference SysInfoType7
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType8
$ASN1_TypeReference SysInfoType8
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType9
$ASN1_TypeReference SysInfoType9
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType10
$ASN1_TypeReference SysInfoType10
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType11
$ASN1_TypeReference SysInfoType11
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType11_v4b0ext_IEs
$ASN1_TypeReference SysInfoType11-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType11_v590ext_IEs
$ASN1_TypeReference SysInfoType11-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType12
$ASN1_TypeReference SysInfoType12
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType12_v4b0ext_IEs
$ASN1_TypeReference SysInfoType12-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType12_v590ext_IEs
$ASN1_TypeReference SysInfoType12-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType13
$ASN1_TypeReference SysInfoType13
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType13_v3a0ext_IEs
$ASN1_TypeReference SysInfoType13-v3a0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType13_v4b0ext_IEs
$ASN1_TypeReference SysInfoType13-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType13_1
$ASN1_TypeReference SysInfoType13-1
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType13_2
$ASN1_TypeReference SysInfoType13-2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType13_3
$ASN1_TypeReference SysInfoType13-3
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType13_4
$ASN1_TypeReference SysInfoType13-4
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType14
$ASN1_TypeReference SysInfoType14
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType15
$ASN1_TypeReference SysInfoType15
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType15_v4b0ext_IEs
$ASN1_TypeReference SysInfoType15-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType15_1
$ASN1_TypeReference SysInfoType15-1
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType15_2
$ASN1_TypeReference SysInfoType15-2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType15_3
$ASN1_TypeReference SysInfoType15-3
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType16
$ASN1_TypeReference SysInfoType16
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType17
$ASN1_TypeReference SysInfoType17
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType17_v4b0ext_IEs
$ASN1_TypeReference SysInfoType17-v4b0ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType17_v590ext_IEs
$ASN1_TypeReference SysInfoType17-v590ext-IEs
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoType18
$ASN1_TypeReference SysInfoType18
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoTypeSB1
$ASN1_TypeReference SysInfoTypeSB1
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SysInfoTypeSB2
$ASN1_TypeReference SysInfoTypeSB2
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId TDD_UMTS_Frequency_List
$ASN1_TypeReference TDD-UMTS-Frequency-List
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ANSI_41_GlobalServiceRedirectInfo
$ASN1_TypeReference ANSI-41-GlobalServiceRedirectInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ANSI_41_PrivateNeighbourListInfo
$ASN1_TypeReference ANSI-41-PrivateNeighbourListInfo
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ANSI_41_RAND_Information
$ASN1_TypeReference ANSI-41-RAND-Information
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ANSI_41_UserZoneID_Information
$ASN1_TypeReference ANSI-41-UserZoneID-Information
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId ANSI_41_NAS_Parameter
$ASN1_TypeReference ANSI-41-NAS-Parameter
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId Min_P_REV
$ASN1_TypeReference Min-P-REV
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NAS_SystemInformationANSI_41
$ASN1_TypeReference NAS-SystemInformationANSI-41
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId NID
$ASN1_TypeReference NID
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId P_REV
$ASN1_TypeReference P-REV
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$ASN1_TypeRef
$ASN1_TypeId SID
$ASN1_TypeReference SID
$ASN1_ModuleId Class-definitions
$End_ASN1_TypeRef
$Comment /*  */
$End_ASN1_TypeRefs
$End_TS_TypeDefs
$EncodingDefs
$Begin_EncodingDefinitions
$EncodingDefinition
$EncodingRuleId DirectEncoding
$EncodingRef /*  */
$EncodingDefault 
$End_EncodingDefinition
$EncodingDefinition
$EncodingRuleId OctetUnaligned
$EncodingRef /* TS 25.322 clause 9.2.1.2 - TMD PDU */
$EncodingDefault 
$Comment /* To be used for the encoding of RLC TMD PDU. 
An RLC PDU is a bit string. An RLC SDU is included into an RLC PDU from first bit onward. The TMD PDU is used to transfer user data when RLC is operating in transparent mode. No overhead is added to the SDU by RLC. The data length is not constrained to be a multiple of 8 bits. 
 
The TTCN writter shall take care of the length of the bitstring to be sent according to the allowed RLC size in the Transport Format. */
$End_EncodingDefinition
$EncodingDefinition
$EncodingRuleId PER_Unaligned
$EncodingRef /* X.691 */
$EncodingDefault 
$Comment /* Packet encoding rules (X.691) unaligned and with adapted padding */
$End_EncodingDefinition
$Comment /*  */
$End_EncodingDefinitions
$End_EncodingDefs
$TS_OpDefs
$Begin_TS_OpDef
$TS_OpId o_PER_EncodeRRC_ConnSetup_MAC(p_PDU : DL_CCCH_Message)
$TS_OpResult OCTETSTRING
$TS_OpDescription /* 
This TSO Receives an RRC Connection Setup PDU.
It is expected to PER Encode with Octet Aligned.
It further PADS the encoded string with 0's so as to Make it a  Bit string of length 120 Bytes.
The Result will be this 120 Byte OCTETSTRING
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_IntToOct(p_N : INTEGER; p_L: INTEGER)
$TS_OpResult OCTETSTRING
$TS_OpDescription /* 
o_IntToOct converts the INTEGER p_N into OCTETSTRING with length =  p_L. 
 
for example: 
  
o_IntToOct(14,1) = '0E'O; 
o_IntToOct(18,1) = '12'O; 
o_IntToOct(18,2) = '0012'O.
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_AuthRspChk(p_AuthRsp: AuthRsp; p_AuthRspExt: AuthRspExt; p_K:BITSTRING; p_RAND: BITSTRING; p_Ext: BOOLEAN)
$TS_OpResult BOOLEAN
$TS_OpDescription /* 
Checks the input parameter p_AuthRsp and p_AuthRspExt, both received in an Authentication Response, according to the authentication algorithm defined in the following procedure.  
The extension,  p_AuthRspExt, is optional. Its presence is indicated by p_Ext.  
Returns TRUE if the Authentication Response contained in parameters p_AuthRsp and eventually p_AuthRspExt is correct, FALSE otherwise. 
The value of tcv_AuthN  indicates whether the AuthRspExt has been provided by the UE or not (n=31, or 31 < n < 128). See 3G TS 34.108 cl. 8.1.2. 
If not the parameter p_AuthRspExt is not to be used. 
 
Algorithm (without the knowledge of tcv_AuthN): 
========================================= 
 
if NOT p_Ext EvaluateAuthRsp else EvaluateAuthRspAndAuthRspExt 
 
EvaluateAuthRsp: 
============== 
 
resultbitstring = o_BitstringXOR(XRES, AuthRsp) 
if resultbitstring is all 0s then there is a match. 
 
EvaluateAuthRspAndAuthRspExt: 
============================ 
 
XREShigh = o_BitstringXtract(XRES, 32, 32, 0) 
/* XRES divides into 2 parts: the higher part of 32 bits related to AuthRsp and the lower part related to AuthRspExt \*/ 
/* SourceLength of 32 is only to ensure usage of the procedure \*/  
resultbitstring = o_BitstringXOR(XREShigh, AuthRsp) 
if resultbitstring is all 0s then there is a match for the first 32 bits:EvaluateAuthRspExt else Authentication failed. 
 
EvaluateAuthRspExt: 
================= 
 
/* As AuthRespExt may not be octet aligned the last octet indicated in AuthRspExt is not used for checking \*/ 
 
if (AuthRspExt.iel = 1) then Authentication passed 
/* there was only 1 possibly incomplete octet which is not used \*/ 
else 
{ 
AuthRspExthigh = o_BitstringXtract(AuthRspExt.authRsp, ((AuthRspExt.iel -1)* 8),  (AuthRspExt.iel -1)* 8, 0) 
/* extract (AuthRspExt.iel -1)* 8 bits starting from bit 0 \*/ 
XRESlow = o_BitstringXtract(XRES, ((AuthRspExt.iel -1)* 8 + 32),  (AuthRspExt.iel -1)* 8, 32) 
/* extract (AuthRspExt.iel -1)* 8 bits starting from bit 32 \*/ 
resultbitstring = o_BitstringXOR(XRESlow, AuthRspExthigh, (AuthRspExt.iel -1)* 8) 
if resultbitstring is all 0s then there is a match for the bits following the first 32 bits else Authentication failed 
}
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_BitstringChange(p_Str: BITSTRING; p_Len, p_Offset: INTEGER)
$TS_OpResult BITSTRING
$TS_OpDescription /* 
Performs the manipulation of a bitstring by toggling the bit identified by p_Offset. The length of the string to be manipulated is specified in p_Len. This is only provided to help ensure that the p_Offset is less than p_Len.  
 
Returns a resulting bitstring of length p_Len. 
 
Examples: 
o_BitstringChange('010101'B, 6, 5) produces '010100'B. 
o_BitstringChange('010101'B, 6, 0) produces '110101'B.
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_BitstringConcat(p_Str1, p_Str2: BITSTRING; p_Len1, p_Len2: INTEGER)
$TS_OpResult BITSTRING
$TS_OpDescription /* 
Performs the concatenation of 2 bitstrings of possibly different lengths. 
The bit significance is from left to right, ie the MSB is at the lefthand side.  
 
Returns a resulting bitstring p_Str1 || p_Str2 of length p_ Len1 + p_Len. 
 
Example: 
o_BitstringConcat('010101'B,'11'B) produces '01010111'B of length 6 + 2 = 8..
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_BitstringXOR(p_Str1, p_Str2: BITSTRING; p_Len: INTEGER)
$TS_OpResult BITSTRING
$TS_OpDescription /* 
Performs  an XOR operation using 2 bitstrings of the same length (p_Len). 
 
Returns a resulting Bitstring of length p_Len. 
 
Example: 
o_BitstringXOR('0011'B, '0101'B, 4) produces '0110'B
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_BitstringXtract(p_Str: BITSTRING; p_SrcLen, p_TargetLen, p_Offset: INTEGER)
$TS_OpResult BITSTRING
$TS_OpDescription /* 
Performs the wrap around extract of a bitstring. The length of the string 
from 
   which extraction is to be made is specified in p_SrcLen. The length of the 
   bitstring to be extracted is indicated as p_TargetLen, the offset in the 
original 
   string is indicated in p_Offset. 
The bit position 0 is at the left. 
   Returns a resulting bitstring of length p_TargetLen. 
 
   Examples: 
 
o_BitstringXtract('101010'B, 6, 2, 1) produces '01'B. 
o_BitstringXtract('101010'B, 6, 4, 3) produces '0101'B, wrapping around. 
o_BitstringXtract('111000'B, 6, 4, 5) produces '0111'B, wrapping around.
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_ConvertIMSI(p_Imsi : HEXSTRING)
$TS_OpResult IMSI_GSM_MAP
$Comment /* The input parameter `imsi` is a BCD string (subset of HEXSTRING), the result is of type IMSI_GSM_MAP. */
$TS_OpDescription /* 
The input parameter p_Imsi  is a BCD string (subset of HEXSTRING), the result is of type IMSI_GSM_MAP.
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_ConvertPTMSI(p_PTMSI : OCTETSTRING)
$TS_OpResult P_TMSI_GSM_MAP
$Comment /* The input parameter `PTMSI` is a OCTETSTRING, the result is of type TMSI_GSM_MAP. */
$TS_OpDescription /* 
The input parameter `PTMSI` is a OCTETSTRING, the result is of type P_TMSI_GSM_MAP.
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_ConvertTMSI( p_Tmsi : OCTETSTRING)
$TS_OpResult TMSI_GSM_MAP
$Comment /* The input parameter `tmsi` is a OCTETSTRING, the result is of type TMSI_GSM_MAP. */
$TS_OpDescription /* 
The input parameter p_Tmsi is a OCTETSTRING, the result is of type TMSI_GSM_MAP.
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_ConvtPLMN( p_MCC, p_MNC : HEXSTRING)
$TS_OpResult OCTETSTRING
$TS_OpDescription /* 
the functions of o_ConvtPLMN are as following: 
 
      1. The least significant HEX of p_MNC is removed from p_MNC and inserted into p_MCC in the position left to the third HEX to form a new p_MCC of 4 HEXs, then swap the first HEX (left most, most siginificant Hex) with the second HEX of the new p_MCC. 
      2. Swap the first Hex with the second HEX of the remaining part of p_MNC and append it to the new p_MCC formed in Step1 above. 
 
 
For example: 
o_ConvtPLMN('123'H, '456'H) = '216354'O 
o_ConvtPLMN ('234'H, '01F'H) = '32F410'O
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_GetPI (p_Imsi : HEXSTRING; p_Np: INTEGER )
$TS_OpResult BITSTRING
$Comment /* The operation is used to calculate the PI (Page Indicator) from the given input parameters. */
$TS_OpDescription /* 
The PI is calculated as following: 
PI = drx_index mod np 
 
The drx_index is calculated as described hereafter: 
drx_index = (p_Imsi / 8192)) 
 
This calculation is defined in TS 25.304 clause 8.3. 
 
NOTE: the IMSI is passed as HEXSTRING, the relevant conversion shall be done.
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_HexToDigitsMCC(p_BCDdigits : HEXSTRING)
$TS_OpResult MCC
$TS_OpDescription /* 
The input parameter p_BCDdigits shall be a BCD string (subset of HEXSTRING), the result is a SEQUENCE (SIZE(3)) OF digit (MCC). 
 
NOTE: The length of p_BCDdigits shall be 3. User shall take the responsibility of fulfilling  this requirement. 
 
for example: 
 
o_HexToDigitsMCC('111'H) = {1, 1, 1} 
o_HexToDigitsMCC('123'H) = {1, 2, 3}.
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_HexToDigitsMNC(p_BCDdigits : HEXSTRING)
$TS_OpResult MNC
$TS_OpDescription /* 
The length of the  input parameter p_BCDdigits shall be 3 HEX DIGITS, the first two shall be BCDdigit (subset of HEXSTRING) the result is a SEQUENCE (SIZE(2..3)) OF Digit (MNC). 
 
The function of this operation is: 
     1. the least significant HEX is removed if it is 'F' and the operation returns SEQUENCE (SIZE(2)) OF Digit. 
     2. the operation returns SEQUENCE (SIZE(3)) OF Digit if all 3 HEX digits in p_BCDdigits are BCD Digit. 
 
for example: 
 
o_HexToDigitsMNC('123'H) = {1, 2, 3} 
o_HexToDigitsMNC('13F'H) = {1, 3}.
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_OctetstringConcat(p_Str1, p_Str2: OCTETSTRING)
$TS_OpResult OCTETSTRING
$TS_OpDescription /* 
o_OctetstringConcat Performs the concatenation of 2 octetstrings of possibly different lengths. 
The octet significance is from left to right, i.e. the MSB is at the lefthand side.  
 
Returns a resulting octetstring p_Str1 || p_Str2 . 
 
Example: 
o_OctetstringConcat('135'O, '9A38'O) = '1359A38'O.
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_OctToBit ( p_OctetStr: OCTETSTRING)
$TS_OpResult BITSTRING
$Comment /* Converts an OCTETSTRING into  a BITSTRING */
$TS_OpDescription /* 
The size of the resulting BITSTRING is 8 times the size of the input OCTETSTRING
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_SIB_PER_Encoding(p_SIB : SIB)
$TS_OpResult BITSTRING
$Comment /* generate the unaligned PER codes without "Encoder added (0-7) bits padding" from the input system information block */
$TS_OpDescription /* 
The function of the o_SIB_PER_Encoding is as the follows: 
 
   it returns the unaligned PER encoding (BIT STRING) of the input system information block p_SIB (without "Encoder added (1-7) bits padding"). The bits corresponding to the encoding of the CHOICE of the SIB type shall be removed. 
 
 Example: 
for  the following SIBType1 value: 
    SysInfoType1 ::= 
                               {  
  cn_CommonGSM_MAP_NAS_SysInfo       '0080'O,   
  cn_DomainSysInfoList                               {{cn_DomainIdentity    ps_domain,   
                                                                       cn_Type                  gsm_MAP: '0000'O,  
                                                                      cn_DRX_CycleLengthCoeff    p_CellInfo.dRX_CycleLength  
                                                                      },  
                                                                      {cn_DomainIdentity    cs_domain,   
                                                                      cn_Type                  gsm_MAP:  o_OctetstringConcat(p_T3212, o_IntToOct(p_ATTFlag, 1)),  
                                                                      cn_DRX_CycleLengthCoeff   p_CellInfo.dRX_CycleLength  
                                                                      }  
                                                                      },   
  ue_ConnTimersAndConstants     {  
                                                         t_301     ms2000,   
                                                         n_301   2,  
                                                          t_302    ms4000,   
                                                          n_302   3,   
                                                          t_304    ms1000,   
                                                          n_304   3,   
                                                          t_305    m60,   
                                                          t_307    s50,   
                                                          t_308    ms320,   
                                                          t_309    8,   
                                                          t_310    ms320,   
                                                          n_310   5,   
                                                          t_311    ms500,   
                                                          t_312    5,   
                                                          n_312   s200,   
                                                          t_313    10,   
                                                          n_313   s20,   
                                                          t_314   s20,   
                                                          t_315   s30,   
                                                          n_315  s200,  
                                                          t_316   s50,  
                                                          t_317   s1800  
                                                        },   
  ue_IdleTimersAndConstants                       {  
                                                                        t_300   ms400,   
                                                                       n_300   7,   
                                                                       t_312    10,   
                                                                       n_312   s200  
                                                                      },   
  nonCriticalExtensions                                 {}  
} 
 
The operation returns BITSTRING:"1110010000000010000000011000100000000000000000100001000000000000000001111111111111111111111110100101100011011011100110111111111010010101011101010011101001110111100101111010011"
 */
$Comment /* 3GPP TS 25.331 clause 12.1 */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_SIB_Segmentation(p_SIBBitString : BITSTRING)
$TS_OpResult SegmentsOfSysInfoBlock
$Comment /* The returned result is a structured type. */
$TS_OpDescription /* 
The function of the o_SIB_Segmentation is as following: 
 
   1. If the p_SIBBitString is less than or equal to 226 bits,the bit string is fit into one segment. If the bit string is less than 226 bits but more than 214 bits, the segment shall be padded to 226 bits long with padding bits set to '0'B.  
 
   2. If the input operand p_SIBBitString is longer than 226 bits it is segmented from left to right into segments, each segment except the last one is 222 bits . The last segment may be 222 bits or shorter. If the length of last segment is greater than 214 bits pad it to 222 bits 
with padding bits set to '0'B. 
 
   3. The number of segments is assigned to segCount field of the result. 
 
   4. The first segment is assigned to seg1 field of the result, the second segment 
       is assigned to the seg2 field of the result, the third segment is assigned to the 
       seg3 field of the result, and so on till the last segment.
 */
$Comment /*  */
$End_TS_OpDef
$Begin_TS_OpDef
$TS_OpId o_SUFI_Handler( p_SUFI_Params: SUFI_Params; p_SUFI_String: HEXSTRING )
$TS_OpResult ResAndSUFIs
$Comment /* "See TS-34.123-3 section 6.5.2.1 for the handling of SUFIs"   */
$TS_OpDescription /* 
Parameters 
 
p_SUFI_Params 
This parameter contains the list of checking criteria to be applied by the TSO 
 
p_SUFI_String 
This parameter contains the received string of SUFIs to be checked. 
 
Description 
 
This TSO is used to check that the received string of SUFIs contained in p_SUFI_String. 
Checking criteria to be applied are contained in p_SUFI_Params. 
...... 
 
 
Output 
 
- the BOOLEAN result of the TSO:  
TRUE if all checking and the filling of the SuperFields structure were successful; 
FALSE otherwise; in this case the TSO shall produce sufficient output to allow problem analysis 
-The filled-in  SuperFields structure
 */
$Comment /*  */
$End_TS_OpDef
$End_TS_OpDefs
$Begin_TS_ParDcls
$TS_ParDcl
$TS_ParId pc_FDD
$TS_ParType BOOLEAN
$PICS_PIXITref /* PICS, Table A.1/1 */
$Comment /* FDD(DS) */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_NumOfSegInPagResOrServReq
$TS_ParType INTEGER
$PICS_PIXITref /*  */
$Comment /* The Default value is 2.
This Pixit is used in MAC test cases 7.1.1.2, 7.1.1.3, 7.1.1.4, 7.1.1.5 and 7.1.1.8
This indicates the number of RLC segments the Paging Response (CS Domain) or Service Request (PS domain will be segmented in. */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_AutomaticAttachSwitchON
$TS_ParType BOOLEAN
$PICS_PIXITref /* PICS, Table A */
$Comment /* Paramter is TRUE if UE supports automatic triggering of GMM Attach procedure when switched on */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_Background
$TS_ParType BOOLEAN
$PICS_PIXITref /* PICS, Table A.6/4 */
$Comment /* Background QoS/traffic class supported */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_CS
$TS_ParType BOOLEAN
$PICS_PIXITref /* PICS, Table A.3/1 */
$Comment /* Circuit Switched */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_Conversational
$TS_ParType BOOLEAN
$PICS_PIXITref /* PICS, Table A.6/1 */
$Comment /* Converational supported */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_Interactive
$TS_ParType BOOLEAN
$PICS_PIXITref /* PICS, Table A.6/3 */
$Comment /* Interactive QoS/traffic class supported */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_MS_ClsmkA5_1
$TS_ParType B1
$PICS_PIXITref /* PICS Table A.20/44 */
$Comment /* default Algorithm A5/1 supported. 
Default value: '0'B(i.e. A5/1 is supported) */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_MS_ClsmkA5_2
$TS_ParType B1
$PICS_PIXITref /* PICS Table A.20/46 */
$Comment /* default Algorithm A5/2 supported. 
Default value: '0'B (encryption algorithm A5/2 not available) */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_MS_ClsmkA5_3
$TS_ParType B1
$PICS_PIXITref /* PICS Table A.20/47 */
$Comment /* default Algorithm A5/3 supported. 
Default value:  '0'B(encryption algorithm A5/3 not available) */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_MS_ClsmkA5_4
$TS_ParType B1
$PICS_PIXITref /* PICS Table A.20/48 */
$Comment /* default Algorithm A5/3 supported. 
Default value:  '0'B(encryption algorithm A5/4 not available) */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_MS_ClsmkA5_5
$TS_ParType B1
$PICS_PIXITref /* PICS Table A.20/49 */
$Comment /* default Algorithm A5/3 supported. 
Default value:  '0'B(encryption algorithm A5/5 not available) */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_MS_ClsmkA5_6
$TS_ParType B1
$PICS_PIXITref /* PICS Table A.20/50 */
$Comment /* default Algorithm A5/3 supported. 
Default value:  '0'B(encryption algorithm A5/6 not available) */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_MS_ClsmkA5_7
$TS_ParType B1
$PICS_PIXITref /* PICS Table A.20/51 */
$Comment /* default Algorithm A5/7 supported. 
Default value:  '0'B(encryption algorithm A5/7 not available) */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_PS
$TS_ParType BOOLEAN
$PICS_PIXITref /* PICS, Table A.3/2 */
$Comment /* Packet Switched */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_Streaming
$TS_ParType BOOLEAN
$PICS_PIXITref /* PICS, Table A.6/2 */
$Comment /* Streaming supported */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_SwitchOnOff
$TS_ParType BOOLEAN
$PICS_PIXITref /* PICS, Table A.20/35 */
$Comment /* switch on/off supported */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_UEA1_Supp
$TS_ParType BOOLEAN
$PICS_PIXITref /* PICS, Table A.20/27 */
$Comment /* Support of UMTS encryption algorithm UEA1 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_UMTS_GSM
$TS_ParType BOOLEAN
$PICS_PIXITref /* PICS, Table A.1/4 */
$Comment /* To check if the UE supports both UMTS as well as GSM. 
If the variable is set as TRUE, means that both UMTS and GSM is supported. 
If the variable is set as FALSE, means that UE supports only UMTS
 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId pc_USIM_Rmv
$TS_ParType BOOLEAN
$PICS_PIXITref /* PICS, Table A.20/36 */
$Comment /* USIM removable without power down supported */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_AuthAMF
$TS_ParType BITSTRING
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* Authentication Management Field (16 bits). The value shall be different from '1111 1111 1111 111'B (AMFresynch). 
Default value: no default value can be proposed */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_AuthK
$TS_ParType BITSTRING
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* Authentication Key (128 bits). 
Default value: '00000000000000010000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111'B */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_AuthN
$TS_ParType INTEGER
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* value of n to initialize tcv_AuthN (length of extended response)  
min 31, max 127 (TS 34.108 cl. 8.1.2). 
Default value: 127 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_AuthRAND
$TS_ParType BITSTRING
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* Random Challenge (128 bits). 
Default value: '010101..01'B
The value shall not be repeatable with 3 bits i.e. something like '001001001001...001'B not allowed. */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_CN_DomainTested
$TS_ParType CN_DomainIdentity
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* CN domain to be tested. This parameter is used in test cases that handle both PS and CS domains. 
Default value: cs_domain */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_CipherAlg
$TS_ParType B3
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* Cipher algorithm.          
Default value: (A5/1) '000'B */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_CipheringOnOff
$TS_ParType BOOLEAN
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* Security mode - TRUE if ciphering is applicable. 
Default value: TRUE */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_FDD_OperationBand
$TS_ParType INTEGER
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* The operation band under test, as defined in 34.108 clause 5.1.1.
Value 1 means Band 1, 2 means Band 2, 3 means Band 3, 6 means Band 6. Rest of the values are not defined. This pixit shall be set in synchronisation with the values that are being set to 6 other Pixits viz:
px_UARFCN_D_High,px_UARFCN_U_High, px_UARFCN_D_Mid,px_UARFCN_L_Mid, px_UARFCN_D_Low, px_UARFCN_U_Low */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_FRESH
$TS_ParType Fresh
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* FRESH. 
Default value: no default value can be proposed */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_IMSI_Def
$TS_ParType HEXSTRING
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* default IMSI. 
Default value: '001010123456063'H */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_PTMSI_Def
$TS_ParType OCTETSTRING
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* default PTMSI . 
Default value: '12345678'O */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_PTMSI_SigDef
$TS_ParType OCTETSTRING
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* default PTMSI signature (3 octets, 3GPP 24.008 /  10.5.5.8). 
Default value: 'AB1234'O */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_PriScrmCode
$TS_ParType PrimaryScramblingCode
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* Primary scrambling code. 
Default value: 100 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_RAT
$TS_ParType RatType
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* This parameter is used to specify which radio access technology is being used  for the current test execution.  Valid values: fdd and tdd. 
Default value: fdd */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_RRC_CS_ServTested
$TS_ParType RRC_ServTested
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* CS service to be tested for RRC test cases.  
Default value: Speech */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_RRC_PS_ServTested
$TS_ParType RRC_ServTested
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* PS service to be tested for RRC test cases.  
Default value: Speech */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_SRNC_Id
$TS_ParType SRNC_Identity
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* SRNC Id. 
Default value: '000000000001'B */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_SRNTI
$TS_ParType S_RNTI
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* S RNTI. 
Default value: '00000000000000000001'B */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_TCellA
$TS_ParType Tcell
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* TCell value for  cell A. 
Default value: 0 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_TCellB
$TS_ParType Tcell
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* TCell value for  cell B. 
Default value: 512 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_TCellC
$TS_ParType Tcell
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* TCell value for  cell C. 
Default value: 1536 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_TCellD
$TS_ParType Tcell
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* TCell value for  cell D. 
Default value: 321 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_TCellE
$TS_ParType Tcell
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* TCell value for  cell E. 
Default value: 833 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_TCellF
$TS_ParType Tcell
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* TCell value for  cell F. 
Default value: 6577 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_TCellG
$TS_ParType Tcell
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* TCell value for  cell G. 
Default value: 7253 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_TCellH
$TS_ParType Tcell
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* TCell value for  cell H. 
Default value: 4351 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_TMSI_Def
$TS_ParType OCTETSTRING
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* default TMSI. 
Default value: '12345678'O */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_UARFCN_D_High
$TS_ParType INTEGER
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* High Range downlink UARFCN value. 
Default value: 10837 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_UARFCN_D_Low
$TS_ParType INTEGER
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* Low Range downlink UARFCN value 
Default value: 10563 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_UARFCN_D_Mid
$TS_ParType INTEGER
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* Mid Range downlink UARFCN value 
Default value: 10700 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_UARFCN_U_High
$TS_ParType INTEGER
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* High Range uplink UARFCN value. This value shall be set based on the operation band supported. 
Default value: 9887 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_UARFCN_U_Low
$TS_ParType INTEGER
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* Low Range uplink UARFCN value. This value shall be set based on the operation band supported. 
Default value: 9613 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_UARFCN_U_Mid
$TS_ParType INTEGER
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* Mid Range uplink UARFCN value. This value shall be set based on the operation band supported. 
Default value: 9750 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_UE_OpModeDef
$TS_ParType UE_OperationMode
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* Default UE operation mode (either opModeA or opModeC). (For most UEs  
thiscorresponds class-A or class-C, and can not be changed by the user). 
Default value: opModeA */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_UL_ScramblingCode
$TS_ParType UL_ScramblingCode
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* UL scrambling code value to be used by UE. 
Default value : 0 */
$End_TS_ParDcl
$TS_ParDcl
$TS_ParId px_UTRAN_GERAN
$TS_ParType UTRAN_GERAN
$PICS_PIXITref /* PIXIT Table B.1 */
$Comment /* This parameter is used to specify for which region the system information blocks are broadcast in the  test execution.  Valid values: "UTRAN only" and "UTRAN and GERAN". 
Default value: "UTRAN and GERAN" */
$End_TS_ParDcl
$Comment /*  */
$End_TS_ParDcls
$Begin_SelectExprDefs
$SelectExprDef
$SelectExprId AllUE
$SelectExpr TRUE
$Comment /* Applicable for All UE's */
$End_SelectExprDef
$SelectExprDef
$SelectExprId FDD_Mode
$SelectExpr pc_FDD
$Comment /* C01 */
$End_SelectExprDef
$SelectExprDef
$SelectExprId RRC_FDD_PS
$SelectExpr pc_FDD AND pc_PS
$Comment /* C06 */
$End_SelectExprDef
$Comment /*  */
$End_SelectExprDefs
$Begin_TS_ConstDcls
$TS_ConstDcl
$TS_ConstId tsc_DataTx_7_1_3_1
$TS_ConstType OCTETSTRING
$TS_ConstValue '012345678901234567890123456789012345678901234567890123456789012345678901234567'O
$Comment /* The 39 byte data to be sent in test case 7.1.3.1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_SDU_Size7_1_3_1
$TS_ConstType INTEGER
$TS_ConstValue (328 * 25) -8
$Comment /* UM payload size is 328, hence payload =UM_PL *50 -1 byte */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SUFI_Ack
$TS_ConstType SUFI_Type
$TS_ConstValue '0010'B
$Comment /* Value for SUFI type field within a SUFI in a STATUS PDU. Ref 9.2.2.11 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_Reserved3_OnFACH_FDD
$TS_ConstType TCTF
$TS_ConstValue '01111111'B
$Comment /* Reserved TCTF value for logical channels mapped to FACH. Ref 3G TS 25.321 table 9.2.1.2 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_Reserved4_OnFACH_FDD
$TS_ConstType TCTF
$TS_ConstValue '10111111'B
$Comment /* Reserved TCTF value for logical channels mapped to FACH. Ref 3G TS 25.321 table 9.2.1.2 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DC_AMDPDU
$TS_ConstType DC_Field
$TS_ConstValue '1'B
$Comment /* Value for D/C field within an AMD PDU. Ref 3G TS 25.322 clause 9.2.2.1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_P_Poll
$TS_ConstType PollingBit
$TS_ConstValue '1'B
$Comment /* Value for PollingBit field within an AMDPDU indicating that a status report is requested. Ref 3G TS 25.322 clause 9.2.2.4 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_E_Data
$TS_ConstType ExtBit
$TS_ConstValue '0'B
$Comment /* Value for ExtBit in AMD and UMD PDU when the next field is data. Ref 3G TS 25.322 clause 9.2.2.5 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_E_LI_AndE_Bit
$TS_ConstType ExtBit
$TS_ConstValue '1'B
$Comment /* Value for ExtBit in AMD and UMD PDU when the next field is Length Indicator and E bit. Ref 3G TS 25.322 clause 9.2.2.5 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_HE_LI_AndE_Bit
$TS_ConstType HeaderExt
$TS_ConstValue '01'B
$Comment /* Value for headerExtField in AMD PDU when the succeeding octet contains a length indicator and E bit. Ref 3G TS 25.322 clause 9.2.2.7 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DefaultCellId
$TS_ConstType INTEGER
$TS_ConstValue tsc_CellA
$Comment /* The default cell identifier for all MAC testing. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_AM_SN_Size
$TS_ConstType INTEGER
$TS_ConstValue 12
$Comment /* The number of bits used to represent an AM sequence number. Ref 3G TS 25.322 clause 9.2.2.3. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_LI7_Padding
$TS_ConstType INTEGER
$TS_ConstValue 127
$Comment /* Value for 7 bit length indicator when the rest of the RLC PDU contains padding ( '1111111'B). An INTEGER so that it can be passed to LI constraints. Ref 3G TS 25.322 clause 9.2.2.8 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UE_IdTypeU_RNTI
$TS_ConstType UE_IdType
$TS_ConstValue '00'B
$Comment /* Value for UE_IdType field in MAC PDU when a 32 bit U-RNTI is used. Ref 3G TS 25.321 table 9.2.1.7 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UE_IdTypeC_RNTI
$TS_ConstType UE_IdType
$TS_ConstValue '01'B
$Comment /* Value for UE_IdType field in MAC PDU when a 16 bit C-RNTI is used. Ref 3G TS 25.321 table 9.2.1.7 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UE_IdTypeReserved1
$TS_ConstType UE_IdType
$TS_ConstValue '10'B
$Comment /* Reserved value for UE_IdType field in MAC PDU. Ref 3G TS 25.321 table 9.2.1.7 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UE_IdTypeReserved2
$TS_ConstType UE_IdType
$TS_ConstValue '11'B
$Comment /* Reserved value for UE_IdType field in MAC PDU. Ref 3G TS 25.321 table 9.2.1.7 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CT_LoCh3
$TS_ConstType CT_Field
$TS_ConstValue '0010'B
$Comment /* C/T Field value for 3rd Logical channel mapped to a single transport channel.  
Ref 3G TS 25.321 Table 9.2.1.5a */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CT_LoCh8
$TS_ConstType CT_Field
$TS_ConstValue '0111'B
$Comment /* C/T Field value for 8th Logical channel mapped to a single transport channel.  
Ref 3G TS 25.321 Table 9.2.1.5a */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CT_Reserved
$TS_ConstType CT_Field
$TS_ConstValue '1111'B
$Comment /* Reserved C/T Field value. PDUs with this coding will be discarded by this 
version of the protocol. 
Ref 3G TS 25.321 Table 9.2.1.5a */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DCCH_OnRACH_FDD
$TS_ConstType TCTF
$TS_ConstValue '01'B
$Comment /* TCTF value for DCCH or DTCH mapped to RACH. Ref 3G TS 25.321 table 9.2.1.4 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CCCH_OnFACH_FDD
$TS_ConstType TCTF
$TS_ConstValue '01000000'B
$Comment /* TCTF value when CCCH is mapped to FACH. Ref 3G TS 25.321 table 9.2.1.29.2.1.2 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_Reserved1_OnFACH_FDD
$TS_ConstType TCTF
$TS_ConstValue '01000001'B
$Comment /* Reserved TCTF value for logical channels mapped to FACH. Ref 3G TS 25.321 table 9.2.1.2 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CTCH_OnFACH_FDD
$TS_ConstType TCTF
$TS_ConstValue '10000000'B
$Comment /* TCTF value when CTCH is mapped to FACH. Ref 3G TS 25.321 table 9.2.1.29.2.1.2 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_Reserved2_OnFACH_FDD
$TS_ConstType TCTF
$TS_ConstValue '10000001'B
$Comment /* Reserved TCTF value for logical channels mapped to FACH. Ref 3G TS 25.321 table 9.2.1.2 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DCCH_OnFACH_FDD
$TS_ConstType TCTF
$TS_ConstValue '11'B
$Comment /* TCTF value when DCCH or DTCH is mapped to FACH. Ref 3G TS 25.321 table 9.2.1.29.2.1.2 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_ExpectedPayloadSize
$TS_ConstType INTEGER
$TS_ConstValue 128
$Comment /* The RLC payload size in bits used for segmentation of the AM-RLC PDU without Standard AM header of 16 bits but included Length indicators and Padding. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DummyDL_DirectTransferMsg_CS
$TS_ConstType OCTETSTRING
$TS_ConstValue '144013FFFFFFFFFFFFFFFFFFFE'O
$Comment /* The pre-coded Dummy Dl direct Transfer Message, with Nas Message Ie set to 'FF'O and CN_Domain set to Cs-domain.
               0-------	DL_DCCH_Message				
	-00101--	DL_DCCH_MessageType 5-DownlinkDirectTransfer				
	------0-	Choice r3				
	-------0	OPTIONAL Non Critical extensions				
		DownlinkDirectTransfer_r3_IEs				
	01------	RRC_TransactionIdentifier	1			
	--0-----	CN_DomainIdentity	0	cs_domain		
	---00000	NAS_Message	0		
	00010011Message length 9 (+1 Offset)	12 bits					
	11111111					
	11111111					
	11111111					
	11111111					
	11111111					
	11111111					
	11111111					
	11111111					
	11111111										
	1111111-
              - - - - - - -0  Padding */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DummyDL_DirectTransferMsg_PS
$TS_ConstType OCTETSTRING
$TS_ConstValue '146013FFFFFFFFFFFFFFFFFFFE'O
$Comment /* The pre-coded Dummy Dl direct Transfer Message, with Nas Message Ie set to 'FF'O and CN_Domain set to Ps-domain.
               0-------	DL_DCCH_Message				
	-00101--	DL_DCCH_MessageType 5-DownlinkDirectTransfer				
	------0-	Choice r3				
	-------0	OPTIONAL Non Critical extensions				
		DownlinkDirectTransfer_r3_IEs				
	01------	RRC_TransactionIdentifier	1			
	--1-----	CN_DomainIdentity	1	ps_domain		
	---00000	NAS_Message	0		
	00010011Message length 9 (+1 Offset)	12 bits					
	11111111					
	11111111					
	11111111					
	11111111					
	11111111					
	11111111					
	11111111					
	11111111					
	11111111										
	1111111-
              - - - - - - -0  Padding */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DummyDL_DirectTransferLen
$TS_ConstType INTEGER
$TS_ConstValue 13
$Comment /* the Number of bytes in the pre-coded, Dl direct Transfer message with Core Network set for ps domain. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_WaitNoRACHTransmission
$TS_ConstType INTEGER
$TS_ConstValue 10
$Comment /* Wait Timer In Seconds */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_TestData39B_2
$TS_ConstType OCTETSTRING
$TS_ConstValue '000102030405060708090001020304050607080900010203040506070809000102030405060708'O
$Comment /* Selected Based on tsc_TestData10B_2 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_TestData39B
$TS_ConstType OCTETSTRING
$TS_ConstValue '012345678901234567890123456789012345678901234567890123456789012345678901234567'O
$Comment /* Selected based on tsc_TestData10B of length 39 bytes */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_TestData10B_2
$TS_ConstType OCTETSTRING
$TS_ConstValue '00010203040506070809'O
$Comment /* Selected Arbitrarily but different from tsc_TestData10B */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_TestData10B
$TS_ConstType OCTETSTRING
$TS_ConstValue '01234567890123456789'O
$Comment /* Selected Arbitrarily of 10B */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RRC_ConnecSetupLen
$TS_ConstType INTEGER
$TS_ConstValue 960
$Comment /* the Number of bits in the pre-coded, RRC coection Setup Message */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_WaitNextRLC_Segment
$TS_ConstType INTEGER
$TS_ConstValue 200
$Comment /* Time in Milli Seconds, Value Taken Arbitrarily */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UM_SN_Size
$TS_ConstType INTEGER
$TS_ConstValue 7
$Comment /* The number of bits used to represent an UM sequence number. Ref 3G TS 25.322 clause 9.2.2.3 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UM_CCCH_Payloadsize
$TS_ConstType INTEGER
$TS_ConstValue 152
$Comment /* The RLC payload size in bits used for segmentation of the UM-RLC PDU on dl CCCH without Standard UM header of 8 bits but included Length indicators and Padding, if any. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId maxLogCHperTrCH
$TS_ConstType INTEGER
$TS_ConstValue 15
$Comment /* This constant is from MCI ASP proposal, but there is no value for it in the proposal. value 8 is for temporary use */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId maxdlTrCH
$TS_ConstType INTEGER
$TS_ConstValue 16
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId maxulTrCH
$TS_ConstType INTEGER
$TS_ConstValue 16
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_AICH1
$TS_ConstType INTEGER
$TS_ConstValue 7
$Comment /* Physical channel identity for AICH channel associated with first PRACH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_AICH1_ChC
$TS_ConstType ChannelisationCode256
$TS_ConstValue 3
$Comment /* Channelization code for tsc_AICH1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_AICH2
$TS_ConstType INTEGER
$TS_ConstValue 12
$Comment /* Physical channel identity for AICH2 channel associated with second PRACH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_AT_ResultOK
$TS_ConstType IA5String
$TS_ConstValue "<CR><LF>OK<CR><LF>"
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_AttOn
$TS_ConstType INTEGER
$TS_ConstValue 1
$Comment /* Attach flag value On */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_AttenuationServingCell
$TS_ConstType INTEGER
$TS_ConstValue 0
$Comment /* Value of attenuator to be used when setting a Serving Cell. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_BCCH1
$TS_ConstType INTEGER
$TS_ConstValue 1
$Comment /* Logical channel identity for logical channel BCCH mapped on BCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_BCCH6
$TS_ConstType INTEGER
$TS_ConstValue 6
$Comment /* Logical channel identity for logical channel BCCH mapped on FACH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_BCH1
$TS_ConstType INTEGER
$TS_ConstValue 11
$Comment /* Identity for transport channel BCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CRNTI
$TS_ConstType C_RNTI
$TS_ConstValue '0000000000000001'B
$Comment /* C RNTI. 
Default value: '0000 0000 0000 0001'B */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CS_Domain
$TS_ConstType CN_DomainIdentity
$TS_ConstValue cs_domain
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellA
$TS_ConstType INTEGER
$TS_ConstValue 0
$Comment /* Identity of Cell A */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellB
$TS_ConstType INTEGER
$TS_ConstValue 1
$Comment /* Identity of Cell B */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellC
$TS_ConstType INTEGER
$TS_ConstValue 2
$Comment /* Identity of Cell C */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellD
$TS_ConstType INTEGER
$TS_ConstValue 3
$Comment /* Identity of Cell D */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellDedicated
$TS_ConstType INTEGER
$TS_ConstValue -1
$Comment /* Identity of the dedicated cell. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellE
$TS_ConstType INTEGER
$TS_ConstValue 4
$Comment /* Identity of Cell E */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellF
$TS_ConstType INTEGER
$TS_ConstValue 5
$Comment /* Identity of Cell F */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellG
$TS_ConstType INTEGER
$TS_ConstValue 6
$Comment /* Identity of Cell G */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellH
$TS_ConstType INTEGER
$TS_ConstValue 7
$Comment /* Identity of Cell H */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellIdCellA
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000000000000000000'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellIdCellB
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000000000000000001'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellIdCellC
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000000000000000010'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellIdCellD
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000000000000000011'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellIdCellE
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000000000000000100'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellIdCellF
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000000000000000101'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellIdCellG
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000000000000000110'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_CellIdCellH
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000000000000000111'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DC_ControlPDU
$TS_ConstType DC_Field
$TS_ConstValue '0'B
$Comment /* Value for D/C field within a STATUS PDU. Ref 3G TS 25.322 clause 9.2.2.1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_CCCH5
$TS_ConstType INTEGER
$TS_ConstValue 5
$Comment /* Logical channel identity for logical channel CCCH mapped on FACH (downlink) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DCCH1
$TS_ConstType INTEGER
$TS_ConstValue 1
$Comment /* Logical channel identity for DCCH1 (downlink), used by signalling radio bearer 1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DCCH2
$TS_ConstType INTEGER
$TS_ConstValue 2
$Comment /* Logical channel identity for DCCH2 (downlink), used by signalling radio bearer 2 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DCCH3
$TS_ConstType INTEGER
$TS_ConstValue 3
$Comment /* Logical channel identity for DCCH3 (downlink), used by signalling radio bearer 3 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DCCH4
$TS_ConstType INTEGER
$TS_ConstValue 4
$Comment /* Logical channel identity for DCCH4 (downlink), used by signalling radio bearer 4 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DCH1
$TS_ConstType INTEGER
$TS_ConstValue 6
$Comment /* identity for transport channel DCH1 (downlink),  in AMR speech this transport channel is used for RAB subflow#1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DCH5
$TS_ConstType INTEGER
$TS_ConstValue 10
$Comment /* identity for transport channel DCH5 (downlink), in most case  this transport channel is used for signalling bearers. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DPCH1
$TS_ConstType INTEGER
$TS_ConstValue 26
$Comment /* physical channel identity for DPCH1(downlink) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DPCH1_2ndScrC
$TS_ConstType SecondaryScramblingCode
$TS_ConstValue 1
$Comment /* secondary scrambling code for DL DPCH1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DPCH1_ChC_64k_CS
$TS_ConstType SF512_AndCodeNumber
$TS_ConstValue sf32:0
$Comment /* Channelization code for tsc_DL_DPCH1 for a 64 kbps CS configuration */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DPCH1_ChC_RLC_7_BitLI
$TS_ConstType SF512_AndCodeNumber
$TS_ConstValue sf128:0
$Comment /* Channelization code for tsc_DL_DPCH1 for a 8 kbps CS/PS configuration used for 7 Bit LI RLC test cases */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DPCH1_ChC_SRB
$TS_ConstType SF512_AndCodeNumber
$TS_ConstValue sf128:0
$Comment /* Channelization code for tsc_DL_DPCH1 for a SRB connection with a RAB established */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DPCH1_SFP_RLC_7BitLI
$TS_ConstType SF512_AndPilot
$TS_ConstValue sfd128 : pb4
$Comment /* Spreading factor and pilot bits for tsc_DL_DPCH1 for RLC 7 bit LI configurations */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DPCH1_SFP_SRB
$TS_ConstType SF512_AndPilot
$TS_ConstValue sfd128:pb4
$Comment /* Spreading factor and pilot bits for tsc_DL_DPCH1 for an SRB connection with a RAB established */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_DTCH1
$TS_ConstType INTEGER
$TS_ConstValue 7
$Comment /* Logical channel identity for DTCH1 (downlink) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_PDSCH1
$TS_ConstType INTEGER
$TS_ConstValue 16
$Comment /* Physical channel identity for primaryPDSCH channel */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DL_TxPower_DPCH
$TS_ConstType DL_TxPower
$TS_ConstValue -5
$Comment /* down link transmit power level of DPCH used for CS RABS.  
Default value is -5 dBm */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DPCCH_PowerOffset
$TS_ConstType DPCCH_PowerOffset
$TS_ConstValue -40
$Comment /* DPCCH power offset value. 
Defalut value: -80 (IE Value *2), */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DPCH_PowerOffsetPILOT
$TS_ConstType INTEGER
$TS_ConstValue 0
$Comment /* Power offsett value of PILOT on DPCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DPCH_PowerOffsetTFCI
$TS_ConstType INTEGER
$TS_ConstValue 0
$Comment /* Power offsett value of TFCI on DPCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DPCH_PowerOffsetTPC
$TS_ConstType INTEGER
$TS_ConstValue 0
$Comment /* Power offsett value of TPC on DPCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DefaultDPCH_OffsetValue
$TS_ConstType DefaultDPCH_OffsetValueFDD
$TS_ConstValue 459
$Comment /* Default DPCH offset value. Actual value DefaultDPCH-OffsetValueFDD = IE value * 512 
Default value : 459 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DelayAfterRRC_ConnRel
$TS_ConstType INTEGER
$TS_ConstValue 1000
$Comment /* Delay before sending after receiving RRC CONNECTION RELEASE complete in AM Mode (value in ms),  so as to allow SS RLC layer to send ACK to UE. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_DelayBeforeRRC_ConnRel
$TS_ConstType INTEGER
$TS_ConstValue 1000
$Comment /* Delay before sending RRC CONNECTION RELEASE (value in ms) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_FACH1
$TS_ConstType INTEGER
$TS_ConstValue 13
$Comment /* transport channel identity for  FACH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_FACH2
$TS_ConstType INTEGER
$TS_ConstValue 14
$Comment /* transport channel identity for second FACH when it is connected to a secondary CCPCH together with PCH (transport channel identity = 14) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_GMM_PD
$TS_ConstType ProtocolDiscriminator
$TS_ConstValue '1000'B
$Comment /* GMM protocol discriminator 3GPP 24.008 clause 10.4 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_GainFactorBetaC_Below64k
$TS_ConstType INTEGER
$TS_ConstValue 11
$Comment /* Gain factor Beta C value  to be used for RAB UL below 64kbps */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_GainFactorBetaC_Higher64k
$TS_ConstType INTEGER
$TS_ConstValue 9
$Comment /* Gain factor Beta C value  to be used for RAB UL higher than 64kbps */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_GainFactorBetaD
$TS_ConstType INTEGER
$TS_ConstValue 15
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_IntegrProtAlgCap
$TS_ConstType B16
$TS_ConstValue '0000000000000010'B
$Comment /* Integrity Protection Algorithm Capability */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_KeySeqDef
$TS_ConstType KeySeq
$TS_ConstValue '111'B
$Comment /* default Key Sequence. 
Default value: '111'B */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_LAC_Def
$TS_ConstType OCTETSTRING
$TS_ConstValue '0001'O
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_MCC_Def
$TS_ConstType HEXSTRING
$TS_ConstValue '001'H
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_MNC_Def
$TS_ConstType HEXSTRING
$TS_ConstValue '01F'H
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_MSN
$TS_ConstType INTEGER
$TS_ConstValue 0
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_MaxAllowPwr
$TS_ConstType MaxAllowedUL_TX_Power
$TS_ConstValue 33
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_MessAuthCode
$TS_ConstType BITSTRING
$TS_ConstValue '00000000000000000000000000000000'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_Mui
$TS_ConstType INTEGER
$TS_ConstValue 0
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_N300
$TS_ConstType INTEGER
$TS_ConstValue 3
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_NMO_I
$TS_ConstType OCTETSTRING
$TS_ConstValue '00'O
$Comment /* Network Mode of Operation I (3GPP 24.008 / 10.5.1.12.3) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_NMO_II
$TS_ConstType OCTETSTRING
$TS_ConstValue '01'O
$Comment /* Network Mode of Operation II (3GPP 24.008 / 10.5.1.12.3) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_Now
$TS_ConstType INTEGER
$TS_ConstValue 512
$Comment /* To indicate the system information change starts immediately. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PCCH1
$TS_ConstType INTEGER
$TS_ConstValue 1
$Comment /* Logical channel identity for logical channel PCCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PCH1
$TS_ConstType INTEGER
$TS_ConstValue 12
$Comment /* identity for transport channel PCH1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PDU_TypeStatus
$TS_ConstType CtrlPDU_Type
$TS_ConstValue '000'B
$Comment /* Value for PDU type field within a STATUS PDU. Ref 3G TS 25.322 clause 9.2.2.2 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PICH1
$TS_ConstType INTEGER
$TS_ConstValue 6
$Comment /* Physical channel identity for PICH channel associated with first secondary CCPCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PICH1_ChC
$TS_ConstType ChannelisationCode256
$TS_ConstValue 2
$Comment /* Channelization code for tsc_PICH1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PICH2
$TS_ConstType INTEGER
$TS_ConstValue 11
$Comment /* Physical channel identity for PICH2 channel associated with second secondary CCPCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PRACH1
$TS_ConstType INTEGER
$TS_ConstValue 8
$Comment /* Physical channel identity for first PRACH channel */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PRACH1_SF
$TS_ConstType SF_PRACH
$TS_ConstValue sfpr64
$Comment /* Channelization code for UL DPDCH for PRACH1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PRACH1_ScrC
$TS_ConstType PreambleScramblingCodeWordNumber
$TS_ConstValue 0
$Comment /* Scrambling code for preamble of PRACH1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PRACH1_Signatures
$TS_ConstType AvailableSignatures
$TS_ConstValue '0000000011111111'B
$Comment /* available signatures for PRACH. (from 34.108  cl. 6.1 (SIB5)) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PRACH2
$TS_ConstType INTEGER
$TS_ConstValue 9
$Comment /* Physical channel identity for second PRACH channel */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PS_Domain
$TS_ConstType CN_DomainIdentity
$TS_ConstValue ps_domain
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_P_CCPCH
$TS_ConstType INTEGER
$TS_ConstValue 4
$Comment /* Physical channel identity for primary CCPCH channel */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_P_CPICH
$TS_ConstType INTEGER
$TS_ConstValue 0
$Comment /* Physical channel identity for primary CPICH channel */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_P_SCH
$TS_ConstType INTEGER
$TS_ConstValue 1
$Comment /* Physical channel identity for primary SCH channel */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PowerAICH
$TS_ConstType AICH_PowerOffset
$TS_ConstValue -5
$Comment /* relative transmission power level of  AICH. The power level is specified relatively to power leve of CPICH in terms of AICH_Ec. 
Default is -5 dBm/3.84MHz */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PowerPICH
$TS_ConstType PICH_PowerOffset
$TS_ConstValue -5
$Comment /* relative transmission power level of PICH. The power level is specified relatively to power level of CPICH  in terms of PICH_Ec. 
Default is -5 dBm/3.84MHz */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PowerpCCPCH
$TS_ConstType DL_TxPower
$TS_ConstValue -2
$Comment /* transmission power level of primary CCPCH relative to CPICH.   
Default is -2 dBm. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PowerpCPICH
$TS_ConstType DL_TxPower_PCPICH
$TS_ConstValue -60
$Comment /* transmission power level of primary CPICH. The power level is specified in terms of CPICH_Ec.  
Default is -60 dBm. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PowerpSCH
$TS_ConstType DL_TxPower
$TS_ConstValue -5
$Comment /* transmission power level of primary SCH relative to CPICH.  
Default is -5 dBm. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PowersCCPCH1
$TS_ConstType DL_TxPower
$TS_ConstValue -2
$Comment /* transmission power level of secondary CCPCH1 relative to CPICH.  
Default is -2 dBm */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PowersSCH
$TS_ConstType DL_TxPower
$TS_ConstValue -5
$Comment /* transmission power level of secondary SCH relative to CPICH.  
Default is -5 dBm */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_PuncLimit
$TS_ConstType PuncturingLimit
$TS_ConstValue pl1
$Comment /* puncturing limit for PRACH. default value is 1. 
Default value: Pl1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RAB_DefCS
$TS_ConstType B8
$TS_ConstValue '00000001'B
$Comment /* Default AB Id for the CS domain */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RAB_DefPS
$TS_ConstType B8
$TS_ConstValue '00000101'B
$Comment /* Default AB Id for the PS domain */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RACH1
$TS_ConstType INTEGER
$TS_ConstValue 15
$Comment /* transport channel identity for RACH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RAC_Def
$TS_ConstType OCTETSTRING
$TS_ConstValue '05'O
$Comment /* Routing Area Code, 1 octet, 3GPP 24.008 clause 10.5.1.12.3 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB0
$TS_ConstType INTEGER
$TS_ConstValue 0
$Comment /* signalling radio bearer on TM + CCCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB1
$TS_ConstType INTEGER
$TS_ConstValue 1
$Comment /* sibnalling radio bearer on UM + DCCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB10
$TS_ConstType INTEGER
$TS_ConstValue 10
$Comment /* radio access bearer identity, in AMR speech this RB is RAB subflow#1, in other cases this is a radio access bearer */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB11
$TS_ConstType INTEGER
$TS_ConstValue 11
$Comment /* radio access bearer identity, in AMR speech this RB is RAB subflow#2, in some other cases this is the signalling radio bearer for TM + BCCH_FACH. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB12
$TS_ConstType INTEGER
$TS_ConstValue 12
$Comment /* radio access bearer, in AMR speech this RB is RAB subflow#3, in some other cases this is the bearer for TM PCCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB13
$TS_ConstType INTEGER
$TS_ConstValue 13
$Comment /* radio access bearer, in AMR speech this RB is RAB subflow#3, in some other cases this is the bearer for TM PCCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB2
$TS_ConstType INTEGER
$TS_ConstValue 2
$Comment /* signalling radio bearer on AM + DCCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB20
$TS_ConstType INTEGER
$TS_ConstValue 20
$Comment /* radio access bearer for PS RAB */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB21
$TS_ConstType INTEGER
$TS_ConstValue 21
$Comment /* radio access bearer for PS RAB */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB22
$TS_ConstType INTEGER
$TS_ConstValue 22
$Comment /* Second AM radio access bearer for PS */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB24
$TS_ConstType INTEGER
$TS_ConstValue 24
$Comment /* Second AM radio access bearer for PS */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB25
$TS_ConstType INTEGER
$TS_ConstValue 25
$Comment /* PS Radio Bearer associated with a DTCH on HS-DSCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB29
$TS_ConstType INTEGER
$TS_ConstValue 29
$Comment /* RB Id for Radio bearer that carries the 2nd CCCH in the DL */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB3
$TS_ConstType INTEGER
$TS_ConstValue 3
$Comment /* signalling radio bearer on AM + DCCH for high priority NAS_DT */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB30
$TS_ConstType INTEGER
$TS_ConstValue 30
$Comment /* radio access bearer for CBS RAB */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB31
$TS_ConstType INTEGER
$TS_ConstValue 31
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB4
$TS_ConstType INTEGER
$TS_ConstValue 4
$Comment /* signalling radio bearer on AM + DCCH for low priority NAS_DT */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_2ndCCCH
$TS_ConstType INTEGER
$TS_ConstValue -5
$Comment /* uplink signalling radio bearer on TM + second CCCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_2ndPCCH
$TS_ConstType INTEGER
$TS_ConstValue -4
$Comment /* radio bearer idenity for bearer on TM + PCCH + PCH used for sending paging message when there is no RAB subflows for speech. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_AM_15_RLC
$TS_ConstType SS_RB_Identity
$TS_ConstValue -13
$Comment /* RB Identity used for configuration of a TM RLC entity in the SS that will be used to simulate an AM RLC entity using 15 bit length indicators. The RB identity can be used by the SS decoder to determine which RLC mode is being simulated. 
 
A negative value is used to indicate that the SS configuration is not identical to the UE configuration. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_AM_7_RLC
$TS_ConstType SS_RB_Identity
$TS_ConstValue -12
$Comment /* RB Identity used for configuration of a TM RLC entity in the SS that will be used to simulate an AM RLC entity using 7 bit length indicators. The RB identity can be used by the SS decoder to determine which RLC mode is being simulated. 
 
A negative value is used to indicate that the SS configuration is not identical to the UE configuration. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_BCCH
$TS_ConstType INTEGER
$TS_ConstValue -1
$Comment /* radio bearer idenity for bearer on TM + BCCH + BCH used for broadcasting system information blocks */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_BCCH_FACH
$TS_ConstType INTEGER
$TS_ConstValue -3
$Comment /* signalling radio bearer on TM + BCCH + FACH + sCCPCH1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_BCCH_FACH_RAB
$TS_ConstType INTEGER
$TS_ConstValue -19
$Comment /* RB Id for Radio bearer that carries the 2nd BCCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_CCCH_FACH_MAC
$TS_ConstType SS_RB_Identity
$TS_ConstValue -18
$Comment /* RB Identity used for configuration of a TM RLC entity in the SS that will be used to simulate the CCCH  mapped to FACH. The RB identity can be used by the SS decoder to determine which MAC configuration is being simulated. 
 
A negative value is used to indicate that the SS configuration is not identical to the UE configuration. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_DCCH_DCH_MAC
$TS_ConstType SS_RB_Identity
$TS_ConstValue -15
$Comment /* RB Identity used for configuration of a TM RLC entity in the SS that will be used to simulate the high priority NAS SRB mapped to DCH. The RB identity can be used by the SS decoder to determine which MAC configuration is being simulated. 
 
A negative value is used to indicate that the SS configuration is not identical to the UE configuration. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_DCCH_FACH_MAC
$TS_ConstType SS_RB_Identity
$TS_ConstValue -14
$Comment /* RB Identity used for configuration of a TM RLC entity in the SS that will be used to simulate the high priority NAS SRB mapped to FACH. The RB identity can be used by the SS decoder to determine which MAC configuration is being simulated. 
 
A negative value is used to indicate that the SS configuration is not identical to the UE configuration. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_PCCH
$TS_ConstType INTEGER
$TS_ConstValue -2
$Comment /* radio bearer idenity for bearer on TM + PCCH + PCH used for sending paging message when there is no RAB subflows for speech. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_PCCH2
$TS_ConstType INTEGER
$TS_ConstValue -4
$Comment /*  */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_UM_15_RLC
$TS_ConstType SS_RB_Identity
$TS_ConstValue -11
$Comment /* RB Identity used for configuration of a TM RLC entity in the SS that will be used to simulate a UM RLC entity using 15 bit length indicators. The RB identity can be used by the SS decoder to determine which RLC mode is being simulated. 
 
A negative value is used to indicate that the SS configuration is not identical to the UE configuration. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_RB_UM_7_RLC
$TS_ConstType SS_RB_Identity
$TS_ConstValue -10
$Comment /* RB Identity used for configuration of a TM RLC entity in the SS that will be used to simulate a UM RLC entity using 7 bit length indicators. The RB identity can be used by the SS decoder to determine which RLC mode is being simulated. 
 
A negative value is used to indicate that the SS configuration is not identical to the UE configuration. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SFN_OffsetA
$TS_ConstType INTEGER
$TS_ConstValue 0
$Comment /* SFN offset values for  cell A 
Default value: 0 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SFN_OffsetB
$TS_ConstType INTEGER
$TS_ConstValue 0
$Comment /* SFN offset values for  cell B 
Default value: 0 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SFN_OffsetC
$TS_ConstType INTEGER
$TS_ConstValue 0
$Comment /* SFN offset values for  cell C 
Default value: 0 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SFN_OffsetD
$TS_ConstType INTEGER
$TS_ConstValue 3000
$Comment /* SFN offset values for  cell D 
Default value: 3000 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SFN_OffsetE
$TS_ConstType INTEGER
$TS_ConstValue 3000
$Comment /* SFN offset values for  cell E 
Default value: 3000 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SFN_OffsetF
$TS_ConstType INTEGER
$TS_ConstValue 678
$Comment /* SFN offset values for  cell F 
Default value: 678 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SFN_OffsetG
$TS_ConstType INTEGER
$TS_ConstValue 1356
$Comment /* SFN offset values for  cell G 
Default value: 1356 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SFN_OffsetH
$TS_ConstType INTEGER
$TS_ConstValue 2034
$Comment /* SFN offset values for  cell H 
Default value: 2034 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SMPD
$TS_ConstType ProtocolDiscriminator
$TS_ConstValue '1010'B
$Comment /* SM protocol discriminator */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SS_CS_Domain
$TS_ConstType SS_CN_DomainIdentity
$TS_ConstValue 0
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SS_PS_Domain
$TS_ConstType SS_CN_DomainIdentity
$TS_ConstValue 1
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_S_CCPCH1
$TS_ConstType INTEGER
$TS_ConstValue 5
$Comment /* Physical channel identity for first secondary CCPCH channel */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_S_CCPCH1_ChC
$TS_ConstType SF256_AndCodeNumber
$TS_ConstValue sf64:1
$Comment /* Channelization code for tsc_S_CCPCH1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_S_CCPCH2
$TS_ConstType INTEGER
$TS_ConstValue 10
$Comment /* Physical channel identity for second secondary CCPCH channel */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_S_CCPCH3
$TS_ConstType INTEGER
$TS_ConstValue 13
$Comment /* Physical channel identity forThird secondary CCPCH channel */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_S_CCPCH_2ndScrCode
$TS_ConstType INTEGER
$TS_ConstValue 0
$Comment /* Secondary scrambling code for S-CCPCH channels */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_S_SCH
$TS_ConstType INTEGER
$TS_ConstValue 2
$Comment /* Physical channel identity for secondary SCH channel */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_SlotFormatsCCPCH1
$TS_ConstType SCCPCHSlotFormat
$TS_ConstValue 8
$Comment /* channelization code for secondary CCPCH1 when spreading factor = 64, default value is 8. 
Default value: 8 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_T3212_Def
$TS_ConstType OCTETSTRING
$TS_ConstValue '1E'O
$Comment /* infinite */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_TPC_CombinationIndex
$TS_ConstType TPC_CombinationIndex
$TS_ConstValue 0
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_TT01
$TS_ConstType INTEGER
$TS_ConstValue 5000
$Comment /* TC protocol Timer: 5 sec (shall be 2,5 sec) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_TWaitSysInfo
$TS_ConstType INTEGER
$TS_ConstValue 5000
$Comment /* Wait for the completion of SysInfo sending */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_TimingsCCPCH1
$TS_ConstType INTEGER
$TS_ConstValue 0
$Comment /* timing offset for secondary CCPCH1. default is 0. 
Default value: 0 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_TpcStepSize
$TS_ConstType TPC_StepSizeFDD
$TS_ConstValue 0
$Comment /*  Value 0 corresponds to 1 dB */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UE_TestLoopMode1
$TS_ConstType UE_TestLoopMode
$TS_ConstValue '00'O
$Comment /* mode 1 with DCCH dummy transmission disabled */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_CCCH5
$TS_ConstType INTEGER
$TS_ConstValue 5
$Comment /* Logical channel identity for logical channel CCCH mapped  RACH (uplink) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_DCCH1
$TS_ConstType INTEGER
$TS_ConstValue 1
$Comment /* Logical channel identity for DCCH1 (uplink), used by signalling radio bearer 1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_DCCH2
$TS_ConstType INTEGER
$TS_ConstValue 2
$Comment /* Logical channel identity for DCCH2 (uplink), used by signalling radio bearer 2 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_DCCH3
$TS_ConstType INTEGER
$TS_ConstValue 3
$Comment /* Logical channel identity for DCCH3 (uplink), used by signalling radio bearer 3 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_DCCH4
$TS_ConstType INTEGER
$TS_ConstValue 4
$Comment /* Logical channel identity for DCCH4 (uplink), used by signalling radio bearer 4 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_DCH1
$TS_ConstType INTEGER
$TS_ConstValue 1
$Comment /* identity for transport channel DCH1 (uplink),  in AMR speech this transport channel is used for RAB subflow#1 */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_DCH5
$TS_ConstType INTEGER
$TS_ConstValue 5
$Comment /* identity for transport channel DCH5 (uplink), in most case  this transport channel is used for signalling bearers. */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_DPCH1
$TS_ConstType INTEGER
$TS_ConstValue 20
$Comment /* physical channel identity for DPCH1(uplink) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_DPDCH_SF_RLC_7BitLI
$TS_ConstType SpreadingFactor
$TS_ConstValue sf64
$Comment /* Channelization code for UL DPDCH for 7 Bit LI RLC configurations */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_DPDCH_SF_SRB
$TS_ConstType SpreadingFactor
$TS_ConstValue sf64
$Comment /* Channelization code for UL DPDCH for an SRB connection with a RAB established */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_DTCH1
$TS_ConstType INTEGER
$TS_ConstValue 7
$Comment /* Logical channel identity for DTCH1 (uplink) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_MAC_Prt1
$TS_ConstType MAC_LogicalChannelPriority
$TS_ConstValue 1
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_MAC_Prt2
$TS_ConstType MAC_LogicalChannelPriority
$TS_ConstValue 2
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_MAC_Prt3
$TS_ConstType MAC_LogicalChannelPriority
$TS_ConstValue 3
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_UL_MAC_Prt4
$TS_ConstType MAC_LogicalChannelPriority
$TS_ConstValue 4
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_URA_IdCellA
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000001'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_URA_IdCellB
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000001'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_URA_IdCellC
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000010'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_URA_IdCellD
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000010'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_URA_IdCellE
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000011'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_URA_IdCellF
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000011'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_URA_IdCellG
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000100'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_URA_IdCellH
$TS_ConstType BITSTRING
$TS_ConstValue '0000000000000100'B
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_USIM_NeedRmv
$TS_ConstType BOOLEAN
$TS_ConstValue TRUE
$Comment /* Removal of USIM is needed in a test case (USIM is not always inserted) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_WaitBeforePaging
$TS_ConstType INTEGER
$TS_ConstValue 5000
$Comment /* Waiting time before PAGING (ms) */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_sCCPCH_PowerOffsetPILOT
$TS_ConstType INTEGER
$TS_ConstValue 6
$Comment /* Power offsett value of PILOT on sCCPCH */
$End_TS_ConstDcl
$TS_ConstDcl
$TS_ConstId tsc_sCCPCH_PowerOffsetTFCI
$TS_ConstType INTEGER
$TS_ConstValue 6
$Comment /* Power offsett value of TFCI on sCCPCH */
$End_TS_ConstDcl
$Comment /*  */
$End_TS_ConstDcls
$Begin_TS_ConstRefs
$TS_ConstRef
$TS_ConstId hiPDSCHidentities
$TS_ConstType INTEGER
$ASN1_ValueReference hiPDSCHidentities
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId hiPUSCHidentities
$TS_ConstType INTEGER
$ASN1_ValueReference hiPUSCHidentities
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId hiRM
$TS_ConstType INTEGER
$ASN1_ValueReference hiRM
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxAC
$TS_ConstType INTEGER
$ASN1_ValueReference maxAC
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxAdditionalMeas
$TS_ConstType INTEGER
$ASN1_ValueReference maxAdditionalMeas
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxASC
$TS_ConstType INTEGER
$ASN1_ValueReference maxASC
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxASCmap
$TS_ConstType INTEGER
$ASN1_ValueReference maxASCmap
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxASCpersist
$TS_ConstType INTEGER
$ASN1_ValueReference maxASCpersist
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxCCTrCH
$TS_ConstType INTEGER
$ASN1_ValueReference maxCCTrCH
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxCellMeas
$TS_ConstType INTEGER
$ASN1_ValueReference maxCellMeas
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxCellMeas_1
$TS_ConstType INTEGER
$ASN1_ValueReference maxCellMeas-1
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxCNdomains
$TS_ConstType INTEGER
$ASN1_ValueReference maxCNdomains
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxCPCHsets
$TS_ConstType INTEGER
$ASN1_ValueReference maxCPCHsets
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxDPCH_DLchan
$TS_ConstType INTEGER
$ASN1_ValueReference maxDPCH-DLchan
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxDPDCH_UL
$TS_ConstType INTEGER
$ASN1_ValueReference maxDPDCH-UL
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxDRACclasses
$TS_ConstType INTEGER
$ASN1_ValueReference maxDRACclasses
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxFACHPCH
$TS_ConstType INTEGER
$ASN1_ValueReference maxFACHPCH
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxFreq
$TS_ConstType INTEGER
$ASN1_ValueReference maxFreq
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxFreqBandsFDD
$TS_ConstType INTEGER
$ASN1_ValueReference maxFreqBandsFDD
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxFreqBandsTDD
$TS_ConstType INTEGER
$ASN1_ValueReference maxFreqBandsTDD
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxFreqBandsGSM
$TS_ConstType INTEGER
$ASN1_ValueReference maxFreqBandsGSM
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxGERAN_SI
$TS_ConstType INTEGER
$ASN1_ValueReference maxGERAN-SI
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxHProcesses
$TS_ConstType INTEGER
$ASN1_ValueReference maxHProcesses
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxHSSCCHs
$TS_ConstType INTEGER
$ASN1_ValueReference maxHSSCCHs
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxInterSysMessages
$TS_ConstType INTEGER
$ASN1_ValueReference maxInterSysMessages
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxLoCHperRLC
$TS_ConstType INTEGER
$ASN1_ValueReference maxLoCHperRLC
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxMAC_d_PDUsizes
$TS_ConstType INTEGER
$ASN1_ValueReference maxMAC-d-PDUsizes
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxMeasEvent
$TS_ConstType INTEGER
$ASN1_ValueReference maxMeasEvent
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxMeasIntervals
$TS_ConstType INTEGER
$ASN1_ValueReference maxMeasIntervals
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxMeasParEvent
$TS_ConstType INTEGER
$ASN1_ValueReference maxMeasParEvent
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxNumCDMA2000Freqs
$TS_ConstType INTEGER
$ASN1_ValueReference maxNumCDMA2000Freqs
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxNumGSMFreqRanges
$TS_ConstType INTEGER
$ASN1_ValueReference maxNumGSMFreqRanges
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxNumFDDFreqs
$TS_ConstType INTEGER
$ASN1_ValueReference maxNumFDDFreqs
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxNumTDDFreqs
$TS_ConstType INTEGER
$ASN1_ValueReference maxNumTDDFreqs
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxOtherRAT
$TS_ConstType INTEGER
$ASN1_ValueReference maxOtherRAT
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxOtherRAT_16
$TS_ConstType INTEGER
$ASN1_ValueReference maxOtherRAT-16
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPage1
$TS_ConstType INTEGER
$ASN1_ValueReference maxPage1
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPCPCH_APsig
$TS_ConstType INTEGER
$ASN1_ValueReference maxPCPCH-APsig
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPCPCH_APsubCh
$TS_ConstType INTEGER
$ASN1_ValueReference maxPCPCH-APsubCh
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPCPCH_CDsig
$TS_ConstType INTEGER
$ASN1_ValueReference maxPCPCH-CDsig
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPCPCH_CDsubCh
$TS_ConstType INTEGER
$ASN1_ValueReference maxPCPCH-CDsubCh
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPCPCH_SF
$TS_ConstType INTEGER
$ASN1_ValueReference maxPCPCH-SF
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPCPCHs
$TS_ConstType INTEGER
$ASN1_ValueReference maxPCPCHs
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPDCPAlgoType
$TS_ConstType INTEGER
$ASN1_ValueReference maxPDCPAlgoType
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPDSCH
$TS_ConstType INTEGER
$ASN1_ValueReference maxPDSCH
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPDSCH_TFCIgroups
$TS_ConstType INTEGER
$ASN1_ValueReference maxPDSCH-TFCIgroups
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPRACH
$TS_ConstType INTEGER
$ASN1_ValueReference maxPRACH
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPRACH_FPACH
$TS_ConstType INTEGER
$ASN1_ValueReference maxPRACH-FPACH
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxPUSCH
$TS_ConstType INTEGER
$ASN1_ValueReference maxPUSCH
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxQueueIDs
$TS_ConstType INTEGER
$ASN1_ValueReference maxQueueIDs
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxRABsetup
$TS_ConstType INTEGER
$ASN1_ValueReference maxRABsetup
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxRAT
$TS_ConstType INTEGER
$ASN1_ValueReference maxRAT
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxRB
$TS_ConstType INTEGER
$ASN1_ValueReference maxRB
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxRBallRABs
$TS_ConstType INTEGER
$ASN1_ValueReference maxRBallRABs
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxRBMuxOptions
$TS_ConstType INTEGER
$ASN1_ValueReference maxRBMuxOptions
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxRBperRAB
$TS_ConstType INTEGER
$ASN1_ValueReference maxRBperRAB
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxReportedGSMCells
$TS_ConstType INTEGER
$ASN1_ValueReference maxReportedGSMCells
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxRL
$TS_ConstType INTEGER
$ASN1_ValueReference maxRL
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxRL_1
$TS_ConstType INTEGER
$ASN1_ValueReference maxRL-1
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxROHC_PacketSizes_r4
$TS_ConstType INTEGER
$ASN1_ValueReference maxROHC-PacketSizes-r4
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxROHC_Profile_r4
$TS_ConstType INTEGER
$ASN1_ValueReference maxROHC-Profile-r4
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxSat
$TS_ConstType INTEGER
$ASN1_ValueReference maxSat
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxSCCPCH
$TS_ConstType INTEGER
$ASN1_ValueReference maxSCCPCH
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxSIB
$TS_ConstType INTEGER
$ASN1_ValueReference maxSIB
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxSIB_FACH
$TS_ConstType INTEGER
$ASN1_ValueReference maxSIB-FACH
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxSIBperMsg
$TS_ConstType INTEGER
$ASN1_ValueReference maxSIBperMsg
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxSRBsetup
$TS_ConstType INTEGER
$ASN1_ValueReference maxSRBsetup
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxSystemCapability
$TS_ConstType INTEGER
$ASN1_ValueReference maxSystemCapability
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTF
$TS_ConstType INTEGER
$ASN1_ValueReference maxTF
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTF_CPCH
$TS_ConstType INTEGER
$ASN1_ValueReference maxTF-CPCH
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTFC
$TS_ConstType INTEGER
$ASN1_ValueReference maxTFC
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTFCsub
$TS_ConstType INTEGER
$ASN1_ValueReference maxTFCsub
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTFCI_2_Combs
$TS_ConstType INTEGER
$ASN1_ValueReference maxTFCI-2-Combs
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTGPS
$TS_ConstType INTEGER
$ASN1_ValueReference maxTGPS
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTrCH
$TS_ConstType INTEGER
$ASN1_ValueReference maxTrCH
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTrCHpreconf
$TS_ConstType INTEGER
$ASN1_ValueReference maxTrCHpreconf
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTS
$TS_ConstType INTEGER
$ASN1_ValueReference maxTS
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTS_1
$TS_ConstType INTEGER
$ASN1_ValueReference maxTS-1
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTS_2
$TS_ConstType INTEGER
$ASN1_ValueReference maxTS-2
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTS_LCR
$TS_ConstType INTEGER
$ASN1_ValueReference maxTS-LCR
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxTS_LCR_1
$TS_ConstType INTEGER
$ASN1_ValueReference maxTS-LCR-1
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxURA
$TS_ConstType INTEGER
$ASN1_ValueReference maxURA
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$TS_ConstRef
$TS_ConstId maxURNTI_Group
$TS_ConstType INTEGER
$ASN1_ValueReference maxURNTI-Group
$ASN1_ModuleId Class-definitions
$End_TS_ConstRef
$Comment /*  */
$End_TS_ConstRefs
$Begin_TS_VarDcls
$TS_VarDcl
$TS_VarId tsv_AuthSQN
$TS_VarType BITSTRING
$TS_VarValue '000000000000000000000000000000000000000000000000'B
$Comment /* 48 bits (TS 33.102 cl. 6.3.7, TS 34.108 cl. 8.1.2) 
used and updated whenever an authentication is performed */
$End_TS_VarDcl
$Comment /*  */
$End_TS_VarDcls
$Begin_TC_VarDcls
$TC_VarDcl
$TC_VarId tcv_AccessServiceClass
$TC_VarType B4
$TC_VarValue '0000'B
$Comment /* to be used in 7.1.2.4a */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SQN_Received
$TC_VarType INTEGER
$TC_VarValue 0
$Comment /* The SQN of the received PDU */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_ReceiveSigConnRelInd
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* This tcv will be used in the MAC test cases 7.1.1.2, 3,4,5 & 8 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_StatusPDU
$TC_VarType MAC_PDU_RCV_STATUS
$TC_VarValue 
$Comment /* This variable is used to store a received STATUS PDU. No default value is 
provided, because it is not possible to come up with a sensible default STATUS 
PDU. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_MAC_PDU
$TC_VarType MAC_PDU
$TC_VarValue cs_MAC_PDU_Def( - )
$Comment /* This variable is used in ts_SendAuthReq to store a MAC PDU containing the next 
Authentication Request segment to be transmitted. The MAC header fields are 
initialised to the values passed to the test step, and the data field is 
initialised to the appropriate Authentication Request segment during each 
iteration through the loop. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RBReconfCmplRecvd
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* to be used in test case 7.1.2.4a, to indicate reception of RB Reconfiguaration complete */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_LP_DataReceived
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* to be used in test case 7.1.2.4a, to indicate reception of Loop back data for data tx in step 6 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_PRACH_PreambleSigUsed
$TC_VarType INTEGER
$TC_VarValue 0
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_PRACH_AccessSlotUsed
$TC_VarType INTEGER
$TC_VarValue 0
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_PRACH_ExpAccessSlot
$TC_VarType INTEGER
$TC_VarValue 0
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_StatusMatchRes
$TC_VarType ResAndSUFIs
$TC_VarValue 
$Comment /* To Store the Result send by the SUPEr TSO 0_SUFI_Handler */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_DummyDL_DirectTransferMsg
$TC_VarType OCTETSTRING
$TC_VarValue tsc_DummyDL_DirectTransferMsg_PS
$Comment /* Used to store the Dummy dl Direct Transfer message for target Domain */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_MAC_Counter
$TC_VarType INTEGER
$TC_VarValue 0
$Comment /* Counter used in MAC Suite */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RLC_UM_PDU
$TC_VarType MAC_UMD_PDU
$TC_VarValue 
$Comment /* This variable is used to store an RLC UM PDU to be transmitted. Generally this
variable is initialised by using the test step ts_GetRRC_ConnectionSetupSegment. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_ConnecSetupSegmentNum
$TC_VarType INTEGER
$TC_VarValue 0
$Comment /* This variable is used to iterate through the 3 segments in the
hand coded Authentication Request message. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_ConnecSetupMsg
$TC_VarType OCTETSTRING
$TC_VarValue 
$Comment /* to store the Precoded RRC Connection Setup PDU. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_ActTime
$TC_VarType ActivationTime
$TC_VarValue 0
$Comment /* Activation Time */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_Assigned_PTMSI_Sig
$TC_VarType O3
$TC_VarValue px_PTMSI_SigDef
$Comment /* Current assigned PTMSI signature */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AssignedPTMSI
$TC_VarType OCTETSTRING
$TC_VarValue px_PTMSI_Def
$Comment /* Current assigned PTMSI */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AssignedTMSI
$TC_VarType OCTETSTRING
$TC_VarValue px_TMSI_Def
$Comment /* Current assigned TMSI */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthAK
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 48 )
$Comment /* Anonymity Key 
48 bits (TS 33.102 cl. 6.3.7, TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthAMF
$TC_VarType BITSTRING
$TC_VarValue px_AuthAMF
$Comment /* Authentication Management Field 
16 bits (TS 33.102 cl. 6.3.7, TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthAUTN
$TC_VarType B128
$TC_VarValue INT_TO_BIT ( 0, 128 )
$Comment /* to hold complete calculated  AUTN 128 bits (TS24.008 cl 10.5.3.1.1) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthAUTN_1
$TC_VarType B48
$TC_VarValue INT_TO_BIT ( 0, 48 )
$Comment /* to hold first part of calculated  AUTN 64 bits */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthAUTN_2
$TC_VarType B80
$TC_VarValue INT_TO_BIT ( 0, 80 )
$Comment /* to hold second part of calculated  AUTN 64 bits */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthCDOUT
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 64 )
$Comment /* CDOUT 64 bits (TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthCK
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 128 )
$Comment /* Ciphering Key 
128 bits (TS 33.102 cl. 6.3.7, TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthCK_1
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 64 )
$Comment /* Ciphering Key 1st part (bits 0-63) 
64 bits (TS 33.102 cl. 6.8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthCK_2
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 64)
$Comment /* Ciphering Key 2nd part (bits 64-127) 
64 bits (TS 33.102 cl. 6.8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthCK_XOR
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 64 )
$Comment /* Ciphering Key 1st and 2nd part, XORed 
64 bits (TS 33.102 cl. 6.8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthIK
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 128 )
$Comment /* Integrity Key 
128 bits (TS 33.102 cl. 6.3.7, TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthIK_1
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 64)
$Comment /* Integrity Key 1st part (bits 0-63) 
64 bits (TS 33.102 cl. 6.8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthIK_2
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 64 )
$Comment /* Integrity Key 2nd part (bits 64-127) 
64 bits (TS 33.102 cl. 6.8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthIK_XOR
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 64 )
$Comment /* Integrity Key 1st and 2nd part, XORed 
64 bits (TS 33.102 cl. 6.8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthK
$TC_VarType BITSTRING
$TC_VarValue px_AuthK
$Comment /* Authentication Key 
128 bits (TS 33.102 cl. 6.3.7, TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthKcGSM
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 64 )
$Comment /* GSM Cipher Key 
64 bits (TS 33.102 cl. 6.8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthMAC
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 64 )
$Comment /* Message Authentication Code 
64 bits (TS 33.102 cl. 6.3.7, TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthN
$TC_VarType INTEGER
$TC_VarValue px_AuthN
$Comment /* min 31, max 127 (TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthRAND
$TC_VarType BITSTRING
$TC_VarValue px_AuthRAND
$Comment /* Random Challenge 
128 bits (TS 33.102 cl. 6.3.7, TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthRsp
$TC_VarType AuthRsp
$TC_VarValue INT_TO_BIT (0,32)
$Comment /* to hold a Authentication Response parameter value received from the UE 32 bits (TS 24.008 cl 10.5.3.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthRspExt
$TC_VarType AuthRspExt
$TC_VarValue 
$Comment /* to hold a Authentication Response Extension parameter value received from the UE 96 bits (TS24.008 cl 10.5.3.2.1) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthRspPDU
$TC_VarType AUTHENTICATIONRESPONSE
$TC_VarValue 
$Comment /* to hold a Authentication Response PDU */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthXDOUT
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 128 )
$Comment /* XDOUT 128 bits (TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthXDOUT_Half
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 64 )
$Comment /* lower half of XDOUT 
64 bits (TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_AuthXRES
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 32 )
$Comment /* XRES min 32, max 128 bits (TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_BCCH_ModifyTime
$TC_VarType INTEGER
$TC_VarValue 512
$Comment /* To hold the BCCH modification time to be used by PAGING TYPE1 or SYSTEM INFORMATION CHANGE INDICATION. The initial value indicates changing now. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_CellIndInfo
$TC_VarType CellIndependantInfo
$TC_VarValue c_CellIndInfoDef
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_CellInfoA
$TC_VarType CellInfoCfg
$TC_VarValue c_CellInfoDef ( 
tsc_CellA,  px_PriScrmCode,   
tsc_URA_IdCellA, px_TCellA, tsc_SFN_OffsetA, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode )
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_CellInfoB
$TC_VarType CellInfoCfg
$TC_VarValue c_CellInfoDef ( 
tsc_CellB,  px_PriScrmCode,   
tsc_URA_IdCellB, px_TCellB, tsc_SFN_OffsetB, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), ((px_UL_ScramblingCode + 1000) MOD 16777216 ))
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_CellInfoC
$TC_VarType CellInfoCfg
$TC_VarValue c_CellInfoDef ( 
tsc_CellC,  px_PriScrmCode,   
tsc_URA_IdCellC, px_TCellC, tsc_SFN_OffsetC, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), ((px_UL_ScramblingCode + 2000) MOD 16777216 ) )
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_CellInfoD
$TC_VarType CellInfoCfg
$TC_VarValue c_CellInfoDef ( 
tsc_CellD,  px_PriScrmCode,  
tsc_URA_IdCellD, px_TCellD, tsc_SFN_OffsetD, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), ((px_UL_ScramblingCode + 3000) MOD 16777216 ) )
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_CellInfoE
$TC_VarType CellInfoCfg
$TC_VarValue c_CellInfoDef ( 
tsc_CellE,  px_PriScrmCode,  
tsc_URA_IdCellE, px_TCellE, tsc_SFN_OffsetE, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), ((px_UL_ScramblingCode + 4000) MOD 16777216 ) )
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_CellInfoF
$TC_VarType CellInfoCfg
$TC_VarValue c_CellInfoDef ( 
tsc_CellF,  px_PriScrmCode,  
tsc_URA_IdCellF, px_TCellF, tsc_SFN_OffsetF, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), ((px_UL_ScramblingCode + 5000) MOD 16777216 ) )
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_CellInfoG
$TC_VarType CellInfoCfg
$TC_VarValue c_CellInfoDef ( 
tsc_CellG,  px_PriScrmCode,  
tsc_URA_IdCellG, px_TCellG, tsc_SFN_OffsetG, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), ((px_UL_ScramblingCode + 6000) MOD 16777216 ) )
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_CellInfoH
$TC_VarType CellInfoCfg
$TC_VarValue c_CellInfoDef ( 
tsc_CellH,  px_PriScrmCode,  
tsc_URA_IdCellH, px_TCellH, tsc_SFN_OffsetH, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), ((px_UL_ScramblingCode + 7000) MOD 16777216 ) )
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_CipherActTime
$TC_VarType ActivationTime
$TC_VarValue 0
$Comment /* Activation Time */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_CN_Domain
$TC_VarType CN_DomainIdentity
$TC_VarValue cs_domain
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_Count
$TC_VarType INTEGER
$TC_VarValue 0
$Comment /* To hold a temporary counter value. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_CS_KeySeq
$TC_VarType KeySeq
$TC_VarValue tsc_KeySeqDef
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_DefaultRadioCnf
$TC_VarType BOOLEAN
$TC_VarValue TRUE
$Comment /* To be used in test cases that require a non deault radio configuration. 
TRUE: a default radio configuration is to be used 
FALSE: a non default radio configuration is to be used. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_dRX_CycleLengthPaging
$TC_VarType UTRAN_DRX_CycleLengthCoefficient
$TC_VarValue 
$Comment /* DRX cycleLength value to be used for PAGING */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_E_PLMN
$TC_VarType PLMN_List
$TC_VarValue c_PLMN_List1 (o_ConvtPLMN(tsc_MCC_Def, tsc_MNC_Def) )
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_FrameNumber
$TC_VarType INTEGER
$TC_VarValue 0
$Comment /* Values 0..4095 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_FreqInfoHigh
$TC_VarType FrequencyInfo
$TC_VarValue c_FreqInfo ( px_UARFCN_D_High - 950 , px_UARFCN_D_High)
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_FreqInfoLow
$TC_VarType FrequencyInfo
$TC_VarValue c_FreqInfo ( px_UARFCN_D_Low - 950 , px_UARFCN_D_Low)
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_FreqInfoMid
$TC_VarType FrequencyInfo
$TC_VarValue c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid)
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_GMM_AttachExpect
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* This TCV is to be used in Idle update step in NMO2 for a class A Mobile */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_GMM_AttachRec
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* This TCV is to be used in Idle update step in NMO2 for a class A Mobile */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_GMM_DetachExpect
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* This TCV is to be used in the Detach Handling
 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_GMM_RAU_Expect
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* This TCV is to be used in the Routing Area Update Handler
 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_GMM_RAU_Rec
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* This TCV is to be used in the Routing Area Update Handler
 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_HFN
$TC_VarType B20
$TC_VarValue '00000000000000000000'B
$Comment /* Hyper Frame Number for CS or PS  domain - to be used in security steps */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_InitialUE_Id
$TC_VarType InitialUE_Identity
$TC_VarValue c_UE_IdDefIMSI
$Comment /* Used to store the UE Identity */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_Int_ModifyFlag
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* This Flag will be used in Security related steps. If it is set to True, it means that A Integrity Modification is being done at that stage. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_K
$TC_VarType INTEGER
$TC_VarValue 0
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_MIB
$TC_VarType MasterInformationBlock
$TC_VarValue c_MIB_Def  ( c_CellInfoDef ( 
tsc_CellA,  px_PriScrmCode,   
tsc_URA_IdCellA, px_TCellA, tsc_SFN_OffsetA, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode ))
$Comment /* the initial value c_MIB_DefUTRAN_GERAN  is for UTRAN/GERAN, for UTRAN only tcv_MIB shall be re-initialized to c_MIB_Def_UTRAN. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_MIB_ValueTagChanged
$TC_VarType BOOLEAN
$TC_VarValue TRUE
$Comment /* initial value = TRUE, set to TRUE after MIBValueTag changed, set to FALSE after MIB delivered to SS. 
 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_MM_TestExecution
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* Indication of MM test execution, set to TRUE once NMO II is set, used to properly handle ATTACH and DETACH procedures in  MM  tests */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_N308
$TC_VarType INTEGER
$TC_VarValue 2
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_NumCfgCell
$TC_VarType INTEGER
$TC_VarValue 0
$Comment /* Number of cells configured */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_NumOfPLMN
$TC_VarType INTEGER
$TC_VarValue 1
$Comment /* This TCV is used to decide if the test case is a Single PLMN or Multi PLMN test case and based on it initialise SIB 11, 12 & 18 accordingly.
Values 1>> 1 PLMN, 2 >> 2 PLMN, 3 >> 3 PLMN  Rest Not defined */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_PollSDU
$TC_VarType Poll_SDU
$TC_VarValue sdu1
$Comment /* number of SDU's between pollings,   this initial value is for ts_SS_CreateCellFACH. (from 34.123-1). used in RB2, RB3, RB4. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_PollWindow
$TC_VarType PollWindow
$TC_VarValue pw99
$Comment /* percentage of transmission window,threshold for polling,   this initial value is for ts_SS_CreateCellFACH. (from 34.123-1). used in RB2, RB3, RB4. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_PS_AuthCK
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 128 )
$Comment /* Ciphering  Key for PS domain 
128 bits (TS 33.102 cl. 6.3.7, TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_PS_AuthIK
$TC_VarType BITSTRING
$TC_VarValue INT_TO_BIT ( 0, 128 )
$Comment /* Integrity Key for PS domain 
128 bits (TS 33.102 cl. 6.3.7, TS 34.108 cl. 8.1.2) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_PS_KeySeq
$TC_VarType KeySeq
$TC_VarValue tsc_KeySeqDef
$Comment /* Ciphering key sequence number for PS domain */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RAB_Id
$TC_VarType B8
$TC_VarValue '00000000'B
$Comment /* to hold the RABId received in a SETUP or a CALL CONFIRMED message */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RB_ActivationTimeInfoList
$TC_VarType RB_ActivationTimeInfoList
$TC_VarValue cs_RB_ActTimeInfoListSRBs ( 0,0,0,0 )
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RB_SigResumed
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RB_TestModeActivated
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* Set to TRUE if RB test mode is activated. To be used in the postamble: when RB test mode has been used then NAS do not need to be released. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_ReceivePS_ServiceReq
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* This Type tcv by default will be set to False. It will be set to TRUE, when MO Service request has been rejected, and hence Ue can retransmit Service Request which should be handled in Default handlers. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_Res
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* to hold the BOOLEAN result of a test suite operation or a test Step */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RLC_IgnoreStatus
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* This variable is used to indicate that an RLC STATUS PDU may be received and should be ignored . */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RLC_SeqNumDL_RB1
$TC_VarType RLC_SequenceNumber
$TC_VarValue 0
$Comment /* Downlink RLC Sequence Number for RB1 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RLC_SeqNumDL_RB2
$TC_VarType RLC_SequenceNumber
$TC_VarValue 0
$Comment /* Downlink RLC Sequence Number for RB2 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RLC_SeqNumDL_RB20
$TC_VarType RLC_SequenceNumber
$TC_VarValue 0
$Comment /* Downlink RLC Sequence Number for RB20 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RLC_SeqNumDL_RB21
$TC_VarType RLC_SequenceNumber
$TC_VarValue 0
$Comment /* Downlink RLC Sequence Number for RB21 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RLC_SeqNumDL_RB22
$TC_VarType RLC_SequenceNumber
$TC_VarValue 0
$Comment /* Downlink RLC Sequence Number for RB22 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RLC_SeqNumDL_RB24
$TC_VarType RLC_SequenceNumber
$TC_VarValue 0
$Comment /* Downlink RLC Sequence Number for RB24 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RLC_SeqNumDL_RB3
$TC_VarType RLC_SequenceNumber
$TC_VarValue 0
$Comment /* Downlink RLC Sequence Number for RB3 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RLC_SeqNumDL_RB4
$TC_VarType RLC_SequenceNumber
$TC_VarValue 0
$Comment /* Downlink RLC Sequence Number for RB4 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_EstCauMO
$TC_VarType EstablishmentCause
$TC_VarValue originatingConversationalCall
$Comment /* To hold the establishment cause for MO call that is supported by UE.  Assigned in ts_RRC_InitVariables. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_EstCauMT
$TC_VarType EstablishmentCause
$TC_VarValue terminatingConversationalCall
$Comment /* To hold the establishment cause for MT call that is supported by UE. Assigned in ts_RRC_InitVariables. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_MSN_RB0
$TC_VarType RRC_SequenceNumber
$TC_VarValue 0
$Comment /* Used to store the MSN of RB0 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_MSN_RB1
$TC_VarType RRC_SequenceNumber
$TC_VarValue 0
$Comment /* Used to store the MSN of RB1 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_MSN_RB2
$TC_VarType RRC_SequenceNumber
$TC_VarValue 0
$Comment /* Used to store the MSN of RB2 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_MSN_RB2_UL
$TC_VarType RRC_SequenceNumber
$TC_VarValue 0
$Comment /* Used to store the UL  MSN of RB2 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_MSN_RB3
$TC_VarType RRC_SequenceNumber
$TC_VarValue 0
$Comment /* Used to store the MSN of RB3 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_MSN_RB4
$TC_VarType RRC_SequenceNumber
$TC_VarValue 0
$Comment /* Used to store the MSN of RB4 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_PagingCau
$TC_VarType PagingCause
$TC_VarValue terminatingConversationalCall
$Comment /* To hold the paging cause for MT call that is supported by UE. Assigned in ts_RRC_InitVariables. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_RAB_Type
$TC_VarType RB_ConfigType
$TC_VarValue cell_DCH_64kCS_RAB_SRB
$Comment /* To hold the RAB config type that is supported by the UE.  Assigned in ts_RRC_InitVariables. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_RRC_Ti
$TC_VarType RRC_TransactionIdentifier
$TC_VarValue 0
$Comment /* To hold the RRC Transaction Identifier. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SB1
$TC_VarType SysInfoTypeSB1
$TC_VarValue c_SB1_Def
$Comment /* the initial value c_SB1_DefUTRAN_GERAN is for UTRAN/GERAN, for UTRAN only tcv_SB1 shall be re-initialized to c_SB1_DefUTRAN. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SB1_ValueTag
$TC_VarType INTEGER
$TC_VarValue 1
$Comment /* To hold current SB1_ValueTag, value range is 1 to 4. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SB1_ValueTagChanged
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* initial value = FALSE, set to TRUE after SB1ValueTag changed, set to FALSE after SB1 delivered to SS. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_Segs
$TC_VarType SegmentsOfSysInfoBlock
$TC_VarValue 
$Comment /* Variable  buffering the result of SIBSegmentation */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SIB1
$TC_VarType SysInfoType1
$TC_VarValue cb_SIB1_Def ( c_CellInfoDef ( 
tsc_CellA,  px_PriScrmCode,   
tsc_URA_IdCellA, px_TCellA,tsc_SFN_OffsetA, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode ))
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SIB11
$TC_VarType SysInfoType11
$TC_VarValue cb_SIB11_Def( c_CellInfoDef ( 
tsc_CellA,  px_PriScrmCode,   
tsc_URA_IdCellA, px_TCellA, tsc_SFN_OffsetA, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode ), 
 c_CellInfoDef ( 
tsc_CellB,  px_PriScrmCode,   
tsc_URA_IdCellB, px_TCellB, tsc_SFN_OffsetB, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode ), 
 c_CellInfoDef ( 
tsc_CellC,  px_PriScrmCode,   
tsc_URA_IdCellC, px_TCellC, tsc_SFN_OffsetC, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode ), 
 c_CellInfoDef ( 
tsc_CellD,  px_PriScrmCode,   
tsc_URA_IdCellD, px_TCellD, tsc_SFN_OffsetD, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode ), 
 c_CellInfoDef ( 
tsc_CellE,  px_PriScrmCode,   
tsc_URA_IdCellE, px_TCellE, tsc_SFN_OffsetE, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode ), 
 c_CellInfoDef ( 
tsc_CellF,  px_PriScrmCode,   
tsc_URA_IdCellF, px_TCellF, tsc_SFN_OffsetF, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode ), 
 c_CellInfoDef ( 
tsc_CellG,  px_PriScrmCode,   
tsc_URA_IdCellG, px_TCellG, tsc_SFN_OffsetG, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode ), 
 c_CellInfoDef ( 
tsc_CellH,  px_PriScrmCode,   
tsc_URA_IdCellH, px_TCellH, tsc_SFN_OffsetH, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode ) )
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SIB12
$TC_VarType SysInfoType12
$TC_VarValue cb_SIB12_Def
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SIB18
$TC_VarType SysInfoType18
$TC_VarValue 
$Comment /* no initial value */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SIB2
$TC_VarType SysInfoType2
$TC_VarValue 
$Comment /* no initial value */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SIB3
$TC_VarType SysInfoType3
$TC_VarValue cb_SIB3_DefUTRAN_GERAN( c_CellInfoDef ( 
tsc_CellA,  px_PriScrmCode,   
tsc_URA_IdCellA, px_TCellA, tsc_SFN_OffsetA, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode ))
$Comment /* the initial value c_SB3_DefUTRAN_GERAN is for UTRAN/GERAN, for UTRAN only tcv_SB3 shall be re-initialized to c_SB3_DefUTRAN. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SIB4
$TC_VarType SysInfoType4
$TC_VarValue cb_SIB4_DefUTRAN_GERAN ( c_CellInfoDef ( 
tsc_CellA,  px_PriScrmCode,   
tsc_URA_IdCellA, px_TCellA,tsc_SFN_OffsetA, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode ))
$Comment /* the initial value c_SB4_DefUTRAN_GERAN is for UTRAN/GERAN, for UTRAN only tcv_SB4 shall be re-initialized to c_SB4_DefUTRAN. */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SIB7
$TC_VarType SysInfoType7
$TC_VarValue c_SIB7_Def
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_Start
$TC_VarType START_Value
$TC_VarValue '00000000000000000000'B
$Comment /* To hold the START value received in the INITIAL DIRECT TRANSFER message */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_StartList
$TC_VarType STARTList
$TC_VarValue c_StartListCS
$Comment /* To hold the START list sent by UE */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_SubChNum
$TC_VarType AvailableSubChannelNumbers
$TC_VarValue '111111111111'B
$Comment /* Available subchannel numbers for PRACH, this initial value is for ts_SS_CreateCellFACH. (from 34.108  cl. 6.1 (SIB5)) */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_TestBody
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* to indicate if the test body is currently being executed */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_TGCFN
$TC_VarType TGCFN
$TC_VarValue 0
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_TimeoutInDefault
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* Indication of a TimeoutInDefault having occurred */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_TimerPoll
$TC_VarType TimerPoll
$TC_VarValue tp400
$Comment /* value for polling timer,   this initial value is for ts_SS_CreateCellFACH. (from 34.123-1). used in RB2, RB3, RB4 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_TimerPollProhibit
$TC_VarType TimerPollProhibit
$TC_VarValue tpp200
$Comment /* minimum time between polls,   this initial value is for ts_SS_CreateCellFACH. (from 34.123-1). used in RB2, RB3, RB4 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_TmpAttachReqPDU
$TC_VarType ATTACHREQUEST
$TC_VarValue 
$Comment /* Temporary variable */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_TmpAuthAndCiphRspPDU
$TC_VarType AUTHENTICATIONANDCIPHERINGRESPONSE
$TC_VarValue 
$Comment /* Temporary variable */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_TmpB3
$TC_VarType B3
$TC_VarValue '000'B
$Comment /* Temporary variable */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_TmpCellInfo
$TC_VarType CellInfoCfg
$TC_VarValue c_CellInfoDef ( 
tsc_CellA,  px_PriScrmCode,   
tsc_URA_IdCellA, px_TCellA, tsc_SFN_OffsetA, c_FreqInfo ( px_UARFCN_D_Mid - 950 , px_UARFCN_D_Mid), px_UL_ScramblingCode )
$Comment /* To temporary store CellInfo data */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_TmpRAU_ReqPDU
$TC_VarType ROUTINGAREAUPDATEREQUEST
$TC_VarValue 
$Comment /* Temporary variable  */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_UE_OpMode
$TC_VarType UE_OperationMode
$TC_VarValue px_UE_OpModeDef
$Comment /* Indicates  the current UE operation mode (either A or C). */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_UE_SwitchedOn
$TC_VarType BOOLEAN
$TC_VarValue TRUE
$Comment /* This value is to represent the state of the UE.
TRUE means UE is Switched/Powered On, and hence only Switch/Power OFF operation can be done, and no Switch/Power On operation.
False Means, UE is off, and only Switch/Power On Operation can be done.
This Variable is introduced to help automation of test cases.
The dafault value of ON, is consistent with present Test Sequence, where MMI command to switch/Power off is called before creation of the first cell on SS Side.
 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_UE_SystemSpecificCap
$TC_VarType INTEGER
$TC_VarValue 0
$Comment /* use to represent the integer equivalent of 7 bit UE system specific Capability. The Valid range is 0 to 127 */
$End_TC_VarDcl
$TC_VarDcl
$TC_VarId tcv_Use_E_PLMN
$TC_VarType BOOLEAN
$TC_VarValue FALSE
$Comment /* The user of ts_IdleUpdated needs to set tcv_Use_E_PLMN  to 'True' if he wants to send 'equivalent PLMN list' as set in tcv_E_PLMN during CS or PS registration */
$End_TC_VarDcl
$Comment /*  */
$End_TC_VarDcls
$Begin_PCO_TypeDcls
$PCO_TypeDcl
$PCO_TypeId DSAP
$PCO_Role LT
$End_PCO_TypeDcl
$PCO_TypeDcl
$PCO_TypeId CSAP
$PCO_Role LT
$End_PCO_TypeDcl
$PCO_TypeDcl
$PCO_TypeId Dc_SAP
$PCO_Role LT
$End_PCO_TypeDcl
$PCO_TypeDcl
$PCO_TypeId MMI
$PCO_Role UT
$End_PCO_TypeDcl
$Comment /*  */
$End_PCO_TypeDcls
$Begin_PCO_Dcls
$PCO_Dcl
$PCO_Id AM
$PCO_TypeId DSAP
$PCO_Role LT
$Comment /* PCO above AM SAP of RLC */
$End_PCO_Dcl
$PCO_Dcl
$PCO_Id CMAC
$PCO_TypeId CSAP
$PCO_Role LT
$Comment /* Control and observation point between RRC and MAC */
$End_PCO_Dcl
$PCO_Dcl
$PCO_Id CPHY
$PCO_TypeId CSAP
$PCO_Role LT
$Comment /* Control and observation point between RRC and PHY */
$End_PCO_Dcl
$PCO_Dcl
$PCO_Id CRLC
$PCO_TypeId CSAP
$PCO_Role LT
$Comment /* Control and observation point between RRC and RLC */
$End_PCO_Dcl
$PCO_Dcl
$PCO_Id Dc
$PCO_TypeId Dc_SAP
$PCO_Role LT
$Comment /* Carry transmission and reception of NAS messages */
$End_PCO_Dcl
$PCO_Dcl
$PCO_Id TM
$PCO_TypeId DSAP
$PCO_Role LT
$Comment /* PCO above TM SAP of RLC */
$End_PCO_Dcl
$PCO_Dcl
$PCO_Id UM
$PCO_TypeId DSAP
$PCO_Role LT
$Comment /* PCO above UM SAP of RLC */
$End_PCO_Dcl
$PCO_Dcl
$PCO_Id Ut
$PCO_TypeId MMI
$PCO_Role UT
$Comment /* The PCO used for the upper tester */
$End_PCO_Dcl
$Comment /*  */
$End_PCO_Dcls
$Begin_TimerDcls
$TimerDcl
$TimerId t_TimeoutInDefault
$Duration 300
$Unit ms
$Comment /* Used to catch timeouts in the Defaults */
$End_TimerDcl
$TimerDcl
$TimerId t_Dly
$Duration 5000
$Unit ms
$Comment /* general purpose delay timer */
$End_TimerDcl
$TimerDcl
$TimerId t_Guard
$Duration 300
$Unit s
$Comment /* test case guard timer */
$End_TimerDcl
$TimerDcl
$TimerId t_Poll
$Duration 60000
$Unit ms
$Comment /* This timer is used to ensure that PDUs are received with the poll bit set. The duration of this timer must be longer than the duration of the test body. Expiry of this timer is handled in the RLC_Default behaviour table, and results in an inconclusive verdict. */
$End_TimerDcl
$TimerDcl
$TimerId t_Reset
$Duration 5000
$Unit ms
$Comment /* This timer is used to ensure that RESET PDUs are received. The duration of this timer must be longer than the duration of the test body. Expiry of this timer is handled in the RLC_Default behaviour table, and results in an inconclusive verdict. */
$End_TimerDcl
$TimerDcl
$TimerId t_Status
$Duration 10000
$Unit ms
$Comment /* This timer is used to ensure that STATUS PDUs are received. In general, it is started at the beginning of the test body. The duration of this timer must be longer than the duration of the test body. Expiry of this timer is handled in the RLC_Default behaviour table, and results in an inconclusive verdict. */
$End_TimerDcl
$TimerDcl
$TimerId t_T312
$Duration 1
$Unit s
$Comment /* Timer to check physical channel establishment criteria */
$End_TimerDcl
$TimerDcl
$TimerId t_WaitMS
$Duration 13500
$Unit ms
$Comment /* general wait timer */
$End_TimerDcl
$TimerDcl
$TimerId t_WaitS
$Duration 15
$Unit s
$Comment /* general watch timer */
$End_TimerDcl
$Comment /*  */
$End_TimerDcls
$ASP_TypeDefs
$TTCN_ASP_TypeDefs
$Begin_TTCN_ASP_TypeDef
$ASP_Id AT_CmdCnf
$PCO_Type MMI
$Comment /* The ASP is used get the result of a requested  AT command previously sent  to the UT  (UT ->LT). */
$ASP_ParDcls
$ASP_ParDcl
$ASP_ParId result
$ASP_ParType BOOLEAN
$Comment /* OPTIONAL */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId resultString
$ASP_ParType IA5String
$Comment /* OPTIONAL */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId sMS_BlockMode
$ASP_ParType HEXSTRING
$Comment /* to control and observe the Block mode procedure for SMS */
$End_ASP_ParDcl
$End_ASP_ParDcls
$Comment /*  */
$End_TTCN_ASP_TypeDef
$Begin_TTCN_ASP_TypeDef
$ASP_Id AT_CmdReq
$PCO_Type MMI
$Comment /* The ASP is used to request  a AT command to the UT  (LT ->UT). */
$ASP_ParDcls
$ASP_ParDcl
$ASP_ParId cmd
$ASP_ParType IA5String
$Comment /* command line */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId sMS_BlockMode
$ASP_ParType HEXSTRING
$Comment /* to control and observe the Block mode procedure for SMS */
$End_ASP_ParDcl
$End_ASP_ParDcls
$Comment /*  */
$End_TTCN_ASP_TypeDef
$Begin_TTCN_ASP_TypeDef
$ASP_Id MMI_CmdCnf
$PCO_Type MMI
$Comment /* The ASP is used get the result of a requested  command previously sent  to the UT  (UT ->LT). */
$ASP_ParDcls
$ASP_ParDcl
$ASP_ParId result
$ASP_ParType BOOLEAN
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId resultString
$ASP_ParType IA5String
$Comment /* OPTIONAL */
$End_ASP_ParDcl
$End_ASP_ParDcls
$Comment /*  */
$End_TTCN_ASP_TypeDef
$Begin_TTCN_ASP_TypeDef
$ASP_Id MMI_CmdReq
$PCO_Type MMI
$Comment /* The ASP is used to request  an MMI command to the UT  (LT ->UT). */
$ASP_ParDcls
$ASP_ParDcl
$ASP_ParId cmd
$ASP_ParType IA5String
$Comment /* command line */
$End_ASP_ParDcl
$End_ASP_ParDcls
$Comment /*  */
$End_TTCN_ASP_TypeDef
$Begin_TTCN_ASP_TypeDef
$ASP_Id RLC_AM_TestDataInd
$PCO_Type DSAP
$Comment /* To indicate the reception of unstructered data using acknowledged mode in the uplink direction */
$ASP_ParDcls
$ASP_ParDcl
$ASP_ParId cellId
$ASP_ParType INTEGER
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId rB_Id
$ASP_ParType SS_RB_Identity
$Comment /* RB identity (RB3 or RB4) */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId data
$ASP_ParType PDU
$End_ASP_ParDcl
$End_ASP_ParDcls
$Comment /*  */
$End_TTCN_ASP_TypeDef
$Begin_TTCN_ASP_TypeDef
$ASP_Id RLC_AM_TestDataReq
$PCO_Type DSAP
$Comment /* To request the transmission of unstructered data using acknowledged mode in the downlink direction */
$ASP_ParDcls
$ASP_ParDcl
$ASP_ParId cellId
$ASP_ParType INTEGER
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId rB_Id
$ASP_ParType SS_RB_Identity
$Comment /* RB identity (RB3 or RB4) */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId data
$ASP_ParType PDU
$End_ASP_ParDcl
$End_ASP_ParDcls
$Comment /*  */
$End_TTCN_ASP_TypeDef
$Begin_TTCN_ASP_TypeDef
$ASP_Id RLC_TR_TestDataInd
$PCO_Type DSAP
$Comment /* To indicate the reception of unstructered data using transparent mode in the uplink direction */
$ASP_ParDcls
$ASP_ParDcl
$ASP_ParId cellId
$ASP_ParType INTEGER
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId rB_Id
$ASP_ParType SS_RB_Identity
$Comment /* RB identity (RB3 or RB4) */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId data
$ASP_ParType PDU
$End_ASP_ParDcl
$End_ASP_ParDcls
$Comment /*  */
$End_TTCN_ASP_TypeDef
$Begin_TTCN_ASP_TypeDef
$ASP_Id RLC_TR_TestDataReq
$PCO_Type DSAP
$Comment /* To request the transmission of unstructered data using transparent mode in the downlink direction. TTCN writter is requires to send data according to the transport block size allowed. */
$ASP_ParDcls
$ASP_ParDcl
$ASP_ParId cellId
$ASP_ParType INTEGER
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId rB_Id
$ASP_ParType SS_RB_Identity
$Comment /* RB identity (RB3 or RB4) */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId data
$ASP_ParType PDU
$End_ASP_ParDcl
$End_ASP_ParDcls
$Comment /*  */
$End_TTCN_ASP_TypeDef
$Begin_TTCN_ASP_TypeDef
$ASP_Id RRC_DataInd (/*RRC-DATA-IND */)
$PCO_Type Dc_SAP
$Comment /* The ASP is used to indicate the receipt of the NAS PDU message using acknowledged operation (NAS <- RRC). */
$ASP_ParDcls
$ASP_ParDcl
$ASP_ParId cellId
$ASP_ParType INTEGER
$Comment /* Cell Id */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId rB_Id
$ASP_ParType SS_RB_Identity
$Comment /* RB identity (RB3 or RB4) */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId ch
$ASP_ParType LogicChGERAN
$Comment /* Logical channel (used for interworking with GERAN) */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId sapId
$ASP_ParType SapId
$Comment /* RRC SAP identifier (SAP0) */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId cN_Domain
$ASP_ParType SS_CN_DomainIdentity
$Comment /* CN domain identity */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId start
$ASP_ParType START_Value
$Comment /* Mandatory in INITIAL DIRECT TRANSFER */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId msg
$ASP_ParType PDU
$Comment /* NAS PDU */
$End_ASP_ParDcl
$End_ASP_ParDcls
$Comment /*  */
$End_TTCN_ASP_TypeDef
$Begin_TTCN_ASP_TypeDef
$ASP_Id RRC_DataReq
$PCO_Type Dc_SAP
$Comment /* The ASP is used to request the transmission of the NAS PDU message using acknowledged operation (NAS -> RRC). */
$ASP_ParDcls
$ASP_ParDcl
$ASP_ParId cellId
$ASP_ParType INTEGER
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId rB_Id
$ASP_ParType SS_RB_Identity
$Comment /* RB identity (RB3 or RB4) */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId ch
$ASP_ParType LogicChGERAN
$Comment /* Logical channel (used for interworking with GERAN) */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId sapId
$ASP_ParType SapId
$Comment /* RRC SAP identifier (SAP0) */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId cN_Domain
$ASP_ParType SS_CN_DomainIdentity
$Comment /* CN domain identity */
$End_ASP_ParDcl
$ASP_ParDcl
$ASP_ParId msg
$ASP_ParType PDU
$Comment /* NAS PDU */
$End_ASP_ParDcl
$End_ASP_ParDcls
$Comment /*  */
$End_TTCN_ASP_TypeDef
$End_TTCN_ASP_TypeDefs
$ASN1_ASP_TypeDefs
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_SetRRC_MessageSN_REQ
$PCO_Type CSAP
$Comment /* To request the SS to set the RRC message sequence number in COUNT-I to the value specified in this ASP. The ASP is used to initialise SS RRC */
$ASN1_TypeDefinition
SEQUENCE
{
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo,
  count_I_LSB_UL RRC_SequenceNumber OPTIONAL,
  count_I_LSB_DL RRC_SequenceNumber OPTIONAL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_SetRRC_MessageSN_CNF
$PCO_Type CSAP
$Comment /* To confirm the RRC message sequence number setting request */
$ASN1_TypeDefinition
SEQUENCE
{
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_RRC_MessageSN_REQ
$PCO_Type CSAP
$Comment /* To request the SS to return the values in COUNT-I for sending the next DL RRC message or for receiving the next UL RRC message on the concerned SRB. */
$ASN1_TypeDefinition
SEQUENCE
{
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_RRC_MessageSN_CNF
$PCO_Type CSAP
$Comment /* To return the counter I value (HFN and RRC message sequence number) for sending the next DL RRC message or for receiving the next UL RRC message on the concerned SRB.
COUNT_I_MSB is the 28 MSB of the COUNT-I (HFN) */
$ASN1_TypeDefinition
SEQUENCE
{
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo,
  count_I_MSB_UL COUNT_I_MSB,
  count_I_LSB_UL RRC_SequenceNumber,
  count_I_MSB_DL COUNT_I_MSB,
  count_I_LSB_DL RRC_SequenceNumber
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CMAC_Ciphering_Activate_CNF
$PCO_Type CSAP
$Comment /* To confirm to activate or inactivate the ciphering */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CMAC_Ciphering_Activate_REQ
$PCO_Type CSAP
$Comment /* To request to start or, restart or stop downlink ciphering or uplink deciphering. The physicalChannelIdentity of DPCH applies to routingInfo.Do not increment HFN part of COUNT-C if the value of incrementCOUNT_C_Ind is "NotIncr". */
$ASN1_TypeDefinition
SEQUENCE
{
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo,
  ratType RatType,
  cn_DomainIdentity CN_DomainIdentity,
  cipheringModeInfo CipheringModeInfo,
  incHFN Increment_Mode
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CMAC_Config_CNF
$PCO_Type CSAP
$Comment /* For MAC emulator to report that a previous attempt to setup, reconfigure or release a logical channel is successful. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CMAC_Config_REQ
$PCO_Type CSAP
$Comment /* To request to configure MAC entity. Setup is used for creation of the MAC instances or the MAC resources. Release is used for free  the all MAC resources. The reconfiguration is to change the MAC parameters, it is not the MAC modification. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  routingInfo RoutingInfo,
  ratType RatType,
  configMessage CHOICE {
    setup CmacConfigReq,
    reconfigure CmacConfigReq,
    release NULL
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CMAC_PAGING_Config_CNF
$PCO_Type CSAP
$Comment /* To confirm to setup the Paging message */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CMAC_PAGING_Config_REQ
$PCO_Type CSAP
$Comment /* To request MAC layer to send the Paging message on the specified configuration. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo,
  ratType RatType,
  configMessage CmacPagingConfigReq
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CMAC_SYSINFO_Config_CNF
$PCO_Type CSAP
$Comment /* To confirm to setup the BCCH message to MAC layer */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CMAC_SYSINFO_Config_REQ
$PCO_Type CSAP
$Comment /* To request MAC layer to send the BCCH message on the specified configuration. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo,
  ratType RatType,
  configMessage CmacSysinfoConfigReq
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CMAC_SecurityMode_Config_CNF
$PCO_Type CSAP
$Comment /* To confirm to configure the MAC security mode */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CMAC_SecurityMode_Config_REQ
$PCO_Type CSAP
$Comment /* To request to configure the MAC security mode  
If there are several CMAC_Ciphering_Activate_REQ follow this ASP, the SS shall take a serial of specified actions on the same contents in this ASP at the activation time indicated in each CMAC_Ciphering_Activate_REQ. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  macCipheringInfo SecurityInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_AICH_AckModeSet_CNF
$PCO_Type CSAP
$Comment /* To confirm setting of AICH Acknowledge Mode */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_AICH_AckModeSet_REQ
$PCO_Type CSAP
$Comment /* To request for setting of AICH Acknowledge Mode */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(0..63),
  routingInfo RoutingInfo,
  ratType RatType,
  aICH_Mode AICH_Mode
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_Cell_Config_CNF
$PCO_Type CSAP
$Comment /* To confirm to setup the cell parameter */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_Cell_Config_REQ
$PCO_Type CSAP
$Comment /* To request to setup the cell parameter. 
The unit of tcell is chip;  the unit of sfnOffset is frame number; the primary scambling code number of the cell is 16*primaryScramblingCode_SS; the unit of dLTxAttenuationLevel is dB. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  tcell INTEGER(0..38399),
  sfnOffset INTEGER (0 .. 4095 ),
  frequencyInfo FrequencyInfo,
  primaryScramblingCode_SS INTEGER (0..511),
  cellTxPowerLevel CellTxPowerLevel,
  dLTxAttenuationLevel INTEGER(0..30)
  
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_Cell_Release_CNF
$PCO_Type CSAP
$Comment /* The confirmation to the CPHY_Cell_Release_Req */
$ASN1_TypeDefinition
SEQUENCE {
  soft_Reset BOOLEAN,
  cell_ID_List SEQUENCE (SIZE (1..8)) OF INTEGER(0..63) -- cell IDs
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_Cell_Release_REQ
$PCO_Type CSAP
$Comment /* 1. This Primitive with "Soft_Reset" flag ON gives a common known starting point/state of SS for a test case. The SS performs the following whenever it receives this primitive with "Soft_Reset" flag ON:Releases all configured Channels and cells (if any) irrespective of Cell ID list IE. 
2. Releases the associated Memory Buffers (if any). 
3. Cancels all active timers (if any)  
With "Soft_Reset" flag  OFF: 
1. Releases cells listed in IE Cell_ID_List and  associated configured Channels (if any)  
2. Releases the Memory Buffers(if any) associated with Cells listed in IE Cell_ID_List  
3. Cancels all active timers (if any) associated with Cells listed in IE Cell_ID_List. */
$ASN1_TypeDefinition
SEQUENCE {
  soft_Reset BOOLEAN,
  cell_ID_List SEQUENCE (SIZE (1..8)) OF INTEGER(0..63) -- cell IDs
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_Frame_Number_CNF
$PCO_Type CSAP
$Comment /* To return the requested  connection frame number. The routingInfo indicates a physical channel. */
$ASN1_TypeDefinition
SEQUENCE{
  cellId INTEGER(0..63),
  routingInfo RoutingInfo,
  frameNumber INTEGER (0..255)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_Frame_Number_REQ
$PCO_Type CSAP
$Comment /* To request the physical layer to return a connection frame number  on which the next message can be sent  at the specified PCO on the specified logical channel. The return frame number shall leave time from current frame number in order to leave some execution time for TTCN preparing next message. The routingInfo indicates a physical channel */
$ASN1_TypeDefinition
SEQUENCE{
  cellId INTEGER(0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_Ini_CNF
$PCO_Type CSAP
$Comment /* Confirm the test initialisation */
$ASN1_TypeDefinition
SEQUENCE
{
  confirmation NULL
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_Ini_REQ
$PCO_Type CSAP
$Comment /* Request to initialise the test */
$ASN1_TypeDefinition
ENUMERATED {
  defaultRadioEnvironment(0),
  nonDefaultMultiCell(1)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_Out_of_Sync_IND
$PCO_Type CSAP
$Comment /* To report that the physical channel synchronization (in FDD mode, sync with uplink DPCCH) was lost as detected by the SS receiver. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_PRACH_Measurement_CNF
$PCO_Type CSAP
$Comment /* To Confirm PRACH Measurement Req */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_PRACH_Measurement_REQ
$PCO_Type CSAP
$Comment /* To request for Start or Stop of PRACH Measurements to be done every PRACH PREAMBLE Or Message received */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(0..63),
  routingInfo RoutingInfo,
  ratType RatType,
  pRACH_MeasurementInd PRACH_MeasurementInd
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_PRACH_Measurement_Report_IND
$PCO_Type CSAP
$Comment /* SS indicates a PRACH parameters measurement report for each PRACH Preambles and Message received from the UE */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(0..63),
  routingInfo RoutingInfo,
  ratType RatType,
  measurementReport PRACH_MeasurementReport
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_RL_Modify_CNF
$PCO_Type CSAP
$Comment /* To confirm to modify the Radio Link */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_RL_Modify_REQ
$PCO_Type CSAP
$Comment /* To request to modify the Radio Link 
HardHandover (PhysicalChannelReconfig) 
ChannelisationCodeChange 
FrequencyChange 
PhysicalChannelModifyForTrCHReconfig 
CompressedMode( PhysicalChannelReconfig) 
Re_Synchronized HardHandover 
Softhandover */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo,
  ratType RatType,
  modifyMessage CphyRlModifyReq
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_RL_Release_CNF
$PCO_Type CSAP
$Comment /* PHY emulator confirms that a specified physical channel has been released. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_RL_Release_REQ
$PCO_Type CSAP
$Comment /* To request to release the Radio Link */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_RL_Setup_CNF
$PCO_Type CSAP
$Comment /* To confirm to setup the Radio Link */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_RL_Setup_REQ
$PCO_Type CSAP
$Comment /* To request to setup the associated transport channels and the Radio Link itself. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo,
  ratType RatType,
  setupMessage CphyRlSetupReq
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_Sync_IND
$PCO_Type CSAP
$Comment /* To indicate that physical channel synchronization (in FDD mode, sync with DPCCH) has been achieved. */
$ASN1_TypeDefinition
SEQUENCE{
  cellId INTEGER (0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_TrCH_Config_CNF
$PCO_Type CSAP
$Comment /* To confirm to configure the transport channel */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_TrCH_Config_REQ
$PCO_Type CSAP
$Comment /* To request to configure the transport channel */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(0..63),
  routingInfo RoutingInfo,
  ratType RatType,
  trchConfigType TrChConfigType,
  configMessage CphyTrchConfigReq
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_TrCH_Release_CNF
$PCO_Type CSAP
$Comment /* To confirm to release tthe Radio Link */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CPHY_TrCH_Release_REQ
$PCO_Type CSAP
$Comment /* To request to release tthe Radio Link */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (0..63),
  routingInfo RoutingInfo,
  trchConfigType TrChConfigType
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_Ciphering_Activate_CNF
$PCO_Type CSAP
$Comment /* To confirm to activate or inactivate the ciphering */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63)}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_Ciphering_Activate_REQ
$PCO_Type CSAP
$Comment /* To request to start, restart or stop downlink ciphering or uplink deciphering. The RB-identity applied to routingInfo indicates the SRB being not suspended during the execution of the ciphering mode command. Each call of the ASP includes one RLC SN in  rb_DL_CiphActivationTimeInfo for the corresponding rb-identity. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  ratType RatType,
  cn_DomainIdentity CN_DomainIdentity,
  ciphActivationInfo CiphActivationInfo,
  incHFN RLC_IncMode 
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_Config_CNF
$PCO_Type CSAP
$Comment /* For RLC emulator to comfirm that a previous attempt to establish, reconfigure or release a radio bearer has been successful */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_Config_REQ
$PCO_Type CSAP
$Comment /* To request to setup, reconfigure or release RLC entity */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  routingInfo RoutingInfo,
  ratType RatType,
  configMessage CrlcConfigReq
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_Integrity_Activate_CNF
$PCO_Type CSAP
$Comment /* To confirm to activate or inactivate the integrity protection */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_Integrity_Activate_REQ
$PCO_Type CSAP
$Comment /* To request to start or to modify the downlink or uplink integrity protection. The ASP shall be called before the sending of SECURITY MODE COMMAND. It activates the integrity on all SRBs in DL. The ASP shall not be called if the integrity shall be switched off in the test case. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  cn_DomainIdentity CN_DomainIdentity,
  integrityActivationInfo IntegrityActivationInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_Integrity_Failure_IND
$PCO_Type CSAP
$Comment /* RLC emulator reports the occurrences of a failure in integrity protection, i.e. reception of an integrity-protected RLC AM/UM SDU containing a non-matching X-MAC value compared to the desired. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo,
  failureCause ENUMERATED { codeNotMatched(0) }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_Resume_CNF
$PCO_Type CSAP
$Comment /* To confirm the resume request */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_Resume_REQ
$PCO_Type CSAP
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_SecurityMode_Config_CNF
$PCO_Type CSAP
$Comment /* To confirm to configure the ciphering */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63)
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_SecurityMode_Config_REQ
$PCO_Type CSAP
$Comment /* To request to configure the RLC security mode 
If several subsequent CRLC_Integrity_Activate_REQ or CRLC_Ciphering_Activate_REQ follow this ASP, the SS shall take a serial of specified actions on the same contents in this ASP at the activation time indicated in each CRLC_ Integrity (or Ciphering)_Activate_REQ. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  rlcSecurityInfo SecurityInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_SequenceNumber_CNF
$PCO_Type CSAP
$Comment /* To return the requested counter sequence number to which the next DL PDU to be sent or the expected UL PDU to be received. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  routingInfo RoutingInfo,
  count_C_MSB_UL COUNT_C_MSB ,
  count_C_LSB_UL RLC_SequenceNumber,
  count_C_MSB_DL COUNT_C_MSB ,
  count_C_LSB_DL RLC_SequenceNumber
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_SequenceNumber_REQ
$PCO_Type CSAP
$Comment /* To request the RLC layer to return current counter sequence numbers to which the next DL PDU to be sent or the expected UL PDU to be received. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  routingInfo RoutingInfo
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_Suspend_CNF
$PCO_Type CSAP
$Comment /* To confirm the suspension of data transmission. The parameter vt indicates either the value of the Send State Variable VT(S) for AM, or the value of Data State Varialble VT(US) for UM. */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  routingInfo RoutingInfo,
  vt RLC_SequenceNumber
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id CRLC_Suspend_REQ
$PCO_Type CSAP
$Comment /* To request the suspension of data transmission. The parameter n indicates that an RLC entity will not send a PDU with "Sequence Number">=VT(S)+N for AM and "Sequence Number">=VT(US)+N for UM, where N is a non-negative integer */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER (-1..63),
  routingInfo RoutingInfo,
  n RLC_SequenceNumber
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id RLC_AM_DATA_CNF
$PCO_Type DSAP
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo,
  mui Mui
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id RLC_AM_DATA_IND
$PCO_Type DSAP
$Comment /* To indicate to receive DATA using ackowledged mode */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo,
  integrityResult IntegrityResult ,
  aM_message CHOICE {
    uL_DCCH_Message UL_DCCH_Message,
    uL_CCCH_Message UL_CCCH_Message,
    uL_SHCCH_Message UL_SHCCH_Message
    
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id RLC_AM_DATA_REQ
$PCO_Type DSAP
$Comment /* To request to transmit DATA using ackowledged mode */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo,
  confirmationRequest AmConfirmationRequest,
  aM_message CHOICE {
    dL_DCCH_Message DL_DCCH_Message,
    dL_CCCH_Message DL_CCCH_Message,
    pCCH_Message PCCH_Message,
    dL_SHCCH_Message DL_SHCCH_Message,
    bCCH_FACH_Message BCCH_FACH_Message,
    bCCH_BCH_Message BCCH_BCH_Message,
    invalid_dL_DCCH_Message Invalid_DL_DCCH_Message,
    invalid_dL_CCCH_Message Invalid_DL_CCCH_Message,
    invalid_dL_SHCCH_Message Invalid_DL_SHCCH_Message
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id RLC_TR_DATA_IND
$PCO_Type DSAP
$Comment /* To indicate to receivet DATA using transparent mode */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo,
  tM_message CHOICE {
    uL_DCCH_Message UL_DCCH_Message,
    uL_CCCH_Message UL_CCCH_Message,
    uL_SHCCH_Message UL_SHCCH_Message
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id RLC_TR_DATA_REQ
$PCO_Type DSAP
$Comment /* To request to transmit DATA using transparent mode */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo,
  tM_message CHOICE {
    dL_DCCH_Message DL_DCCH_Message,
    dL_CCCH_Message DL_CCCH_Message,
    pCCH_Message PCCH_Message,
    dL_SHCCH_Message DL_SHCCH_Message,
    bCCH_FACH_Message BCCH_FACH_Message,
    bCCH_BCH_Message BCCH_BCH_Message,
    invalid_dL_DCCH_Message Invalid_DL_DCCH_Message,
    invalid_dL_CCCH_Message Invalid_DL_CCCH_Message,
    invalid_dL_SHCCH_Message Invalid_DL_SHCCH_Message
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id RLC_UM_DATA_IND
$PCO_Type DSAP
$Comment /* To indicate to receivet DATA using unacknowledged mode */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo,
  integrityResult IntegrityResult,
  uM_message CHOICE {
    uL_DCCH_Message UL_DCCH_Message,
    uL_CCCH_Message UL_CCCH_Message,
    uL_SHCCH_Message UL_SHCCH_Message
  }
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$Begin_ASN1_ASP_TypeDef
$ASP_Id RLC_UM_DATA_REQ
$PCO_Type DSAP
$Comment /* To request to transmit DATA using unacknowledged mode */
$ASN1_TypeDefinition
SEQUENCE {
  cellId INTEGER(-1..63),
  routingInfo RoutingInfo,
  uM_message CHOICE {
    dL_DCCH_Message DL_DCCH_Message,
    dL_CCCH_Message DL_CCCH_Message,
    pCCH_Message PCCH_Message,
    dL_SHCCH_Message DL_SHCCH_Message,
    bCCH_FACH_Message BCCH_FACH_Message,
    bCCH_BCH_Message BCCH_BCH_Message,
    invalid_dL_DCCH_Message Invalid_DL_DCCH_Message,
    invalid_dL_CCCH_Message Invalid_DL_CCCH_Message,
    invalid_dL_SHCCH_Message Invalid_DL_SHCCH_Message
  },
  specialLI BOOLEAN
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_ASP_TypeDef
$End_ASN1_ASP_TypeDefs
$End_ASP_TypeDefs
$PDU_TypeDefs
$TTCN_PDU_TypeDefs
$Begin_TTCN_PDU_TypeDef
$PDU_Id RLC_STATUS_PDU
$PCO_Type DSAP
$Comment /* An AMD STATUS PDU. Ref 3G TS 25.322 clause 9.2.1.5 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId dC_Field
$PDU_FieldType DC_Field
$Comment /* 1 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId type
$PDU_FieldType CtrlPDU_Type
$Comment /* 2 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId superFields
$PDU_FieldType SuperFields
$Comment /* 3 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId superFieldsRec
$PDU_FieldType HEXSTRING
$Comment /* 4 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId padding
$PDU_FieldType RLC_Padding
$Comment /* 5 */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* 1. Always tsc_DC_ControlPDU for a STATUS PDU.

2. Always tsc_PDU_TypeStatus for a STATUS PDU.

3. The superfields expected in the STATUS PDU. 

4. The superfields to be sent in the STATUS PDU. 

5. Must be present to ensure that the total size of this PDU is exactly equal 
   to the current PU size. It is the callers responsibility to ensure that 
   the superfields are either terminated with a NO_MORE SUFI, or an ACK SUFI. */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id MAC_AMD_PDU
$PCO_Type DSAP
$Comment /* Acknowledged mode RLC PDU with 7 bit length indicators. Ref 3G TS 25.322 clause 9.2.1.4 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId dcField
$PDU_FieldType DC_Field
$Comment /* 1 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId seqNum
$PDU_FieldType AM_SeqNum
$Comment /* 2 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId pollingBit
$PDU_FieldType PollingBit
$Comment /* 3 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId headerExt
$PDU_FieldType HeaderExt
$Comment /* 4 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId lenInds
$PDU_FieldType LenInds
$Comment /* 5 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId data
$PDU_FieldType AM_Data
$Comment /* 6 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId piggybackedStatus
$PDU_FieldType MAC_PiggyBackedSTATUS_PDU
$Comment /* 7 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId padding
$PDU_FieldType RLC_Padding
$Comment /* 8 */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* 1. Data / Control field. Always tsc_DC_AMDPDU for an AMD_PDU.

2. The sequence number for the PDU. Generally this field contains the value 
   INT_TO_BIT( p_SN, tsc_AM_SN_Size ), where p_SN is a parameter containing the
   current AM SN.

3. The pollingBit field may take on the values tsc_P_Poll, or tsc_P_NoPoll.

4. If the lenInds field is present, the headerExt field shall be 
   tsc_HE_LI_AndE_Bit.
   Otherwise, the headerExt field shall be tsc_HE_Data.

5. The length indicator group for the PDU. If this field present, this must be
   indicated by the headerExt field.

6. The data field contains the data to be sent, or the data expected to be 
   received. Usually this data is created by using either ts_GetRxAM_PRBS, or
   ts_GetTxAM_PRBS.

7. The piggybackedStatus field is used to transmit or receive a piggybacked 
   STATUS PDU within an RLC PDU. It is the callers responsibility to ensure 
   that there is an LI present indicating that the piggybacked STATUS PDU is 
   present.

8. The padding field must be present if the size of the LI group + the data 
   size + the optional piggybacked status PDU is less than the current PU size. */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id MAC_PiggyBackedSTATUS_PDU
$PCO_Type DSAP
$Comment /* A piggybacked STATUS PDU within an AMD PDU. This type is identical to the STATUS PDU, except the D/C field is replaced with a reserved bit. Ref 3G TS 25.322 clause 9.2.1.6. If padding is required, the padding field in the PDU containing this piggy-backed STATUS PDU should be used. */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId r
$PDU_FieldType BITSTRING[1]
$Comment /* Reserved for future extensions. */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId type
$PDU_FieldType CtrlPDU_Type
$Comment /* Always tsc_PDU_TypeStatus */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId superFields
$PDU_FieldType SuperFields
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id MAC_PDU
$PCO_Type DSAP
$PDU_EncodingId DirectEncoding
$Comment /* MAC layer PDU. Ref 3G TS 25.321 clause 9.1.2 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId tctf
$PDU_FieldType TCTF
$Comment /* 1 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ueIdType
$PDU_FieldType UE_IdType
$Comment /* 2 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ueId
$PDU_FieldType UE_Id
$Comment /* 3 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ctField
$PDU_FieldType CT_Field
$Comment /* 4 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId data
$PDU_FieldType PDU
$Comment /* 5 */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* For a detailed description of the semantics and applicability of each of these
fields, see 3G TS 25.321 clause 9.2.1.

1. Target Channel Type Field. Used to indicate which logical channel data should
   be routed to / from when mapped to RACH / FACH.

2. UE Id type field. Used to indicate if the UE_Id field contains a 16 bit C-
   RNTI or a 32 bit U-RNTI.

3. UE Id field. Contains the C-RNTI or the U-RNTI of the UE that this
   message is to or from.

4. C/T field. Used to multiplex / demultiplex when more than 1 logical channel 
   of a specific type is mapped to the same transport channel.

5. The RLC PDU to be transmitted or received. */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id MAC_PDU_RCV_STATUS
$PCO_Type DSAP
$PDU_EncodingId DirectEncoding
$Comment /* MAC layer PDU. Ref 3G TS 25.321 clause 9.1.2 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId tctf
$PDU_FieldType TCTF
$Comment /* 1 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ueIdType
$PDU_FieldType UE_IdType
$Comment /* 2 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ueId
$PDU_FieldType UE_Id
$Comment /* 3 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ctField
$PDU_FieldType CT_Field
$Comment /* 4 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId data
$PDU_FieldType RLC_STATUS_PDU
$Comment /* 5 */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* For a detailed description of the semantics and applicability of each of these
fields, see 3G TS 25.321 clause 9.2.1.

1. Target Channel Type Field. Used to indicate which logical channel data should
   be routed to / from when mapped to RACH / FACH.

2. UE Id type field. Used to indicate if the UE_Id field contains a 16 bit C-
   RNTI or a 32 bit U-RNTI.

3. UE Id field. Contains the C-RNTI or the U-RNTI of the UE that this
   message is to or from.

4. C/T field. Used to multiplex / demultiplex when more than 1 logical channel 
   of a specific type is mapped to the same transport channel.

5. The RLC PDU to be transmitted or received. */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id MAC_UMD_PDU
$PCO_Type DSAP
$PDU_EncodingId DirectEncoding
$Comment /* Unacknowledged mode RLC PDU. Ref 3G TS 25.322 clause 9.2.1.3 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId seqNum
$PDU_FieldType UM_SeqNum
$Comment /* 1 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId eBit
$PDU_FieldType ExtBit
$Comment /* 2 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId lenInds
$PDU_FieldType LenInds
$Comment /* 3 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId data
$PDU_FieldType MAC_UM_Data
$Comment /* 4 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId padding
$PDU_FieldType RLC_Padding
$Comment /* 5 */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* 1. The sequence number for the PDU. Generally this field contains the value 
   INT_TO_BIT( p_SN, tsc_UM_SN_Size ), where p_SN is a parameter containing the
   current UM SN.

2. If the lenInds field is present, the eBit field shall be tsc_E_LI_AndE_Bit.
   Otherwise, the eBit field shall be tsc_E_Data.

3. The length indicator group for the PDU. If this field present, this must be
   indicated by the eBit field.

4. The data field contains the data to be sent, or the data expected to be 
   received. Usually this data is created by using either ts_GetRxUM_PRBS, or
   ts_GetTxUM_PRBS.

5. The padding field must be present if the size of the LI group + the data 
   size is less than the current payload size. */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id AUTHENTICATION_AND_CIPHERING_FAILURE
$PCO_Type Dc_SAP
$Comment /* 3GPP 24.008 V3.6.0 clause 9.4.10a  (GMM message) */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gMMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* GMM Protocol Discriminator  
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* '0001 1100'B 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gmmCause
$PDU_FieldType RejCau
$Comment /* M 
1 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId authFailurePar
$PDU_FieldType AuthenticationFailureParameter
$Comment /* O 
TLV, 16 octets */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id ACTIVATEPDPCONTEXTREQUESTul
$PCO_Type Dc_SAP
$Comment /* Activate PDP Context Request 
ue -> n 
3GPP 24.008 clause, 9.5.1
 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId ti
$PDU_FieldType TI
$Comment /* transaction identifier
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId sM_ProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* protocol discriminator
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* message type  M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId requestedNSAPI
$PDU_FieldType NSAPI_v
$Comment /* Network service access point identifier
M V
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId requestedLLC_SAPI
$PDU_FieldType LLC_SAPI_v
$Comment /* LLC service access point identifier
M V
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId requestedQoS
$PDU_FieldType QualityOfService_lv
$Comment /* Quality of service
M LV
OCTETSTRING [13-15] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId pDP_Address
$PDU_FieldType PktDataProtoAddr_lv
$Comment /* Packet data protocol address
M LV
OCTETSTRING [3-19] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId accessPtName
$PDU_FieldType AccessPtName
$Comment /* Access point name
O TLV
OCTETSTRING [3-102] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId protocolConfOpts
$PDU_FieldType ProtoCfgOpt
$Comment /* Protocol configuration options
O TLV
OCTETSTRING [3-253] */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id ACTIVATERBTESTMODE
$PCO_Type Dc_SAP
$Comment /* ACTIVATE RB TEST MODE n -> ue 3G TS 34.109 V3.0.0 cl. 6.6 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator M BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId tCProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* TC Protocol Discriminator M BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type M BITSTRING [8] */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id ACTIVATERBTESTMODECOMPLETE
$PCO_Type Dc_SAP
$Comment /* ACTIVATE RB TEST MODE COMPLETE ue -> n 3G TS 34.109 V3.0.0 cl. 6.7 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator M BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId tCProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* TC Protocol Discriminator M BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type M BITSTRING [8] */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id ATTACHACCEPT
$PCO_Type Dc_SAP
$Comment /* 3GPP 24.008 V3.6.0 clause 9.4.2  (GMM message)
 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gMMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* GMM Protocol Discriminator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId forceToStandby
$PDU_FieldType ForceToStandby
$Comment /* M 
1/2 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId attachResult
$PDU_FieldType AttachResult
$Comment /* M 
1/2 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId periodicRAupdateTimer
$PDU_FieldType GPRS_Timer_v
$Comment /* M 
1 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId radioPrioTOM8
$PDU_FieldType RadioPriority2_v
$Comment /* M 
1/2 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId radioPrioSMS
$PDU_FieldType RadioPriority_v
$Comment /* M 
1/2 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId rai
$PDU_FieldType RAI_v
$Comment /* Routing Area Identification 
M 
6 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ptmsiSignature
$PDU_FieldType PTMSI_Signature
$Comment /* O 
4 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId negReadyTimer
$PDU_FieldType GPRS_Timer
$Comment /* O 
2 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId allocatedPTMSI
$PDU_FieldType GMM_MS_IdentityPTMSI
$Comment /* O 
7 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msIdentity
$PDU_FieldType GMM_MS_Identity
$Comment /* O 
7-10 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gmmCause
$PDU_FieldType GMM_Cause
$Comment /* O 
2 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId t3302Value
$PDU_FieldType GPRS_Timer2
$Comment /* O TLV
3 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId cellNotification
$PDU_FieldType CellNotification
$Comment /* O 
1 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId equivalentPLMN
$PDU_FieldType PLMN_List
$Comment /* O 
5-17 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ntwFeatureSupport
$PDU_FieldType NtwFeatureSupport_tv
$Comment /* O TV
1 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId emergNumList
$PDU_FieldType EmergNumList
$Comment /* O TLV
5-50 octets */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id ATTACHCOMPLETE
$PCO_Type Dc_SAP
$Comment /* 3GPP 24.008 V3.6.0 clause 9.4.3  (GMM message) */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gMMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* MM Protocol Discriminator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* '0000 0011'B 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id ATTACHREJECT
$PCO_Type Dc_SAP
$Comment /* 3GPP 24.008 V3.6.0 clause 9.4.4 (GMM message)
 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gMMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* GMM Protocol Discriminator '1000' 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type '0000 0100' 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gmmCause
$PDU_FieldType RejCau
$Comment /* M 
1 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId t3302Value
$PDU_FieldType GPRS_Timer2
$Comment /* O, TLV 
3 octets */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id ATTACHREQUEST
$PCO_Type Dc_SAP
$Comment /* 3GPP 24.008 V3.6.0 clause 9.4.1 (GMM message)
 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gMMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* GMM Protocol Discriminator '1000' 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type '0000 0001' 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msNetworkCap
$PDU_FieldType MS_NetworkCap_lv
$Comment /* MS network capability 
M 
3-9 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gprsCiphKeySeqNo
$PDU_FieldType CiphKeySeqNum
$Comment /* Ciphering key sequence number 
M  
BITSTRING[4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId attachType
$PDU_FieldType AttachType
$Comment /* Attach Type 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId drxParameter
$PDU_FieldType DRXparamter
$Comment /* M 
2 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ptmsiORimsi
$PDU_FieldType MS_Identity_lv
$Comment /* Mobile Identity 
M 
6-9 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId oldRAI
$PDU_FieldType RAI_v
$Comment /* Routing Area Identification 
M 
6 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msRadioAccessCap
$PDU_FieldType MSRadioAccessCap_lv
$Comment /* M 
6-52 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId oldPTMSI_Signature
$PDU_FieldType PTMSI_Signature
$Comment /* O 
4 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId readyTimer
$PDU_FieldType GPRS_Timer
$Comment /* O 
2 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId tmsiStatus
$PDU_FieldType TMSI_Status
$Comment /* O 
1 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId pS_LCS_Capability
$PDU_FieldType PS_LCS_Capability
$Comment /* O TLV
3 octets */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id AUTHENTICATIONANDCIPHERINGREQUEST
$PCO_Type Dc_SAP
$Comment /* 3GPP 24.008 V3.6.0 clause 9.4.9  (GMM message) */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gMMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* GMM Protocol Discriminator  
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* '0001 0010'B 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId imeisvReq
$PDU_FieldType IMEISVRequest
$Comment /* M 
BITSTRING[4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ciphAlgorithm
$PDU_FieldType CiphAlgorithm
$Comment /* Ciphering algorithm 
M  
BITSTRING[4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId acRefNo
$PDU_FieldType AC_ReferenceNumber
$Comment /* M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId forceToStandby
$PDU_FieldType ForceToStandby
$Comment /* M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId authRand
$PDU_FieldType AuthenticationParamterRAND
$Comment /* O, TV 
17 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gprsCiphKeySeqNo
$PDU_FieldType CiphKeySeqNum_tv
$Comment /* Ciphering key sequence number 
O, TV, 1 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId aUTN
$PDU_FieldType GMM_AUTN
$Comment /* Auth. parameter AUTN 
O, TLV, 18 octets */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id AUTHENTICATIONANDCIPHERINGRESPONSE
$PCO_Type Dc_SAP
$Comment /* 3GPP 24.008 V3.6.0 clause 9.4.10  (GMM message) */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gMMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* GMM Protocol Discriminator  
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* '0001 0011'B 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId spare4
$PDU_FieldType B4
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId acRefNo
$PDU_FieldType AC_ReferenceNumber
$Comment /* M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId authRsp
$PDU_FieldType AuthRsp_tv
$Comment /* O, TV 
5 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId imeisv
$PDU_FieldType GMM_MS_Identity
$Comment /* O 
TLV, 11 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId authRspExt
$PDU_FieldType AuthRspExt
$Comment /* O 
TLV, 3-14 octets */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id AUTHENTICATIONFAILURE
$PCO_Type Dc_SAP
$Comment /* MM AUTHENTICATION FAILURE ue -> n 
3G TS 24.008 V3.4.0 cl. 9.2.3a */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId mMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* MM Protocol Discriminator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type (1) 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId rejCau
$PDU_FieldType RejCau
$Comment /* Reject Cause 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId authFailParam
$PDU_FieldType AuthenticationFailureParameter
$Comment /* Authentication Failure Paramter 
O 
AuthFail (128 bits)
 */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* (1) (see 3G TS 24.008 cl. 10.4) In messages sent from the MS, 
for core network nodes earlier than R99: 
bit 8 shall be set to 0 and bit 7 is reserved for the send sequence number; 
for core network nodes of R99 or later: 
bits 7 and 8 are reserved for the send sequence number. */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id AUTHENTICATIONREQUEST
$PCO_Type Dc_SAP
$Comment /* MM AUTHENTICATION REQUEST n -> ms 
3G TS 24.008 V3.4.0 cl. 9.2.2 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId mMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* MM Protocol Discriminator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId spare4
$PDU_FieldType B4
$Comment /* Spare half octet 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ciphKeySeqNum
$PDU_FieldType CiphKeySeqNum
$Comment /* Ciphering Key Sequence Number 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId rAND
$PDU_FieldType MM_RAND
$Comment /* Auth. parameter RAND 
M 
BITSTRING [128] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId aUTN
$PDU_FieldType AUTN
$Comment /* Auth. parameter AUTN 
O 
AUTN */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* (1) In messages sent from the network bits 7 and 8 are "0" (see 3G TS 24.008 cl. 10.4) . */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id AUTHENTICATIONRESPONSE
$PCO_Type Dc_SAP
$Comment /* MM AUTHENTICATION RESPONSE ue -> n 
3G TS 24.008 V3.4.0 cl. 9.2.2 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId mMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* MM Protocol Discriminator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type (1) 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId authRsp
$PDU_FieldType AuthRsp
$Comment /* Authentication Response 
M 
OCTETSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId authRspExt
$PDU_FieldType AuthRspExt
$Comment /* Authentication Response Extension 
O 
AuthRspExt (3-14 octets) */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* (1) (see 3G TS 24.008 cl. 10.4) In messages sent from the MS, 
for core network nodes earlier than R99: 
bit 8 shall be set to 0 and bit 7 is reserved for the send sequence number; 
for core network nodes of R99 or later: 
bits 7 and 8 are reserved for the send sequence number. */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id CLOSEUETESTLOOP
$PCO_Type Dc_SAP
$Comment /* CLOSE UE TEST LOOP n -> ue 3G TS 34.109 V3.0.0 cl. 6.2 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator M BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId tCProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* TC Protocol Discriminator M BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type M BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId uE_TestLoopMode
$PDU_FieldType UE_TestLoopMode
$Comment /* UE test loop mode 
M UE_TestLoopMode */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId uE_TestLoopMode1LB_Setup
$PDU_FieldType UE_TestLoopMode1LB_Setup
$Comment /* UE test loop mode 1 LB setup 
C 
UE_TestLoopMode1LB_Setup */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id CLOSEUETESTLOOPCOMPLETE
$PCO_Type Dc_SAP
$Comment /* CLOSE UE TEST LOOP ue -> n 3G TS 34.109 V3.0.0  cl. 6.3 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator M BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId tCProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* TC Protocol Discriminator M BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type M BITSTRING [8] */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id DEACTIVATEPDPCONTEXTREQUEST
$PCO_Type Dc_SAP
$Comment /* Deactivate PDP Context Request 
n <=> ue 
24.008,  9.5.14
 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId ti
$PDU_FieldType TI
$Comment /* transaction identifier
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId sM_ProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* protocol discriminator
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* message type  M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId sM_Cause
$PDU_FieldType SM_Cause_v
$Comment /* SM cause
M V
OCTETSTRING [1] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId tearDwnInd
$PDU_FieldType TearDwnInd_tv
$Comment /* Tear down indicator
O TV 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId protocolConfOpts
$PDU_FieldType ProtoCfgOpt
$Comment /* Protocol configuration options
O TLV
OCTETSTRING [3-253] */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id DEACTIVATERBTESTMODE
$PCO_Type Dc_SAP
$Comment /* DEACTIVATE RB TEST MODE n -> ue 3G TS 34.109 V3.0.0  cl. 6.8 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator M BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId tCProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* TC Protocol Discriminator M BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type M BITSTRING [8] */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id DEACTIVATERBTESTMODECOMPLETE
$PCO_Type Dc_SAP
$Comment /* DEACTIVATE RB TEST MODE COMPLETE ue -> n 3G TS 34.109  cl. 6.9 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator M BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId tCProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* TC Protocol Discriminator M BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type M BITSTRING [8] */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id DETACHREQUESTMO
$PCO_Type Dc_SAP
$Comment /* 3GPP 24.008 V3.6.0 clause 9.4.5.2  (Mobile originating detach, GMM message) */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gMMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* GMM Protocol Discriminator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId spare4
$PDU_FieldType B4
$Comment /* M 
1/2 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId detachType
$PDU_FieldType DetachType
$Comment /* M 
1/2 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ptmsi
$PDU_FieldType GMM_MS_IdentityPTMSI
$Comment /* O 
TLV */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ptmsiSignature
$PDU_FieldType PTMSI_Signature_tlv
$Comment /* O */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id LOCATIONUPDATINGACCEPT
$PCO_Type Dc_SAP
$Comment /* MM LOCATION UPDATING ACCEPT n -> ms 
3G TS 24.008 V3.4.0  cl. 9.2.13
 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId mMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* MM Protocol Discriminator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type (1) 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId locAreaId
$PDU_FieldType LocAreaId_v
$Comment /* Location Area Id. V 
M 
LocAreaId_v (5 octets) */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId mobileId
$PDU_FieldType MM_MS_Identity
$Comment /* Mobile Identity 
O 
MobileId (3-11 octets) */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId followOnProceed
$PDU_FieldType FollowOnProceed
$Comment /* Follow on proceed 
O 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId cTSPerm
$PDU_FieldType CTSPerm
$Comment /* CTS Permission 
O 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId equivalentPLMN
$PDU_FieldType PLMN_List
$Comment /* O 
17 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId emergNumList
$PDU_FieldType EmergNumList
$Comment /* O TLV
5-50 octets */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* (1) In messages sent from the network bits 7 and 8 are "0" (see 3G TS 24.008 cl. 10.4) . */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id LOCATIONUPDATINGREQUEST
$PCO_Type Dc_SAP
$Comment /* MM LOCATION UPDATING REQUEST ue -> n 
3G TS 24.008 V3.4.0  cl. 9.2.15 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId mMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* MM Protocol Discriminator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type (1) 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ciphKeySeqNum
$PDU_FieldType CiphKeySeqNum
$Comment /* Ciphering Key Sequence Number 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId locUpdType
$PDU_FieldType LocUpdType
$Comment /* Location Updating Type 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId locAreaId
$PDU_FieldType LocAreaId_v
$Comment /* Location Area Id. V 
M 
LocAreaId (5 octets) */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId mSClsmk1
$PDU_FieldType MS_Clsmk1
$Comment /* Mobile Station Classmark 1 
M 
MSClsmk1 (1 octets) */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId mobileId
$PDU_FieldType MS_Identity_lv
$Comment /* Mobile Identity LV 
M 
MobileId (2-9 octets) */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId mSClsmk2
$PDU_FieldType MS_Clsmk2
$Comment /* Mobile Station Classmark 2 TLV 
O 
MSClsmk2 (5 octets) */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* (1) (see 3G TS 24.008 cl. 10.4) In messages sent from the UE, 
for core network nodes earlier than R99: 
bit 8 shall be set to 0 and bit 7 is reserved for the send sequence number; 
for core network nodes of R99 or later: 
bits 7 and 8 are reserved for the send sequence number. */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id PAGINGRESPONSE
$PCO_Type Dc_SAP
$Comment /* PAGINGRESPONSE ue -> n 
GSM 04.18   cl. 9.1.25 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId rRProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* RR Protocol Discriminator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type (1) 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId spare4
$PDU_FieldType B4
$Comment /* Spare half octet 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ciphKeySeqNum
$PDU_FieldType CiphKeySeqNum
$Comment /* Ciphering Key Sequence Number 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId mSClsmk2
$PDU_FieldType MS_Clsmk2_lv
$Comment /* Mobile Station Classmark 2  
M 
MSClsmk2 (4 octets) */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId mobileId
$PDU_FieldType MS_Identity_lv
$Comment /* Mobile Identity LV 
M 
MobileId (2-10 octets) */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* (1) (see 3G TS 24.008 cl. 10.4) In messages sent from the UE, 
for core network nodes earlier than R99: 
bit 8 shall be set to 0 and bit 7 is reserved for the send sequencenumber; 
for core network nodes of R99 or later: 
bits 7 and 8 are reserved for the send sequence number. 
(2) (see 3G TS 24.008 cl. 4.5.1.3.3) The UE shall respond with the PAGING RESPONSE message defined in GSM 04.18, chapter 9.1.25. For reasons of backward compatibility the paging response shall use the RR protocol discriminator. */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id ROUTINGAREAUPDATEREQUEST
$PCO_Type Dc_SAP
$Comment /* 3GPP 24.008 V3.6.0 clause 9.4.14 (GMM message)
 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gMMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* GMM Protocol Discriminator '1000' 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type '0000 1000' 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gprsCiphKeySeqNo
$PDU_FieldType CiphKeySeqNum
$Comment /* Ciphering key sequence number 
M  
BITSTRING[4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId updateType
$PDU_FieldType UpdateType_v
$Comment /* Update Type 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId oldRAI
$PDU_FieldType RAI_v
$Comment /* Routing Area Identification 
M 
6 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msRadioAccessCap
$PDU_FieldType MSRadioAccessCap_lv
$Comment /* M 
6-52 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId oldPTMSI_Signature
$PDU_FieldType PTMSI_Signature
$Comment /* O 
4 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId readyTimer
$PDU_FieldType GPRS_Timer
$Comment /* O 
2 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId drxParameter
$PDU_FieldType DRXparamter_tv
$Comment /* O, TV 
3 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId tmsiStatus
$PDU_FieldType TMSI_Status
$Comment /* O 
1 octet */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ptmsi
$PDU_FieldType GMM_MS_IdentityPTMSI
$Comment /* O, TLV 
7 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msnetworkcap
$PDU_FieldType MS_NetworkCap_tlv
$Comment /* MS network capability 
O, TLV 
4-10 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId pDP_ContextStatus
$PDU_FieldType PDP_ContextStatus
$Comment /* O 
4 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId pS_LCS_Capability
$PDU_FieldType PS_LCS_Capability
$Comment /* O TLV
3 octets */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id SERVICEREQUEST
$PCO_Type Dc_SAP
$Comment /* 3GPP 24.008 V3.6.0 clause 9.4.20 (GMM message)
 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId gMMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* GMM Protocol Discriminator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId serviceType
$PDU_FieldType ServiceType_v
$Comment /* Service type 
M  
BITSTRING[4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ciphKeySeqNo
$PDU_FieldType CiphKeySeqNum
$Comment /* Ciphering key sequence number 
M  
BITSTRING[4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId ptmsi
$PDU_FieldType MS_Identity_lv
$Comment /* Mobile Identity 
M 
6 octets */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId pDP_ContextStatus
$PDU_FieldType PDP_ContextStatus
$Comment /* O 
4 octets */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id SETUPul
$PCO_Type Dc_SAP
$Comment /* CC SETUP   n <- ue 
3G TS 24.008 cl. 9.3.23.2
 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId ti
$PDU_FieldType TI
$Comment /* transaction identifier    
M    
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId cC_ProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* CC protocol discriminator    
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* message type   (1)   
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId repeatInd
$PDU_FieldType RepeatInd
$Comment /* repeat indicator 
C 
BITSTRING[8] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId bcap1
$PDU_FieldType Bcap
$Comment /* Bearer capability 
M 
OCTETSTRING [3..16] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId bcap2
$PDU_FieldType Bcap
$Comment /* Bearer capability 
O 
OCTETSTRING [3..16] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId facility
$PDU_FieldType Facility
$Comment /* facility   O */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId cgps
$PDU_FieldType CGPS
$Comment /* calling party subaddr.   O 
OCTETSTRING [2..23] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId cdpn
$PDU_FieldType CDPN
$Comment /* called party  number 
M   
OCTETSTRING[3..43] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId cdps
$PDU_FieldType CDPS
$Comment /* called party subaddr.   O 
OCTETSTRING [2..23] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId llcRepeatInd
$PDU_FieldType RepeatInd
$Comment /* LLC repeat indicator  O 
OCTETSTRING [1] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId llc1
$PDU_FieldType LLC
$Comment /* low layer compatib.1  O 
OCTETSTRING [2..18] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId llc2
$PDU_FieldType LLC
$Comment /* low layer compatib.2  
O  OCTETSTRING [2..18] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId hlcRepeatInd
$PDU_FieldType RepeatInd
$Comment /* HLC repeat indicator  O 
OCTETSTRING [1] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId hlc1
$PDU_FieldType HLC
$Comment /* high layer compat.1   O 
OCTETSTRING [2..5] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId hlc2
$PDU_FieldType HLC
$Comment /* high layer compat. 2 
O  OCTETSTRING [2..5] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId userUser
$PDU_FieldType UserUser
$Comment /* user-user     
O    
OCTETSTRING [3..131] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId sS_VersionInd
$PDU_FieldType SS_VersionInd
$Comment /* SS version indicator   
ue -> n   
O  
OCTETSTRING [2..3] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId cLIR_Suppression
$PDU_FieldType CLIR_Suppression
$Comment /* CLIR suppression    
C  OCTETSTRING[1] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId cLIR_Invocation
$PDU_FieldType CLIR_Invocation
$Comment /* CLIR invocation   
  O  OCTETSTRING[1] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId cC_Capabilities
$PDU_FieldType CC_Capabilities
$Comment /* cc capabilities   
O 
OCTETSTRING[3] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId facilityCCBS_AdvRecall
$PDU_FieldType Facility
$Comment /* facility   for CCBS (advanced recall alignemet) O */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId facilityCCBS_RecallAlign
$PDU_FieldType Facility
$Comment /* facility  for CCBS (recall alignement not essential) 
 O */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId streamId
$PDU_FieldType StreamId
$Comment /* stream identifier 
O 
OCTETSTRING[3] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId supportedCodecs
$PDU_FieldType CodecList
$Comment /* supported codecs
O 
OCTETSTRING[5-n] */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* (1) bits 7 and 8 are 0 and send sequence number  for earlier than R99 resp. 
 a 2bit send sequence number for R99 or later (see 3G TS 24.008 cl. 10.4) */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id STATUS_PDU
$PCO_Type DSAP
$Comment /* An AMD STATUS PDU. Ref 3G TS 25.322 clause 9.2.1.5 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId dC_Field
$PDU_FieldType DC_Field
$Comment /* 1 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId type
$PDU_FieldType CtrlPDU_Type
$Comment /* 2 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId superFieldsTx
$PDU_FieldType SuperFields
$Comment /* 3 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId superFieldsAndPadRx
$PDU_FieldType HEXSTRING
$Comment /* 4 */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId paddingTx
$PDU_FieldType Padding
$Comment /* 5 */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* 1. Always tsc_DC_ControlPDU for a STATUS PDU. 
 
2. Always tsc_PDU_TypeStatus for a STATUS PDU. 
 
3. The superfields transmitted in the STATUS PDU.  
 
4. The superfields and padding to be received in the STATUS PDU.  
 
5. The padding transmitted must be present to ensure that the total size of this PDU is exactly   
   equal to the current PDU size. It is the callers responsibility to ensure that  
   the superfields are either terminated with a NO_MORE SUFI, or an ACK SUFI. */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id TMSIREALLOCATIONCOMPLETE
$PCO_Type Dc_SAP
$Comment /* MM TMSI REALLOCATION COMPLETE ue -> n 
3G TS 24.008 V3.4.0  cl. 9.2.18 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId skipIndicator
$PDU_FieldType SkipIndicator
$Comment /* Skip Indicator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId mMProtocolDiscriminator
$PDU_FieldType ProtocolDiscriminator
$Comment /* MM Protocol Discriminator 
M 
BITSTRING [4] */
$End_PDU_FieldDcl
$PDU_FieldDcl
$PDU_FieldId msgType
$PDU_FieldType MsgType
$Comment /* Message Type (1) 
M 
BITSTRING [8] */
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /* (1) (see 3G TS 24.008 cl. 10.4) In messages sent from the UE, 
for core network nodes earlier than R99: 
bit 8 shall be set to 0 and bit 7 is reserved for the send sequence number; 
for core network nodes of R99 or later: 
bits 7 and 8 are reserved for the send sequence number. */
$End_TTCN_PDU_TypeDef
$Begin_TTCN_PDU_TypeDef
$PDU_Id TrD_PDU
$PCO_Type DSAP
$PDU_EncodingId OctetUnaligned
$Comment /* Transparent mode RLC PDU. Ref 3G TS 25.322 clause 9.2.1.2 */
$PDU_FieldDcls
$PDU_FieldDcl
$PDU_FieldId data
$PDU_FieldType BITSTRING
$End_PDU_FieldDcl
$End_PDU_FieldDcls
$Comment /*  */
$End_TTCN_PDU_TypeDef
$End_TTCN_PDU_TypeDefs
$ASN1_PDU_TypeDefs
$Begin_ASN1_PDU_TypeDef
$PDU_Id Invalid_DL_CCCH_Message
$PCO_Type DSAP
$PDU_EncodingId PER_Unaligned
$ASN1_TypeDefinition
SEQUENCE {
  integrityCheckInfo IntegrityCheckInfo OPTIONAL,
  message Invalid_DL_CCCH_MsgType
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_PDU_TypeDef
$Begin_ASN1_PDU_TypeDef
$PDU_Id Invalid_DL_DCCH_Message
$PCO_Type DSAP
$PDU_EncodingId PER_Unaligned
$ASN1_TypeDefinition
SEQUENCE {
  integrityCheckInfo [0] IntegrityCheckInfo OPTIONAL,
  message [1] Invalid_DL_DCCH_MsgType
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_PDU_TypeDef
$Begin_ASN1_PDU_TypeDef
$PDU_Id Invalid_DL_SHCCH_Message
$PCO_Type DSAP
$PDU_EncodingId PER_Unaligned
$ASN1_TypeDefinition
SEQUENCE {
  message Invalid_DL_SHCCH_MsgType
}
$End_ASN1_TypeDefinition
$Comment /*  */
$End_ASN1_PDU_TypeDef
$End_ASN1_PDU_TypeDefs
$Begin_ASN1_PDU_TypeDefsByRef
$ASN1_PDU_TypeDefByRef
$PDU_Id BCCH_BCH_Message
$PCO_Type DSAP
$ASN1_TypeReference BCCH-BCH-Message
$ASN1_ModuleId Class-definitions
$PDU_EncodingId PER_Unaligned
$End_ASN1_PDU_TypeDefByRef
$ASN1_PDU_TypeDefByRef
$PDU_Id BCCH_FACH_Message
$PCO_Type DSAP
$ASN1_TypeReference BCCH-FACH-Message
$ASN1_ModuleId Class-definitions
$PDU_EncodingId PER_Unaligned
$End_ASN1_PDU_TypeDefByRef
$ASN1_PDU_TypeDefByRef
$PDU_Id DL_CCCH_Message
$PCO_Type DSAP
$ASN1_TypeReference DL-CCCH-Message
$ASN1_ModuleId Class-definitions
$PDU_EncodingId PER_Unaligned
$End_ASN1_PDU_TypeDefByRef
$ASN1_PDU_TypeDefByRef
$PDU_Id DL_DCCH_Message
$PCO_Type DSAP
$ASN1_TypeReference DL-DCCH-Message
$ASN1_ModuleId Class-definitions
$PDU_EncodingId PER_Unaligned
$End_ASN1_PDU_TypeDefByRef
$ASN1_PDU_TypeDefByRef
$PDU_Id DL_SHCCH_Message
$PCO_Type DSAP
$ASN1_TypeReference DL-SHCCH-Message
$ASN1_ModuleId Class-definitions
$PDU_EncodingId PER_Unaligned
$End_ASN1_PDU_TypeDefByRef
$ASN1_PDU_TypeDefByRef
$PDU_Id PCCH_Message
$PCO_Type DSAP
$ASN1_TypeReference PCCH-Message
$ASN1_ModuleId Class-definitions
$PDU_EncodingId PER_Unaligned
$End_ASN1_PDU_TypeDefByRef
$ASN1_PDU_TypeDefByRef
$PDU_Id UL_CCCH_Message
$PCO_Type DSAP
$ASN1_TypeReference UL-CCCH-Message
$ASN1_ModuleId Class-definitions
$PDU_EncodingId PER_Unaligned
$End_ASN1_PDU_TypeDefByRef
$ASN1_PDU_TypeDefByRef
$PDU_Id UL_DCCH_Message
$PCO_Type DSAP
$ASN1_TypeReference UL-DCCH-Message
$ASN1_ModuleId Class-definitions
$PDU_EncodingId PER_Unaligned
$End_ASN1_PDU_TypeDefByRef
$ASN1_PDU_TypeDefByRef
$PDU_Id UL_SHCCH_Message
$PCO_Type DSAP
$ASN1_TypeReference UL-SHCCH-Message
$ASN1_ModuleId Class-definitions
$PDU_EncodingId PER_Unaligned
$End_ASN1_PDU_TypeDefByRef
$Comment /*  */
$End_ASN1_PDU_TypeDefsByRef
$End_PDU_TypeDefs
$Begin_AliasDefs
$AliasDef
$AliasId TxMAC
$ExpandedId RLC_TR_TestDataReq
$Comment /* This alias is used to transmit a MAC PDU. Note that MAC PDUs are sent using the
RLC Tr PCO, on a logical channel mapped to a transport channel operating in a
special MAC mode that will not add any MAC header information. This means that
the entire MAC PDU can be specified within the TTCN. This is described in detail
in 34.123-3, clause (TBD?) (MAC test method). */
$End_AliasDef
$AliasDef
$AliasId RxMAC
$ExpandedId RLC_TR_TestDataInd
$Comment /* This alias is used to receive a MAC PDU.  Note that MAC PDUs are received using the RLC Tr PCO, on a logical channel mapped to a transport channel operating in a special MAC mode that will not remove any MAC header information. This means that the entire MAC PDU can be inspected by the TTCN. This is described in detail in 34.123-3, clause (TBD?) (MAC test method). */
$End_AliasDef
$AliasDef
$AliasId RxStatus
$ExpandedId RLC_TR_TestDataInd
$Comment /* This alias is used to receive an AM STATUS PDU. Note that AM PDUs are received  
using the Tr PCO, so that the RLC PDU can be specified within the TTCN. This 
is described in detail in 34.123-3, clause 6.5 (RLC test method). */
$End_AliasDef
$Comment /*  */
$End_AliasDefs
$End_DeclarationsPart
$ConstraintsPart
$TS_TypeConstraints
$StructTypeConstraints
$Begin_StructTypeConstraint
$ConsId cr_SUFI_Params(p_lb, p_ub: AM_SeqNum; p_wsnpres, p_mrwpres: BOOLEAN; p_nack_1, p_nack_2, p_nack_3: AM_SeqNum)
$StructId SUFI_Params
$DerivPath 
$Comment /* This constraint initializes the list of parameters to be used as input for TSO o_SUFI_Handler which treats a HEXSTRING containing received SUFIs.  
Refer to this TSO and the description of the test methodolgy. */
$ElemValues
$ElemValue
$ElemId LB
$ConsValue p_lb
$Comment /* 1 */
$End_ElemValue
$ElemValue
$ElemId UB
$ConsValue p_ub
$Comment /* 1 */
$End_ElemValue
$ElemValue
$ElemId WSN_presence
$ConsValue p_wsnpres
$Comment /* 1 */
$End_ElemValue
$ElemValue
$ElemId MRW_presence
$ConsValue p_mrwpres
$Comment /* 1 */
$End_ElemValue
$ElemValue
$ElemId Nack1
$ConsValue p_nack_1
$Comment /* 1 */
$End_ElemValue
$ElemValue
$ElemId Nack2
$ConsValue p_nack_2
$Comment /* 1 */
$End_ElemValue
$ElemValue
$ElemId Nack3
$ConsValue p_nack_3
$Comment /* 1 */
$End_ElemValue
$End_ElemValues
$Comment /* 1. ... */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_LenInd7AndE_Bit( p_LI7:INTEGER; p_ExtBit: ExtBit )
$StructId LenInd7AndE_Bit
$DerivPath 
$Comment /* This constraint is used to create a 7 bit length indicator followed by an 
extension bit.

Parameters: 
p_LI7: An integer containing the required length indicator.
   0 <= p_LI7 <= 127
   
p_ExtBit: Used to indicate whether the next octet contains a length inidicator
   and E bit, or data. p_ExtBit must be either tsc_LI_AndE_Bit or tsc_E_Data. */
$ElemValues
$ElemValue
$ElemId lenInd
$ConsValue INT_TO_BIT( p_LI7, 7 )
$End_ElemValue
$ElemValue
$ElemId extBit
$ConsValue p_ExtBit
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_LIs1_7BitLI( p_LI1: INTEGER )
$StructId LenInds
$DerivPath 
$Comment /* This constraint is used to send or receive a length indicator group within a 
PDU (AM or UM). This constraint is used when there is exactly one 7 bit LI in
the group.

Parameters:
p_LI1:
An integer representing the first 7 bit length indicator. This parameter is 
used within a call to INT_TO_BIT, so a value must be provided. */
$ElemValues
$ElemValue
$ElemId lenInd7_1
$ConsValue c_LenInd7AndE_Bit( p_LI1, tsc_E_Data )
$End_ElemValue
$ElemValue
$ElemId lenInd7_2
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lenInd7_3
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lenInd7_4
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lenInd7_5
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lenInd15_1
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lenInd15_2
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lenInd15_3
$ConsValue -
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_LIs2_7BitLIs( p_LI1, p_LI2: INTEGER )
$StructId LenInds
$DerivPath 
$Comment /* This constraint is used to send or receive a length indicator group within a 
PDU (AM or UM). This constraint is used when there are exactly two 7 bit LIs
in the group.

Parameters:
p_LI1:
An integer representing the first 7 bit length indicator. This parameter is 
used within a call to INT_TO_BIT, so a value must be provided.

p_LI2:
An integer representing the second 7 bit length indicator. This parameter is 
used within a call to INT_TO_BIT, so a value must be provided. */
$ElemValues
$ElemValue
$ElemId lenInd7_1
$ConsValue c_LenInd7AndE_Bit( p_LI1, tsc_E_LI_AndE_Bit )
$End_ElemValue
$ElemValue
$ElemId lenInd7_2
$ConsValue c_LenInd7AndE_Bit( p_LI2, tsc_E_Data )
$End_ElemValue
$ElemValue
$ElemId lenInd7_3
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lenInd7_4
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lenInd7_5
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lenInd15_1
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lenInd15_2
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lenInd15_3
$ConsValue -
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cs_Ack( p_LSN: INTEGER )
$StructId SUFI_Ack
$DerivPath 
$Comment /* An ACK SUFI to be used in SuperFields constraints.

Parameters:
p_LSN: An integer containing the last sequence number to be acknowledged.
   0 <= p_LSN <= 4095

Padding calculations:
4 half octets */
$ElemValues
$ElemValue
$ElemId type
$ConsValue tsc_SUFI_Ack
$Comment /* 4 bits */
$End_ElemValue
$ElemValue
$ElemId lsn
$ConsValue INT_TO_BIT( p_LSN, 12 )
$Comment /* 12 bits */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cs_SF_Ack( p_LSN:INTEGER )
$StructId SuperFields
$DerivPath 
$Comment /* This constraint is used to represent a SUFI list within a STATUS PDU that 
positively acknowledges all PUs with SN < p_LSN.

Parameters:
p_LSN:
An integer representing LSN (last sequence number), which acknowledges all PUs
with SN < LSN that are NOT indicated to be erroneous in earlier parts of the 
STATUS PDU. This parameter is used in a call to INT_TO_BIT, so a value must be
provided.

Padding calculation:
4 half octets */
$ElemValues
$ElemValue
$ElemId windowSize
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId list
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId rList
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId bitmap
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId mRW
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId mRW_Ack
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId noMore
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId ack
$ConsValue cs_Ack( p_LSN )
$Comment /* 4 half octets */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_AuthFailParamGmmAny
$StructId AuthenticationFailureParameter
$DerivPath 
$Comment /*  */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00110000'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue '0E'O
$End_ElemValue
$ElemValue
$ElemId auts
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_AC_RefNum3
$StructId AC_ReferenceNumber
$DerivPath 
$ElemValues
$ElemValue
$ElemId value
$ConsValue '0011'B
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_AttachTypeAny
$StructId AttachType
$DerivPath 
$ElemValues
$ElemValue
$ElemId for
$ConsValue ?
$Comment /* Follow-on request */
$End_ElemValue
$ElemValue
$ElemId type
$ConsValue ?
$Comment /* Type of attach */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_AuthCiphRspExtAny
$StructId AuthRspExt
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00101001'B
$Comment /* IEI is 0x29 
(see 24.008 / 9.4.10) */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId rES
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_AuthFailParamAny
$StructId AuthenticationFailureParameter
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00100010'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue '0E'O
$End_ElemValue
$ElemValue
$ElemId auts
$ConsValue ?
$Comment /*  */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_AuthRspAny_tv
$StructId AuthRsp_tv
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00100010'B
$Comment /* '00100010'B (22 hex) */
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue ?
$Comment /* Authentication Parameter RES */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_AuthRspExtAny
$StructId AuthRspExt
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00100001'B
$Comment /* '00100001'B */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId rES
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_AUTN(p_AUTN: BITSTRING)
$StructId AUTN
$DerivPath 
$Comment /* Authentication Parameter  AUTN 
3G TS 24.008 cl. 10.5.3.1.1 */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00100000'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue '10'O
$Comment /* Length of 16 octets */
$End_ElemValue
$ElemValue
$ElemId aUTN
$ConsValue p_AUTN
$Comment /* value of Authentication Parameter AUTN */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_CellIndInfoDef
$StructId CellIndependantInfo
$DerivPath 
$ElemValues
$ElemValue
$ElemId cs_cipheringStarted
$ConsValue FALSE
$End_ElemValue
$ElemValue
$ElemId ps_cipheringStarted
$ConsValue FALSE
$End_ElemValue
$ElemValue
$ElemId recentSecureDomain
$ConsValue cs_domain
$Comment /* the domain on which security was recently started, and hence the SRB are ciphered and Integrit protected with this domain. */
$End_ElemValue
$ElemValue
$ElemId dL_CipherMode
$ConsValue cs_Null_CipheringModeCommand
$End_ElemValue
$ElemValue
$ElemId uL_CipherMode
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId cipheringAlgorithmCapability
$ConsValue '0000000000000011'B
$End_ElemValue
$ElemValue
$ElemId integrityStarted
$ConsValue FALSE
$End_ElemValue
$ElemValue
$ElemId dL_Integrity
$ConsValue cs_IntegrityProtectStart ( px_FRESH )
$End_ElemValue
$ElemValue
$ElemId uL_Integrity
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId dl_IntegrityCheckInfo
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId start_CS
$ConsValue '00000000000000000000'B
$Comment /* Default new key */
$End_ElemValue
$ElemValue
$ElemId start_PS
$ConsValue '00000000000000000000'B
$Comment /* Default new key */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_CellInfoDef (p_CellId : INTEGER; p_priScrmCode : PrimaryScramblingCode;  
p_URA_Id : BITSTRING; p_tCell : Tcell;  p_sfnOffset : INTEGER; p_FreqInfo : FrequencyInfo; p_UL_ScramblingCode : UL_ScramblingCode )
$StructId CellInfoCfg
$DerivPath 
$ElemValues
$ElemValue
$ElemId cellId
$ConsValue p_CellId
$End_ElemValue
$ElemValue
$ElemId frequencyInfo
$ConsValue p_FreqInfo
$End_ElemValue
$ElemValue
$ElemId attenuationLevel
$ConsValue tsc_AttenuationServingCell
$End_ElemValue
$ElemValue
$ElemId priScrmCode
$ConsValue p_priScrmCode
$End_ElemValue
$ElemValue
$ElemId powerpCPICH
$ConsValue tsc_PowerpCPICH
$End_ElemValue
$ElemValue
$ElemId powerpSCH
$ConsValue tsc_PowerpSCH
$End_ElemValue
$ElemValue
$ElemId powersSCH
$ConsValue tsc_PowersSCH
$End_ElemValue
$ElemValue
$ElemId powerpCCPCH
$ConsValue tsc_PowerpCCPCH
$End_ElemValue
$ElemValue
$ElemId powersCCPCH
$ConsValue tsc_PowersCCPCH1
$End_ElemValue
$ElemValue
$ElemId powersCCPCH1
$ConsValue tsc_PowersCCPCH1
$End_ElemValue
$ElemValue
$ElemId timingsCCPCH1
$ConsValue tsc_TimingsCCPCH1
$End_ElemValue
$ElemValue
$ElemId powerAICH
$ConsValue tsc_PowerAICH
$End_ElemValue
$ElemValue
$ElemId powerPICH
$ConsValue tsc_PowerPICH
$End_ElemValue
$ElemValue
$ElemId cellTxPowerLevel
$ConsValue defaultCellTxPowerLvl : NULL
$End_ElemValue
$ElemValue
$ElemId tCell
$ConsValue p_tCell
$End_ElemValue
$ElemValue
$ElemId sfnOffset
$ConsValue p_sfnOffset
$End_ElemValue
$ElemValue
$ElemId puncLimit
$ConsValue tsc_PuncLimit
$End_ElemValue
$ElemValue
$ElemId sf_PRACH
$ConsValue tsc_PRACH1_SF
$End_ElemValue
$ElemValue
$ElemId slotFormatsCCPCH1
$ConsValue tsc_SlotFormatsCCPCH1
$End_ElemValue
$ElemValue
$ElemId mcc
$ConsValue tsc_MCC_Def
$End_ElemValue
$ElemValue
$ElemId mnc
$ConsValue tsc_MNC_Def
$End_ElemValue
$ElemValue
$ElemId lac
$ConsValue tsc_LAC_Def
$End_ElemValue
$ElemValue
$ElemId rac
$ConsValue tsc_RAC_Def
$End_ElemValue
$ElemValue
$ElemId attFlag
$ConsValue tsc_AttOn
$End_ElemValue
$ElemValue
$ElemId nmo
$ConsValue tsc_NMO_I
$End_ElemValue
$ElemValue
$ElemId ura_Identity
$ConsValue p_URA_Id
$End_ElemValue
$ElemValue
$ElemId t3212
$ConsValue tsc_T3212_Def
$End_ElemValue
$ElemValue
$ElemId cRNTI
$ConsValue tsc_CRNTI
$End_ElemValue
$ElemValue
$ElemId uRNTI
$ConsValue c_U_RNTI_Def
$End_ElemValue
$ElemValue
$ElemId cellConfig
$ConsValue cell_NotConfigured
$End_ElemValue
$ElemValue
$ElemId dRX_CycleLength
$ConsValue c_DRX_CycleLengthStrucDef
$End_ElemValue
$ElemValue
$ElemId uL_ScramblingCode
$ConsValue p_UL_ScramblingCode
$End_ElemValue
$ElemValue
$ElemId DL_DPCH_SHO
$ConsValue FALSE
$End_ElemValue
$ElemValue
$ElemId UL_DPCH_SHO
$ConsValue FALSE
$End_ElemValue
$ElemValue
$ElemId dl_DPCH_2ndScrCode
$ConsValue tsc_DL_DPCH1_2ndScrC
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_CiphAlgorithm (p_alg : B3 )
$StructId CiphAlgorithm
$DerivPath 
$ElemValues
$ElemValue
$ElemId spare1
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId algorithm
$ConsValue p_alg
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_CiphKeySeqNum(p_KeySeq: KeySeq)
$StructId CiphKeySeqNum
$DerivPath 
$ElemValues
$ElemValue
$ElemId spare1
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId keySeq
$ConsValue p_KeySeq
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_DetachTypeReAttNotRequiredGPRS
$StructId DetachType
$DerivPath 
$Comment /* 'normal detach, re-attach not required' */
$ElemValues
$ElemValue
$ElemId powOff
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId type
$ConsValue '001'B
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_DRX_CycleLengthStrucDef
$StructId DRX_CycleLengthStructure
$DerivPath 
$ElemValues
$ElemValue
$ElemId cN_CS_DRX_CycleLength
$ConsValue 7
$End_ElemValue
$ElemValue
$ElemId cN_PS_DRX_CycleLength
$ConsValue 7
$End_ElemValue
$ElemValue
$ElemId uTRAN_DRX_CycleLength
$ConsValue 9
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_DRX_ParamterAny
$StructId DRXparamter
$DerivPath 
$ElemValues
$ElemValue
$ElemId splitPGcycleCode
$ConsValue ?
$Comment /* Split PG cycle code */
$End_ElemValue
$ElemValue
$ElemId cnDRXcoef
$ConsValue ?
$Comment /* CN specific DRX cycle length coefficient */
$End_ElemValue
$ElemValue
$ElemId splitOnCCCH
$ConsValue ?
$Comment /* Split on CCCCH */
$End_ElemValue
$ElemValue
$ElemId nonDRXtimer
$ConsValue ?
$Comment /* non-DRX timer */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_ForceToStandby( p_val : B3 )
$StructId ForceToStandby
$DerivPath 
$ElemValues
$ElemValue
$ElemId spare
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue p_val
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_GMM_AttachResult( p_result : B3 )
$StructId AttachResult
$DerivPath 
$ElemValues
$ElemValue
$ElemId spare
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId result
$ConsValue p_result
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_GMM_AuthAUTN (p_autn : B128)
$StructId GMM_AUTN
$DerivPath 
$Comment /*  */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00101000'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue '10'O
$End_ElemValue
$ElemValue
$ElemId aUTN
$ConsValue p_autn
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_GMM_AuthRAND (p_rand : BITSTRING)
$StructId AuthenticationParamterRAND
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00100001'B
$End_ElemValue
$ElemValue
$ElemId randValue
$ConsValue p_rand
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_GMM_KeySeq_tv (p_key : KeySeq )
$StructId CiphKeySeqNum_tv
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '1000'B
$End_ElemValue
$ElemValue
$ElemId spare1
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId keySeq
$ConsValue p_key
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_GMM_MobileIdTMSI (p_tmsi : OCTETSTRING)
$StructId GMM_MS_Identity
$DerivPath 
$Comment /* Default  TMSI */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00100011'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue '05'O
$Comment /* TMSI consists of 4 octets */
$End_ElemValue
$ElemValue
$ElemId iDigit1
$ConsValue '1111'B
$Comment /* special coding for TMSI */
$End_ElemValue
$ElemValue
$ElemId oddEvenInd
$ConsValue '0'B
$Comment /* even */
$End_ElemValue
$ElemValue
$ElemId typeOfId
$ConsValue '100'B
$Comment /* TMSI */
$End_ElemValue
$ElemValue
$ElemId otherDigits
$ConsValue p_tmsi
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_GMM_UpdateType_v( p_for : B1; p_type : B3 )
$StructId UpdateType_v
$DerivPath 
$ElemValues
$ElemValue
$ElemId for
$ConsValue p_for
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue p_type
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_GPRS_Timer_v( p_unit : B3; p_value : B5 )
$StructId GPRS_Timer_v
$DerivPath 
$ElemValues
$ElemValue
$ElemId unit
$ConsValue p_unit
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue p_value
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_GPRS_TimerAny
$StructId GPRS_Timer
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00010111'B
$Comment /* 00010111'B (17 hex) */
$End_ElemValue
$ElemValue
$ElemId unit
$ConsValue ?
$Comment /* Unit */
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue ?
$Comment /* Timer  value */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_LB_SetupRB_IE( p_LB_Size, p_RB_Identity: INTEGER )
$StructId LB_SetupRB_IE
$DerivPath 
$Comment /* This constraint is used as an LB entry in an LB setup list. 
 
Parameters: 
p_LB_Size: The uplink RLC SDU size in bits. This value will be represented as a 
14 bit value in the LB Setup IE, so the valid range is from 0..16383. 
 
p_RB_Identity: The RB Id of the radio bearer that loopback is to be setup for. 
Valid range is 5..31, since RB 0-4 are used for signalling radio bearers. */
$ElemValues
$ElemValue
$ElemId rLC_SDU_Size
$ConsValue INT_TO_BIT( p_LB_Size, 16 )
$End_ElemValue
$ElemValue
$ElemId spare_2
$ConsValue '000'B
$End_ElemValue
$ElemValue
$ElemId rB_Identity
$ConsValue INT_TO_BIT( p_RB_Identity, 5 )
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_LocAreaId_v(p_MCC: HEXSTRING; p_MNC: HEXSTRING; p_LAC: OCTETSTRING)
$StructId LocAreaId_v
$DerivPath 
$ElemValues
$ElemValue
$ElemId plmn
$ConsValue o_ConvtPLMN(p_MCC,  p_MNC)
$End_ElemValue
$ElemValue
$ElemId lac
$ConsValue p_LAC
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_LocAreaIdAny_v
$StructId LocAreaId_v
$DerivPath 
$ElemValues
$ElemValue
$ElemId plmn
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId lac
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_LocUpdTypeAny
$StructId LocUpdType
$DerivPath 
$ElemValues
$ElemValue
$ElemId fOR
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare1
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId lUT
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_MobileIdAny_lv
$StructId MS_Identity_lv
$DerivPath 
$ElemValues
$ElemValue
$ElemId iel
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId iDigit1
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId oddEvenInd
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId typeOfId
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId otherDigits
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_MobileIdPTMSI (p_ptmsi : O0_8 )
$StructId GMM_MS_IdentityPTMSI
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00011000'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue '05'O
$Comment /* TMSI consists of 4 octets */
$End_ElemValue
$ElemValue
$ElemId iDigit1
$ConsValue '1111'B
$Comment /* special coding for TMSI */
$End_ElemValue
$ElemValue
$ElemId oddEvenInd
$ConsValue '0'B
$Comment /* even */
$End_ElemValue
$ElemValue
$ElemId typeOfId
$ConsValue '100'B
$Comment /* TMSI / P-TMSI */
$End_ElemValue
$ElemValue
$ElemId otherDigits
$ConsValue p_ptmsi
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_MobileIdPTMSI_Any
$StructId GMM_MS_IdentityPTMSI
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00011000'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue '05'O
$Comment /* TMSI consists of 4 octets */
$End_ElemValue
$ElemValue
$ElemId iDigit1
$ConsValue '1111'B
$Comment /* special coding for TMSI */
$End_ElemValue
$ElemValue
$ElemId oddEvenInd
$ConsValue '0'B
$Comment /* even */
$End_ElemValue
$ElemValue
$ElemId typeOfId
$ConsValue '100'B
$Comment /* TMSI / P-TMSI */
$End_ElemValue
$ElemValue
$ElemId otherDigits
$ConsValue ?
$Comment /* Any value */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_MobileIdPTMSI_lv (p_ptmsi : O0_8)
$StructId MS_Identity_lv
$DerivPath 
$ElemValues
$ElemValue
$ElemId iel
$ConsValue '05'O
$Comment /* TMSI consists of 4 octets */
$End_ElemValue
$ElemValue
$ElemId iDigit1
$ConsValue '1111'B
$Comment /* special coding for TMSI */
$End_ElemValue
$ElemValue
$ElemId oddEvenInd
$ConsValue '0'B
$Comment /* even */
$End_ElemValue
$ElemValue
$ElemId typeOfId
$ConsValue '100'B
$Comment /* TMSI / P-TMSI */
$End_ElemValue
$ElemValue
$ElemId otherDigits
$ConsValue p_ptmsi
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_MobileIdTMSI_Def
$StructId MM_MS_Identity
$DerivPath 
$Comment /* Default  TMSI */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00010111'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue '05'O
$Comment /* TMSI consists of 4 octets */
$End_ElemValue
$ElemValue
$ElemId iDigit1
$ConsValue '1111'B
$Comment /* special coding for TMSI */
$End_ElemValue
$ElemValue
$ElemId oddEvenInd
$ConsValue '0'B
$Comment /* even */
$End_ElemValue
$ElemValue
$ElemId typeOfId
$ConsValue '100'B
$Comment /* TMSI */
$End_ElemValue
$ElemValue
$ElemId otherDigits
$ConsValue px_TMSI_Def
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_MobileIdTMSI_lv
$StructId MS_Identity_lv
$DerivPath 
$Comment /* Default  TMSI */
$ElemValues
$ElemValue
$ElemId iel
$ConsValue '05'O
$Comment /* TMSI consists of 4 octets */
$End_ElemValue
$ElemValue
$ElemId iDigit1
$ConsValue '1111'B
$Comment /* special coding for TMSI */
$End_ElemValue
$ElemValue
$ElemId oddEvenInd
$ConsValue '0'B
$Comment /* even */
$End_ElemValue
$ElemValue
$ElemId typeOfId
$ConsValue '100'B
$Comment /* TMSI */
$End_ElemValue
$ElemValue
$ElemId otherDigits
$ConsValue px_TMSI_Def
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_MS_Clsmk1_Any
$StructId MS_Clsmk1
$DerivPath 
$ElemValues
$ElemValue
$ElemId spare1
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId revLvl
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId eSIND
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId a5_1
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId rFPwrCap
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_MS_Clsmk2_Any
$StructId MS_Clsmk2
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00110011'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue '03'O
$End_ElemValue
$ElemValue
$ElemId spare1_1
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId revLvl
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId eSIND
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId a5_1
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId rFPwrCap
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare1_2
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId pSCap
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId sSSI
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId sMCap
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId vBS
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId vGCS
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId fC
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId cM3
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare1_3
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId lCSVA
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId uCS2
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId soLSA
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId cMSP
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId a5_3
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId a5_2
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_MS_Clsmk2_Any_lv
$StructId MS_Clsmk2_lv
$DerivPath 
$ElemValues
$ElemValue
$ElemId iel
$ConsValue '03'O
$End_ElemValue
$ElemValue
$ElemId spare1_1
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId revLvl
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId eSIND
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId a5_1
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId rFPwrCap
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare1_2
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId pSCap
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId sSSI
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId sMCap
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId vBS
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId vGCS
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId fC
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId cM3
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare1_3
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId lCSVA
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId uCS2
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId soLSA
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId cMSP
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId a5_3
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId a5_2
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_MS_RadioAccessCapAny_lv
$StructId MSRadioAccessCap_lv
$DerivPath 
$ElemValues
$ElemValue
$ElemId iel
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue ?
$Comment /* MS radio access capability value (CSN.1 coding) */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_PLMN_List1 (p_Plmn1 : OCTETSTRING )
$StructId PLMN_List
$DerivPath 
$Comment /* equivalent PLMN list containing 1 PLMN (OCTETSTRING[3]) */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '01001010'B
$Comment /* '01001010'B */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue '03'O
$End_ElemValue
$ElemValue
$ElemId plmn1
$ConsValue p_Plmn1
$Comment /* PLMN 1 */
$End_ElemValue
$ElemValue
$ElemId plmn2
$ConsValue -
$Comment /* PLMN 2 */
$End_ElemValue
$ElemValue
$ElemId plmn3
$ConsValue -
$Comment /* PLMN 3 */
$End_ElemValue
$ElemValue
$ElemId plmn4
$ConsValue -
$Comment /* PLMN 4 */
$End_ElemValue
$ElemValue
$ElemId plmn5
$ConsValue -
$Comment /* PLMN 5 */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_PTMSI_Signature (p_ptmsi : OCTETSTRING)
$StructId PTMSI_Signature
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00011001'B
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue p_ptmsi
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_PTMSI_Signature_tlv (p_ptmsi : OCTETSTRING)
$StructId PTMSI_Signature_tlv
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00011001'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue '03'O
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue p_ptmsi
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_PTMSI_SignatureAny
$StructId PTMSI_Signature
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00011001'B
$Comment /* '00011001'B (19 hex) */
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue ?
$Comment /* P-TMSI signature value */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_RadioPriority(p_val : B3)
$StructId RadioPriority_v
$DerivPath 
$ElemValues
$ElemValue
$ElemId spare
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue p_val
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_RadioPriority2(p_val : B3)
$StructId RadioPriority2_v
$DerivPath 
$Comment /*  */
$ElemValues
$ElemValue
$ElemId spare
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue p_val
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_RAI_Any_v
$StructId RAI_v
$DerivPath 
$ElemValues
$ElemValue
$ElemId plmn
$ConsValue ?
$Comment /* MCC  + MNC 3 digits each */
$End_ElemValue
$ElemValue
$ElemId lac
$ConsValue ?
$Comment /* LAC */
$End_ElemValue
$ElemValue
$ElemId rac
$ConsValue ?
$Comment /* RAC */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_RAI_v (p_mcc : HEXSTRING; p_mnc : HEXSTRING; p_lac : OCTETSTRING; p_rac : OCTETSTRING )
$StructId RAI_v
$DerivPath 
$ElemValues
$ElemValue
$ElemId plmn
$ConsValue o_ConvtPLMN(p_mcc,  p_mnc)
$End_ElemValue
$ElemValue
$ElemId lac
$ConsValue p_lac
$End_ElemValue
$ElemValue
$ElemId rac
$ConsValue p_rac
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_RepeatIndAny
$StructId RepeatInd
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '1101'B
$Comment /* 'D'H */
$End_ElemValue
$ElemValue
$ElemId repeatInd
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_ServiceType_v(p_type : B3)
$StructId ServiceType_v
$DerivPath 
$ElemValues
$ElemValue
$ElemId spare1
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId type
$ConsValue p_type
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_TMSI_StatusAny
$StructId TMSI_Status
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '1001'B
$Comment /* '1001'B */
$End_ElemValue
$ElemValue
$ElemId spare3
$ConsValue '000'B
$End_ElemValue
$ElemValue
$ElemId flag
$ConsValue ?
$Comment /* Flag */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId c_UE_TestLoopMode1_LB_Setup( p_LB_Size, p_RB_Identity: INTEGER )
$StructId UE_TestLoopMode1LB_Setup
$DerivPath 
$Comment /* This constraint is used as a complete UE test loop mode 1 setup IE, with a  
single LB entity in the LB setup list. 
 
Parameters: 
p_LB_Size: The uplink RLC SDU size in bits. This value will be represented as a 
14 bit value in the LB Setup IE, so the valid range is from 0..16383. 
 
p_RB_Identity: The RB Id of the radio bearer that loopback is to be setup for. 
Valid range is 5..31, since RB 0-4 are used for signalling radio bearers. */
$ElemValues
$ElemValue
$ElemId iel
$ConsValue '03'O
$End_ElemValue
$ElemValue
$ElemId lB_SetupRB_IE1
$ConsValue c_LB_SetupRB_IE( p_LB_Size, p_RB_Identity )
$End_ElemValue
$ElemValue
$ElemId lB_SetupRB_IE2
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lB_SetupRB_IE3
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lB_SetupRB_IE4
$ConsValue -
$End_ElemValue
$ElemValue
$ElemId lB_SetupRB_IE5
$ConsValue -
$Comment /*  */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cb_IMEISV_Request( p_value: B3 )
$StructId IMEISVRequest
$DerivPath 
$ElemValues
$ElemValue
$ElemId spare1
$ConsValue '0'B
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue p_value
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_AccessPtNameAny
$StructId AccessPtName
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00101000'B
$End_ElemValue
$ElemValue
$ElemId length
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId accessPtName
$ConsValue ?
$Comment /*  */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_Bcap3aEtcAny
$StructId Bcap3aEtc
$DerivPath 
$Comment /*  */
$ElemValues
$ElemValue
$ElemId extBit
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId coding
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare2
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId speechVersion
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_BcapAnyMO
$StructId Bcap
$DerivPath 
$Comment /* Any bearer capability for direction n <- ue */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00000100'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId extBit3
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId radioChRequi
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId codingStd
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId transferMode
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId itc
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId bcap3aEtc1
$ConsValue cr_Bcap3aEtcAny IF_PRESENT
$End_ElemValue
$ElemValue
$ElemId bcap3aEtc2
$ConsValue cr_Bcap3aEtcAny IF_PRESENT
$End_ElemValue
$ElemValue
$ElemId bcap3aEtc3
$ConsValue cr_Bcap3aEtcAny IF_PRESENT
$End_ElemValue
$ElemValue
$ElemId bcap3aEtc4
$ConsValue cr_Bcap3aEtcAny IF_PRESENT
$End_ElemValue
$ElemValue
$ElemId bcap3aEtc5
$ConsValue cr_Bcap3aEtcAny IF_PRESENT
$End_ElemValue
$ElemValue
$ElemId bcap3aEtc6
$ConsValue cr_Bcap3aEtcAny IF_PRESENT
$End_ElemValue
$ElemValue
$ElemId extBit4
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId compress
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId structure
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId duplexMode
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId cfg
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId nirr
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId establish
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit5
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId accessId
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId rateAdapt
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId sacp
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit5a
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId OherItc
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId OtherRateAdapt
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId spare3
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit5b
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId rateAdaptHeader
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId multiFrame
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId mode
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId logLinkId
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId assignorAssignee
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId inBandOutBand
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId spare1
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit6
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId layer1Id
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId userInfoLayer1
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId syncAsync
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit6a
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId numStopBits
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId nego
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId numDataBits
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId userRate
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit6b
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId intermRate
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId nicTx
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId nicRx
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId parity
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit6c
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId connectElem
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId modemType
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit6d
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId OtherModemType
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId FixedNtwUserRate
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit6e
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId acceptChCoding
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId maxNumTrafficCh
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit6f
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId uIMI
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId wAIUR
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit6g
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId acceptChCodingExt
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId asymInd
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId spare2
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit7
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId layer2id
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId userInfoLayer2
$ConsValue *
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_CC_CapabilitiesAny
$StructId CC_Capabilities
$DerivPath 
$Comment /*  */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00010101'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId maxNumBearer
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare2
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId pcp
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId dtmf
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare4
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId maxNumSpeechBearer
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_CDPN_Any
$StructId CDPN
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '01011110'B
$Comment /* information element identifier */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$Comment /* length */
$End_ElemValue
$ElemValue
$ElemId typeOfNumPlan
$ConsValue cr_TypeOfNumPlanAny
$Comment /* type of number and numbering plan identification */
$End_ElemValue
$ElemValue
$ElemId digits
$ConsValue *
$Comment /* BCD numbers */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_CDPS_Any
$StructId CDPS
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '01101101'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId subadrs
$ConsValue cr_SubadrsAny
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_CGPS_Any
$StructId CGPS
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '01011101'B
$Comment /* information element identifier */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$Comment /* length */
$End_ElemValue
$ElemValue
$ElemId subadrs
$ConsValue cr_SubadrsAny
$Comment /* Subaddress */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_CodecAny
$StructId Codec
$DerivPath 
$Comment /* Codec
3G TS 24.008 cl. 10.5.4.32
 */
$ElemValues
$ElemValue
$ElemId sysId
$ConsValue ?
$Comment /* system identifcation */
$End_ElemValue
$ElemValue
$ElemId len
$ConsValue ?
$Comment /* length */
$End_ElemValue
$ElemValue
$ElemId bitMap1to8
$ConsValue ?
$Comment /* codec bitmap bits 1-8 */
$End_ElemValue
$ElemValue
$ElemId bitMap9to16
$ConsValue *
$Comment /* codec bitmap bits 9-16 */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_CodecListAny
$StructId CodecList
$DerivPath 
$Comment /* Supported Codec List 
3G TS 24.008 cl. 10.5.3.32
 */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '01000000'B
$Comment /* '01000000'B (40 hex) */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$Comment /* length */
$End_ElemValue
$ElemValue
$ElemId codec1
$ConsValue cr_CodecAny IF_PRESENT
$Comment /* Codec */
$End_ElemValue
$ElemValue
$ElemId codec2
$ConsValue cr_CodecAny IF_PRESENT
$Comment /* Codec */
$End_ElemValue
$ElemValue
$ElemId codec3
$ConsValue cr_CodecAny IF_PRESENT
$Comment /* Codec */
$End_ElemValue
$ElemValue
$ElemId codec4
$ConsValue cr_CodecAny IF_PRESENT
$Comment /* Codec */
$End_ElemValue
$ElemValue
$ElemId codec5
$ConsValue cr_CodecAny IF_PRESENT
$Comment /* Codec */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_DRXparamter_tv_Any
$StructId DRXparamter_tv
$DerivPath 
$Comment /* to be used in ROUTINGAREAUPDATEREQUEST constraints */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00100111'B
$Comment /* '00100111'B (hex 27) */
$End_ElemValue
$ElemValue
$ElemId splitPGcycleCode
$ConsValue ?
$Comment /* Split PG cycle code */
$End_ElemValue
$ElemValue
$ElemId cnDRXcoef
$ConsValue ?
$Comment /* CN specific DRX cycle length coefficient */
$End_ElemValue
$ElemValue
$ElemId splitOnCCCH
$ConsValue ?
$Comment /* Split on CCCCH */
$End_ElemValue
$ElemValue
$ElemId nonDRXtimer
$ConsValue ?
$Comment /* non-DRX timer */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_Facility_Any
$StructId Facility
$DerivPath 
$Comment /* Facility information element 
3G TS 24.008 cl. 10.5.4.15 */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00011100'B
$Comment /* information element identifier 
'00011100'B */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$Comment /* length */
$End_ElemValue
$ElemValue
$ElemId comps
$ConsValue *
$Comment /* Component */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_FacilityAdvRecall
$StructId Facility
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00011101'B
$Comment /* information element identifier */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$Comment /* length */
$End_ElemValue
$ElemValue
$ElemId comps
$ConsValue *
$Comment /* Component */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_GPRS_TimerAny
$StructId GPRS_Timer
$DerivPath 
$Comment /* to be used in ROUTINGAREAUPDATEREQUEST constraints */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00010111'B
$Comment /* 00010111'B (17 hex) */
$End_ElemValue
$ElemValue
$ElemId unit
$ConsValue ?
$Comment /* Unit */
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue ?
$Comment /* Timer  value */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_HLC_Any
$StructId HLC
$DerivPath 
$Comment /* High layer compatibility */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '01111101'B
$Comment /* information element identifier */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId extBit3
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId codingStd
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId interpretation
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId presentModeProtocolProfile
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit4
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId hlcId
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit4a
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId exteHlcId
$ConsValue *
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_LLC_Any
$StructId LLC
$DerivPath 
$Comment /* Low layer compatibility (CC information element) */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '01111100'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$Comment /*  */
$End_ElemValue
$ElemValue
$ElemId extBit3
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId codingStd
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId itc
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit3a
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId negoInd
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId spare6
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit4
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId transferMode
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId infoTransferRate
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit4_1
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId rateMultiplier
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit5
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId layer1Id
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId userInfoLayer1
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit5a
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId syncAsync
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId nego
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId userRate
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit5b1
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId intermRate
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId nicTx
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId nicRx
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId flowCtrlTx
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId flowCtrlRx
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId spare1
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit5b2
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId rateAdaptHeader
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId multiFrame
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId mode
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId logLinkId
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId assignorAssignee
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId inBandOutBand
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId spare1_5b2
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit5c
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId numStopBits
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId numDataBits
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId parity
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit5d
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId duplexMode
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId modemType
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit6
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId layer2id
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId userInfoLayer2
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit6a1
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId modeLayer2
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId spare3
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId q933
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit6a2
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId userSpecifLayer2
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit6b
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId windowSize
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit7
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId layer3id
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId userInfoLayer3
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit7a1
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId OptionUserSpecifLayer3
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit7a2
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId modeLayer3
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId spare5
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extb7b
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId spare3_7b
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId defaultPacketSize
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit7c
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId packetWindowSize
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit7a3
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId spare3_7a3
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId addLayer3ProtocolInfo
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId extBit7a4
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId spare3_7a4
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId addLayer3ProtocolInfoL
$ConsValue *
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_LLC_SAPI_v
$StructId LLC_SAPI_v
$DerivPath 
$Comment /* LLC SAPI value assigned as SAPI 3 in order to ensure that there are no problems at the time of handover from UMTS to GSM
 */
$ElemValues
$ElemValue
$ElemId spare
$ConsValue '0000'B
$End_ElemValue
$ElemValue
$ElemId lLC_SAPI_Value
$ConsValue ('0000'B, '0011'B, '0101'B, '1001'B, '1011'B)
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_MS_NetworkCap_tlv_Any
$StructId MS_NetworkCap_tlv
$DerivPath 
$Comment /*  */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00110001'B
$Comment /* '00110001'B (hex 31) */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue ?
$Comment /* MS network capability value (CSN.1 coding) */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_MS_NetworkCapAss_lv
$StructId MS_NetworkCap_lv
$DerivPath 
$ElemValues
$ElemValue
$ElemId iel
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId value
$ConsValue ?
$Comment /* MS network capability value (CSN.1 coding) */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_NSAPI_v
$StructId NSAPI_v
$DerivPath 
$Comment /* Received value of NSAPI */
$ElemValues
$ElemValue
$ElemId spare
$ConsValue '0000'B
$End_ElemValue
$ElemValue
$ElemId nSAPI_Value
$ConsValue ('0101'B, '0110'B, '0111'B, '1000'B, '1001'B, '1010'B, '1011'B, '1100'B, '1101'B, '1110'B, '1111'B)
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_PDP_ContextStatusAny
$StructId PDP_ContextStatus
$DerivPath 
$Comment /* to be used in ROUTINGAREAUPDATEREQUEST constraints */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00110010'B
$Comment /* '00110010'B */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$Comment /* Unit */
$End_ElemValue
$ElemValue
$ElemId nSAPI
$ConsValue ?
$Comment /* Timer  value */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_ProtoCfgOptAny
$StructId ProtoCfgOpt
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00100111'B
$Comment /* 27O  */
$End_ElemValue
$ElemValue
$ElemId length
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId ext
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId configprotocol
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId protocolIdContents
$ConsValue *
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_PS_LCS_CapabilityAny
$StructId PS_LCS_Capability
$DerivPath 
$Comment /* PS LCS Capability 
3GPP 24.008 / 10.5.5.22
 */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00110011'B
$Comment /* '00110011'B (33 hex) */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue '01'O
$End_ElemValue
$ElemValue
$ElemId spare
$ConsValue '000'B
$End_ElemValue
$ElemValue
$ElemId oTD_A
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId oTD_B
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId gPS_A
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId gPS_B
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId gPS_C
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_QualityOfService_lv_Any
$StructId QualityOfService_lv
$DerivPath 
$Comment /*  */
$ElemValues
$ElemValue
$ElemId length
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId dlyClass
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId relabilityClass
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId peakThroughput
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare1
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId precedenceClass
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare2
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId meanThroughput
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId trafficClass
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId deliveryOrder
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId deliveryErrorSDU
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId maxSDUSize
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId maxBitRateUplink
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId maxBitRateDnlink
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId residualBER
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId sduErrRatio
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId transDly
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId trafficHandpro
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId bitRateUplink
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId bitRateDnlink
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare3
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId signallingInd
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId srcStatsDescr
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId maxBitRateDnlinkExt
$ConsValue *
$End_ElemValue
$ElemValue
$ElemId bitRateDnlinkExt
$ConsValue *
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_SS_VersionIndAny
$StructId SS_VersionInd
$DerivPath 
$Comment /* SS version indicator IE with AnyOrOmit values */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '01111111'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId sS_VersionInfo
$ConsValue *
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_StaticPDP_AddressAny
$StructId PktDataProtoAddr_lv
$DerivPath 
$ElemValues
$ElemValue
$ElemId length
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId spare
$ConsValue '0000'B
$End_ElemValue
$ElemValue
$ElemId pDP_TypeOrg
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId pDP_TypeNo
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId addrInfo
$ConsValue *
$Comment /*  */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_StreamIdAny
$StructId StreamId
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '00101101'B
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$End_ElemValue
$ElemValue
$ElemId val
$ConsValue ?
$Comment /*  */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_SubadrsAny
$StructId Subadrs
$DerivPath 
$ElemValues
$ElemValue
$ElemId extBit
$ConsValue ?
$Comment /* extension bit */
$End_ElemValue
$ElemValue
$ElemId typrOfSubadrs
$ConsValue ?
$Comment /* Type of subaddress */
$End_ElemValue
$ElemValue
$ElemId oddEven
$ConsValue ?
$Comment /* odd/even indicator */
$End_ElemValue
$ElemValue
$ElemId spare3
$ConsValue ?
$Comment /* 3 spare bits */
$End_ElemValue
$ElemValue
$ElemId subadrsInfo
$ConsValue *
$Comment /* subaddress information */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_TearDwnInd_tv
$StructId TearDwnInd_tv
$DerivPath 
$Comment /* Tear down indicator used for the direction         
ue -> n */
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '1001'B
$End_ElemValue
$ElemValue
$ElemId spare
$ConsValue '000'B
$End_ElemValue
$ElemValue
$ElemId tdiflag
$ConsValue '?'B
$Comment /* TDI Flag = 0, Tear down of all PDP Context not requested.        
TDI Flag = 1, Tear down of all PDP Context requested. */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_TI_Any
$StructId TI
$DerivPath 
$Comment /* Transaction identifier - used for MO calls */
$ElemValues
$ElemValue
$ElemId tiFlag
$ConsValue ?
$Comment /* from network to MS */
$End_ElemValue
$ElemValue
$ElemId tiVal
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_TI_MO
$StructId TI
$DerivPath 
$Comment /* Transaction identifier - used for MO calls */
$ElemValues
$ElemValue
$ElemId tiFlag
$ConsValue '0'B
$Comment /* from network to MS */
$End_ElemValue
$ElemValue
$ElemId tiVal
$ConsValue ?
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_TypeOfNumPlanAny
$StructId TypeOfNumPlan
$DerivPath 
$ElemValues
$ElemValue
$ElemId extBit
$ConsValue ?
$Comment /* extension bit */
$End_ElemValue
$ElemValue
$ElemId typeOfNum
$ConsValue ?
$Comment /* Type of number */
$End_ElemValue
$ElemValue
$ElemId numbPlanId
$ConsValue ?
$Comment /* Numbering plan id. */
$End_ElemValue
$End_ElemValues
$Comment /*  */
$End_StructTypeConstraint
$Begin_StructTypeConstraint
$ConsId cr_UserUserAny
$StructId UserUser
$DerivPath 
$ElemValues
$ElemValue
$ElemId iei
$ConsValue '01111110'B
$Comment /* information element identifier */
$End_ElemValue
$ElemValue
$ElemId iel
$ConsValue ?
$Comment /* length */
$End_ElemValue
$ElemValue
$ElemId userUserProtocolDiscr
$ConsValue ?
$Comment /* user-user protocol discriminator */
$End_ElemValue
$ElemValue
$ElemId userUserInfo
$ConsValue *
$Comment /* user user information */
$End_ElemValue
$End_ElemValues
$Comment /* In SETUP, ALERTING, CONNECT, DISCONNECT, RELEASE and RELEASE COMPLETE messages the userUserInfo length is of 0 - 32 bytes. 
In USER INFORMATION messages the userUserInfo length is of 1 - 128. */
$End_StructTypeConstraint
$End_StructTypeConstraints
$ASN1_TypeConstraints
$Begin_ASN1_TypeConstraint
$ConsId c_PowerOffsetInfoBelow64k
$ASN1_TypeId PowerOffsetInformation
$DerivPath 
$ASN1_ConsValue
{
  gainFactorInformation signalledGainFactors:{
    modeSpecificInfo fdd:{
      gainFactorBetaC tsc_GainFactorBetaC_Below64k
    },
    gainFactorBetaD tsc_GainFactorBetaD,
    referenceTFC_ID 0
  },
  powerOffsetPp_m OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_PowerOffsetInfoComputed
$ASN1_TypeId PowerOffsetInformation
$DerivPath 
$ASN1_ConsValue
{
  gainFactorInformation computedGainFactors : 0,
  powerOffsetPp_m OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_PowerOffsetInfoHigher64k
$ASN1_TypeId PowerOffsetInformation
$DerivPath 
$ASN1_ConsValue
{
  gainFactorInformation signalledGainFactors:{
    modeSpecificInfo fdd:{
      gainFactorBetaC tsc_GainFactorBetaC_Higher64k
    },
    gainFactorBetaD tsc_GainFactorBetaD,
    referenceTFC_ID 0
  },
  powerOffsetPp_m OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cd_SIB1_Def_N300 ( p_CellInfo : CellInfoCfg )
$ASN1_TypeId SysInfoType1
$DerivPath cb_SIB1_Def.
$Comment /* This constraint sets N300 as 0 */
$ASN1_ConsValue
REPLACE ue_IdleTimersAndConstants.n_300 BY 0
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_PRACH_SysInfoList_4ASC
$ASN1_TypeId PRACH_SystemInformationList
$DerivPath 
$ASN1_ConsValue
{{
    prach_RACH_Info {
      modeSpecificInfo fdd : {
        availableSignatures tsc_PRACH1_Signatures,
        availableSF tsc_PRACH1_SF,
        preambleScramblingCodeWordNumber tsc_PRACH1_ScrC,
        puncturingLimit pl1,
        availableSubChannelNumbers '111111111111'B
      }
    },
    transportChannelIdentity tsc_RACH1,
    rach_TransportFormatSet commonTransChTFS : c_RACH_TFS_UE,
    rach_TFCS normalTFCI_Signalling : complete : {
      ctfcSize ctfc2Bit : {{
          ctfc2 0,
          powerOffsetInformation { gainFactorInformation computedGainFactors : 0,
            powerOffsetPp_m 0
          }
        },
        { ctfc2 1,
          powerOffsetInformation {
            gainFactorInformation signalledGainFactors : {
              modeSpecificInfo fdd : {
                gainFactorBetaC 11
              },
              gainFactorBetaD 15,
              referenceTFC_ID 0 },
            powerOffsetPp_m 0
          }
        }
    } },
    prach_Partitioning fdd : {{
        accessServiceClass_FDD {
          availableSignatureStartIndex 0,
          availableSignatureEndIndex 7,
          assignedSubChannelNumber '0100'B
        } },{
        accessServiceClass_FDD {
          availableSignatureStartIndex 0,
          availableSignatureEndIndex 7,
          assignedSubChannelNumber '0001'B
        } },{
        accessServiceClass_FDD {
          availableSignatureStartIndex 0,
          availableSignatureEndIndex 7,
          assignedSubChannelNumber '0010'B
        } },{
        accessServiceClass_FDD {
          availableSignatureStartIndex 0,
          availableSignatureEndIndex 7,
          assignedSubChannelNumber '0000'B
    } }},
    persistenceScalingFactorList { psf0_9, psf0_9},
    ac_To_ASC_MappingTable {0, 0, 0, 3, 2, 1, 0 }, 
    modeSpecificInfo fdd : {
      primaryCPICH_TX_Power 31,
      constantValue -10,
      prach_PowerOffset {
        powerRampStep 3, -- db
        preambleRetransMax 4
      },
      rach_TransmissionParameters {
        mmax 2,
        nb01Min 3,
        nb01Max 10
      },
      aich_Info {
        channelisationCode256 tsc_AICH1_ChC,
        sttd_Indicator FALSE,
        aich_TransmissionTiming e0
      }
    }
}}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_PRACH_SysInfoList_1ASC
$ASN1_TypeId PRACH_SystemInformationList
$DerivPath 
$ASN1_ConsValue
{{
    prach_RACH_Info {
      modeSpecificInfo fdd : {
        availableSignatures tsc_PRACH1_Signatures,
        availableSF tsc_PRACH1_SF,
        preambleScramblingCodeWordNumber tsc_PRACH1_ScrC,
        puncturingLimit pl1,
        availableSubChannelNumbers '111111111111'B
      }
    },
    transportChannelIdentity tsc_RACH1,
    rach_TransportFormatSet commonTransChTFS : c_RACH_TFS_UE,
    rach_TFCS normalTFCI_Signalling : complete : {
      ctfcSize ctfc2Bit : {{
          ctfc2 0,
          powerOffsetInformation { gainFactorInformation computedGainFactors : 0,
            powerOffsetPp_m 0
          }
        },
        { ctfc2 1,
          powerOffsetInformation {
            gainFactorInformation signalledGainFactors : {
              modeSpecificInfo fdd : {
                gainFactorBetaC 11
              },
              gainFactorBetaD 15,
              referenceTFC_ID 0 },
            powerOffsetPp_m 0
          }
        }
    } },
    prach_Partitioning fdd : {{
        accessServiceClass_FDD {
          availableSignatureStartIndex 0,
          availableSignatureEndIndex 7,
          assignedSubChannelNumber '0010'B
    } }},
    persistenceScalingFactorList OMIT,
    ac_To_ASC_MappingTable { 0, 0, 0, 0, 0, 0, 0 }, 
    modeSpecificInfo fdd : {
      primaryCPICH_TX_Power 31,
      constantValue -10,
      prach_PowerOffset {
        powerRampStep 3, -- db
        preambleRetransMax 4
      },
      rach_TransmissionParameters {
        mmax 2,
        nb01Min 3,
        nb01Max 10
      },
      aich_Info {
        channelisationCode256 tsc_AICH1_ChC,
        sttd_Indicator FALSE,
        aich_TransmissionTiming e0
      }
    }
}}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cd_UL_AM_RLC_T_PollOmit
$ASN1_TypeId UL_AM_RLC_Mode
$DerivPath cb_UL_AM_RLC.
$ASN1_ConsValue
REPLACE pollingInfo.timerPoll BY OMIT
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_PRACH_MsgMeasRep
$ASN1_TypeId PRACH_MeasurementReport
$DerivPath 
$ASN1_ConsValue
{
  usedPRACH_AcessSlot ?,
  usedPRACH_Signature OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_PRACH_PreamMeasRep
$ASN1_TypeId PRACH_MeasurementReport
$DerivPath 
$ASN1_ConsValue
{
  usedPRACH_AcessSlot ?,
  usedPRACH_Signature ?
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cbs_DefaultRLC_InfoUM
$ASN1_TypeId RLC_Info
$DerivPath 
$Comment /* This constraint is used within the radio bearer setup procedure as the default         
configuration for the UE UM RLC entity.         
         
This constraint is intended to be used as a base constraint, and modified          
constraints can be used to alter specific fields as required by any test          
purposes that do not use the default configuration. */
$ASN1_ConsValue
{
  ul_RLC_Mode ul_UM_RLC_Mode: {
    transmissionRLC_Discard OMIT
  },
  dl_RLC_Mode dl_UM_RLC_Mode: NULL
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId C_TFC_RestrictUE_0_1_2
$ASN1_TypeId TFC_Subset
$DerivPath 
$ASN1_ConsValue
allowedTFC_List : { 0 , 1,2}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrLogMapping_Rach1TransRB3
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$Comment /* This constraint is identical to c_TrLogMapping_PchRach1, except that the 
macHeaderManipulation field for RB3 is set to 'OmitMacHeader' for RB3. This 
allows the MAC header information to be inspected by the TTCN for received 
PDUs. */
$ASN1_ConsValue
{
  ulconnectedTrCHList
  {
    {
      trchid tsc_RACH1,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader ,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_CCCH5,
            logicalChannelType cCCH
          },
          rB_Identity tsc_RB0
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader ,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_DCCH1,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB1
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader ,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_DCCH2,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB2
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation omitMacHeader ,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_DCCH3,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB_DCCH_FACH_MAC
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader ,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_DCCH4,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB4
        }, 
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader ,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_DTCH1,
            logicalChannelType dTCH
          },
          rB_Identity tsc_RB20
        }
      }
    }
  },
  dlconnectedTrCHList OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrLogMapping_PchFach1TransRB3
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$Comment /* This constraint is identical to c_TrLogMapping_PchFach1, except that the 
macHeaderManipulation field for RB3 is set to 'OmitMacHeader' for RB3. This 
allows the MAC header information to be specified by the TTCN for transmitted 
PDUs.

For FDD mode only. map PCCH to PCH and DCCH1, DCCH2, DCCH3, DCCH4, CCCH and 
BCCH(for BCCH_FACH) */
$ASN1_ConsValue
{
  ulconnectedTrCHList OMIT,
  dlconnectedTrCHList {
    {
      trchid tsc_PCH1,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType pch,
            logicalChannelIdentity tsc_PCCH1,
            logicalChannelType pCCH,
            rlc_SizeList configured: NULL,
            mac_LogicalChannelPriority 1
          },
          rB_Identity tsc_RB_PCCH
        }
      }
    },
    {
      trchid tsc_FACH1,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_BCCH6,
            logicalChannelType bCCH,
            rlc_SizeList configured: NULL,
            mac_LogicalChannelPriority 6
          },
          rB_Identity tsc_RB_BCCH_FACH },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_CCCH5,
            logicalChannelType cCCH,
            rlc_SizeList configured: NULL,
            mac_LogicalChannelPriority 1
          },
          rB_Identity tsc_RB0
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_DCCH1,
            logicalChannelType dCCH,
            rlc_SizeList configured: NULL,
            mac_LogicalChannelPriority 2
          },
          rB_Identity tsc_RB1
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_DCCH2,
            logicalChannelType dCCH,
            rlc_SizeList configured: NULL,
            mac_LogicalChannelPriority 3
          },
          rB_Identity tsc_RB2
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation omitMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_DCCH3,
            logicalChannelType dCCH,
            rlc_SizeList configured: NULL,
            mac_LogicalChannelPriority 4
          },
          rB_Identity tsc_RB_DCCH_FACH_MAC
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_DCCH4,
            logicalChannelType dCCH,
            rlc_SizeList configured: NULL,
            mac_LogicalChannelPriority 5
          },
          rB_Identity tsc_RB4
        }
      }
    }, 
    {
      trchid tsc_FACH2,
      trCH_LogCHMappingList
      { {
          logicalChannel_Mapping dl_LogicalChannelMapping :
          {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_DTCH1,
            logicalChannelType dTCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 8
          },
          rB_Identity tsc_RB20
        }
      }
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrLogMappingDL_4DCCH_TransRB3
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$Comment /* This constraint is identical to c_TrLogMappingDL_4DCCH, except that the 
macHeaderManipulation field for RB3 is set to 'OmitMacHeader' for RB3. This 
allows the MAC header information to be inspected by the TTCN for received 
PDUs. */
$ASN1_ConsValue
{
  ulconnectedTrCHList OMIT,
  dlconnectedTrCHList {
    {
      trchid tsc_DL_DCH5,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DCCH1,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 1
          },
          rB_Identity tsc_RB1
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DCCH2,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 2
          },
          rB_Identity tsc_RB2
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation omitMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DCCH3,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 3
          },
          rB_Identity tsc_RB_DCCH_DCH_MAC
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DCCH4,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 4
          },
          rB_Identity tsc_RB4
        }
      }
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrLogMappingUL_4DCCH_TransRB3
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$Comment /* This constraint is identical to c_TrLogMappingUL_4DCCH, except that the 
macHeaderManipulation field for RB3 is set to 'OmitMacHeader' for RB3. This 
allows the MAC header information to be inspected by the TTCN for received 
PDUs. */
$ASN1_ConsValue
{
  ulconnectedTrCHList {
    {
      trchid tsc_UL_DCH5,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DCCH1,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB1
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DCCH2,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB2
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation omitMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DCCH3,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB_DCCH_DCH_MAC
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DCCH4,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB4
        }
      }
    }
  },
  dlconnectedTrCHList OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cd_TrLogMapping_PchFach1TransRB0
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath c_TrLogMappingPCH_FACH_PS.
$Comment /* This constraint is identical c_TrLogMappingPCH_FACH_PS.except that the 
macHeaderManipulation field for RB0 is set to 'OmitMacHeader' for RB0. This 
allows the MAC header information to be specified by the TTCN for transmitted 
PDUs. and the changed special RB Id for the CCCH in DL.

For FDD mode only. map PCCH to PCH and DCCH1, DCCH2, DCCH3, DCCH4, CCCH and 
BCCH(for BCCH_FACH) */
$ASN1_ConsValue
REPLACE dlconnectedTrCHList.[1].trCH_LogCHMappingList .[1].logicalChannel_Mapping.dl_LogicalChannelMapping.macHeaderManipulation BY omitMacHeader, 
REPLACE dlconnectedTrCHList.[1].trCH_LogCHMappingList .[1].rB_Identity BY tsc_RB_CCCH_FACH_MAC 
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cd_SIB5_MAC ( p_CellInfo : CellInfoCfg )
$ASN1_TypeId SysInfoType5
$DerivPath cb_SIB5_Def.
$ASN1_ConsValue
REPLACE prach_SystemInformationList.[0].prach_Partitioning.fdd BY
{{
    accessServiceClass_FDD {
      availableSignatureStartIndex 0,
      availableSignatureEndIndex 7,
      assignedSubChannelNumber '0001'B
    }
  },
  {
    accessServiceClass_FDD {
      availableSignatureStartIndex 0,
      availableSignatureEndIndex 7,
      assignedSubChannelNumber '0010'B
    }
}} ,
REPLACE prach_SystemInformationList.[0].persistenceScalingFactorList BY OMIT,
REPLACE prach_SystemInformationList.[0].ac_To_ASC_MappingTable BY {0, 1, 1, 1, 1, 1, 0},
REPLACE prach_SystemInformationList.[0].modeSpecificInfo.fdd.prach_PowerOffset.preambleRetransMax BY 5,
REPLACE prach_SystemInformationList.[0].modeSpecificInfo.fdd.rach_TransmissionParameters.mmax BY 1
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cd_SIB6_MAC_1ASC ( p_CellInfo : CellInfoCfg )
$ASN1_TypeId SysInfoType6
$DerivPath cb_SIB6_Def.
$ASN1_ConsValue
REPLACE prach_SystemInformationList BY cs_PRACH_SysInfoList_1ASC
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cd_SIB6_MAC_4ASC ( p_CellInfo : CellInfoCfg )
$ASN1_TypeId SysInfoType6
$DerivPath cb_SIB6_Def.
$ASN1_ConsValue
REPLACE prach_SystemInformationList BY cs_PRACH_SysInfoList_4ASC
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_RB_InfoReconfigList20_MAC
$ASN1_TypeId RB_InformationReconfigList
$DerivPath 
$Comment /* SRB1 to SRB4 and RB20 With MLP for RAB mapped on RACH reconfigured to 1 */
$ASN1_ConsValue
{
  {
    rb_Identity tsc_RB1,
    pdcp_Info OMIT,
    pdcp_SN_Info OMIT,
    rlc_Info OMIT,
    rb_MappingInfo OMIT,
    rb_StopContinue OMIT
  },
  {
    rb_Identity tsc_RB2,
    pdcp_Info OMIT,
    pdcp_SN_Info OMIT,
    rlc_Info OMIT,
    rb_MappingInfo OMIT,
    rb_StopContinue OMIT
  },
  {
    rb_Identity tsc_RB3,
    pdcp_Info OMIT,
    pdcp_SN_Info OMIT,
    rlc_Info OMIT,
    rb_MappingInfo OMIT,
    rb_StopContinue OMIT
  },
  {
    rb_Identity tsc_RB4,
    pdcp_Info OMIT,
    pdcp_SN_Info OMIT,
    rlc_Info OMIT,
    rb_MappingInfo OMIT,
    rb_StopContinue OMIT
  },
  {
    rb_Identity tsc_RB20,
    pdcp_Info OMIT,
    pdcp_SN_Info OMIT,
    rlc_Info OMIT,
    rb_MappingInfo 
    {
      
      { --RB_MappingInfo
        ul_LogicalChannelMappings oneLogicalChannel:{ --UL_LogicalChannelMapping,
          ul_TransportChannelType dch : tsc_UL_DCH1,
          logicalChannelIdentity OMIT,
          rlc_SizeList configured : NULL,
          mac_LogicalChannelPriority 1 
        } ,
        dl_LogicalChannelMappingList {{
            dl_TransportChannelType dch : tsc_DL_DCH1,
            logicalChannelIdentity OMIT
        }}
      },
      { --RB_MappingInfo
        ul_LogicalChannelMappings oneLogicalChannel:{ --UL_LogicalChannelMapping,
          ul_TransportChannelType rach : NULL,
          logicalChannelIdentity tsc_UL_DTCH1,
          rlc_SizeList explicitList : { { rlc_SizeIndex 2} },
          mac_LogicalChannelPriority 1 
        } ,
        dl_LogicalChannelMappingList {{
            dl_TransportChannelType fach : NULL,
            logicalChannelIdentity tsc_DL_DTCH1
        }}
      }
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DL_InfoPerRL_DCH_OrFACH_ToFACH_PS_MAC (p_ScrmbCode: PrimaryScramblingCode )
$ASN1_TypeId DL_InformationPerRL_List
$DerivPath 
$ASN1_ConsValue
{{
    modeSpecificInfo fdd:{
      primaryCPICH_Info { primaryScramblingCode p_ScrmbCode},
      pdsch_SHO_DCH_Info OMIT,
      pdsch_CodeMapping OMIT
    },
    dl_DPCH_InfoPerRL OMIT,
    sccpch_InfoforFACH OMIT
}}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cd_SIB7_MAC_SIB5_DPL_1
$ASN1_TypeId SysInfoType7
$DerivPath c_SIB7_Def.
$ASN1_ConsValue
REPLACE prach_Information_SIB5_List BY {1}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_AICH_Info
$ASN1_TypeId AICH_Info
$DerivPath 
$Comment /* no transmission diversity, AICH timing = e0 */
$ASN1_ConsValue
{
  channelisationCode256 tsc_AICH1_ChC,
  sttd_Indicator FALSE,
  aich_TransmissionTiming e0
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DCH_148_TFS_DL
$ASN1_TypeId CommonOrDedicatedTFS
$DerivPath 
$Comment /* transport format set for signalling bearer on dedicated channel */
$ASN1_ConsValue
{
  tti tti40 :{{ tb_Size 148,
      numberOfTbSizeList { zero : NULL, one : NULL},
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType convolutional :third,
    rateMatchingAttribute 170,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TS 34.108  cl. 6.10.2.4.1.2: 
TTI = 40 ms; 
two transport formats: TransportBlocks = 1, TB size = 148 bits; TansportBlock = 0, Size = 148. rlc_Size = RLC PDU size =148 bits. 
coding = convolutional; 
coding rate = 1/3; 
CRCsize = 16; 
RateMatching = 170 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DCH_148_TFS_UE_UL
$ASN1_TypeId DedicatedTransChTFS
$DerivPath 
$Comment /* transport format set for signalling bearer on dedicated channel used in message sent to UE */
$ASN1_ConsValue
{
  tti tti40 :{{ rlc_Size bitMode : sizeType2 : {part1 2, part2 OMIT},
      numberOfTbSizeList { zero : NULL, one : NULL},
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType convolutional :third,
    rateMatchingAttribute 170,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TS 34.108  cl. 6.10.2.4.1.2: 
TTI = 40 ms; 
two transport formats:  
TransportBlocks = 1, TB size = 148 bits; TansportBlock = 0, Size = 148. 
rlc_Size = RLC PDU size = TB_Size -4 =144 bits.( DCH, w/ MUX) 
coding = convolutional; 
coding rate = 1/3; 
CRCsize = 16; 
RateMatching = 170 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DCH_148_TFS_UL
$ASN1_TypeId CommonOrDedicatedTFS
$DerivPath 
$Comment /* transport format set for signalling bearer on dedicated channel */
$ASN1_ConsValue
{
  tti tti40 :{{ tb_Size 148,
      numberOfTbSizeList { zero : NULL, one : NULL},
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType convolutional :third,
    rateMatchingAttribute 170,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TS 34.108  cl. 6.10.2.4.1.2: 
TTI = 40 ms; 
two transport formats: TransportBlocks = 1, TB size = 148 bits; TansportBlock = 0, Size = 148. rlc_Size = RLC PDU size =148 bits. 
coding = convolutional; 
coding rate = 1/3; 
CRCsize = 16; 
RateMatching = 170 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DCH_148_TTI_10_TFS
$ASN1_TypeId CommonOrDedicatedTFS
$DerivPath 
$Comment /* transport format set for signalling bearer on dedicated channel */
$ASN1_ConsValue
{
  tti tti10 :{{ tb_Size 148,
      numberOfTbSizeList { zero : NULL, one : NULL},
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType convolutional :third,
    rateMatchingAttribute 192, -- dummy value, value is not needed for 13.6 kbps
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TS 34.108  cl. 6.10.2.4.1.3: 
TTI = 10 ms; 
two transport formats: TransportBlocks = 1, TB size = 148 bits; TansportBlock = 0, Size = 148. rlc_Size = RLC PDU size =148 bits. 
coding = convolutional; 
coding rate = 1/3; 
CRCsize = 16; 
RateMatching = 192 ( dummy value, value is not needed for 13.6 kbps) */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DCH_148_TTI_10_TFS_UE
$ASN1_TypeId DedicatedTransChTFS
$DerivPath 
$Comment /* transport format set for signalling bearer on dedicated channel used in message sent to UE */
$ASN1_ConsValue
{
  tti tti10 :{{ rlc_Size bitMode : sizeType2 : {part1 2, part2 OMIT},
      numberOfTbSizeList { zero : NULL, one : NULL},
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType convolutional :third,
    rateMatchingAttribute 192, -- dummy value, value is not needed for 13.6 kbps
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TS 34.108  cl. 6.10.2.4.1.3: 
TTI = 10 ms; 
two transport formats:  
TransportBlocks = 1, TB size = 148 bits; TansportBlock = 0, Size = 148. 
rlc_Size = RLC PDU size = TB_Size -4 =144 bits.( DCH, w/ MUX) 
coding = convolutional; 
coding rate = 1/3; 
CRCsize = 16; 
RateMatching = 192 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DCH_336_148_DL_InfoRLC_UM(p_ActTime : ActivationTime)
$ASN1_TypeId CphyTrchConfigReq
$DerivPath 
$Comment /* SS CPHY DL transport channel configuration for RLC tests using 336 bit transport blocks. 
Reference 3G TS 34.108, clause 6.11.1, and 6.11.3. 
Note that the TFS for DCH1 is restricted to {0x336, 1x336} for RLC  testing. */
$ASN1_ConsValue
{
  activationTime activationCFN : p_ActTime ,
  ulconnectedTrCHList OMIT,
  ulTFCS OMIT,
  dlconnectedTrCHList {
    {
      trchid tsc_DL_DCH1,
      dl_TransportChannelType dch,
      transportChannelInfo c_DCH_336_TFS_RLC_UM
    },
    {
      trchid tsc_DL_DCH5,
      dl_TransportChannelType dch,
      transportChannelInfo c_DCH_148_TFS_DL
    }
  },
  dlTFCS c_TFCS_Cmpl0_1_2_3_Tx ( c_PowerOffsetInfoHigher64k )
}
$End_ASN1_ConsValue
$Comment /* For DCH5 (3G TS 34.108, 6.10.2.4.1.2) 
TTI = 40 ms; 
two transport formats: TransportBlocks = 1, TB size = 148 bits; TansportBlock = 0, Size = 148. 
coding = convolutional; 
coding rate = 1/3; 
CRCsize = 16; 
RateMatching = 155. 
For DCH1 (3G TS 34.108  cl. 6.11.1 and 6.11.3): 
TTI = 20 ms; 
two transport formats: TransportBlocks = 1, TB size = 336 bits; TansportBlock = 0, Size = 336. 
coding = turbo; 
CRCsize = 16; 
RateMatching = 130 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DCH_336_148_UL_InfoRLC_UM (p_ActTime : ActivationTime)
$ASN1_TypeId CphyTrchConfigReq
$DerivPath 
$Comment /* SS UL transport channel configuration for RLC tests using 336 bit transport blocks. 
Reference 3G TS 34.108, clause 6.11.1, 
Note that the TFS for DCH1 is restricted to {0x336, 1x336} for RLC  testing. */
$ASN1_ConsValue
{
  activationTime activationCFN : p_ActTime ,
  ulconnectedTrCHList {
    {
      trchid tsc_UL_DCH1,
      ul_TransportChannelType dch,
      transportChannelInfo c_DCH_336_TFS_RLC_UM
    },
    {
      trchid tsc_UL_DCH5,
      ul_TransportChannelType dch,
      transportChannelInfo c_DCH_148_TFS_UL
    }
  },
  ulTFCS c_TFCS_Cmpl0_1_2_3_Rx, -- sent to SS
  dlconnectedTrCHList OMIT,
  dlTFCS OMIT
}
$End_ASN1_ConsValue
$Comment /* For DCH5 (3G TS 34.108, 6.10.2.4.1.2) 
TTI = 40 ms; 
two transport formats: TransportBlocks = 1, TB size = 148 bits; TansportBlock = 0, Size = 148. 
coding = convolutional; 
coding rate = 1/3; 
CRCsize = 16; 
RateMatching = 155. 
 
For DCH1 (3G TS 34.108  cl. 6.11.1 and 6.11.3): 
TTI = 20 ms; 
two transport formats: TransportBlocks = 1, TB size = 336 bits; TansportBlock = 0, Size = 336 bits 
coding = turbo; 
CRCsize = 16; 
RateMatching = 130 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DCH_336_TFS_RLC_UE_UM
$ASN1_TypeId DedicatedTransChTFS
$DerivPath 
$Comment /* DCH1 Transport format set for RLC tests using 7 bit length indicators used in message sent to UE. 
Reference 3G TS 34.108, clause 6.11.1, and 6.11.3. 
Note that the TFS for DCH1 is restricted to {0x336, 1x336} for RLC  testing with 7 bit length indicators. */
$ASN1_ConsValue
{
  tti tti40 :{
    {
      rlc_Size octetModeType1 :
      sizeType2 : {
        part1 2,
        part2 OMIT
      },
      numberOfTbSizeList{
        zero : NULL , one : NULL
      },
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType convolutional: third,
    rateMatchingAttribute 155,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TTI = 20 ms; 
2 transport formats:  
TB size always=336 bits; TransportBlocks = 0, and 1;  
rlc_Size = TB_Size (DCH, w/o MUX) 
coding = turbo; 
CRCsize = 16; 
RateMatching = 130 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DCH_336_TFS_RLC_UM
$ASN1_TypeId CommonOrDedicatedTFS
$DerivPath 
$Comment /* DCH1 Transport format set for RLC  UM tests using 7 bit length indicators. 
Reference 3G TS 34.108, clause 6.11.1, 
Note that the TFS for DCH1 is restricted to {0x336, 1x336} for RLC  testing with 7 bit length indicators. */
$ASN1_ConsValue
{
  tti tti40 :{
    {
      tb_Size 336,
      numberOfTbSizeList{ zero : NULL, one : NULL},
      logicalChannelList allSizes : NULL
    }
  },
  semistaticTF_Information {
    channelCodingType convolutional: third,
    rateMatchingAttribute 155,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TTI = 20 ms; 
2 transport formats: TB size always=336 bits; TransportBlocks = 0, and 1;  
coding = turbo; 
CRCsize = 16; 
RateMatching = 130 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DCH_336_TFS_UE
$ASN1_TypeId DedicatedTransChTFS
$DerivPath 
$Comment /* transport format set for transport channel used in CreateCell_DCH_64kPS_RAB_SRB for message sent to UE */
$ASN1_ConsValue
{
  tti tti20 :{ {
      rlc_Size octetModeType1 : sizeType2 : {part1 2, part2 OMIT},
      numberOfTbSizeList { zero : NULL, one : NULL, small : 2, small : 3, small : 4 },
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType turbo: NULL,
    rateMatchingAttribute 150,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* 3GPP TS 34.108 clause 6.10.2.4.1.24 
TTI = 20 ms; 
5 transport formats: 
TB size always=336 bits; TransportBlocks = 0,1,2,3 and 4 ;  
rlsc_Size = TB_Size ( DCH, w/o MUX) 
coding = turbo; 
CRCsize = 16; 
RateMatching = 150 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DL_AddReconfTransChInfo ( 
p_DlTrChId:TransportChannelIdentity; 
p_UlTrChId:TransportChannelIdentity 
 )
$ASN1_TypeId DL_AddReconfTransChInformation
$DerivPath 
$ASN1_ConsValue
{
  dl_TransportChannelType dch,
  dl_transportChannelIdentity p_DlTrChId,
  tfs_SignallingMode sameAsULTrCH :
  {
    ul_TransportChannelType dch,
    ul_TransportChannelIdentity p_UlTrChId
  } ,
  dch_QualityTarget{
    bler_QualityValue -20
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DL_AddReconfTransChInfoListDCCH_SRB
$ASN1_TypeId DL_AddReconfTransChInfoList
$DerivPath 
$ASN1_ConsValue
{
  c_DL_AddReconfTransChInfo(tsc_DL_DCH5,tsc_UL_DCH5)
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DL_AddReconfTransChInfoListDCH_PS_64k
$ASN1_TypeId DL_AddReconfTransChInfoList
$DerivPath 
$ASN1_ConsValue
{
  c_DL_AddReconfTransChInfo ( tsc_DL_DCH1 , tsc_UL_DCH1 ),
  c_DL_AddReconfTransChInfo ( tsc_DL_DCH5, tsc_UL_DCH5 )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DL_AddReconfTransChInfoListRLC
$ASN1_TypeId DL_AddReconfTransChInfoList
$DerivPath 
$Comment /* DL transport channel information list for RLC tests. 
DCH1 is used for the DTCH RAB for testing, and DCH5 is used for the RRC connection SRBs. 
Reference 3G TS 34.108, clause 6.11. */
$ASN1_ConsValue
{
  c_DL_AddReconfTransChInfo(tsc_DL_DCH1, tsc_UL_DCH1),
  c_DL_AddReconfTransChInfo(tsc_DL_DCH5, tsc_UL_DCH5)
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DL_CommonInformationDCH_DPCH_Offset (p_Sf: SF512_AndPilot )
$ASN1_TypeId DL_CommonInformation
$DerivPath 
$ASN1_ConsValue
{
  dl_DPCH_InfoCommon{
    cfnHandling initialise : {
      cfntargetsfnframeoffset OMIT
    },
    modeSpecificInfo fdd:{
      dl_DPCH_PowerControlInfo {
        modeSpecificInfo fdd:{
          dpc_Mode singleTPC
        }
      },
      powerOffsetPilot_pdpdch tsc_DPCH_PowerOffsetPILOT,
      dl_rate_matching_restriction OMIT,
      spreadingFactorAndPilot p_Sf,
      positionFixedOrFlexible flexible,
      tfci_Existence TRUE
    }
  },
  modeSpecificInfo fdd:{
    defaultDPCH_OffsetValue tsc_DefaultDPCH_OffsetValue,
    dpch_CompressedModeInfo OMIT,
    tx_DiversityMode noDiversity,
    ssdt_Information OMIT
  }
}
$End_ASN1_ConsValue
$Comment /* NOTE : not aligned with 34.108. Reason:The value 'inactive' in 34.018 is not valid with asn.1 definition v360 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DL_CommonInformationRB_SetUp (p_Sf: SF512_AndPilot )
$ASN1_TypeId DL_CommonInformation
$DerivPath 
$ASN1_ConsValue
{
  dl_DPCH_InfoCommon{
    cfnHandling maintain :NULL,
    modeSpecificInfo fdd:{
      dl_DPCH_PowerControlInfo {
        modeSpecificInfo fdd:{
          dpc_Mode singleTPC
        }
      },
      powerOffsetPilot_pdpdch tsc_DPCH_PowerOffsetPILOT,
      dl_rate_matching_restriction OMIT,
      spreadingFactorAndPilot p_Sf,
      positionFixedOrFlexible flexible,
      tfci_Existence TRUE
    }
  },
  modeSpecificInfo fdd:{
    defaultDPCH_OffsetValue OMIT,
    dpch_CompressedModeInfo OMIT ,
    tx_DiversityMode noDiversity,
    ssdt_Information OMIT
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DL_CommonTransChInfoDCH(p_Tfcs:TFCS)
$ASN1_TypeId DL_CommonTransChInfo
$DerivPath 
$ASN1_ConsValue
{
  sccpch_TFCS OMIT,
  modeSpecificInfo fdd:
  {
    dl_Parameters dl_DCH_TFCS : p_Tfcs
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DL_CommonTransChInfoSameAsUL
$ASN1_TypeId DL_CommonTransChInfo
$DerivPath 
$ASN1_ConsValue
{
  sccpch_TFCS OMIT,
  modeSpecificInfo fdd:{
    dl_Parameters sameAsUL: NULL
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DL_InfoPerRL_DPCH_Offset ( 
p_ScrmbCode : PrimaryScramblingCode ;  
p_SecScrmbCode : SecondaryScramblingCode ;  
p_Sf : SF512_AndCodeNumber 
)
$ASN1_TypeId DL_InformationPerRL_List
$DerivPath 
$ASN1_ConsValue
{{
    modeSpecificInfo fdd : {
      primaryCPICH_Info { primaryScramblingCode p_ScrmbCode } ,
      pdsch_SHO_DCH_Info OMIT,
      pdsch_CodeMapping OMIT
    } ,
    dl_DPCH_InfoPerRL fdd : {
      pCPICH_UsageForChannelEst mayBeUsed,
      dpch_FrameOffset (( (tsc_DefaultDPCH_OffsetValue*512 ) MOD 38400) / 256 ),
      -- DPCH-FrameOffset = DefaultDPCH-OffsetValueFDD MOD 38400
      -- Actual value DPCH-FrameOffset = IE value * 256
      -- Actual value DefaultDPCH-OffsetValueFDD = IE value * 512
      secondaryCPICH_Info OMIT,
      dl_ChannelisationCodeList {{
          secondaryScramblingCode p_SecScrmbCode,
          sf_AndCodeNumber p_Sf,
          scramblingCodeChange noCodeChange
      }},
      tpc_CombinationIndex tsc_TPC_CombinationIndex,
      ssdt_CellIdentity OMIT,
      closedLoopTimingAdjMode OMIT
    },
    sccpch_InfoforFACH OMIT
}}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_DL_InformationPerRL ( p_ScrmbCode: PrimaryScramblingCode; p_Sf: SF512_AndCodeNumber; p_SecondaryScramblingCode   : SecondaryScramblingCode   )
$ASN1_TypeId DL_InformationPerRL_List
$DerivPath 
$ASN1_ConsValue
{{
    modeSpecificInfo fdd: {
      primaryCPICH_Info { primaryScramblingCode p_ScrmbCode },
      pdsch_SHO_DCH_Info OMIT,
      pdsch_CodeMapping OMIT
    },
    dl_DPCH_InfoPerRL fdd : {
      pCPICH_UsageForChannelEst mayBeUsed,
      dpch_FrameOffset (( (tsc_DefaultDPCH_OffsetValue*512 ) MOD 38400) / 256 ),
      -- DPCH-FrameOffset = DefaultDPCH-OffsetValueFDD MOD 38400
      -- Actual value DPCH-FrameOffset = IE value * 256
      -- Actual value DefaultDPCH-OffsetValueFDD = IE value * 512
      secondaryCPICH_Info OMIT,
      dl_ChannelisationCodeList {{
          secondaryScramblingCode p_SecondaryScramblingCode ,
          sf_AndCodeNumber p_Sf,
          scramblingCodeChange OMIT
      }},
      tpc_CombinationIndex tsc_TPC_CombinationIndex,
      ssdt_CellIdentity OMIT,
      closedLoopTimingAdjMode OMIT
    },
    sccpch_InfoforFACH OMIT
}}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_FACH_TFS
$ASN1_TypeId CommonOrDedicatedTFS
$DerivPath 
$Comment /* transport format set for FACH */
$ASN1_ConsValue
{
  tti tti10 :{ {
      tb_Size 168,
      numberOfTbSizeList { zero : NULL, one : NULL, small : 2 },
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType convolutional : half,
    rateMatchingAttribute 220,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TTI = 10 ms; 
three transport formats: TransportBlocks = 2, TB size = 168 bits; TransportBlocks = 1, TB size = 168 bits; TansportBlock = 0, Size = 168. 
coding = convolutional; 
rate = 1/2; 
CRCsize = 16; 
RateMatching = 220 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_FACH_TFS_PS
$ASN1_TypeId CommonOrDedicatedTFS
$DerivPath 
$Comment /* transport format set for FACH (PS) used for SS configuration */
$ASN1_ConsValue
{
  tti tti10 :{ {
      tb_Size 360,
      numberOfTbSizeList { zero : NULL, one : NULL},
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType turbo : NULL,
    rateMatchingAttribute 130,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TTI = 10 ms; 
two transport formats: TransportBlocks = 1, TB size = 360 bits; TansportBlock = 0, Size = 360. 
coding = turbo; 
CRCsize = 16; 
RateMatching = 130 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_FACH_TFS_PS_UE
$ASN1_TypeId CommonTransChTFS
$DerivPath 
$Comment /* transport format set for FACH (PS) */
$ASN1_ConsValue
{
  tti tti10 :{ {
      rlc_Size fdd : {octetModeRLC_SizeInfoType2 sizeType2: 3},
      numberOfTbSizeList { zero : NULL, one : NULL},
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType turbo : NULL,
    rateMatchingAttribute 130,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TTI = 10 ms; 
two transport formats:  
TransportBlocks = 1, TB size = 360 bits; TansportBlock = 0, Size = 360. 
rlc_Size = TB_Size ( FACH) 
coding = turbo; 
CRCsize = 16; 
RateMatching = 130 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_FACH_TFS_UE
$ASN1_TypeId CommonTransChTFS
$DerivPath 
$Comment /* transport format set for FACH */
$ASN1_ConsValue
{
  tti tti10 :{ {
      rlc_Size fdd : {octetModeRLC_SizeInfoType2 sizeType1: 15},
      numberOfTbSizeList { zero : NULL, one : NULL, small : 2},
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType convolutional : half,
    rateMatchingAttribute 220,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TTI = 10 ms; 
three transport formats:  
TransportBlocks = 2, TB size = 168 bits; TransportBlocks = 1, TB size = 168 bits; TansportBlock = 0, Size = 168. 
rlc_Size = TB_Size ( FACH) 
coding = convolutional; 
rate = 1/2; 
CRCsize = 16; 
RateMatching = 220 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_FreqInfo ( p_uarfcnUL , p_uarfcnDL : UARFCN )
$ASN1_TypeId FrequencyInfo
$DerivPath 
$ASN1_ConsValue
{
  modeSpecificInfo fdd: {
    uarfcn_UL p_uarfcnUL ,
    uarfcn_DL p_uarfcnDL
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_MAC_PagingCfg(p_E18: B18; p_dRX : INTEGER )
$ASN1_TypeId CmacPagingConfigReq
$DerivPath 
$ASN1_ConsValue
{
  pI_BitMapInfo e18: p_E18,
  dRX_CycleLength p_dRX,
  iMSI o_ConvertIMSI(px_IMSI_Def),
  t_pich_T_sccpch FALSE
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_MIB_Def  ( p_CellInfo : CellInfoCfg )
$ASN1_TypeId MasterInformationBlock
$DerivPath 
$Comment /* Default setting of MIB. 3GPP TS 34.123-3 clause 8.4.3 */
$ASN1_ConsValue
{
  mib_ValueTag 1,
  plmn_Type gsm_MAP : {
    plmn_Identity {
      mcc o_HexToDigitsMCC ( p_CellInfo.mcc),
      mnc o_HexToDigitsMNC (p_CellInfo.mnc ) }
  },
  sibSb_ReferenceList {
    {
      sibSb_Type sysInfoTypeSB1 : 1,
      scheduling {scheduling {
          sib_Pos rep16 : 1
      }}
    },
    {
      sibSb_Type sysInfoType1 : 1,
      scheduling {scheduling {
          sib_Pos rep64 : 11
      }}
    },
    {
      sibSb_Type sysInfoType2 : 1,
      scheduling {scheduling {
          sib_Pos rep64 :11
      } }
    },
    {
      sibSb_Type sysInfoType3 : 1,
      scheduling {scheduling {
          sib_Pos rep64 : 10
      }}
    },
    {
      sibSb_Type sysInfoType4 : 1,
      scheduling {scheduling {
          sib_Pos rep64 : 26
      }}
    },
    {
      sibSb_Type sysInfoType5 : 1,
      scheduling {scheduling {
          segCount 4,
          sib_Pos rep64 : 19,
          sib_PosOffsetInfo {so4, so2, so2}
      } }
    }
  }
}
$End_ASN1_ConsValue
$Comment /* Assum no segmentation for SIB1, SIB2, SIB3, SIB4. 
Contains scheduling informations for  SIB1, SIB2, SIB3, SIB4, SIB5 and SB1 only, the scheduling information for other SIBs are in SysInfoTypeSB1. 
The value 1 of valueTags is a place holder. actual values of them will be non-zero and assigned dynamically in various SendSystemInformation test Steps. */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_PCH_TFS
$ASN1_TypeId CommonOrDedicatedTFS
$DerivPath 
$Comment /* transport format set for PCH */
$ASN1_ConsValue
{
  tti tti10 :{ {
      tb_Size 240,
      numberOfTbSizeList { zero : NULL, one : NULL},
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType convolutional : half,
    rateMatchingAttribute 230,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TTI = 10 ms; 
two transport formats: TransportBlocks = 1, TB size = 240 bits; TansportBlock = 0, Size = 240. 
coding = convolutional; 
rate = 1/2; 
CRCsize = 16; 
RateMatching = 230 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_PCH_TFS_UE
$ASN1_TypeId CommonTransChTFS
$DerivPath 
$Comment /* transport format set for PCH */
$ASN1_ConsValue
{
  tti tti10 :{ {
      rlc_Size fdd : {octetModeRLC_SizeInfoType2 sizeType1: 24},
      numberOfTbSizeList { zero : NULL, one : NULL},
      logicalChannelList allSizes : NULL
  }},
  semistaticTF_Information {
    channelCodingType convolutional : half,
    rateMatchingAttribute 230,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TTI = 10 ms; 
two transport formats:  
TransportBlocks = 1, TB size = 240 bits; TansportBlock = 0, Size = 240. 
rlc_Size = TB_Size (PCH) 
coding = convolutional; 
rate = 1/2; 
CRCsize = 16; 
RateMatching = 230 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_PagingType1_P_TMSI (  
p_PagCause :  PagingCause;  
p_P_Tmsi : P_TMSI_GSM_MAP; 
p_Domain :  CN_DomainIdentity )
$ASN1_TypeId PagingType1
$DerivPath 
$ASN1_ConsValue
{
  pagingRecordList {
    cn_Identity:{
      pagingCause p_PagCause,
      cn_DomainIdentity p_Domain,
      cn_pagedUE_Identity p_TMSI_GSM_MAP : p_P_Tmsi
    }
  },
  bcch_ModificationInfo OMIT,
  laterNonCriticalExtensions OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_PagingType1_TMSI ( p_PagCause:  PagingCause; p_Tmsi: TMSI_GSM_MAP; 
    p_Domain :  CN_DomainIdentity )
$ASN1_TypeId PagingType1
$DerivPath 
$ASN1_ConsValue
{
  pagingRecordList {
    cn_Identity:{
      pagingCause p_PagCause,
      cn_DomainIdentity p_Domain,
      cn_pagedUE_Identity tmsi_GSM_MAP: p_Tmsi
    }
  },
  bcch_ModificationInfo OMIT,
  laterNonCriticalExtensions OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_PichInfo
$ASN1_TypeId PICH_Info
$DerivPath 
$Comment /* value for pi_CountPerFrame FFS */
$ASN1_ConsValue
fdd :{
  channelisationCode256 tsc_PICH1_ChC,
  pi_CountPerFrame e18,
  sttd_Indicator FALSE
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_RAB_InfoListFACH_PS ( 
p_Reesttimer: Re_EstablishmentTimer; 
p_RAB_Id: BITSTRING;  
p_RLC_Info: RLC_Info 
)
$ASN1_TypeId RAB_InformationSetupList
$DerivPath 
$ASN1_ConsValue
{
  {
    rab_Info { -- RAB_Info
      rab_Identity gsm_MAP_RAB_Identity : p_RAB_Id,
      cn_DomainIdentity ps_domain,
      re_EstablishmentTimer p_Reesttimer
    },
    rb_InformationSetupList {{ --RB_InformationSetupList
        rb_Identity tsc_RB20,
        pdcp_Info OMIT,
        rlc_InfoChoice rlc_Info : p_RLC_Info,
        rb_MappingInfo {
          
          { --RB_MappingInfo
            ul_LogicalChannelMappings oneLogicalChannel:{ --UL_LogicalChannelMapping,
              ul_TransportChannelType dch : tsc_UL_DCH1,
              logicalChannelIdentity OMIT,
              rlc_SizeList configured : NULL,
              mac_LogicalChannelPriority 8
            } ,
            dl_LogicalChannelMappingList {{
                dl_TransportChannelType dch : tsc_DL_DCH1,
                logicalChannelIdentity OMIT
            }}
          },
          { --RB_MappingInfo
            ul_LogicalChannelMappings oneLogicalChannel:{ --UL_LogicalChannelMapping,
              ul_TransportChannelType rach : NULL,
              logicalChannelIdentity tsc_UL_DTCH1,
              rlc_SizeList explicitList : { { rlc_SizeIndex 2} },
              mac_LogicalChannelPriority 8
            } ,
            dl_LogicalChannelMappingList {{
                dl_TransportChannelType fach : NULL,
                logicalChannelIdentity tsc_DL_DTCH1
            }}
          }
        }
    }}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_RAB_InfoListRLC ( 
  p_RAB_Id: BITSTRING;  
  p_RLC_Info: RLC_Info; 
  p_Domain :  CN_DomainIdentity; 
 p_RB_Id : RB_Identity 
)
$ASN1_TypeId RAB_InformationSetupList
$DerivPath 
$Comment /* RAB_InformationSetup for RLC tests on RB10. Reference 3G TS 34.108, clause 6.11.1 to 6.11.4 
 
The corresponding SS entity should be configured as a TM entity, such that the RLC header information can be specified and / or verified from the TTCN. */
$ASN1_ConsValue
{
  {
    rab_Info {
      rab_Identity gsm_MAP_RAB_Identity: p_RAB_Id,
      cn_DomainIdentity p_Domain,
      re_EstablishmentTimer useT314
    },
    rb_InformationSetupList {{
        rb_Identity p_RB_Id ,
        pdcp_Info OMIT,
        rlc_InfoChoice rlc_Info :p_RLC_Info,
        rb_MappingInfo {{
            ul_LogicalChannelMappings oneLogicalChannel:{
              ul_TransportChannelType dch: tsc_UL_DCH1,
              logicalChannelIdentity tsc_UL_DTCH1,
              rlc_SizeList configured :NULL,
              mac_LogicalChannelPriority 7
            } ,
            dl_LogicalChannelMappingList {{
                dl_TransportChannelType dch: tsc_DL_DCH1,
                logicalChannelIdentity tsc_DL_DTCH1
            }}
        }}
    }}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_RACH_TFS
$ASN1_TypeId CommonOrDedicatedTFS
$DerivPath 
$Comment /* transport format set for RACH */
$ASN1_ConsValue
{
  tti tti20 :{{
      tb_Size 168,
      numberOfTbSizeList { one : NULL},
      logicalChannelList configured : NULL
    },
    {
      tb_Size 360,
      numberOfTbSizeList { one : NULL },
      logicalChannelList configured : NULL
  }},
  semistaticTF_Information {
    channelCodingType convolutional : half,
    rateMatchingAttribute 150,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TTI = 20 ms; 
two transport formats: TransportBlocks = 1, TB size = 168 bits and TransportBlocks = 1, TB size = 360 bits; 
coding = convolutional; 
rate = 1/2; 
CRCsize = 16 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_RACH_TFS_UE
$ASN1_TypeId CommonTransChTFS
$DerivPath 
$Comment /* transport format set for RACH used in message sent to UE */
$ASN1_ConsValue
{
  tti tti20 :{{
      rlc_Size fdd : {octetModeRLC_SizeInfoType2 sizeType1: 15},
      numberOfTbSizeList { one : NULL},
      logicalChannelList configured : NULL
    },
    {
      rlc_Size fdd : { octetModeRLC_SizeInfoType2 sizeType2 : 3},
      numberOfTbSizeList { one : NULL },
      logicalChannelList configured : NULL
  }},
  semistaticTF_Information {
    channelCodingType convolutional : half,
    rateMatchingAttribute 150,
    crc_Size crc16
  }
}
$End_ASN1_ConsValue
$Comment /* TTI = 20 ms; 
two transport formats:  
TransportBlocks = 1, TB size = 168 bits and TransportBlocks = 1, TB size = 360 bits; 
rlc_Size = TB_Size (RACH) 
coding = convolutional; 
rate = 1/2; 
CRCsize = 16; 
RateMatching = 1 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_RB2_IntegrityProtActivationInfoList(p_RRCSN :  RRC_MessageSequenceNumber)
$ASN1_TypeId IntegrityProtActivationInfoList
$DerivPath 
$Comment /* To Start Integrity on RB2 in UL */
$ASN1_ConsValue
{{
    rb_Identity tsc_RB2,
    rrc_MessageSequenceNumber p_RRCSN
}}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_RB_ActTimeInfo(p_RB_Id: INTEGER;  p_N: RLC_SequenceNumber)
$ASN1_TypeId RB_ActivationTimeInfo
$DerivPath 
$ASN1_ConsValue
{
  rb_Identity p_RB_Id,
  rlc_SequenceNumber p_N
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_RLC_InfoAM_Def
$ASN1_TypeId RLC_Info
$DerivPath 
$ASN1_ConsValue
{
  ul_RLC_Mode ul_AM_RLC_Mode: cb_UL_AM_RLC ,
  dl_RLC_Mode dl_AM_RLC_Mode : cb_DL_AM_RLC
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_RestRB_IntegrityProtActivationInfoList(p_SN0, p_SN1, p_SN3, p_SN4: RRC_MessageSequenceNumber)
$ASN1_TypeId IntegrityProtActivationInfoList
$DerivPath 
$Comment /* To Start Integrity on RB2 in UL */
$ASN1_ConsValue
{{
    rb_Identity tsc_RB0,
    rrc_MessageSequenceNumber p_SN0
  },
  {
    rb_Identity tsc_RB1,
    rrc_MessageSequenceNumber p_SN1
  },
  {
    rb_Identity tsc_RB3,
    rrc_MessageSequenceNumber p_SN3
  },
  {
    rb_Identity tsc_RB4,
    rrc_MessageSequenceNumber p_SN4
}}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SB1_Def
$ASN1_TypeId SysInfoTypeSB1
$DerivPath 
$Comment /* Default setting of SB1. scheduling is defined in 3GPP TS 34.123-3 clause 8.4.3 */
$ASN1_ConsValue
{
  sib_ReferenceList {
    {
      sib_Type sysInfoType6 : 1,
      scheduling {scheduling {
          segCount 4,
          sib_Pos rep64 : 3,
          sib_PosOffsetInfo {so4, so2, so2}
      }}
    },
    {
      sib_Type sysInfoType7 : NULL,
      scheduling {scheduling {
          sib_Pos rep16 : 2
      }}
    },
    {
      sib_Type sysInfoType11 : 1,
      scheduling { scheduling {
          segCount 3,
          sib_Pos rep64 : 29,
          sib_PosOffsetInfo {so2, so2}
      } }
    },
    {
      sib_Type sysInfoType12 : 1,
      scheduling { scheduling {
          segCount 3,
          sib_Pos rep64 : 13,
          sib_PosOffsetInfo {so2, so2}
      } }
    },
    {
      sib_Type sysInfoType18 : 1,
      scheduling { scheduling {
          sib_Pos rep64 : 18
      } }
  } },
  nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /* Assum no segmentation for SIB7.  
Contains scheduling informations for SIB6, SIB7, SIB11, SIB12, SIB18 only,  the scheduling information for other SIBs may be added later. 
The value 1 of valueTags is a place holder. actual values of them will be non-zero and assigned dynamically in various SendSystemInformation test Steps. */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SB1_Schedul1
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SB1 of one segment */
$ASN1_ConsValue
{
  scheduling {
    sib_Pos rep16 :1
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB11_Schedul1
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB11 of one segment, 3GPP TS 34.123-3 clause 8.4.3 */
$ASN1_ConsValue
{
  scheduling {
    sib_Pos rep64 :29
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB11_Schedul2
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB11 of two segments, 3GPP TS 34.123-3 clause 8.4.3 */
$ASN1_ConsValue
{
  scheduling {
    segCount 2,
    sib_Pos rep64 :29,
    sib_PosOffsetInfo {so2}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB11_Schedul3
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB11 of three segments, 3GPP TS 34.123-3 clause 8.4.3 */
$ASN1_ConsValue
{
  scheduling {
    segCount 3,
    sib_Pos rep64 :29,
    sib_PosOffsetInfo {so2, so2}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB12_Schedul1
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB12 of one segment, 3GPP TS 34.123-3 clause 8.4.3 */
$ASN1_ConsValue
{
  scheduling {
    sib_Pos rep64 :13
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB12_Schedul2
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB12 of two segments, 3GPP TS 34.123-3 clause 8.4.3 */
$ASN1_ConsValue
{
  scheduling {
    segCount 2,
    sib_Pos rep64 : 13,
    sib_PosOffsetInfo {so2}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB12_Schedul3
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB12 of three segments, 3GPP TS 34.123-3 clause 8.4.3 */
$ASN1_ConsValue
{
  scheduling {
    segCount 3,
    sib_Pos rep64 :13,
    sib_PosOffsetInfo {so2, so2}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB18_2PLMN ( p_InterCellInfo : CellInfoCfg )
$ASN1_TypeId SysInfoType18
$DerivPath 
$Comment /* The Cell Info will be of the cell of other PLMN */
$ASN1_ConsValue
{
  idleModePLMNIdentities
  {
    plmnsOfIntraFreqCellsList OMIT,
    plmnsOfInterFreqCellsList
    {{
        plmn_Identity {
          mcc o_HexToDigitsMCC ( p_InterCellInfo.mcc),
          mnc o_HexToDigitsMNC (p_InterCellInfo.mnc )
        }
    }},
    plmnsOfInterRATCellsList OMIT
  },
  connectedModePLMNIdentities OMIT,
  nonCriticalExtensions OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB18_3PLMN ( p_Inter1CellInfo, p_Inter2CellInfo : CellInfoCfg )
$ASN1_TypeId SysInfoType18
$DerivPath 
$Comment /* The Cell Info will be of the one cell each of other PLMN's */
$ASN1_ConsValue
{
  idleModePLMNIdentities
  {
    plmnsOfIntraFreqCellsList OMIT,
    plmnsOfInterFreqCellsList
    {{
        plmn_Identity {
          mcc o_HexToDigitsMCC ( p_Inter1CellInfo.mcc),
          mnc o_HexToDigitsMNC (p_Inter1CellInfo.mnc )
        }
        },{
        plmn_Identity {
          mcc o_HexToDigitsMCC ( p_Inter1CellInfo.mcc),
          mnc o_HexToDigitsMNC (p_Inter1CellInfo.mnc )
        }
        },{
        plmn_Identity {
          mcc o_HexToDigitsMCC ( p_Inter1CellInfo.mcc),
          mnc o_HexToDigitsMNC (p_Inter1CellInfo.mnc )
        }
        },{
        plmn_Identity {
          mcc o_HexToDigitsMCC ( p_Inter2CellInfo.mcc),
          mnc o_HexToDigitsMNC (p_Inter2CellInfo.mnc )
        }
    }},
    plmnsOfInterRATCellsList OMIT
  },
  connectedModePLMNIdentities OMIT,
  nonCriticalExtensions OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB18_Def ( p_CellInfo : CellInfoCfg )
$ASN1_TypeId SysInfoType18
$DerivPath 
$ASN1_ConsValue
{
  idleModePLMNIdentities
  {
    plmnsOfIntraFreqCellsList OMIT, 
    plmnsOfInterFreqCellsList OMIT,
    plmnsOfInterRATCellsList OMIT
  },
  connectedModePLMNIdentities OMIT,
  nonCriticalExtensions OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB2_Def ( p_CellInfo : CellInfoCfg )
$ASN1_TypeId SysInfoType2
$DerivPath 
$Comment /* Default system information block type 2 */
$ASN1_ConsValue
{
  ura_IdentityList { p_CellInfo.ura_Identity },
  nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /* for cell 1 and cell 2. */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB5_Schedul1
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB5 of one segment, 3GPP TS 34.123-3 clause 8.4.3 */
$ASN1_ConsValue
{
  scheduling {
    sib_Pos rep64 :19
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB5_Schedul2
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB5 of two segments, 3GPP TS 34.123-3 clause 8.4.3 */
$ASN1_ConsValue
{
  scheduling {
    segCount 2,
    sib_Pos rep64 :19,
    sib_PosOffsetInfo {so4}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB5_Schedul3
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB5 of three segments, 3GPP TS 34.123-3 clause 8.4.3 */
$ASN1_ConsValue
{
  scheduling {
    segCount 3,
    sib_Pos rep64 :19,
    sib_PosOffsetInfo {so4, so2}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB5_Schedul4
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB5 of four segments, 3GPP TS 34.123-3 clause 8.4.3 */
$ASN1_ConsValue
{
  scheduling {
    segCount 4,
    sib_Pos rep64 :19,
    sib_PosOffsetInfo {so4, so2, so2}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB6_Schedul1
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB6 of one segment */
$ASN1_ConsValue
{
  scheduling {
    sib_Pos rep64 : 3
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB6_Schedul2
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB6 of two segments */
$ASN1_ConsValue
{
  scheduling {
    segCount 2,
    sib_Pos rep64 :3,
    sib_PosOffsetInfo {so4}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB6_Schedul3
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB6 of three segments */
$ASN1_ConsValue
{
  scheduling {
    segCount 3,
    sib_Pos rep64 :3,
    sib_PosOffsetInfo {so4, so2}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB6_Schedul4
$ASN1_TypeId SchedulingInformation
$DerivPath 
$Comment /* SIB6 of four segments */
$ASN1_ConsValue
{
  scheduling {
    segCount 4,
    sib_Pos rep64 :3,
    sib_PosOffsetInfo {so4, so2, so2}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SIB7_Def
$ASN1_TypeId SysInfoType7
$DerivPath 
$Comment /* Default system information block type 7 */
$ASN1_ConsValue
{
  modeSpecificInfo fdd : {
    ul_Interference -100
  },
  prach_Information_SIB5_List { 2 },
  prach_Information_SIB6_List { 2 },
  nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SRB_InfoSetupAM_DCH ( 
p_Ul_lgchId : LogicalChannelIdentity;  
p_MAC_lgch_prtDCH , p_MAC_lgch_prtRACH : MAC_LogicalChannelPriority ; 
p_Dl_lgchId : LogicalChannelIdentity 
)
$ASN1_TypeId SRB_InformationSetup
$DerivPath 
$ASN1_ConsValue
{
  rb_Identity OMIT,
  rlc_InfoChoice rlc_Info :
  {
    ul_RLC_Mode ul_AM_RLC_Mode : cd_UL_AM_RLC_SRB,
    dl_RLC_Mode dl_AM_RLC_Mode : cd_DL_AM_RLC_SRB
  },
  rb_MappingInfo
  {
    {
      ul_LogicalChannelMappings oneLogicalChannel: {
        ul_TransportChannelType dch: tsc_UL_DCH5,
        logicalChannelIdentity p_Ul_lgchId,
        rlc_SizeList configured :NULL,
        mac_LogicalChannelPriority p_MAC_lgch_prtDCH
      },
      dl_LogicalChannelMappingList{{
          dl_TransportChannelType dch: tsc_DL_DCH5,
          logicalChannelIdentity p_Dl_lgchId
      }}
    },
    {
      ul_LogicalChannelMappings oneLogicalChannel: {
        ul_TransportChannelType rach:NULL,
        logicalChannelIdentity p_Ul_lgchId,
        rlc_SizeList explicitList : { { rlc_SizeIndex 1} },
        mac_LogicalChannelPriority p_MAC_lgch_prtRACH
      },
      dl_LogicalChannelMappingList{{
          dl_TransportChannelType fach: NULL,
          logicalChannelIdentity p_Dl_lgchId
      }}
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SRB_InfoSetupAM_FACH ( p_RB_Id: RB_Identity; p_Ul_lgchId: LogicalChannelIdentity;p_MAC_lgch_prtDCH , p_MAC_lgch_prt: MAC_LogicalChannelPriority; p_Dl_lgchId: LogicalChannelIdentity)
$ASN1_TypeId SRB_InformationSetup
$DerivPath 
$ASN1_ConsValue
{
  rb_Identity p_RB_Id,
  rlc_InfoChoice rlc_Info :
  {
    ul_RLC_Mode ul_AM_RLC_Mode: cd_UL_AM_RLC_SRB ,
    dl_RLC_Mode dl_AM_RLC_Mode: cd_DL_AM_RLC_SRB
  },
  rb_MappingInfo
  {
    {
      ul_LogicalChannelMappings oneLogicalChannel: {
        ul_TransportChannelType rach: NULL,
        logicalChannelIdentity p_Ul_lgchId,
        rlc_SizeList explicitList : { { rlc_SizeIndex 1} },
        mac_LogicalChannelPriority p_MAC_lgch_prt
      },
      dl_LogicalChannelMappingList{{
          dl_TransportChannelType fach: NULL,
          logicalChannelIdentity p_Dl_lgchId
      }}
    },
    {
      ul_LogicalChannelMappings oneLogicalChannel: {
        ul_TransportChannelType dch: tsc_UL_DCH5,
        logicalChannelIdentity p_Ul_lgchId,
        rlc_SizeList configured :NULL,
        mac_LogicalChannelPriority p_MAC_lgch_prtDCH
      },
      dl_LogicalChannelMappingList{{
          dl_TransportChannelType dch: tsc_DL_DCH5,
          logicalChannelIdentity p_Dl_lgchId
      }}
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SRB_InfoSetupUM_DCH ( p_Ul_lgchId : LogicalChannelIdentity ; p_MAC_lgch_prtDCH, p_MAC_lgch_prtRACH : MAC_LogicalChannelPriority ; p_Dl_lgchId : LogicalChannelIdentity )
$ASN1_TypeId SRB_InformationSetup
$DerivPath 
$ASN1_ConsValue
{
  rb_Identity OMIT,
  rlc_InfoChoice rlc_Info :
  {
    ul_RLC_Mode ul_UM_RLC_Mode:
    {
      transmissionRLC_Discard OMIT
    },
    dl_RLC_Mode dl_UM_RLC_Mode: NULL
  },
  rb_MappingInfo
  {
    {
      ul_LogicalChannelMappings oneLogicalChannel: {
        ul_TransportChannelType dch: tsc_UL_DCH5,
        logicalChannelIdentity p_Ul_lgchId,
        rlc_SizeList configured :NULL,
        mac_LogicalChannelPriority p_MAC_lgch_prtDCH
      },
      dl_LogicalChannelMappingList{{
          dl_TransportChannelType dch: tsc_DL_DCH5,
          logicalChannelIdentity p_Dl_lgchId
      }}
    },
    {
      ul_LogicalChannelMappings oneLogicalChannel: {
        ul_TransportChannelType rach:NULL,
        logicalChannelIdentity p_Ul_lgchId,
        rlc_SizeList explicitList : { { rlc_SizeIndex 1} },
        mac_LogicalChannelPriority p_MAC_lgch_prtRACH
      },
      dl_LogicalChannelMappingList{{
          dl_TransportChannelType fach: NULL,
          logicalChannelIdentity p_Dl_lgchId
      }}
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_SRB_InfoSetupUM_FACH ( p_RB_Id: RB_Identity; p_Ul_lgchId: LogicalChannelIdentity;  p_MAC_lgch_prtDCH , p_MAC_lgch_prt: MAC_LogicalChannelPriority; p_Dl_lgchId: LogicalChannelIdentity )
$ASN1_TypeId SRB_InformationSetup
$DerivPath 
$ASN1_ConsValue
{
  rb_Identity p_RB_Id,
  rlc_InfoChoice rlc_Info :
  {
    ul_RLC_Mode ul_UM_RLC_Mode:
    {
      transmissionRLC_Discard timerBasedNoExplicit : dt50
    },
    dl_RLC_Mode dl_UM_RLC_Mode: NULL
  },
  rb_MappingInfo
  {
    {
      ul_LogicalChannelMappings oneLogicalChannel: {
        ul_TransportChannelType rach:NULL,
        logicalChannelIdentity p_Ul_lgchId,
        rlc_SizeList explicitList : { { rlc_SizeIndex 1} },
        mac_LogicalChannelPriority p_MAC_lgch_prt
      },
      dl_LogicalChannelMappingList{{
          dl_TransportChannelType fach: NULL,
          logicalChannelIdentity p_Dl_lgchId
      }}
    },
    {
      ul_LogicalChannelMappings oneLogicalChannel: {
        ul_TransportChannelType dch: tsc_UL_DCH5,
        logicalChannelIdentity p_Ul_lgchId,
        rlc_SizeList configured :NULL,
        mac_LogicalChannelPriority p_MAC_lgch_prtDCH
      },
      dl_LogicalChannelMappingList{{
          dl_TransportChannelType dch: tsc_DL_DCH5,
          logicalChannelIdentity p_Dl_lgchId
      }}
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_StartListCS
$ASN1_TypeId STARTList
$DerivPath 
$Comment /* Start list with CS_Domain only */
$ASN1_ConsValue
{ {
    cn_DomainIdentity cs_domain,
    start_Value '00000000000000000000'B
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TFCS_Cmpl0 ( p_PowerOffsetInformation  : PowerOffsetInformation  )
$ASN1_TypeId TFCS
$DerivPath 
$ASN1_ConsValue
normalTFCI_Signalling: complete: {
  ctfcSize ctfc2Bit:{
    {
      ctfc2 0,
      powerOffsetInformation p_PowerOffsetInformation
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TFCS_Cmpl0_1_2_3_4_5_6_7_8_9_Rx
$ASN1_TypeId TFCS
$DerivPath 
$ASN1_ConsValue
normalTFCI_Signalling: complete: {
  ctfcSize ctfc4Bit:{
    {
      ctfc4 0,
      powerOffsetInformation OMIT
    },
    {
      ctfc4 1,
      powerOffsetInformation OMIT
    },
    {
      ctfc4 2,
      powerOffsetInformation OMIT
    },
    {
      ctfc4 3,
      powerOffsetInformation OMIT
    },
    {
      ctfc4 4,
      powerOffsetInformation OMIT
    },
    {
      ctfc4 5,
      powerOffsetInformation OMIT
    },
    {
      ctfc4 6,
      powerOffsetInformation OMIT
    },
    {
      ctfc4 7,
      powerOffsetInformation OMIT
    },
    {
      ctfc4 8,
      powerOffsetInformation OMIT
    },
    {
      ctfc4 9,
      powerOffsetInformation OMIT
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TFCS_Cmpl0_1_2_3_4_5_6_7_8_9_Tx ( p_PowerOffsetInformation  : PowerOffsetInformation )
$ASN1_TypeId TFCS
$DerivPath 
$ASN1_ConsValue
normalTFCI_Signalling: complete: {
  ctfcSize ctfc4Bit:{
    {
      ctfc4 0,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 1,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 2,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 3,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 4,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 5,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 6,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 7,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 8,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 9,
      powerOffsetInformation p_PowerOffsetInformation
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TFCS_Cmpl0_1_2_3_Rx
$ASN1_TypeId TFCS
$DerivPath 
$Comment /* TFCS information without power offset information  - for receiver */
$ASN1_ConsValue
normalTFCI_Signalling: complete: {
  ctfcSize ctfc4Bit:{
    {
      ctfc4 0,
      powerOffsetInformation OMIT
    },
    {
      ctfc4 1,
      powerOffsetInformation OMIT
    },
    {
      ctfc4 2,
      powerOffsetInformation OMIT
    },
    {
      ctfc4 3,
      powerOffsetInformation OMIT
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TFCS_Cmpl0_1_2_3_Tx ( p_PowerOffsetInformation  : PowerOffsetInformation  )
$ASN1_TypeId TFCS
$DerivPath 
$Comment /* TFCS information with power offset information  - for transmitter */
$ASN1_ConsValue
normalTFCI_Signalling: complete: {
  ctfcSize ctfc4Bit:{
    {
      ctfc4 0,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 1,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 2,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 3,
      powerOffsetInformation p_PowerOffsetInformation
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TFCS_Cmpl0_1_Rx
$ASN1_TypeId TFCS
$DerivPath 
$Comment /* TFCS information without power offset information  - for receiver */
$ASN1_ConsValue
normalTFCI_Signalling: complete: {
  ctfcSize ctfc2Bit:{
    {
      ctfc2 0,
      powerOffsetInformation OMIT
    },
    {
      ctfc2 1,
      powerOffsetInformation OMIT
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TFCS_Cmpl0_1_Tx ( p_PowerOffsetInformation  : PowerOffsetInformation  )
$ASN1_TypeId TFCS
$DerivPath 
$Comment /* TFCS information with power offset information  - for transmitter */
$ASN1_ConsValue
normalTFCI_Signalling: complete: {
  ctfcSize ctfc2Bit:{
    {
      ctfc2 0,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc2 1,
      powerOffsetInformation p_PowerOffsetInformation
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TFCS_CmplFACH_Tx ( p_PowerOffsetInformation  : PowerOffsetInformation  )
$ASN1_TypeId TFCS
$DerivPath 
$Comment /* TFCS information with power offset information  - for transmitter */
$ASN1_ConsValue
normalTFCI_Signalling: complete: {
  ctfcSize ctfc4Bit:{
    {
      ctfc4 0,
      powerOffsetInformation c_PowerOffsetInfoComputed },
    {
      ctfc4 1,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 2,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 3,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 4,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 5,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    {
      ctfc4 6,
      powerOffsetInformation c_PowerOffsetInfoComputed
    },
    
    {
      ctfc4 8,
      powerOffsetInformation p_PowerOffsetInformation
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrChConfigTypeDCH_NoSHO
$ASN1_TypeId TrChConfigType
$DerivPath 
$ASN1_ConsValue
dch : normal
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrChInfoBCH1
$ASN1_TypeId TrCHInfo
$DerivPath 
$ASN1_ConsValue
{
  dlconnectedTrCHList {
    { trchid tsc_BCH1,
      transportChannelInfo {
        tti tti20 : {{tb_Size 246,
            numberOfTbSizeList {one : NULL},
            logicalChannelList configured : NULL}},
        semistaticTF_Information {
          channelCodingType convolutional :half,
          rateMatchingAttribute 1,
          crc_Size crc16
        }
      }
  }},
  dlTFCS c_TFCS_Cmpl0 ( c_PowerOffsetInfoBelow64k )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrChInfoDL_13_6_StandAlone
$ASN1_TypeId TrCHInfo
$DerivPath 
$ASN1_ConsValue
{
  dlconnectedTrCHList {
    { trchid tsc_DL_DCH5,
      transportChannelInfo c_DCH_148_TTI_10_TFS
  }},
  dlTFCS c_TFCS_Cmpl0_1_Tx ( c_PowerOffsetInfoBelow64k )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrChInfoDL_336_148_RLC_UM
$ASN1_TypeId TrCHInfo
$DerivPath 
$Comment /* DL Transport channel configuration information for RLC tests using 336 bit transport blocks. 
This information is used within the CMAC_Config_REQ for DCH1 and DCH5 
Reference 3G TS 34.108 clause 6.11.1 and 6.11.3. */
$ASN1_ConsValue
{
  dlconnectedTrCHList {
    {
      trchid tsc_DL_DCH1,
      transportChannelInfo c_DCH_336_TFS_RLC_UM
    },
    {
      trchid tsc_DL_DCH5,
      transportChannelInfo c_DCH_148_TFS_DL
    }
  },
  dlTFCS c_TFCS_Cmpl0_1_2_3_Tx ( c_PowerOffsetInfoHigher64k ) -- sent to SS
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrChInfoPCH_FACH
$ASN1_TypeId TrCHInfo
$DerivPath 
$Comment /* For FDD mode only */
$ASN1_ConsValue
{
  dlconnectedTrCHList {
    { trchid tsc_PCH1,
      transportChannelInfo c_PCH_TFS
    },
    { trchid tsc_FACH1,
      transportChannelInfo c_FACH_TFS
    },
    { trchid tsc_FACH2,
      transportChannelInfo c_FACH_TFS_PS
  }},
  dlTFCS c_TFCS_CmplFACH_Tx ( c_PowerOffsetInfoBelow64k ) -- sent to SS
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrChInfoPCH_FACH_PS
$ASN1_TypeId TrCHInfo
$DerivPath 
$Comment /* For FDD mode only (PS) */
$ASN1_ConsValue
{
  dlconnectedTrCHList {
    { trchid tsc_PCH1,
      transportChannelInfo c_PCH_TFS
    },
    { trchid tsc_FACH1,
      transportChannelInfo c_FACH_TFS
    },
    { trchid tsc_FACH2,
      transportChannelInfo c_FACH_TFS_PS
  }},
  dlTFCS c_TFCS_CmplFACH_Tx ( c_PowerOffsetInfoBelow64k ) -- sent to SS
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrChInfoUL_13_6_StandAlone
$ASN1_TypeId TrCHInfo
$DerivPath 
$ASN1_ConsValue
{
  ulconnectedTrCHList {
    { trchid tsc_UL_DCH5,
      transportChannelInfo c_DCH_148_TTI_10_TFS
  }},
  ulTFCS c_TFCS_Cmpl0_1_Rx -- sent to SS
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrChInfoUL_336_148_RLC_UM
$ASN1_TypeId TrCHInfo
$DerivPath 
$Comment /* UL Transport channel configuration information for RLC tests using 336 bit transport blocks. 
This information is used within the CMAC_Config_REQ for DCH1 and DCH5 
Reference 3G TS 34.108 clause 6.11.1 */
$ASN1_ConsValue
{
  ulconnectedTrCHList {
    {
      trchid tsc_UL_DCH1,
      transportChannelInfo c_DCH_336_TFS_RLC_UM
    },
    {
      trchid tsc_UL_DCH5,
      transportChannelInfo c_DCH_148_TFS_UL
    }
  },
  ulTFCS c_TFCS_Cmpl0_1_2_3_Rx -- sent to SS
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrLogMappingBCH1
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$ASN1_ConsValue
{
  ulconnectedTrCHList OMIT,
  dlconnectedTrCHList {
    {
      trchid tsc_BCH1,
      trCH_LogCHMappingList {{
          logicalChannel_Mapping dl_LogicalChannelMapping: {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType bch,
            logicalChannelIdentity tsc_BCCH1,
            logicalChannelType bCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 1
          },
          rB_Identity tsc_RB_BCCH
      }}
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrLogMappingDL_4DCCH
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$ASN1_ConsValue
{
  ulconnectedTrCHList OMIT,
  dlconnectedTrCHList {
    {
      trchid tsc_DL_DCH5,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DCCH1,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 1
          },
          rB_Identity tsc_RB1
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DCCH2,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 2
          },
          rB_Identity tsc_RB2
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DCCH3,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 3
          },
          rB_Identity tsc_RB3
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DCCH4,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 4
          },
          rB_Identity tsc_RB4
        }
      }
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrLogMappingDL_4DCCH_1DTCH_RLC( p_RB_Identity: SS_RB_Identity )
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$Comment /* DL Logical channel mapping list for RLC tests. The DTCH RAB for RLC testing is mapped to DCH1. The SRBs are mapped to DCH5. 
 
Parameters  
p_RB_Identity: 
The RB Id to be used within the SS. This value can be used by the SS decoder to determine which RLC mode is being simulated. 
 
Expected values: 
  -10 => UM7 
  -11 => UM15 
  -12 => AM7 
  -13 => AM15 */
$ASN1_ConsValue
{
  ulconnectedTrCHList OMIT,
  dlconnectedTrCHList {
    {
      trchid tsc_DL_DCH1,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DTCH1,
            logicalChannelType dTCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 7
          },
          rB_Identity p_RB_Identity
        }
      }
    },
    {
      trchid tsc_DL_DCH5,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DCCH1,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            
            mac_LogicalChannelPriority 1
          },
          rB_Identity tsc_RB1
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DCCH2,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            
            mac_LogicalChannelPriority 2
          },
          rB_Identity tsc_RB2
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DCCH3,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            
            mac_LogicalChannelPriority 3
          },
          rB_Identity tsc_RB3
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType dch,
            logicalChannelIdentity tsc_DL_DCCH4,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            
            mac_LogicalChannelPriority 4
          },
          rB_Identity tsc_RB4
        }
      }
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrLogMappingPCH_FACH_CellDCH
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$Comment /* For FDD mode only. map PCCH to PCH and CCCH and BCCH(for BCCH_FACH)  
To be used for the Cell DCH configuration */
$ASN1_ConsValue
{
  ulconnectedTrCHList OMIT,
  dlconnectedTrCHList {
    {
      trchid tsc_PCH1,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType pch,
            logicalChannelIdentity tsc_PCCH1,
            logicalChannelType pCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 1
          },
          rB_Identity tsc_RB_PCCH
        }
      }
    },
    {
      trchid tsc_FACH1,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_CCCH5,
            logicalChannelType cCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 1
          },
          rB_Identity tsc_RB0
        }
      }
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrLogMappingPCH_FACH_PS
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$Comment /* For FDD mode only (PS). map PCCH to PCH and DCCH1, DCCH2, DCCH3, DCCH4, CCCH, BCCH(for BCCH_FACH) to FACH2, and DTCH to FACH1 */
$ASN1_ConsValue
{
  ulconnectedTrCHList OMIT,
  dlconnectedTrCHList {
    
    {
      trchid tsc_PCH1,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType pch,
            logicalChannelIdentity tsc_PCCH1,
            logicalChannelType pCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 1
          },
          rB_Identity tsc_RB_PCCH
        }
      }
    },
    {
      trchid tsc_FACH1,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_BCCH6,
            logicalChannelType bCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 6
          },
          rB_Identity tsc_RB_BCCH_FACH
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_CCCH5,
            logicalChannelType cCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 1
          },
          rB_Identity tsc_RB0
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_DCCH1,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 1
          },
          rB_Identity tsc_RB1
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_DCCH2,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 2
          },
          rB_Identity tsc_RB2
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_DCCH3,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 3
          },
          rB_Identity tsc_RB3
        },
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_DCCH4,
            logicalChannelType dCCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 4
          },
          rB_Identity tsc_RB4
        }
      }
      },{
      trchid tsc_FACH2,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping dl_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            dl_TransportChannelType fach,
            logicalChannelIdentity tsc_DL_DTCH1,
            logicalChannelType dTCH,
            rlc_SizeList configured : NULL,
            mac_LogicalChannelPriority 8
          },
          rB_Identity tsc_RB20
        }
      }
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrLogMappingRACH_DTCH
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$ASN1_ConsValue
{
  ulconnectedTrCHList {
    {
      trchid tsc_RACH1,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_CCCH5,
            logicalChannelType cCCH
          },
          rB_Identity tsc_RB0
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_DCCH1,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB1
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_DCCH2,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB2
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_DCCH3,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB3
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_DCCH4,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB4
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_DTCH1,
            logicalChannelType dTCH
          },
          rB_Identity tsc_RB20
        }
      }
    }
  },
  dlconnectedTrCHList OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrLogMappingUL_4DCCH
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$ASN1_ConsValue
{
  ulconnectedTrCHList {
    {
      trchid tsc_UL_DCH5,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DCCH1,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB1
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DCCH2,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB2
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DCCH3,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB3
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DCCH4,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB4
        }
      }
    }
  },
  dlconnectedTrCHList OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_TrLogMappingUL_4DCCH_1DTCH_RLC( p_RB_Identity: SS_RB_Identity )
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$Comment /* UL Logical channel mapping list for RLC tests. The DTCH RAB for RLC testing is mapped to DCH1. The SRBs are mapped to DCH5. 
 
Parameters  
p_RB_Identity: 
The RB Id to be used within the SS. This value can be used by the SS decoder to determine which RLC mode is being simulated. 
 
Expected values: 
  -10 => UM7 
  -11 => UM15 
  -12 => AM7 
  -13 => AM15 */
$ASN1_ConsValue
{
  ulconnectedTrCHList {
    {
      trchid tsc_UL_DCH1,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DTCH1,
            logicalChannelType dTCH
          },
          rB_Identity p_RB_Identity
        }
      }
    },
    {
      trchid tsc_UL_DCH5,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DCCH1,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB1
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DCCH2,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB2
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DCCH3,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB3
        },
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType dch,
            logicalChannelIdentity tsc_UL_DCCH4,
            logicalChannelType dCCH
          },
          rB_Identity tsc_RB4
        }
      }
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_UE_IdDefIMSI
$ASN1_TypeId InitialUE_Identity
$DerivPath 
$ASN1_ConsValue
imsi : o_ConvertIMSI(px_IMSI_Def)
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_UE_Info ( p_U_RNTI : U_RNTI ; p_CRNTI : BITSTRING )
$ASN1_TypeId UE_Info
$DerivPath 
$ASN1_ConsValue
{
  u_RNTI p_U_RNTI,
  c_RNTI p_CRNTI
}
$End_ASN1_ConsValue
$Comment /* p_SRNCId: BITSTRING (SIZE (12)) 
p_SRNTI: BITSTRING (SIZE (20)) 
p_CRNTI: BITSTRING (SIZE (16)) */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_UL_AddReconfTransChInfoList7_RLC_UM
$ASN1_TypeId UL_AddReconfTransChInfoList
$DerivPath 
$Comment /* Transport channel information for DCH1 and DCH5 for  UM RLC tests using 7 bit length indicators. 
Reference 3G TS 34.108, clause 6.11.1 */
$ASN1_ConsValue
{{
    ul_TransportChannelType dch,
    transportChannelIdentity tsc_UL_DCH1,
    transportFormatSet dedicatedTransChTFS: c_DCH_336_TFS_RLC_UE_UM
  },
  {
    ul_TransportChannelType dch,
    transportChannelIdentity tsc_UL_DCH5,
    transportFormatSet dedicatedTransChTFS: c_DCH_148_TFS_UE_UL
}}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_UL_AddReconfTransChInfoListDCCH_13_6k
$ASN1_TypeId UL_AddReconfTransChInfoList
$DerivPath 
$ASN1_ConsValue
{{
    ul_TransportChannelType dch,
    transportChannelIdentity tsc_UL_DCH5,
    transportFormatSet dedicatedTransChTFS: c_DCH_148_TTI_10_TFS_UE
}}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_UL_AddReconfTransChInfoListDCCH_3_4k
$ASN1_TypeId UL_AddReconfTransChInfoList
$DerivPath 
$ASN1_ConsValue
{{
    ul_TransportChannelType dch,
    transportChannelIdentity tsc_UL_DCH5,
    transportFormatSet dedicatedTransChTFS: c_DCH_148_TFS_UE_UL
}}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_UL_AddReconfTransChInfoListDCH_PS_64k
$ASN1_TypeId UL_AddReconfTransChInfoList
$DerivPath 
$ASN1_ConsValue
{{
    ul_TransportChannelType dch,
    transportChannelIdentity tsc_UL_DCH1,
    transportFormatSet dedicatedTransChTFS: c_DCH_336_TFS_UE
  },
  {
    ul_TransportChannelType dch,
    transportChannelIdentity tsc_UL_DCH5,
    transportFormatSet dedicatedTransChTFS: c_DCH_148_TFS_UE_UL
}}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_UL_CommTrChInfoDCCH_13_6k
$ASN1_TypeId UL_CommonTransChInfo
$DerivPath 
$ASN1_ConsValue
{
  tfc_Subset OMIT,
  prach_TFCS OMIT,
  modeSpecificInfo fdd:{
    ul_TFCS c_TFCS_Cmpl0_1_Tx ( c_PowerOffsetInfoBelow64k )
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_UL_CommTrChInfoDCH_PS_64k
$ASN1_TypeId UL_CommonTransChInfo
$DerivPath 
$ASN1_ConsValue
{
  tfc_Subset OMIT,
  prach_TFCS OMIT,
  modeSpecificInfo fdd:{
    ul_TFCS c_TFCS_Cmpl0_1_2_3_4_5_6_7_8_9_Tx ( c_PowerOffsetInfoHigher64k )
    
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_UL_CommTrChInfoRLC_8K
$ASN1_TypeId UL_CommonTransChInfo
$DerivPath 
$Comment /* UL_CommonTransChInfo for AM and UM RLC tests using 7 and 15 bit length indicators. 
Reference 3G TS 34.108, clause 6.11.1 - 6.11.4.  
Note that the TFS for DCH1 is limited to 0x336, and 1x366 for RLC testing with 7 bit length indicators. */
$ASN1_ConsValue
{
  tfc_Subset OMIT,
  prach_TFCS OMIT,
  modeSpecificInfo fdd:{
    ul_TFCS c_TFCS_Cmpl0_1_2_3_Tx ( c_PowerOffsetInfoBelow64k )
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_UL_DPCH_13_6_StandAlone ( p_UL_ScramblingCode : UL_ScramblingCode )
$ASN1_TypeId UL_DPCH_Info
$DerivPath 
$Comment /* this DPCH is the same as stand-alone UL:13.6 DL:13.6 kbps SRBs for DCCH. Used for RLC AM and UM mode testing. */
$ASN1_ConsValue
{
  ul_DPCH_PowerControlInfo fdd:{
    dpcch_PowerOffset tsc_DPCCH_PowerOffset,
    pc_Preamble 1,
    sRB_delay 7,
    powerControlAlgorithm algorithm1: tsc_TpcStepSize
  },
  modeSpecificInfo fdd :{
    scramblingCodeType longSC ,
    scramblingCode p_UL_ScramblingCode,
    numberOfDPDCH OMIT,
    spreadingFactor tsc_UL_DPDCH_SF_SRB,
    tfci_Existence TRUE,
    numberOfFBI_Bits OMIT,
    puncturingLimit pl1
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_U_RNTI
$ASN1_TypeId U_RNTI
$DerivPath 
$ASN1_ConsValue
{
  srnc_Identity '000000000001'B,
  s_RNTI '00000000000000000001'B
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId c_U_RNTI_Def
$ASN1_TypeId U_RNTI
$DerivPath 
$Comment /* Default U_RNTI identity */
$ASN1_ConsValue
{
  srnc_Identity px_SRNC_Id,
  s_RNTI px_SRNTI
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_DL_AM_RLC
$ASN1_TypeId DL_AM_RLC_Mode
$DerivPath 
$ASN1_ConsValue
{
  inSequenceDelivery TRUE,
  receivingWindowSize rw128,
  dl_RLC_StatusInfo {
    timerStatusProhibit tsp200,
    --timerEPC OMIT 
    missingPDU_Indicator TRUE,
    timerStatusPeriodic OMIT
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_DL_DPCH_64K_CS ( p_DL_CommonInformation : DL_CommonInformation; p_SecondaryScramblingCode  : SecondaryScramblingCode  )
$ASN1_TypeId DL_DPCHInfo
$DerivPath 
$ASN1_ConsValue
{
  dl_CommonInformation p_DL_CommonInformation,
  dl_DPCH_InfoPerRL fdd : {
    pCPICH_UsageForChannelEst mayBeUsed,
    dpch_FrameOffset (( (tsc_DefaultDPCH_OffsetValue*512 ) MOD 38400) / 256 ),
    -- DPCH-FrameOffset = DefaultDPCH-OffsetValueFDD MOD 38400
    -- Actual value DPCH-FrameOffset = IE value * 256
    -- Actual value DefaultDPCH-OffsetValueFDD = IE value * 512 ,
    dl_ChannelisationCodeList { {secondaryScramblingCode p_SecondaryScramblingCode ,
        sf_AndCodeNumber tsc_DL_DPCH1_ChC_64k_CS
    } },
    tpc_CombinationIndex 0
  },
  powerOffsetOfTFCI_PO1 tsc_DPCH_PowerOffsetTFCI,
  powerOffsetOfTPC_PO2 tsc_DPCH_PowerOffsetTPC,
  powerOffsetOfPILOT_PO3 tsc_DPCH_PowerOffsetPILOT,
  dl_TxPower tsc_DL_TxPower_DPCH,
  dl_TxPowerMax 15,
  dl_TxPowerMin -35
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_DL_DPCH_8K_RLC_7BitLI ( p_DL_CommonInformation : DL_CommonInformation; p_SecondaryScramblingCode  : SecondaryScramblingCode  )
$ASN1_TypeId DL_DPCHInfo
$DerivPath cb_DL_DPCH_64K_CS.
$ASN1_ConsValue
REPLACE dl_DPCH_InfoPerRL.fdd.dl_ChannelisationCodeList.[0].sf_AndCodeNumber BY tsc_DL_DPCH1_ChC_RLC_7_BitLI
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_DL_DPCH_SRB_StandAloneDPCH_Offset ( p_SecondaryScramblingCode   : SecondaryScramblingCode   )
$ASN1_TypeId DL_DPCHInfo
$DerivPath 
$ASN1_ConsValue
{
  dl_CommonInformation cd_DL_CommonInformationDCH_DPCH_Offset ( tsc_DL_DPCH1_SFP_SRB),
  dl_DPCH_InfoPerRL fdd : {
    pCPICH_UsageForChannelEst mayBeUsed,
    dpch_FrameOffset (( (tsc_DefaultDPCH_OffsetValue*512 ) MOD 38400) / 256 ),
    -- DPCH-FrameOffset = DefaultDPCH-OffsetValueFDD MOD 38400
    -- Actual value DPCH-FrameOffset = IE value * 256
    -- Actual value DefaultDPCH-OffsetValueFDD = IE value * 512 ,
    dl_ChannelisationCodeList { { secondaryScramblingCode p_SecondaryScramblingCode ,
        sf_AndCodeNumber tsc_DL_DPCH1_ChC_SRB
    } },
    tpc_CombinationIndex 0
  },
  powerOffsetOfTFCI_PO1 tsc_DPCH_PowerOffsetTFCI,
  powerOffsetOfTPC_PO2 tsc_DPCH_PowerOffsetTPC,
  powerOffsetOfPILOT_PO3 tsc_DPCH_PowerOffsetPILOT,
  dl_TxPower tsc_DL_TxPower_DPCH,
  dl_TxPowerMax 15,
  dl_TxPowerMin -35
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB11_Def ( p_ActiveCellInfo, p_IntraCellInfo2, p_IntraCellInfo3, p_IntraCellInfo4, p_IntraCellInfo5, p_InterCellInfo6, p_InterCellInfo7, p_InterCellInfo8  : CellInfoCfg )
$ASN1_TypeId SysInfoType11
$DerivPath 
$Comment /* Default system information block type 11. To be used by cell A,B,C,G and H: 
- 5 intra cells frequency of the same frequency  
- 3 inter cell frequency of the same frequency. */
$ASN1_ConsValue
{
  sib12indicator TRUE,
  measurementControlSysInfo {
    use_of_HCS hcs_not_used : {
      cellSelectQualityMeasure cpich_RSCP : {
        intraFreqMeasurementSysInfo {
          intraFreqMeasurementID OMIT, -- default value
          intraFreqCellInfoSI_List {
            removedIntraFreqCellList OMIT, -- removedIntraFreqCellList in SIB11 is not used and ignored by the UE
            newIntraFreqCellList {{
                intraFreqCellID p_ActiveCellInfo.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_ActiveCellInfo.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT
                }
              },
              {
                intraFreqCellID p_IntraCellInfo2.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_IntraCellInfo2.priScrmCode },
                    readSFN_Indicator TRUE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                intraFreqCellID p_IntraCellInfo3.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_IntraCellInfo3.priScrmCode },
                    readSFN_Indicator TRUE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                intraFreqCellID p_IntraCellInfo4.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_IntraCellInfo4.priScrmCode },
                    readSFN_Indicator TRUE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                intraFreqCellID p_IntraCellInfo5.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_IntraCellInfo5.priScrmCode },
                    readSFN_Indicator TRUE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
            }}
          },
          intraFreqMeasQuantity {
            filterCoefficient OMIT, -- default value
            modeSpecificInfo fdd : {
              intraFreqMeasQuantity_FDD cpich_RSCP
            }
          },
          reportingInfoForCellDCH {
            intraFreqReportingQuantity {
              activeSetReportingQuantities {
                dummy noReport,
                cellIdentity_reportingIndicator TRUE,
                cellSynchronisationInfoReportingIndicator FALSE,
                modeSpecificInfo fdd : {
                  cpich_Ec_N0_reportingIndicator FALSE,
                  cpich_RSCP_reportingIndicator TRUE,
                  pathloss_reportingIndicator FALSE }
              },
              monitoredSetReportingQuantities {
                dummy noReport,
                cellIdentity_reportingIndicator TRUE,
                cellSynchronisationInfoReportingIndicator TRUE,
                modeSpecificInfo fdd : {
                  cpich_Ec_N0_reportingIndicator FALSE,
                  cpich_RSCP_reportingIndicator TRUE,
                  pathloss_reportingIndicator FALSE }
              }
            },
            measurementReportingMode {
              measurementReportTransferMode acknowledgedModeRLC,
              periodicalOrEventTrigger eventTrigger
            },
            reportCriteria intraFreqReportingCriteria : {
              eventCriteriaList {{
                  event e1a : {
                    triggeringCondition monitoredSetCellsOnly,
                    reportingRange 10, -- Actual value ReportingRange = IE value * 0.5 
                    w 1,
                    reportDeactivationThreshold t2,
                    reportingAmount ra4,
                    reportingInterval ri4
                  },
                  hysteresis 0,
                  timeToTrigger ttt640,
                  reportingCellStatus withinActiveAndOrMonitoredUsedFreq : e3
                },
                {
                  event e1b : {
                    triggeringCondition activeSetCellsOnly,
                    reportingRange 10, -- Actual value ReportingRange = IE value * 0.5 
                    forbiddenAffectCellList OMIT,
                    w 1},
                  hysteresis 0,
                  timeToTrigger ttt640,
                  reportingCellStatus withinActiveAndOrMonitoredUsedFreq : e3
                },
                {
                  event e1c : {
                    replacementActivationThreshold t3,
                    reportingAmount ra4,
                    reportingInterval ri4
                  },
                  hysteresis 0,
                  timeToTrigger ttt640,
                  reportingCellStatus withinActiveAndOrMonitoredUsedFreq : e3
                }
            } }
            
          }
        },
        interFreqMeasurementSysInfo
        {
          interFreqCellInfoSI_List {
            removedInterFreqCellList OMIT, -- removedInterFreqCellList in SIB11 is not used and ignored by the UE
            newInterFreqCellList { {
                interFreqCellID p_InterCellInfo6.cellId,
                frequencyInfo p_InterCellInfo6.frequencyInfo,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo6.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo7.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo7.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo8.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo8.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              }
        } }}
  }}}
  -- nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB11_Freq2 ( p_ActiveCellInfo, p_IntraCellInfo2, p_IntraCellInfo3, p_InterCellInfo4, p_InterCellInfo5, p_InterCellInfo6, p_InterCellInfo7, p_InterCellInfo8  : CellInfoCfg )
$ASN1_TypeId SysInfoType11
$DerivPath 
$Comment /* Default system information block type 11. To be used by cell D,E,F: 
- 3 intra cells frequency of the same frequency  
- 5 inter cell frequency of the same frequency. */
$ASN1_ConsValue
{
  sib12indicator TRUE,
  measurementControlSysInfo {
    use_of_HCS hcs_not_used : {
      cellSelectQualityMeasure cpich_RSCP : {
        intraFreqMeasurementSysInfo {
          intraFreqMeasurementID OMIT, -- default value
          intraFreqCellInfoSI_List {
            removedIntraFreqCellList OMIT, -- removeNoIntraFreqCells in SIB11 is not used and ignored by the UE
            newIntraFreqCellList {{
                intraFreqCellID p_ActiveCellInfo.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_ActiveCellInfo.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT
                }
              },
              {
                intraFreqCellID p_IntraCellInfo2.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_IntraCellInfo2.priScrmCode },
                    readSFN_Indicator TRUE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                intraFreqCellID p_IntraCellInfo3.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_IntraCellInfo3.priScrmCode },
                    readSFN_Indicator TRUE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              }
          } },
          intraFreqMeasQuantity {
            filterCoefficient OMIT, -- default value
            modeSpecificInfo fdd : {
              intraFreqMeasQuantity_FDD cpich_RSCP
            }
          },
          reportingInfoForCellDCH {
            intraFreqReportingQuantity {
              activeSetReportingQuantities {
                dummy noReport,
                cellIdentity_reportingIndicator TRUE,
                cellSynchronisationInfoReportingIndicator FALSE,
                modeSpecificInfo fdd : {
                  cpich_Ec_N0_reportingIndicator FALSE,
                  cpich_RSCP_reportingIndicator TRUE,
                  pathloss_reportingIndicator FALSE }
              },
              monitoredSetReportingQuantities {
                dummy noReport,
                cellIdentity_reportingIndicator TRUE,
                cellSynchronisationInfoReportingIndicator TRUE,
                modeSpecificInfo fdd : {
                  cpich_Ec_N0_reportingIndicator FALSE,
                  cpich_RSCP_reportingIndicator TRUE,
                  pathloss_reportingIndicator FALSE }
              }
            },
            measurementReportingMode {
              measurementReportTransferMode acknowledgedModeRLC,
              periodicalOrEventTrigger eventTrigger
            },
            reportCriteria intraFreqReportingCriteria : {
              eventCriteriaList {{
                  event e1a : {
                    triggeringCondition monitoredSetCellsOnly,
                    reportingRange 10, -- Actual value ReportingRange = IE value * 0.5 
                    w 1,
                    reportDeactivationThreshold t2,
                    reportingAmount ra4,
                    reportingInterval ri4
                  },
                  hysteresis 0,
                  timeToTrigger ttt640,
                  reportingCellStatus withinActiveAndOrMonitoredUsedFreq : e3
                },
                {
                  event e1b : {
                    triggeringCondition activeSetCellsOnly,
                    reportingRange 10, -- Actual value ReportingRange = IE value * 0.5 
                    forbiddenAffectCellList OMIT,
                    w 1},
                  hysteresis 0,
                  timeToTrigger ttt640,
                  reportingCellStatus withinActiveAndOrMonitoredUsedFreq : e3
                },
                {
                  event e1c : {
                    replacementActivationThreshold t3,
                    reportingAmount ra4,
                    reportingInterval ri4
                  },
                  hysteresis 0,
                  timeToTrigger ttt640,
                  reportingCellStatus withinActiveAndOrMonitoredUsedFreq : e3
                }
            } }
            
          }
        },
        interFreqMeasurementSysInfo
        {
          interFreqCellInfoSI_List {
            removedInterFreqCellList OMIT,
            newInterFreqCellList {
              {
                interFreqCellID p_InterCellInfo4.cellId,
                frequencyInfo p_InterCellInfo4.frequencyInfo,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo4.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo5.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo5.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo6.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- dafault value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo6.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo7.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo7.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo8.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo8.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              }
        } }}
  }}}
  --nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB11_Freq3_PLMN1Or2 ( p_ActiveCellInfo, p_IntraCellInfo2, p_IntraCellInfo3, p_InterCellInfo4, p_InterCellInfo5, p_InterCellInfo6, p_InterCellInfo7, p_InterCellInfo8  : CellInfoCfg )
$ASN1_TypeId SysInfoType11
$DerivPath 
$Comment /* Default system information block type 11. To be used by cell D,E,F: 
- 3 intra cells frequency of the same frequency  
- 5 inter cell frequency of the same frequency. */
$ASN1_ConsValue
{
  sib12indicator TRUE,
  measurementControlSysInfo {
    use_of_HCS hcs_not_used : {
      cellSelectQualityMeasure cpich_RSCP : {
        intraFreqMeasurementSysInfo {
          intraFreqMeasurementID OMIT, -- default value
          intraFreqCellInfoSI_List {
            removedIntraFreqCellList OMIT, -- removeNoIntraFreqCells in SIB11 is not used and ignored by the UE
            newIntraFreqCellList {{
                intraFreqCellID p_ActiveCellInfo.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_ActiveCellInfo.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT
                }
              },
              {
                intraFreqCellID p_IntraCellInfo2.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_IntraCellInfo2.priScrmCode },
                    readSFN_Indicator TRUE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                intraFreqCellID p_IntraCellInfo3.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_IntraCellInfo3.priScrmCode },
                    readSFN_Indicator TRUE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              }
          } },
          intraFreqMeasQuantity {
            filterCoefficient OMIT, -- default value
            modeSpecificInfo fdd : {
              intraFreqMeasQuantity_FDD cpich_RSCP
            }
          },
          reportingInfoForCellDCH {
            intraFreqReportingQuantity {
              activeSetReportingQuantities {
                dummy noReport,
                cellIdentity_reportingIndicator TRUE,
                cellSynchronisationInfoReportingIndicator FALSE,
                modeSpecificInfo fdd : {
                  cpich_Ec_N0_reportingIndicator FALSE,
                  cpich_RSCP_reportingIndicator TRUE,
                  pathloss_reportingIndicator FALSE }
              },
              monitoredSetReportingQuantities {
                dummy noReport,
                cellIdentity_reportingIndicator TRUE,
                cellSynchronisationInfoReportingIndicator TRUE,
                modeSpecificInfo fdd : {
                  cpich_Ec_N0_reportingIndicator FALSE,
                  cpich_RSCP_reportingIndicator TRUE,
                  pathloss_reportingIndicator FALSE }
              }
            },
            measurementReportingMode {
              measurementReportTransferMode acknowledgedModeRLC,
              periodicalOrEventTrigger eventTrigger
            },
            reportCriteria intraFreqReportingCriteria : {
              eventCriteriaList {{
                  event e1a : {
                    triggeringCondition monitoredSetCellsOnly,
                    reportingRange 10, -- Actual value ReportingRange = IE value * 0.5 
                    w 1,
                    reportDeactivationThreshold t2,
                    reportingAmount ra4,
                    reportingInterval ri4
                  },
                  hysteresis 0,
                  timeToTrigger ttt640,
                  reportingCellStatus withinActiveAndOrMonitoredUsedFreq : e3
                },
                {
                  event e1b : {
                    triggeringCondition activeSetCellsOnly,
                    reportingRange 10, -- Actual value ReportingRange = IE value * 0.5 
                    forbiddenAffectCellList OMIT,
                    w 1},
                  hysteresis 0,
                  timeToTrigger ttt640,
                  reportingCellStatus withinActiveAndOrMonitoredUsedFreq : e3
                },
                {
                  event e1c : {
                    replacementActivationThreshold t3,
                    reportingAmount ra4,
                    reportingInterval ri4
                  },
                  hysteresis 0,
                  timeToTrigger ttt640,
                  reportingCellStatus withinActiveAndOrMonitoredUsedFreq : e3
                }
            } }
            
          }
        },
        interFreqMeasurementSysInfo
        {
          interFreqCellInfoSI_List {
            removedInterFreqCellList OMIT,
            newInterFreqCellList {
              {
                interFreqCellID p_InterCellInfo4.cellId,
                frequencyInfo p_InterCellInfo4.frequencyInfo,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo4.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo5.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo5.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo6.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- dafault value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo6.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo7.cellId,
                frequencyInfo p_InterCellInfo7.frequencyInfo,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo7.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo8.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo8.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              }
        } }}
  }}}
  -- nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB11_Freq3_PLMN3 ( p_ActiveCellInfo, p_IntraCellInfo2,  p_InterCellInfo3, p_InterCellInfo4, p_InterCellInfo5, p_InterCellInfo6, p_InterCellInfo7, p_InterCellInfo8  : CellInfoCfg )
$ASN1_TypeId SysInfoType11
$DerivPath 
$Comment /* Default system information block type 11. To be used by cell D,E,F: 
- 3 intra cells frequency of the same frequency  
- 5 inter cell frequency of the same frequency. */
$ASN1_ConsValue
{
  sib12indicator TRUE,
  measurementControlSysInfo {
    use_of_HCS hcs_not_used : {
      cellSelectQualityMeasure cpich_RSCP : {
        intraFreqMeasurementSysInfo {
          intraFreqMeasurementID OMIT, -- default value
          intraFreqCellInfoSI_List {
            removedIntraFreqCellList OMIT, -- removeNoIntraFreqCells in SIB11 is not used and ignored by the UE
            newIntraFreqCellList {{
                intraFreqCellID p_ActiveCellInfo.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_ActiveCellInfo.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT
                }
              },
              {
                intraFreqCellID p_IntraCellInfo2.cellId,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_IntraCellInfo2.priScrmCode },
                    readSFN_Indicator TRUE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              }
          } },
          intraFreqMeasQuantity {
            filterCoefficient OMIT, -- default value
            modeSpecificInfo fdd : {
              intraFreqMeasQuantity_FDD cpich_RSCP
            }
          },
          reportingInfoForCellDCH {
            intraFreqReportingQuantity {
              activeSetReportingQuantities {
                dummy noReport,
                cellIdentity_reportingIndicator TRUE,
                cellSynchronisationInfoReportingIndicator FALSE,
                modeSpecificInfo fdd : {
                  cpich_Ec_N0_reportingIndicator FALSE,
                  cpich_RSCP_reportingIndicator TRUE,
                  pathloss_reportingIndicator FALSE }
              },
              monitoredSetReportingQuantities {
                dummy noReport,
                cellIdentity_reportingIndicator TRUE,
                cellSynchronisationInfoReportingIndicator TRUE,
                modeSpecificInfo fdd : {
                  cpich_Ec_N0_reportingIndicator FALSE,
                  cpich_RSCP_reportingIndicator TRUE,
                  pathloss_reportingIndicator FALSE }
              }
            },
            measurementReportingMode {
              measurementReportTransferMode acknowledgedModeRLC,
              periodicalOrEventTrigger eventTrigger
            },
            reportCriteria intraFreqReportingCriteria : {
              eventCriteriaList {{
                  event e1a : {
                    triggeringCondition monitoredSetCellsOnly,
                    reportingRange 10, -- Actual value ReportingRange = IE value * 0.5 
                    w 1,
                    reportDeactivationThreshold t2,
                    reportingAmount ra4,
                    reportingInterval ri4
                  },
                  hysteresis 0,
                  timeToTrigger ttt640,
                  reportingCellStatus withinActiveAndOrMonitoredUsedFreq : e3
                },
                {
                  event e1b : {
                    triggeringCondition activeSetCellsOnly,
                    reportingRange 10, -- Actual value ReportingRange = IE value * 0.5 
                    forbiddenAffectCellList OMIT,
                    w 1},
                  hysteresis 0,
                  timeToTrigger ttt640,
                  reportingCellStatus withinActiveAndOrMonitoredUsedFreq : e3
                },
                {
                  event e1c : {
                    replacementActivationThreshold t3,
                    reportingAmount ra4,
                    reportingInterval ri4
                  },
                  hysteresis 0,
                  timeToTrigger ttt640,
                  reportingCellStatus withinActiveAndOrMonitoredUsedFreq : e3
                }
            } }
            
          }
        },
        interFreqMeasurementSysInfo
        {
          interFreqCellInfoSI_List {
            removedInterFreqCellList OMIT,
            newInterFreqCellList {
              {
                interFreqCellID p_InterCellInfo3.cellId,
                frequencyInfo p_InterCellInfo3.frequencyInfo,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo3.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo4.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo4.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo5.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo5.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo6.cellId,
                frequencyInfo p_InterCellInfo6.frequencyInfo,
                cellInfo {
                  cellIndividualOffset OMIT, -- dafault value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo6.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo7.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo7.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              },
              {
                interFreqCellID p_InterCellInfo8.cellId,
                frequencyInfo OMIT,
                cellInfo {
                  cellIndividualOffset OMIT, -- default value
                  referenceTimeDifferenceToCell OMIT,
                  modeSpecificInfo fdd : {
                    primaryCPICH_Info { primaryScramblingCode p_InterCellInfo8.priScrmCode },
                    readSFN_Indicator FALSE,
                    tx_DiversityIndicator FALSE
                  },
                  cellSelectionReselectionInfo OMIT -- value same as the serving cell
                }
              }
        } }}
  }}}
  -- nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB12_Def
$ASN1_TypeId SysInfoType12
$DerivPath 
$Comment /* Default system information block type 12, used in connected mode. To be used by cell A,B,C,G and H: 
- 5 intra cells frequency of the same frequency  
- 3 inter cell frequency of the same frequency. */
$ASN1_ConsValue
{
  measurementControlSysInfo {
    use_of_HCS hcs_not_used : {
      cellSelectQualityMeasure cpich_RSCP : {
        intraFreqMeasurementSysInfo OMIT,
        interFreqMeasurementSysInfo OMIT
      },
      interRATMeasurementSysInfo OMIT
    }
  }
  -- nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /* Similar to c_SIB11_def except that  "detectedSetReportingQuantities" is not present and "timeToTrigger" = 0 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB12_Freq2
$ASN1_TypeId SysInfoType12
$DerivPath 
$Comment /* Default system information block type 12, used in connected mode. To be used by cell D,E,F: 
- 3 intra cells frequency of the same frequency  
- 5 inter cell frequency of the same frequency. */
$ASN1_ConsValue
{
  measurementControlSysInfo {
    use_of_HCS hcs_not_used : {
      cellSelectQualityMeasure cpich_RSCP : {
        intraFreqMeasurementSysInfo OMIT,
        interFreqMeasurementSysInfo OMIT
      },
      interRATMeasurementSysInfo OMIT
    }
  }
  --nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /* Similar to c_SIB11_def except that  "detectedSetReportingQuantities" is not present and "timeToTrigger" = 0 */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB1_Def ( p_CellInfo : CellInfoCfg )
$ASN1_TypeId SysInfoType1
$DerivPath 
$ASN1_ConsValue
{
  cn_CommonGSM_MAP_NAS_SysInfo p_CellInfo.lac,
  cn_DomainSysInfoList {{cn_DomainIdentity ps_domain,
      cn_Type gsm_MAP: o_OctetstringConcat ( p_CellInfo.rac, p_CellInfo.nmo ),
      cn_DRX_CycleLengthCoeff p_CellInfo.dRX_CycleLength.cN_PS_DRX_CycleLength
    },
    {cn_DomainIdentity cs_domain,
      cn_Type gsm_MAP: o_OctetstringConcat ( p_CellInfo.t3212, o_IntToOct ( p_CellInfo.attFlag,1) ),
      cn_DRX_CycleLengthCoeff p_CellInfo.dRX_CycleLength.cN_CS_DRX_CycleLength
    }
  },
  ue_ConnTimersAndConstants {
    t_301 OMIT,
    n_301 OMIT,
    t_302 OMIT,
    n_302 OMIT,
    t_304 OMIT,
    n_304 OMIT,
    t_305 OMIT,
    t_307 OMIT,
    t_308 OMIT,
    t_309 OMIT,
    t_310 OMIT,
    n_310 OMIT,
    t_311 OMIT,
    t_312 OMIT,
    n_312 OMIT,
    t_313 OMIT,
    n_313 OMIT,
    t_314 OMIT,
    t_315 OMIT,
    n_315 OMIT,
    t_316 OMIT,
    t_317 OMIT
  },
  ue_IdleTimersAndConstants {
    t_300 ms4000,
    n_300 tsc_N300,
    t_312 10,
    n_312 s1
  },
  v3a0NonCriticalExtensions OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB3_DefUTRAN ( p_CellInfoCfg : CellInfoCfg )
$ASN1_TypeId SysInfoType3
$DerivPath 
$Comment /* Default system information block type 3 for UTRAN only */
$ASN1_ConsValue
{
  sib4indicator TRUE,
  cellIdentity INT_TO_BIT ( p_CellInfoCfg.cellId , 28 ) ,
  cellSelectReselectInfo {
    mappingInfo OMIT,
    cellSelectQualityMeasure cpich_RSCP: NULL, 
    modeSpecificInfo fdd : {
      s_Intrasearch 8, -- IE value * 2
      s_Intersearch 8, -- IE value * 2
      s_SearchHCS OMIT,
      rat_List OMIT,
      q_QualMin -24,
      q_RxlevMin -40 -- (IE value * 2) + 1
    },
    q_Hyst_l_S 1, -- (IE value*2) 
    t_Reselection_S 0,
    hcs_ServingCellInformation OMIT,
    maxAllowedUL_TX_Power 21
  },
  cellAccessRestriction {
    cellBarred notBarred : NULL,
    cellReservedForOperatorUse notReserved,
    cellReservationExtension notReserved,
    accessClassBarredList { notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred
    }
  }
  -- nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB3_DefUTRAN_GERAN ( p_CellInfoCfg : CellInfoCfg )
$ASN1_TypeId SysInfoType3
$DerivPath 
$Comment /* Default system information block type 3 for UTRAN/GERAN */
$ASN1_ConsValue
{
  sib4indicator TRUE,
  cellIdentity INT_TO_BIT (p_CellInfoCfg.cellId ,28) ,
  cellSelectReselectInfo {
    mappingInfo OMIT,
    cellSelectQualityMeasure cpich_RSCP : NULL,
    modeSpecificInfo fdd : {
      s_Intrasearch 8, -- IE value * 2
      s_Intersearch 8, -- IE value * 2
      s_SearchHCS OMIT,
      rat_List {{
          rat_Identifier gsm,
          s_SearchRAT -16,
          s_HCS_RAT OMIT,
          s_Limit_SearchRAT 0
      }},
      q_QualMin -24,
      q_RxlevMin -40 -- (IE value * 2) + 1
    },
    q_Hyst_l_S 1, -- (IE value*2) 
    t_Reselection_S 0,
    hcs_ServingCellInformation OMIT,
    maxAllowedUL_TX_Power 21
  },
  cellAccessRestriction {
    cellBarred notBarred : NULL,
    cellReservedForOperatorUse notReserved,
    cellReservationExtension notReserved,
    accessClassBarredList { notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred,
      notBarred
    }
  }
  -- nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB4_DefUTRAN ( p_CellInfoCfg : CellInfoCfg )
$ASN1_TypeId SysInfoType4
$DerivPath 
$Comment /* Default system information block type 4 for UTRAN only, used in connected mode. */
$ASN1_ConsValue
{
  cellIdentity INT_TO_BIT (p_CellInfoCfg.cellId ,28) ,
  cellSelectReselectInfo {
    mappingInfo OMIT,
    cellSelectQualityMeasure cpich_RSCP : NULL,
    modeSpecificInfo fdd : {
      s_Intrasearch 8, -- IE value * 2
      s_Intersearch 8, -- IE value * 2
      s_SearchHCS OMIT,
      rat_List OMIT,
      q_QualMin -24,
      q_RxlevMin -40 -- (IE value * 2) + 1
    },
    q_Hyst_l_S 1, -- (IE value*2) 
    t_Reselection_S 0,
    hcs_ServingCellInformation OMIT,
    maxAllowedUL_TX_Power 21
  },
  cellAccessRestriction {
    cellBarred notBarred : NULL,
    cellReservedForOperatorUse notReserved,
    cellReservationExtension notReserved,
    accessClassBarredList OMIT
  }
  -- nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB4_DefUTRAN_GERAN ( p_CellInfoCfg : CellInfoCfg )
$ASN1_TypeId SysInfoType4
$DerivPath 
$Comment /* Default system information block type 4 for  UTRAN/GERAN, used in connected mode. */
$ASN1_ConsValue
{
  cellIdentity INT_TO_BIT (p_CellInfoCfg.cellId ,28) ,
  cellSelectReselectInfo {
    mappingInfo OMIT,
    cellSelectQualityMeasure cpich_RSCP : NULL,
    modeSpecificInfo fdd : {
      s_Intrasearch 8, -- IE value * 2
      s_Intersearch 8, -- IE value * 2
      s_SearchHCS OMIT,
      rat_List {{
          rat_Identifier gsm,
          s_SearchRAT -16,
          s_HCS_RAT OMIT,
          s_Limit_SearchRAT 0
      }},
      q_QualMin -24,
      q_RxlevMin -40 -- (IE value * 2) + 1
    },
    q_Hyst_l_S 1, -- (IE value*2) 
    t_Reselection_S 0,
    hcs_ServingCellInformation OMIT,
    maxAllowedUL_TX_Power 21
  },
  cellAccessRestriction {
    cellBarred notBarred : NULL,
    cellReservedForOperatorUse notReserved,
    cellReservationExtension notReserved,
    accessClassBarredList OMIT
  }
  -- nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB5_Def ( p_CellInfo : CellInfoCfg )
$ASN1_TypeId SysInfoType5
$DerivPath 
$Comment /* Default system information block type 5 */
$ASN1_ConsValue
{
  sib6indicator TRUE,
  pich_PowerOffset p_CellInfo.powerPICH,
  modeSpecificInfo fdd : {
    aich_PowerOffset p_CellInfo.powerAICH
  },
  primaryCCPCH_Info OMIT,
  prach_SystemInformationList {{
      prach_RACH_Info {
        modeSpecificInfo fdd : {
          availableSignatures tsc_PRACH1_Signatures,
          availableSF tsc_PRACH1_SF,
          preambleScramblingCodeWordNumber tsc_PRACH1_ScrC,
          puncturingLimit pl1,
          availableSubChannelNumbers '111111111111'B
        }
      },
      transportChannelIdentity tsc_RACH1,
      rach_TransportFormatSet commonTransChTFS : c_RACH_TFS_UE,
      rach_TFCS normalTFCI_Signalling : complete : {
        ctfcSize ctfc2Bit : {{
            ctfc2 0,
            powerOffsetInformation { gainFactorInformation computedGainFactors : 0,
              powerOffsetPp_m 0
            }
          },
          { ctfc2 1,
            powerOffsetInformation {
              gainFactorInformation signalledGainFactors : {
                modeSpecificInfo fdd : {
                  gainFactorBetaC 11
                },
                gainFactorBetaD 15,
                referenceTFC_ID 0 },
              powerOffsetPp_m 0
            }
          }
      } },
      prach_Partitioning fdd : {{
          accessServiceClass_FDD OMIT
        },
        {
          accessServiceClass_FDD {
            availableSignatureStartIndex 0,
            availableSignatureEndIndex 7,
            assignedSubChannelNumber '1111'B
          }
        },
        {
          accessServiceClass_FDD OMIT
        },
        {
          accessServiceClass_FDD {
            availableSignatureStartIndex 0,
            availableSignatureEndIndex 7,
            assignedSubChannelNumber '1111'B
          }
        },
        {
          accessServiceClass_FDD OMIT
        },
        {
          accessServiceClass_FDD {
            availableSignatureStartIndex 0,
            availableSignatureEndIndex 7,
            assignedSubChannelNumber '1111'B
          }
        },
        {
          accessServiceClass_FDD OMIT
        },
        {
          accessServiceClass_FDD {
            availableSignatureStartIndex 0,
            availableSignatureEndIndex 7,
            assignedSubChannelNumber '1111'B
          }
      }},
      persistenceScalingFactorList { psf0_9, psf0_9, psf0_9, psf0_9, psf0_9, psf0_9 },
      ac_To_ASC_MappingTable { 6, 5, 4, 3, 2, 1, 0 },
      modeSpecificInfo fdd : {
        primaryCPICH_TX_Power 31,
        constantValue -10,
        prach_PowerOffset {
          powerRampStep 3, -- db
          preambleRetransMax 4
        },
        rach_TransmissionParameters {
          mmax 2,
          nb01Min 3,
          nb01Max 10
        },
        aich_Info {
          channelisationCode256 tsc_AICH1_ChC,
          sttd_Indicator FALSE,
          aich_TransmissionTiming e0
        }
      }
  }},
  sCCPCH_SystemInformationList {{
      secondaryCCPCH_Info {
        modeSpecificInfo fdd : {
          dummy1 mayBeUsed, -- mandatory ie
          secondaryScramblingCode OMIT,
          sttd_Indicator FALSE,
          sf_AndCodeNumber tsc_S_CCPCH1_ChC,
          pilotSymbolExistence FALSE,
          tfci_Existence TRUE,
          positionFixedOrFlexible flexible,
          timingOffset 0
        }
      },
      tfcs normalTFCI_Signalling : complete: {ctfcSize ctfc4Bit : {
          {ctfc4 0 }, {ctfc4 1 }, {ctfc4 2 }, {ctfc4 3 }, {ctfc4 4}, {ctfc4 5 }, {ctfc4 6 }, {ctfc4 8}}},
      fach_PCH_InformationList { {
          transportFormatSet commonTransChTFS : c_PCH_TFS_UE,
          transportChannelIdentity tsc_PCH1, -- PCH
          ctch_Indicator FALSE
        },
        {
          transportFormatSet commonTransChTFS : c_FACH_TFS_UE,
          transportChannelIdentity tsc_FACH1, -- FACH
          ctch_Indicator FALSE
        },
        {
          transportFormatSet commonTransChTFS : c_FACH_TFS_PS_UE,
          transportChannelIdentity tsc_FACH2, -- FACH
          ctch_Indicator FALSE
        }
      },
      pich_Info fdd :{
        channelisationCode256 tsc_PICH1_ChC,
        pi_CountPerFrame e18,
        sttd_Indicator FALSE
      }
  }},
  cbs_DRX_Level1Information OMIT
  -- nonCriticalExtensions OMIT 
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_SIB6_Def ( p_CellInfo : CellInfoCfg )
$ASN1_TypeId SysInfoType6
$DerivPath 
$Comment /* Default system information block type 6, used in connected mode. */
$ASN1_ConsValue
{
  pich_PowerOffset p_CellInfo.powerPICH,
  modeSpecificInfo fdd : {
    aich_PowerOffset p_CellInfo.powerAICH
  },
  primaryCCPCH_Info OMIT,
  prach_SystemInformationList OMIT,
  sCCPCH_SystemInformationList OMIT,
  cbs_DRX_Level1Information OMIT
}
$End_ASN1_ConsValue
$Comment /* Similar to cb_SIB5_Def, except "AC-to-ASC mapping table" not present */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_TrChInfoRACH1
$ASN1_TypeId TrCHInfo
$DerivPath 
$ASN1_ConsValue
{
  ulconnectedTrCHList {
    { trchid tsc_RACH1,
      transportChannelInfo c_RACH_TFS
    }
  },
  ulTFCS c_TFCS_Cmpl0_1_Rx, -- sent to SS
  dlconnectedTrCHList OMIT,
  dlTFCS OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_TrLogMappingRACH2
$ASN1_TypeId TrCH_LogCHMappingList1
$DerivPath 
$ASN1_ConsValue
{
  ulconnectedTrCHList {
    {
      trchid tsc_RACH1,
      trCH_LogCHMappingList {
        {
          logicalChannel_Mapping ul_LogicalChannelMapping : {
            macHeaderManipulation normalMacHeader,
            ul_TransportChannelType rach,
            logicalChannelIdentity tsc_UL_CCCH5,
            logicalChannelType cCCH
          },
          rB_Identity tsc_RB0
        }
      }
    }
  },
  dlconnectedTrCHList OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_UL_AM_RLC
$ASN1_TypeId UL_AM_RLC_Mode
$DerivPath 
$ASN1_ConsValue
{
  transmissionRLC_Discard noDiscard : dat15,
  transmissionWindowSize tw128,
  timerRST tr500,
  max_RST rst4, 
  pollingInfo {
    timerPollProhibit tpp200,
    timerPoll tp200, 
    poll_PDU OMIT,
    poll_SDU sdu1,
    lastTransmissionPDU_Poll TRUE,
    lastRetransmissionPDU_Poll TRUE,
    pollWindow pw99,
    timerPollPeriodic OMIT
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cb_UL_DPCH_Info (p_SprdFct: SpreadingFactor;  p_PuncLimit: PuncturingLimit;  p_UL_ScramblingCode : UL_ScramblingCode )
$ASN1_TypeId UL_DPCH_Info
$DerivPath 
$ASN1_ConsValue
{
  ul_DPCH_PowerControlInfo fdd:{
    dpcch_PowerOffset tsc_DPCCH_PowerOffset,
    pc_Preamble 1,
    sRB_delay 7,
    powerControlAlgorithm algorithm1: tsc_TpcStepSize
  },
  modeSpecificInfo fdd :{
    scramblingCodeType longSC ,
    scramblingCode p_UL_ScramblingCode ,
    numberOfDPDCH OMIT,
    spreadingFactor p_SprdFct,
    tfci_Existence TRUE,
    numberOfFBI_Bits OMIT,
    puncturingLimit p_PuncLimit
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cd_DL_AM_RLC_SRB
$ASN1_TypeId DL_AM_RLC_Mode
$DerivPath cb_DL_AM_RLC.
$ASN1_ConsValue
REPLACE receivingWindowSize BY rw32
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cd_DL_CommonInformationDCH_DPCH_Offset (p_Sf: SF512_AndPilot )
$ASN1_TypeId DL_CommonInformation
$DerivPath c_DL_CommonInformationDCH_DPCH_Offset.
$ASN1_ConsValue
REPLACE dl_DPCH_InfoCommon.modeSpecificInfo.fdd.positionFixedOrFlexible BY fixed,
REPLACE dl_DPCH_InfoCommon.modeSpecificInfo.fdd.tfci_Existence BY FALSE
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cd_UL_AM_RLC_SRB
$ASN1_TypeId UL_AM_RLC_Mode
$DerivPath cb_UL_AM_RLC.
$ASN1_ConsValue
REPLACE transmissionWindowSize BY tw32,
REPLACE max_RST BY rst1
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_CipheringModeCmdOn ( p_CipheringAlgorithm : CipheringAlgorithm )
$ASN1_TypeId CipheringModeCommand
$DerivPath 
$ASN1_ConsValue
startRestart : p_CipheringAlgorithm
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_IntegrityCheckInfo0
$ASN1_TypeId IntegrityCheckInfo
$DerivPath 
$ASN1_ConsValue
{
  messageAuthenticationCode tsc_MessAuthCode,
  rrc_MessageSequenceNumber tsc_MSN
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_IntegrityProtectModify_P(p1,p2,p3,p4,p5 : RRC_MessageSequenceNumber)
$ASN1_TypeId IntegrityProtectionModeInfo
$DerivPath 
$ASN1_ConsValue
{
  integrityProtectionModeCommand modify : {
    dl_IntegrityProtActivationInfo {
      rrc_MessageSequenceNumberList {p1,p2,p3,p4,p5 } -- fixed reasonnable value
    }
  },
  integrityProtectionAlgorithm uia1
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_IntegrityProtectStart ( p_Integrityprotnumber: BITSTRING )
$ASN1_TypeId IntegrityProtectionModeInfo
$DerivPath 
$ASN1_ConsValue
{
  integrityProtectionModeCommand startIntegrityProtection :{
    integrityProtInitNumber p_Integrityprotnumber
  },
  integrityProtectionAlgorithm uia1
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_Null_CipheringModeCommand
$ASN1_TypeId CipheringModeCommand
$DerivPath 
$ASN1_ConsValue
dummy : NULL
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_RB_ActTimeInfoList20 ( p_RLC_SN20 : RLC_SequenceNumber )
$ASN1_TypeId RB_ActivationTimeInfoList
$DerivPath 
$ASN1_ConsValue
{
  c_RB_ActTimeInfo( tsc_RB20, p_RLC_SN20 )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_RB_ActTimeInfoList20_21(  p_RLC_SN20, p_RLC_SN21 : RLC_SequenceNumber )
$ASN1_TypeId RB_ActivationTimeInfoList
$DerivPath 
$ASN1_ConsValue
{
  c_RB_ActTimeInfo( tsc_RB20, p_RLC_SN20 ),
  c_RB_ActTimeInfo( tsc_RB21, p_RLC_SN21 )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_RB_ActTimeInfoList20_22(  p_RLC_SN20, p_RLC_SN22 : RLC_SequenceNumber )
$ASN1_TypeId RB_ActivationTimeInfoList
$DerivPath 
$ASN1_ConsValue
{
  c_RB_ActTimeInfo( tsc_RB20, p_RLC_SN20 ),
  c_RB_ActTimeInfo( tsc_RB22, p_RLC_SN22 )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_RB_ActTimeInfoList20_24(  p_RLC_SN20, p_RLC_SN24 : RLC_SequenceNumber )
$ASN1_TypeId RB_ActivationTimeInfoList
$DerivPath 
$ASN1_ConsValue
{
  c_RB_ActTimeInfo( tsc_RB20, p_RLC_SN20 ),
  c_RB_ActTimeInfo( tsc_RB24, p_RLC_SN24 )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_RB_ActTimeInfoList21( p_RLC_SN21 : RLC_SequenceNumber)
$ASN1_TypeId RB_ActivationTimeInfoList
$DerivPath 
$ASN1_ConsValue
{
  c_RB_ActTimeInfo( tsc_RB21, p_RLC_SN21 )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_RB_ActTimeInfoListSRBs ( p_RLC_SN1, p_RLC_SN2, p_RLC_SN3, p_RLC_SN4 : RLC_SequenceNumber)
$ASN1_TypeId RB_ActivationTimeInfoList
$DerivPath 
$ASN1_ConsValue
{
  c_RB_ActTimeInfo ( tsc_RB1, p_RLC_SN1 ) ,
  c_RB_ActTimeInfo ( tsc_RB2, p_RLC_SN2 ) ,
  c_RB_ActTimeInfo ( tsc_RB3, p_RLC_SN3 ),
  c_RB_ActTimeInfo ( tsc_RB4, p_RLC_SN4 ) }
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_RB_ActTimeInfoListSRBs_20 ( p_RLC_SN1, p_RLC_SN2, p_RLC_SN3, p_RLC_SN4, p_RLC_SN20 : RLC_SequenceNumber)
$ASN1_TypeId RB_ActivationTimeInfoList
$DerivPath 
$ASN1_ConsValue
{
  c_RB_ActTimeInfo ( tsc_RB1, p_RLC_SN1 ) ,
  c_RB_ActTimeInfo ( tsc_RB2, p_RLC_SN2 ) ,
  c_RB_ActTimeInfo ( tsc_RB3, p_RLC_SN3 ),
  c_RB_ActTimeInfo ( tsc_RB4, p_RLC_SN4 ),
  c_RB_ActTimeInfo ( tsc_RB20, p_RLC_SN20 )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_RB_ActTimeInfoListSRBs_20_21 ( p_RLC_SN1, p_RLC_SN2, p_RLC_SN3, p_RLC_SN4, p_RLC_SN20, p_RLC_SN21  : RLC_SequenceNumber)
$ASN1_TypeId RB_ActivationTimeInfoList
$DerivPath 
$ASN1_ConsValue
{
  c_RB_ActTimeInfo ( tsc_RB1, p_RLC_SN1 ) ,
  c_RB_ActTimeInfo ( tsc_RB2, p_RLC_SN2 ) ,
  c_RB_ActTimeInfo ( tsc_RB3, p_RLC_SN3 ),
  c_RB_ActTimeInfo ( tsc_RB4, p_RLC_SN4 ),
  c_RB_ActTimeInfo ( tsc_RB20, p_RLC_SN20 ) ,
  c_RB_ActTimeInfo ( tsc_RB21, p_RLC_SN21 )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_RB_ActTimeInfoListSRBs_20_22 ( p_RLC_SN1, p_RLC_SN2, p_RLC_SN3, p_RLC_SN4, p_RLC_SN20, p_RLC_SN22  : RLC_SequenceNumber)
$ASN1_TypeId RB_ActivationTimeInfoList
$DerivPath 
$ASN1_ConsValue
{
  c_RB_ActTimeInfo ( tsc_RB1, p_RLC_SN1 ) ,
  c_RB_ActTimeInfo ( tsc_RB2, p_RLC_SN2 ) ,
  c_RB_ActTimeInfo ( tsc_RB3, p_RLC_SN3 ),
  c_RB_ActTimeInfo ( tsc_RB4, p_RLC_SN4 ),
  c_RB_ActTimeInfo ( tsc_RB20, p_RLC_SN20 ) ,
  c_RB_ActTimeInfo ( tsc_RB22, p_RLC_SN22 )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_RB_ActTimeInfoListSRBs_21 ( p_RLC_SN1, p_RLC_SN2, p_RLC_SN3, p_RLC_SN4, p_RLC_SN21 : RLC_SequenceNumber)
$ASN1_TypeId RB_ActivationTimeInfoList
$DerivPath 
$ASN1_ConsValue
{
  c_RB_ActTimeInfo ( tsc_RB1, p_RLC_SN1 ) ,
  c_RB_ActTimeInfo ( tsc_RB2, p_RLC_SN2 ) ,
  c_RB_ActTimeInfo ( tsc_RB3, p_RLC_SN3 ),
  c_RB_ActTimeInfo ( tsc_RB4, p_RLC_SN4 ),
  c_RB_ActTimeInfo ( tsc_RB21, p_RLC_SN21 )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_RRC_SecModeCmdCiphInt ( 
p_RRC_Ti : RRC_TransactionIdentifier;  
p_CipheringModeCommand : CipheringModeCommand;  
p_RB_ActivationTimeInfoList  : RB_ActivationTimeInfoList ; 
p_ActTimeDPCH : INTEGER; 
p_cn_domain : CN_DomainIdentity;  
p_integrityMode : IntegrityProtectionModeInfo; 
p_SecurityCapability:BITSTRING; 
p_SystemSpecCap: InterRAT_UE_SecurityCapList )
$ASN1_TypeId SecurityModeCommand
$DerivPath 
$ASN1_ConsValue
r3
:
{
  securityModeCommand_r3
  {
    rrc_TransactionIdentifier p_RRC_Ti,
    securityCapability
    {
      cipheringAlgorithmCap p_SecurityCapability,
      integrityProtectionAlgorithmCap tsc_IntegrProtAlgCap
    },
    cipheringModeInfo
    {
      cipheringModeCommand p_CipheringModeCommand,
      activationTimeForDPCH p_ActTimeDPCH,
      rb_DL_CiphActivationTimeInfo p_RB_ActivationTimeInfoList
    },
    integrityProtectionModeInfo p_integrityMode,
    cn_DomainIdentity p_cn_domain,
    ue_SystemSpecificSecurityCap p_SystemSpecCap 
  },
  laterNonCriticalExtensions OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_RRC_SecModeCmdInt (p_RRC_Ti: RRC_TransactionIdentifier; p_cn_domain: CN_DomainIdentity; p_integrityMode : IntegrityProtectionModeInfo;   p_SecurityCapability:BITSTRING; 
p_SystemSpecCap: InterRAT_UE_SecurityCapList )
$ASN1_TypeId SecurityModeCommand
$DerivPath 
$ASN1_ConsValue
r3
:
{
  securityModeCommand_r3
  {
    rrc_TransactionIdentifier p_RRC_Ti,
    securityCapability
    {
      cipheringAlgorithmCap p_SecurityCapability,
      integrityProtectionAlgorithmCap tsc_IntegrProtAlgCap
    },
    cipheringModeInfo OMIT,
    integrityProtectionModeInfo p_integrityMode,
    cn_DomainIdentity p_cn_domain,
    ue_SystemSpecificSecurityCap p_SystemSpecCap 
  },
  laterNonCriticalExtensions OMIT
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$Begin_ASN1_TypeConstraint
$ConsId cs_UE_SysSpecCap( p_SysSpecCap : BITSTRING)
$ASN1_TypeId InterRAT_UE_SecurityCapList
$DerivPath 
$Comment /*  */
$ASN1_ConsValue
{ gsm :
  {
    gsmSecurityCapability p_SysSpecCap
}}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_TypeConstraint
$End_ASN1_TypeConstraints
$End_TS_TypeConstraints
$ASP_Constraints
$TTCN_ASP_Constraints
$Begin_TTCN_ASP_Constraint
$ConsId car_DataReqRAB(p_RB_Identity : SS_RB_Identity; p_PDU: PDU )
$ASP_Id RLC_TR_TestDataInd
$DerivPath 
$Comment /* This constraint is used to receive a data PDU using the default RAB for RLC 
testing.

Parameters:
p_PDU: The RLC data PDU to be transmitted. */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue tsc_CellDedicated
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_RB_Identity
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId data
$ConsValue p_PDU
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId cas_DataReqRAB(p_RB_Identity : SS_RB_Identity; p_PDU: PDU )
$ASP_Id RLC_TR_TestDataReq
$DerivPath 
$Comment /* This constraint is used to send a data PDU using the default RAB for RLC 
testing.

Parameters:
p_PDU: The RLC data PDU to be transmitted. */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue tsc_CellDedicated
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_RB_Identity
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId data
$ConsValue p_PDU
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId cas_DataReqRB0(p_RB_Identity : SS_RB_Identity; p_PDU: PDU )
$ASP_Id RLC_TR_TestDataReq
$DerivPath 
$Comment /* This constraint is used to send a data PDU using the default RAB for RLC 
testing.

Parameters:
p_PDU: The RLC data PDU to be transmitted. */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue tsc_DefaultCellId
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_RB_Identity
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId data
$ConsValue p_PDU
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId car_DataIndHiPriNAS( p_Rb_Id : SS_RB_Identity; p_PDU:  PDU )
$ASP_Id RLC_TR_TestDataInd
$DerivPath 
$Comment /* This constraint is used to receive a data PDU using the High priority NAS SRB.

Parameters:
p_PDU: The RLC data PDU to be received. */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue tsc_CellDedicated
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_Rb_Id
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId data
$ConsValue p_PDU
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId cas_DataReqHiPriNAS(p_RB_Identity : SS_RB_Identity; p_PDU: PDU )
$ASP_Id RLC_TR_TestDataReq
$DerivPath 
$Comment /* This constraint is used to send a data PDU using the default RAB for RLC 
testing.

Parameters:
p_PDU: The RLC data PDU to be transmitted. */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue tsc_CellDedicated
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_RB_Identity
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId data
$ConsValue p_PDU
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId car_InitDirectTransfer_MAC (p_CellId: INTEGER; p_Rb : SS_RB_Identity; p_Domain : SS_CN_DomainIdentity; p_Pdu : PDU )
$ASP_Id RRC_DataInd
$DerivPath 
$Comment /* The ASP is used to indicate the receipt of the NAS PDU message using acknowledged operation (NAS <- RRC). */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue p_CellId
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_Rb
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId ch
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId sapId
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId cN_Domain
$ConsValue p_Domain
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId start
$ConsValue ?
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId msg
$ConsValue p_Pdu
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId ca_AT_CmdCnf
$ASP_Id AT_CmdCnf
$DerivPath 
$Comment /* The ASP is used get a positive result only for  a requested  command to the UT  (UT ->LT). */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId result
$ConsValue TRUE IF_PRESENT
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId resultString
$ConsValue tsc_AT_ResultOK IF_PRESENT
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId sMS_BlockMode
$ConsValue -
$Comment /* Defined for future development */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId ca_AT_CmdReq ( p_Cmd : IA5String )
$ASP_Id AT_CmdReq
$DerivPath 
$Comment /* The ASP is used to request  a command to the UT  (LT ->UT). */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cmd
$ConsValue p_Cmd
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId sMS_BlockMode
$ConsValue -
$Comment /* Defined for future development */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId ca_DataReq  ( p_CellId : INTEGER; p_Rb : SS_RB_Identity ; p_Pdu : PDU )
$ASP_Id RRC_DataReq
$DerivPath 
$Comment /* The ASP is used to request the transmission of the NAS PDU message using acknowledged operation (NAS -> RRC). */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue p_CellId
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_Rb
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId ch
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId sapId
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId cN_Domain
$ConsValue tsc_SS_CS_Domain
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId msg
$ConsValue p_Pdu
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId ca_MMI_CmdCnf
$ASP_Id MMI_CmdCnf
$DerivPath 
$Comment /* The ASP is used get the result of a requested  MMI command to the UT  (UT ->LT). */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId result
$ConsValue TRUE
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId resultString
$ConsValue *
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId ca_MMI_CmdReq ( p_Cmd : IA5String )
$ASP_Id MMI_CmdReq
$DerivPath 
$Comment /* The ASP is used to request  a MMI command to the UT  (LT ->UT). */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cmd
$ConsValue p_Cmd
$Comment /* command line */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId ca_PS_DataReq  ( p_CellId : INTEGER; p_Rb : SS_RB_Identity ; p_Pdu : PDU )
$ASP_Id RRC_DataReq
$DerivPath 
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue p_CellId
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_Rb
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId ch
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId sapId
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId cN_Domain
$ConsValue tsc_SS_PS_Domain
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId msg
$ConsValue p_Pdu
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId car_InitDirectTransfer (p_CellId: INTEGER; p_Rb : SS_RB_Identity; p_Pdu : PDU )
$ASP_Id RRC_DataInd
$DerivPath 
$Comment /* The ASP is used to indicate the receipt of the NAS PDU message using acknowledged operation (NAS <- RRC). */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue p_CellId
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_Rb
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId ch
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId sapId
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId cN_Domain
$ConsValue tsc_SS_CS_Domain
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId start
$ConsValue ?
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId msg
$ConsValue p_Pdu
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId car_PS_InitDirectTransfer (p_CellId: INTEGER; p_Rb :SS_RB_Identity; p_Pdu : PDU )
$ASP_Id RRC_DataInd
$DerivPath 
$Comment /* The ASP is used to indicate the receipt of the NAS PDU message using acknowledged operation (NAS <- RRC). */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue p_CellId
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_Rb
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId ch
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId sapId
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId cN_Domain
$ConsValue tsc_SS_PS_Domain
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId start
$ConsValue ?
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId msg
$ConsValue p_Pdu
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId car_PS_UplinkDirectTransfer (p_CellId: INTEGER; p_Rb :SS_RB_Identity; p_Pdu : PDU )
$ASP_Id RRC_DataInd
$DerivPath 
$Comment /* The ASP is used to indicate the receipt of the NAS PDU message using acknowledged operation (NAS <- RRC). */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue p_CellId
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_Rb
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId ch
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId sapId
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId cN_Domain
$ConsValue tsc_SS_PS_Domain
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId start
$ConsValue -
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId msg
$ConsValue p_Pdu
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId car_RLC_AM_DataInd( p_CellId: INTEGER; p_SS_RB_Identity: SS_RB_Identity; p_PDU: PDU )
$ASP_Id RLC_AM_TestDataInd
$DerivPath 
$Comment /* This constraint is used to receive a data PDU for RB test cases */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue p_CellId
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_SS_RB_Identity
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId data
$ConsValue p_PDU
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId car_StatusInd (  p_RB_Id: SS_RB_Identity )
$ASP_Id RLC_TR_TestDataInd
$DerivPath 
$Comment /* This constraint is used to receive a STATUS PDU with the given super fields, and using the given RB Id. 
Any padding octets present are ignored. 
 
Parameters: 
p_RB_Id: The identifier for the RB to be used for reception of data. This is expected to be one of the following values, depending on the RLC configuration being tested. 
   tsc_RB_AM_7_RLC, tsc_RB_UM_7_RLC, tsc_RB_AM_15_RLC, tsc_RB_UM_15_RLC 
 
p_SuperFields: The super fields expected to be included in the STATUS PDU. */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue tsc_CellDedicated
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_RB_Id
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId data
$ConsValue cr_StatusAny
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId car_UplinkDirectTransfer (p_CellId: INTEGER; p_Rb : SS_RB_Identity; p_Pdu : PDU )
$ASP_Id RRC_DataInd
$DerivPath 
$Comment /* The ASP is used to indicate the receipt of the NAS PDU message using acknowledged operation (NAS <- RRC). */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue p_CellId
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_Rb
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId ch
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId sapId
$ConsValue -
$Comment /* GERAN only */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId cN_Domain
$ConsValue tsc_SS_CS_Domain
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId start
$ConsValue -
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId msg
$ConsValue p_Pdu
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$Begin_TTCN_ASP_Constraint
$ConsId cas_RLC_AM_DataReq( p_CellId: INTEGER; p_SS_RB_Identity: SS_RB_Identity; p_PDU: PDU )
$ASP_Id RLC_AM_TestDataReq
$DerivPath 
$Comment /* This constraint is used to send a data PDU fro RB test cases. */
$ASP_ParValues
$ASP_ParValue
$ASP_ParId cellId
$ConsValue p_CellId
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId rB_Id
$ConsValue p_SS_RB_Identity
$Comment /*  */
$End_ASP_ParValue
$ASP_ParValue
$ASP_ParId data
$ConsValue p_PDU
$Comment /*  */
$End_ASP_ParValue
$End_ASP_ParValues
$Comment /*  */
$End_TTCN_ASP_Constraint
$End_TTCN_ASP_Constraints
$ASN1_ASP_Constraints
$Begin_ASN1_ASP_Constraint
$ConsId ca_RB_DL_TM_Info(p_CellId: INTEGER; p_RB_Id: INTEGER;  p_PayloadSize: INTEGER; p_LogChMapping : RB_LogCH_Mapping )
$ASP_Id CRLC_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage setup : {
    sS_rlc_Info {
      sS_ul_RLC_Mode OMIT,
      sS_dl_RLC_Mode {
        dl_PayloadSize p_PayloadSize,
        dl_RLCModeInfo ul_TM_RLC_Mode :{
          segmentationIndication FALSE 
        }
    }},
    rB_LogCH_Mapping p_LogChMapping
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RB_AM_Info_RAB_T_PollOmit(p_CellId: INTEGER; p_RB_Id: INTEGER;p_TimerPollProhbt :TimerPollProhibit; p_Timer_poll: TimerPoll; p_PollSDU: Poll_SDU; p_PollWindw: PollWindow; p_LogChMapping : RB_LogCH_Mapping; p_PayLoad : INTEGER)
$ASP_Id CRLC_Config_REQ
$DerivPath 
$Comment /* Used  to setup AM RLC entity */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage setup : {
    sS_rlc_Info { sS_ul_RLC_Mode dl_AM_RLC_Mode :cb_DL_AM_RLC,
      sS_dl_RLC_Mode {
        dl_PayloadSize p_PayLoad,
        dl_RLCModeInfo ul_AM_RLC_Mode : cd_UL_AM_RLC_T_PollOmit
      }
    },
    rB_LogCH_Mapping p_LogChMapping
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_MeasurementControl (
    p_CellId: INTEGER;  
    p_RB_Id: SS_RB_Identity;
    p_PDU: DL_DCCH_Message
)
$ASP_Id RLC_AM_DATA_REQ
$DerivPath 
$Comment /* to send a Measurement Control PDU in AM mode */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  confirmationRequest noConfirmationRequest: NULL,
  aM_message dL_DCCH_Message : p_PDU
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_TFC_ControlAM(
    p_CellId : INTEGER;
    p_RB_Id: INTEGER;
    p_PDU: DL_DCCH_Message
)
$ASP_Id RLC_AM_DATA_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  confirmationRequest noConfirmationRequest: NULL,
  aM_message dL_DCCH_Message : p_PDU
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_AICH_AckModeSet_REQ(p_CellId, p_PhyChId  : INTEGER;  p_Mode : AICH_Mode )
$ASP_Id CPHY_AICH_AckModeSet_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity : p_PhyChId,
  ratType fdd,
  aICH_Mode p_Mode
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_AICH_AckModeSet_CNF(p_CellId, p_PhyChId  : INTEGER)
$ASP_Id CPHY_AICH_AckModeSet_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity : p_PhyChId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_PRACH_Measurement_REQ(p_CellId, p_PhyChId  : INTEGER;  p_MeasMode : PRACH_MeasurementInd)
$ASP_Id CPHY_PRACH_Measurement_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity : p_PhyChId,
  ratType fdd,
  pRACH_MeasurementInd p_MeasMode
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_PRACH_Measurement_CNF(p_CellId, p_PhyChId  : INTEGER)
$ASP_Id CPHY_PRACH_Measurement_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity : p_PhyChId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_PRACH_Measurement_Report_IND(p_CellId, p_PhyChId  : INTEGER;  p_MeasRep : PRACH_MeasurementReport)
$ASP_Id CPHY_PRACH_Measurement_Report_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity : p_PhyChId,
  ratType fdd,
  measurementReport p_MeasRep
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_RB_Reconfigure(
p_CellId: INTEGER; 
p_RB_Id: INTEGER;
p_Pdu: DL_DCCH_Message)
$ASP_Id RLC_AM_DATA_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  confirmationRequest noConfirmationRequest : NULL,
  aM_message dL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_AichInfo( 
p_CellId: INTEGER;  
p_PhyChId: INTEGER;  
p_AICH_Info: AICH_Info;  
p_TxPower: AICH_PowerOffset)
$ASP_Id CPHY_RL_Setup_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  setupMessage {
    physicalChannelInfo aICHInfo : {
      aichinfo p_AICH_Info,
      dl_TxPower p_TxPower
    }
  }
}
$End_ASN1_ConsValue
$Comment /* The following are fixed in this constraint (34.108): 
transmission diversity is off, 
speading factor is set to 256, 
AICH timing scheme is 0 */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_BCH_InfoActNow (p_CellId : INTEGER )
$ASP_Id CPHY_TrCH_Config_REQ
$DerivPath 
$Comment /* For FDD mode only */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: tsc_P_CCPCH,
  ratType fdd,
  trchConfigType nonDch: NULL,
  configMessage {
    
    activationTime activateNow : NULL,
    ulconnectedTrCHList OMIT,
    ulTFCS OMIT,
    dlconnectedTrCHList {{
        trchid tsc_BCH1,
        dl_TransportChannelType bch,
        transportChannelInfo {
          tti tti20 : {{tb_Size 246,
              numberOfTbSizeList {one : NULL},
              logicalChannelList configured : NULL}},
          semistaticTF_Information {
            channelCodingType convolutional :half,
            rateMatchingAttribute 1,
            crc_Size crc16
          }
        }
    }},
    dlTFCS c_TFCS_Cmpl0 ( c_PowerOffsetInfoBelow64k )
  }
}
$End_ASN1_ConsValue
$Comment /* For BCH transport channel the following parameters are fixed by core spec.(25.212 and 25.302): 
TTI = 20 ms; 
TransportBlocks =  1; 
transport block size = 246 bits; 
coding = convolutional; 
coding rate = 1/2; 
CRCsize = 16; 
RateMatching = 1 (this parameter is not relevant to BCH, value can be any number between 1 to hiRM) */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CellCfgCnf(p_CellId : INTEGER)
$ASP_Id CPHY_Cell_Config_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CellCfgReq(p_CellId : INTEGER; p_Tcell: INTEGER; p_FreqInfo : FrequencyInfo; p_PriScmCode : INTEGER; p_DL_TxAttenLevel: INTEGER; p_SfnOffset : INTEGER; p_totalCellPower : CellTxPowerLevel)
$ASP_Id CPHY_Cell_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  tcell p_Tcell,
  sfnOffset p_SfnOffset,
  frequencyInfo p_FreqInfo,
  primaryScramblingCode_SS p_PriScmCode,
  cellTxPowerLevel p_totalCellPower,
  dLTxAttenuationLevel p_DL_TxAttenLevel
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CMAC_CfgCnf (p_CellId: INTEGER; p_PhyChId : INTEGER)
$ASP_Id CMAC_Config_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity : p_PhyChId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CMAC_CfgInfo(p_CellId: INTEGER;  p_PhyChId: INTEGER; p_UEInfo: UE_Info; p_TrCHInfo: TrCHInfo; p_TrCH_LogCHMapping: TrCH_LogCHMappingList1)
$ASP_Id CMAC_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  configMessage setup: {
    activationTime activateNow : NULL,
    uE_Info p_UEInfo,
    trCHInfo p_TrCHInfo,
    trCH_LogCHMapping p_TrCH_LogCHMapping
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CMAC_CipherActCnf(p_CellId: INTEGER; p_PhyChId: INTEGER)
$ASP_Id CMAC_Ciphering_Activate_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CMAC_DL_CipherActReq ( p_CellId: INTEGER; p_PhyChId: INTEGER;  p_CipherMode: CipheringModeCommand; p_ActTimeDPCH: INTEGER;p_IncrDcr : Increment_Mode)
$ASP_Id CMAC_Ciphering_Activate_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  cn_DomainIdentity cs_domain, --the domain is hard coded as no TM RAB in PS domain
  cipheringModeInfo
  {
    cipheringModeCommand p_CipherMode,
    activationTimeForDPCH p_ActTimeDPCH,
    rb_DL_CiphActivationTimeInfo OMIT
  },
  incHFN p_IncrDcr
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CMAC_PagingCfgCnf(p_CellId: INTEGER; p_PhysicalChannelIdentity: PhysicalChannelIdentity 
)
$ASP_Id CMAC_PAGING_Config_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhysicalChannelIdentity
  
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CMAC_PagingCfgReq( 
p_CellId: INTEGER;  
p_PhysicalChannelIdentity: PhysicalChannelIdentity;  
p_RatType: RatType; 
p_Pdu: CmacPagingConfigReq 
)
$ASP_Id CMAC_PAGING_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhysicalChannelIdentity,
  ratType p_RatType,
  configMessage p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CMAC_ReconfigInfo(p_CellId: INTEGER;  p_PhyChId: INTEGER; p_UEInfo: UE_Info; p_TrCHInfo: TrCHInfo; p_TrCH_LogCHMapping: TrCH_LogCHMappingList1; p_ActivationTime : ActivationTime)
$ASP_Id CMAC_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  configMessage reconfigure: {
    activationTime activationCFN : p_ActivationTime,
    uE_Info p_UEInfo,
    trCHInfo p_TrCHInfo,
    trCH_LogCHMapping p_TrCH_LogCHMapping
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CMAC_ReconfigInfoActNow (p_CellId: INTEGER;  p_PhyChId: INTEGER; p_UEInfo: UE_Info; p_TrCHInfo: TrCHInfo; p_TrCH_LogCHMapping: TrCH_LogCHMappingList1)
$ASP_Id CMAC_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  configMessage reconfigure: {
    activationTime activateNow : NULL,
    uE_Info p_UEInfo,
    trCHInfo p_TrCHInfo,
    trCH_LogCHMapping p_TrCH_LogCHMapping
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CMAC_SecurityModeCfgCnf (p_CellId: INTEGER)
$ASP_Id CMAC_SecurityMode_Config_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CMAC_SecurityModeCfgReq (p_CellId: INTEGER; p_Domain : CN_DomainIdentity; p_Hfn: HyperFrameNumber; p_KC: KeyCiphering; p_IK:IntegrityKey; p_GSM_ck : GSM_CipheringKey )
$ASP_Id CMAC_SecurityMode_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  macCipheringInfo
  {
    cn_DomainIdentity p_Domain ,
    startValue p_Hfn,
    cipheringKey p_KC,
    integrityKey p_IK,
    gsmCipheringKey p_GSM_ck
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CMAC_UL_CipherActReq ( p_CellId: INTEGER; p_PhyChId: INTEGER;  p_CipherMode: CipheringModeCommand; p_ActTimeDPCH: INTEGER;p_IncrDcr : Increment_Mode)
$ASP_Id CMAC_Ciphering_Activate_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  cn_DomainIdentity cs_domain, -- domain hard coded as no TM RAB in PS Domain
  cipheringModeInfo
  {
    cipheringModeCommand p_CipherMode,
    activationTimeForDPCH p_ActTimeDPCH,
    rb_DL_CiphActivationTimeInfo OMIT
  },
  incHFN p_IncrDcr
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CPHY_Cell_Release_CNF( 
p_CellId: INTEGER)
$ASP_Id CPHY_Cell_Release_CNF
$DerivPath 
$Comment /* 1. This Primitive with "Soft_Reset" flag ON gives a common known starting point/state of SS for a test case. The SS performs the following whenever it receives this primitive with "Soft_Reset" flag ON:Releases all configured Channels and cells (if any) irrespective of Cell ID list IE. 
2. Releases the associated Memory Buffers (if any). 
3. Cancels all active timers (if any)  
With "Soft_Reset" flag  OFF: 
1. Releases cells listed in IE Cell_ID_List and  associated configured Channels (if any)  
2. Releases the Memory Buffers(if any) associated with Cells listed in IE Cell_ID_List  
3. Cancels all active timers (if any) associated with Cells listed in IE Cell_ID_List. */
$ASN1_ConsValue
{
  soft_Reset FALSE,
  cell_ID_List { p_CellId }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CPHY_Cell_Release_REQ( 
p_CellId: INTEGER)
$ASP_Id CPHY_Cell_Release_REQ
$DerivPath 
$Comment /* 1. This Primitive with "Soft_Reset" flag ON gives a common known starting point/state of SS for a test case. The SS performs the following whenever it receives this primitive with "Soft_Reset" flag ON:Releases all configured Channels and cells (if any) irrespective of Cell ID list IE. 
2. Releases the associated Memory Buffers (if any). 
3. Cancels all active timers (if any)  
With "Soft_Reset" flag  OFF: 
1. Releases cells listed in IE Cell_ID_List and  associated configured Channels (if any)  
2. Releases the Memory Buffers(if any) associated with Cells listed in IE Cell_ID_List  
3. Cancels all active timers (if any) associated with Cells listed in IE Cell_ID_List. */
$ASN1_ConsValue
{
  soft_Reset FALSE,
  cell_ID_List { p_CellId }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CRLC_CfgCnf(p_CellId: INTEGER; p_RB_Id: INTEGER)
$ASP_Id CRLC_Config_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CRLC_CipherActCnf(p_CellId: INTEGER )
$ASP_Id CRLC_Ciphering_Activate_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CRLC_DL_CipherActReq(p_CellId: INTEGER; p_CN_Domain : CN_DomainIdentity; p_RB_Id : INTEGER; p_CipherMode: CipheringModeCommand; p_N: RLC_SequenceNumber ;p_IncMode : RLC_IncMode                                  )
$ASP_Id CRLC_Ciphering_Activate_REQ
$DerivPath 
$Comment /*  */
$ASN1_ConsValue
{
  cellId p_CellId,
  ratType fdd,
  cn_DomainIdentity p_CN_Domain,
  ciphActivationInfo cipheringModeInfo :
  {
    cipheringModeCommand p_CipherMode,
    activationTimeForDPCH OMIT,
    rb_DL_CiphActivationTimeInfo
    {
      c_RB_ActTimeInfo(p_RB_Id, p_N)
    }
  },
  incHFN p_IncMode
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CRLC_DL_IntegrityActivateReq(p_CellId: INTEGER;  p_Domain : CN_DomainIdentity;p_IntegrityProtectionModeInfo : IntegrityProtectionModeInfo )
$ASP_Id CRLC_Integrity_Activate_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  cn_DomainIdentity p_Domain,
  integrityActivationInfo integrityProtectionModeInfo : p_IntegrityProtectionModeInfo
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CRLC_IntegrityActivateCnf(p_CellId: INTEGER)
$ASP_Id CRLC_Integrity_Activate_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CRLC_RB_RelReq ( p_CellId: INTEGER; p_RB_Id: INTEGER )
$ASP_Id CRLC_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage release : NULL
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CRLC_SecurityModeCfgCnf(p_CellId: INTEGER)
$ASP_Id CRLC_SecurityMode_Config_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CRLC_SecurityModeCfgReq(p_CellId: INTEGER; p_Domain : CN_DomainIdentity; p_Hfn: HyperFrameNumber; p_KC: KeyCiphering; p_Ik: IntegrityKey; p_GSM_ck: GSM_CipheringKey)
$ASP_Id CRLC_SecurityMode_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  rlcSecurityInfo
  {
    cn_DomainIdentity p_Domain ,
    startValue p_Hfn,
    cipheringKey p_KC,
    integrityKey p_Ik,
    gsmCipheringKey p_GSM_ck
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CRLC_SetRRC_MSN_CNF (p_CellID :INTEGER ; p_RBID : INTEGER )
$ASP_Id CRLC_SetRRC_MessageSN_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellID,
  routingInfo rB_Identity : p_RBID
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CRLC_UL_CipherActReq ( p_CellId: INTEGER; p_CN_Domain : CN_DomainIdentity; p_RB_ActivationTimeInfoList : RB_ActivationTimeInfoList;p_IncMode : RLC_IncMode                                  )
$ASP_Id CRLC_Ciphering_Activate_REQ
$DerivPath 
$Comment /*  */
$ASN1_ConsValue
{
  cellId p_CellId,
  ratType fdd,
  cn_DomainIdentity p_CN_Domain,
  ciphActivationInfo rb_UL_CipheringActivationTimeInfo : p_RB_ActivationTimeInfoList,
  incHFN p_IncMode
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_CRLC_UL_IntegrityActivateReq ( p_CellId: INTEGER ; p_Domain : CN_DomainIdentity; p_IntegrityProtActivationInfo : IntegrityProtActivationInfoList )
$ASP_Id CRLC_Integrity_Activate_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  cn_DomainIdentity p_Domain ,
  integrityActivationInfo ul_IntegProtActivationInfo : p_IntegrityProtActivationInfo
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_DCH_148_TTI_10_DL_InfoActNow (p_CellId : INTEGER; p_PhyChId : INTEGER)
$ASP_Id CPHY_TrCH_Config_REQ
$DerivPath 
$Comment /* For FDD mode only.  The configuration is defined in TS 34.123-1  cl. 6.10.2.4.1.3 */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  trchConfigType c_TrChConfigTypeDCH_NoSHO,
  configMessage {
    activationTime activateNow : NULL,
    dlconnectedTrCHList {{
        trchid tsc_DL_DCH5,
        dl_TransportChannelType dch,
        transportChannelInfo c_DCH_148_TTI_10_TFS
    }},
    dlTFCS c_TFCS_Cmpl0_1_Tx ( c_PowerOffsetInfoBelow64k )
  }
}
$End_ASN1_ConsValue
$Comment /* For DCH1 transport channel the following parameters are fixed by core spec. 
TTI = 10 ms; 
two transport formats: TransportBlocks = 1, TB size = 148 bits; TansportBlock = 0, Size = 148. rlc_Size = RLC PDU SIZE = 144 bits. 
coding = convolutional; 
coding rate = 1/3; 
CRCsize = 16; 
RateMatching = 192 */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_DCH_148_TTI_10_UL_InfoActNow (p_CellId : INTEGER; p_PhyChId : INTEGER)
$ASP_Id CPHY_TrCH_Config_REQ
$DerivPath 
$Comment /* For FDD mode only.  The configuration is defined in TS 34.123-1  cl. 6.10.2.4.1.3 */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  trchConfigType c_TrChConfigTypeDCH_NoSHO,
  configMessage {
    activationTime activateNow : NULL,
    ulconnectedTrCHList {{
        trchid tsc_UL_DCH5,
        ul_TransportChannelType dch,
        transportChannelInfo c_DCH_148_TTI_10_TFS
    }},
    ulTFCS c_TFCS_Cmpl0_1_Rx
  }
}
$End_ASN1_ConsValue
$Comment /* For DCH1 transport channel the following parameters are fixed by core spec.: 
TTI = 10 ms; 
two transport formats: TransportBlocks = 1, TB size = 148 bits; TansportBlock = 0, Size = 148. rlc_Size = RLC PDU Size = 144 bits. 
coding = convolutional; 
coding rate = 1/3; 
CRCsize = 16; 
RateMatching = 192 */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_DL_CRLC_SetRRC_MSN_REQ (p_CellID :INTEGER ; p_RBID : INTEGER; p_DL_MSN : RRC_SequenceNumber )
$ASP_Id CRLC_SetRRC_MessageSN_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellID,
  routingInfo rB_Identity : p_RBID,
  count_I_LSB_UL OMIT,
  count_I_LSB_DL p_DL_MSN
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_DL_DPCH_Info(p_CellId: INTEGER; p_PhyChId: INTEGER;  p_DL_DPCHInfo: DL_DPCHInfo)
$ASP_Id CPHY_RL_Setup_REQ
$DerivPath 
$Comment /* To setup down link physical channel DPCH. */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  setupMessage {
    physicalChannelInfo dPCHInfo : {
      dl_DPCHInfo p_DL_DPCHInfo
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_DL_DPCH_ModifyInfo(p_CellId: INTEGER; p_PhyChId: INTEGER;  p_DL_DPCHInfo: DL_DPCHInfo; p_ActivationTime : ActivationTime)
$ASP_Id CPHY_RL_Modify_REQ
$DerivPath 
$Comment /* To modify down link physical channel DPCH. */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  modifyMessage {
    activationTime activationCFN : p_ActivationTime,
    physicalChannelInfo dPCHInfo : {
      dl_DPCHInfo p_DL_DPCHInfo
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_OutOfSyncInd ( p_PhysicalChannelIdentity : PhysicalChannelIdentity )
$ASP_Id CPHY_Out_of_Sync_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId ?,
  routingInfo physicalChannelIdentity: p_PhysicalChannelIdentity
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_pCCPCH_Info(p_CellId: INTEGER;  p_TxPower : DL_TxPower)
$ASP_Id CPHY_RL_Setup_REQ
$DerivPath 
$Comment /* For FDD mode only */
$ASN1_ConsValue
{ cellId p_CellId,
  routingInfo physicalChannelIdentity: tsc_P_CCPCH,
  ratType fdd,
  setupMessage {
    physicalChannelInfo primaryCCPCHInfo : {
      sttd_Indicator FALSE,
      dl_TxPower p_TxPower
    }
  }
}
$End_ASN1_ConsValue
$Comment /* PhysycalChannelIdentity for p-CCPCH is fixed as tsc_pCCPCH; */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_PCH_2_FACH_InfoActNow ( p_CellId : INTEGER; p_PhyChId : INTEGER )
$ASP_Id CPHY_TrCH_Config_REQ
$DerivPath 
$Comment /* For FDD mode only (PS) */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  trchConfigType nonDch: NULL,
  configMessage {
    activationTime activateNow : NULL,
    ulconnectedTrCHList OMIT,
    ulTFCS OMIT,
    dlconnectedTrCHList {
      { trchid tsc_PCH1,
        dl_TransportChannelType pch,
        transportChannelInfo c_PCH_TFS},
      { trchid tsc_FACH1,
        dl_TransportChannelType fach,
        transportChannelInfo c_FACH_TFS},
      { trchid tsc_FACH2,
        dl_TransportChannelType fach,
        transportChannelInfo c_FACH_TFS_PS} },
    dlTFCS c_TFCS_CmplFACH_Tx ( c_PowerOffsetInfoBelow64k )
  }
}
$End_ASN1_ConsValue
$Comment /* For PCH transport channel the following parameters are fixed by core spec.(34.108  cl. 6.10.2.4.3): 
TTI = 10 ms; 
two transport formats: TransportBlocks = 0, TB size = 240 bits; and TransportBlocks = 1, TB size = 240 bits; 
coding = convolutional; 
coding rate = 1/2; 
CRCsize = 16; 
RateMatching = 210 
For FACH1 transport channel the following parameters are fixed by core spec.(34.108  cl. 6.10.2.4.3.2): 
TTI = 10 ms; 
two transport formats: TransportBlocks = 0, TB size = 360 bits; TransportBlocks = 1, TB size = 360 bits; 
coding = turbo; 
CRCsize = 16; 
RateMatching = 110 
For FACH2 transport channel the following parameters are fixed by core spec.(34.108  cl. 6.10.2.4.3): 
TTI = 10 ms; 
three transport formats: TransportBlocks = 0, TB size = 168 bits; TransportBlocks = 1, TB size = 168 bits;and TransportBlocks = 2, TB size = 168 bits 
coding = convolutional; 
coding rate = 1/2; 
CRCsize = 16; 
RateMatching = 210 */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_pCPICH_Info(p_CellId: INTEGER; p_TxPower: DL_TxPower_PCPICH)
$ASP_Id CPHY_RL_Setup_REQ
$DerivPath 
$Comment /* For FDD mode only */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: tsc_P_CPICH,
  ratType fdd,
  setupMessage {
    physicalChannelInfo primaryCPICHInfo:{
      dl_TxPower_PCPICH p_TxPower,
      txdiversityIndicator FALSE
    }
  }
}
$End_ASN1_ConsValue
$Comment /* PhysycalChannelIdentity for p-CPICH is fixed as tsc_pCPICH; */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_PHY_RelCnf ( p_CellId : INTEGER; p_PhyChId: INTEGER )
$ASP_Id CPHY_TrCH_Release_CNF
$DerivPath 
$Comment /* To confirm to release tthe Radio Link */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_PHY_RelReqDCH_NoSHO ( p_CellId : INTEGER; p_PhyChId: INTEGER )
$ASP_Id CPHY_TrCH_Release_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  trchConfigType dch : normal
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_PHY_RelReqNonDch ( p_CellId : INTEGER; p_PhyChId: INTEGER )
$ASP_Id CPHY_TrCH_Release_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  trchConfigType nonDch: NULL
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_PICH_Info(p_CellId: INTEGER; p_PICH_Info: PICH_Info; p_TxPower : PICH_PowerOffset;p_SCCPCH_Ass: INTEGER)
$ASP_Id CPHY_RL_Setup_REQ
$DerivPath 
$Comment /* For FDD mode only */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity : tsc_PICH1,
  ratType fdd,
  setupMessage {
    physicalChannelInfo pICHInfo : {
      pichinfo p_PICH_Info,
      dl_TxPower p_TxPower,
      sccpchId_associated p_SCCPCH_Ass
    }
  }
}
$End_ASN1_ConsValue
$Comment /* Value of PI per frame is fixed to 18 (34.108) 
Value of sndScramCode can be 2 (34.108) */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_PRACH_Info( 
p_CellId: INTEGER;  
p_PhyChId: INTEGER;  
p_Signatures:AvailableSignatures;  
p_PreScramCodeWord: PreambleScramblingCodeWordNumber; 
p_PuncLimit: PuncturingLimit;  
p_SF_PRACH: SF_PRACH;  
p_SubChNum: AvailableSubChannelNumbers 
)
$ASP_Id CPHY_RL_Setup_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd ,
  setupMessage {
    physicalChannelInfo pRACHInfo :{
      fdd_tdd fdd : {
        preambleSignature p_Signatures,
        spreadingFactorForDataPart p_SF_PRACH,
        preambleScramblingCode p_PreScramCodeWord,
        puncturingLimit p_PuncLimit,
        accessSlot p_SubChNum
        
      }
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_pSCH_Info(p_CellId: INTEGER; p_TxPower : DL_TxPower)
$ASP_Id CPHY_RL_Setup_REQ
$DerivPath 
$Comment /* For FDD mode only */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: tsc_P_SCH,
  ratType fdd,
  setupMessage {
    physicalChannelInfo primarySCHInfo : {
      tstdIndicator FALSE,
      dl_TxPower p_TxPower
    }
  }
}
$End_ASN1_ConsValue
$Comment /* PhysycalChannelIdentity for p-SCH is fixed as tsc_pSCH; */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RB_AM_Info_RAB(p_CellId: INTEGER; p_RB_Id: INTEGER;p_TimerPollProhbt :TimerPollProhibit; p_Timer_poll: TimerPoll; p_PollSDU: Poll_SDU; p_PollWindw: PollWindow; p_LogChMapping : RB_LogCH_Mapping; p_PayLoad : INTEGER)
$ASP_Id CRLC_Config_REQ
$DerivPath 
$Comment /* Used  to setup AM RLC entity */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage setup : {
    sS_rlc_Info { sS_ul_RLC_Mode dl_AM_RLC_Mode :cb_DL_AM_RLC,
      sS_dl_RLC_Mode {
        dl_PayloadSize p_PayLoad,
        dl_RLCModeInfo ul_AM_RLC_Mode : cb_UL_AM_RLC
      }
    },
    rB_LogCH_Mapping p_LogChMapping
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RB_AM_Info_SRB(p_CellId: INTEGER; p_RB_Id: INTEGER;p_TimerPollProhbt :TimerPollProhibit; p_Timer_poll: TimerPoll; p_PollSDU: Poll_SDU; p_PollWindw: PollWindow; p_LogChMapping : RB_LogCH_Mapping; p_PayLoad : INTEGER)
$ASP_Id CRLC_Config_REQ
$DerivPath 
$Comment /* Used  to setup AM RLC entity */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage setup : {
    sS_rlc_Info { sS_ul_RLC_Mode dl_AM_RLC_Mode :cd_DL_AM_RLC_SRB,
      sS_dl_RLC_Mode {
        dl_PayloadSize p_PayLoad,
        dl_RLCModeInfo ul_AM_RLC_Mode : cd_UL_AM_RLC_SRB
      }
    },
    rB_LogCH_Mapping p_LogChMapping
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RB_BCCH_Info(p_CellId: INTEGER; p_RB_Id: INTEGER; p_LogChMapping : RB_LogCH_Mapping)
$ASP_Id CRLC_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage setup : {
    sS_rlc_Info { sS_dl_RLC_Mode {
        dl_PayloadSize 246,
        dl_RLCModeInfo ul_TM_RLC_Mode :{
          segmentationIndication FALSE
        }
      }
    },
    rB_LogCH_Mapping p_LogChMapping
  }
}
$End_ASN1_ConsValue
$Comment /* dl_PayloadSize = TB_Size */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RB_PCCH_Info(p_CellId: INTEGER; p_RB_Id: INTEGER; p_LogChMapping : RB_LogCH_Mapping)
$ASP_Id CRLC_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage setup : {
    sS_rlc_Info { sS_dl_RLC_Mode {
        dl_PayloadSize 240,
        dl_RLCModeInfo ul_TM_RLC_Mode :{
          segmentationIndication FALSE
        }
      }
    },
    rB_LogCH_Mapping p_LogChMapping
  }
}
$End_ASN1_ConsValue
$Comment /* dl_PayloadSize = TB_Sze */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RB_TM_DL_InfoNoSeg(p_CellId: INTEGER; p_RB_Id: INTEGER;  p_PayloadSize: INTEGER; p_LogChMapping : RB_LogCH_Mapping )
$ASP_Id CRLC_Config_REQ
$DerivPath 
$Comment /*  */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage setup : {
    sS_rlc_Info { sS_dl_RLC_Mode {
        dl_PayloadSize p_PayloadSize,
        dl_RLCModeInfo ul_TM_RLC_Mode :{
          segmentationIndication FALSE
        }
      }
    },
    rB_LogCH_Mapping p_LogChMapping
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RB_TM_Info(p_CellId: INTEGER; p_RB_Id: INTEGER;  p_PayloadSize: INTEGER; p_LogChMapping : RB_LogCH_Mapping )
$ASP_Id CRLC_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage setup : {
    sS_rlc_Info { sS_ul_RLC_Mode dl_TM_RLC_Mode :{
        segmentationIndication FALSE 
      },
      sS_dl_RLC_Mode {
        dl_PayloadSize p_PayloadSize,
        dl_RLCModeInfo ul_TM_RLC_Mode :{
          segmentationIndication FALSE 
        }
    }},
    rB_LogCH_Mapping p_LogChMapping
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RB_TM_UL_Info(p_CellId: INTEGER; p_RB_Id: INTEGER;p_PayloadSize: INTEGER;  p_LogChMapping : RB_LogCH_Mapping)
$ASP_Id CRLC_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage setup : {
    sS_rlc_Info { sS_ul_RLC_Mode dl_TM_RLC_Mode :{
        segmentationIndication FALSE 
      } ,
      sS_dl_RLC_Mode {
        dl_PayloadSize p_PayloadSize,
        dl_RLCModeInfo ul_TM_RLC_Mode :{
          segmentationIndication FALSE 
        }
      }
    },
    rB_LogCH_Mapping p_LogChMapping
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RB_UM_DL_Info(p_CellId: INTEGER; p_RB_Id: INTEGER; p_LogChMapping : RB_LogCH_Mapping)
$ASP_Id CRLC_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage setup : {
    sS_rlc_Info { sS_dl_RLC_Mode {
        dl_PayloadSize 152,
        dl_RLCModeInfo ul_UM_RLC_Mode : {
          transmissionRLC_Discard timerBasedNoExplicit : dt100
        }
      }
    },
    rB_LogCH_Mapping p_LogChMapping
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RB_UM_Info(p_CellId: INTEGER; p_RB_Id: INTEGER; p_LogChMapping : RB_LogCH_Mapping)
$ASP_Id CRLC_Config_REQ
$DerivPath 
$Comment /* Used  to setup UM RLC entity */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage setup : {
    sS_rlc_Info { sS_ul_RLC_Mode dl_UM_RLC_Mode :NULL,
      sS_dl_RLC_Mode{
        dl_PayloadSize 136,
        dl_RLCModeInfo ul_UM_RLC_Mode : {
          transmissionRLC_Discard timerBasedNoExplicit : dt100
        }
      }
    },
    rB_LogCH_Mapping p_LogChMapping
  }
}
$End_ASN1_ConsValue
$Comment /* dl_PayloadSize = TB_Size - 12 = 136 */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RB_UM_ReconfInfo (p_CellId: INTEGER; p_RB_Id: INTEGER; p_LogChMapping : RB_LogCH_Mapping)
$ASP_Id CRLC_Config_REQ
$DerivPath 
$Comment /* Used  to setup UM RLC entity */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  ratType fdd,
  configMessage reconfigure : {
    sS_rlc_Info { sS_ul_RLC_Mode dl_UM_RLC_Mode :NULL,
      sS_dl_RLC_Mode{
        dl_PayloadSize 136,
        dl_RLCModeInfo ul_UM_RLC_Mode : {
          transmissionRLC_Discard timerBasedNoExplicit : dt100
        }
      }
    },
    rB_LogCH_Mapping p_LogChMapping
  }
}
$End_ASN1_ConsValue
$Comment /* dl_PayloadSize = TB_Size - 12 = 136 */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RL_ModifyCnf( 
p_CellId : INTEGER;  
p_PhyChId: INTEGER 
)
$ASP_Id CPHY_RL_Modify_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity : p_PhyChId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RL_RelCnf (p_CellId : INTEGER; p_PhyCH : PhysicalChannelIdentity)
$ASP_Id CPHY_RL_Release_CNF
$DerivPath 
$Comment /* To  confirm that a specified physical channel has been released */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity : p_PhyCH
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RL_RelReq(p_CellId : INTEGER; p_PhyCH : PhysicalChannelIdentity)
$ASP_Id CPHY_RL_Release_REQ
$DerivPath 
$Comment /* To release the specified physical channel. */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity : p_PhyCH
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_RL_SetupCnf( 
p_CellId : INTEGER;  
p_PhyChId: INTEGER 
)
$ASP_Id CPHY_RL_Setup_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity : p_PhyChId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_sCCPCH_Info ( p_CellId: INTEGER; p_PhyChId: INTEGER; p_SndScramCode : INTEGER; p_ChannelizationCode: SF256_AndCodeNumber;  
p_SlotFormat: SCCPCHSlotFormat;  
p_TxPower : DL_TxPower;  
p_Timing: INTEGER )
$ASP_Id CPHY_RL_Setup_REQ
$DerivPath 
$Comment /* For FDD mode only, */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  setupMessage {
    physicalChannelInfo secondaryCCPCHInfo : {
      scramblingCode p_SndScramCode,
      dl_ChannelizationCode p_ChannelizationCode,
      sCCPCHSlotFormat p_SlotFormat,
      timingOffset p_Timing,
      positionFixedOrFlexible flexible,
      sttd_Indicator FALSE,
      dl_TxPower p_TxPower,
      powerOffsetOfTFCI_PO1 tsc_sCCPCH_PowerOffsetTFCI,
      powerOffsetOfPILOT_PO3 tsc_sCCPCH_PowerOffsetPILOT
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_SchedulLater(p_CellId: INTEGER;p_REP : INTEGER; p_POS : INTEGER; p_Timing : BCCH_ModificationTime)
$ASP_Id CMAC_SYSINFO_Config_REQ
$DerivPath 
$Comment /* scheduling information for system information change at the frame = p_Timing. */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : tsc_RB_BCCH,
  ratType fdd,
  configMessage {
    sg_REP p_REP,
    sg_POS p_POS,
    bcch_ModificationTime p_Timing
  }
}
$End_ASN1_ConsValue
$Comment /* ?? for MIB */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_SchedulNow(p_CellId: INTEGER; p_REP : INTEGER; p_POS : INTEGER )
$ASP_Id CMAC_SYSINFO_Config_REQ
$DerivPath 
$Comment /* scheduling information for immediately change */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : tsc_RB_BCCH,
  ratType fdd,
  configMessage {
    sg_REP p_REP,
    sg_POS p_POS,
    bcch_ModificationTime OMIT
  }
}
$End_ASN1_ConsValue
$Comment /* ?? for MIB */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_sSCH_Info(p_CellId: INTEGER; p_TxPower : DL_TxPower)
$ASP_Id CPHY_RL_Setup_REQ
$DerivPath 
$Comment /* For FDD mode only */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: tsc_S_SCH,
  ratType fdd,
  setupMessage {
    physicalChannelInfo secondarySCHInfo : {
      tstdIndicator FALSE,
      dl_TxPower p_TxPower
    }
  }
}
$End_ASN1_ConsValue
$Comment /* PhysycalChannelIdentity for s-SCH is fixed as tsc_sSCH; */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_SyncInd  ( p_PhysicalChannelIdentity : PhysicalChannelIdentity )
$ASP_Id CPHY_Sync_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId ?,
  routingInfo physicalChannelIdentity: p_PhysicalChannelIdentity
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_SysInfoCfgCnf(p_CellId: INTEGER; p_RB_Identity: SS_RB_Identity)
$ASP_Id CMAC_SYSINFO_Config_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : p_RB_Identity
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_TR_DataReq(p_CellId : INTEGER; p_RB : SS_RB_Identity ; p_Message : BCCH_BCH_Message)
$ASP_Id RLC_TR_DATA_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : p_RB ,
  tM_message bCCH_BCH_Message : p_Message
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_TrChCfgCnf(p_CellId: INTEGER; p_PhyChId: INTEGER)
$ASP_Id CPHY_TrCH_Config_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_TrChCfgInfo(p_CellId: INTEGER; p_PhyChId: INTEGER; p_Type : TrChConfigType;p_TrChConfig: CphyTrchConfigReq)
$ASP_Id CPHY_TrCH_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  trchConfigType p_Type,
  configMessage p_TrChConfig
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_UL_DPCH_Info(p_CellId: INTEGER; p_PhyChId: INTEGER; p_UL_DPCHInfo: UL_DPCH_Info)
$ASP_Id CPHY_RL_Setup_REQ
$DerivPath 
$Comment /* To setup uplink physical channel DPCH. */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  setupMessage {
    physicalChannelInfo dPCHInfo : {
      ul_DPCHInfo p_UL_DPCHInfo
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId ca_UL_DPCH_ModifyInfo(p_CellId: INTEGER; p_PhyChId: INTEGER; p_UL_DPCHInfo: UL_DPCH_Info; p_ActivationTime : ActivationTime)
$ASP_Id CPHY_RL_Modify_REQ
$DerivPath 
$Comment /* To setup uplink physical channel DPDCH. */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  modifyMessage {
    activationTime activationCFN : p_ActivationTime,
    physicalChannelInfo dPCHInfo : {
      ul_DPCHInfo p_UL_DPCHInfo
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cab_RACH_InfoActNow (p_CellId : INTEGER; p_PhyChId : INTEGER)
$ASP_Id CPHY_TrCH_Config_REQ
$DerivPath 
$Comment /* For FDD mode only */
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  trchConfigType nonDch: NULL,
  configMessage {
    activationTime activateNow : NULL,
    ulconnectedTrCHList {{
        trchid tsc_RACH1,
        ul_TransportChannelType rach,
        transportChannelInfo c_RACH_TFS
    }},
    ulTFCS c_TFCS_Cmpl0_1_Rx,
    dlconnectedTrCHList OMIT,
    dlTFCS OMIT
  }
}
$End_ASN1_ConsValue
$Comment /* For RACH transport channel the following parameters are fixed by core spec.(34.108  cl. 6.10.2.4.4): 
TTI = 20 ms; 
two transport format: TransportBlocks = 1, TB size = 168 bits and TransportBlocks = 1, TB size = 360 bits; 
coding = convolutional; 
coding rate = 1/2; 
CRCsize = 16; 
RateMatching = 1 */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cad_RB_UM_ReconfInfo(p_CellId: INTEGER; p_RB_Id: INTEGER; p_LogChMapping : RB_LogCH_Mapping)
$ASP_Id CRLC_Config_REQ
$DerivPath ca_RB_UM_ReconfInfo.
$Comment /* Used  to setup UM RLC entity for 120 RLC size */
$ASN1_ConsValue
REPLACE configMessage.reconfigure.sS_rlc_Info.sS_dl_RLC_Mode.dl_PayloadSize BY 120
$End_ASN1_ConsValue
$Comment /* dl_PayloadSize = TB_Size - 12 = 136 -16 ( U-RNTI -C-RNTI = 32-16 =16) ==>120 */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_AM_DataCnf( 
 p_CellId: INTEGER; 
 p_RB : INTEGER 
)
$ASP_Id RLC_AM_DATA_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : p_RB ,
  mui ?
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_AM_DataMuiCnf( 
 p_CellId: INTEGER; 
 p_RB : INTEGER; 
 p_Mui : Mui 
)
$ASP_Id RLC_AM_DATA_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : p_RB ,
  mui p_Mui
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_CRLC_IntegrityFail
$ASP_Id CRLC_Integrity_Failure_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId ?,
  routingInfo ?,
  failureCause codeNotMatched
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_CRLC_RRC_MessageSN_CNF(p_CellId, p_RBID : INTEGER )
$ASP_Id CRLC_RRC_MessageSN_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : p_RBID,
  count_I_MSB_UL ?,
  count_I_LSB_UL ?,
  count_I_MSB_DL ?,
  count_I_LSB_DL ?
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_GetFrameNum (p_CellId: INTEGER; p_PhysicalChannelIdentity: PhysicalChannelIdentity)
$ASP_Id CPHY_Frame_Number_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity : p_PhysicalChannelIdentity,
  frameNumber ?
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_GetRLC_SeqNum(p_CellId: INTEGER; p_RB_Id: INTEGER)
$ASP_Id CRLC_SequenceNumber_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  count_C_MSB_UL ?,
  count_C_LSB_UL ?,
  count_C_MSB_DL ? ,
  count_C_LSB_DL ?
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_IniCnf
$ASP_Id CPHY_Ini_CNF
$DerivPath 
$Comment /* Confirm the test initialisation */
$ASN1_ConsValue
{
  confirmation NULL
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_MeasRepAM ( 
p_CellId :  INTEGER; 
p_RB : INTEGER;  
p_Pdu: UL_DCCH_Message 
)
$ASP_Id RLC_AM_DATA_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : p_RB ,
  integrityResult ?,
  aM_message uL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_MeasRepUM( 
p_CellId :  INTEGER; 
p_RB : INTEGER ;  
p_Pdu: UL_DCCH_Message )
$ASP_Id RLC_UM_DATA_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : p_RB ,
  integrityResult ?,
  uM_message uL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_RB_ReconfCmpl( 
    p_CellId: INTEGER; 
    p_RouteInfo : INTEGER; 
    p_PDU: UL_DCCH_Message 
)
$ASP_Id RLC_AM_DATA_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RouteInfo,
  integrityResult ?,
  aM_message uL_DCCH_Message : p_PDU
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_RB_SetUpCmpl( 
p_CellId :  INTEGER; 
p_RB :INTEGER ; 
p_Pdu: UL_DCCH_Message 
)
$ASP_Id RLC_AM_DATA_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : p_RB ,
  integrityResult ?,
  aM_message uL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_ResumeRB(p_CellId: INTEGER; p_RB_Id: INTEGER)
$ASP_Id CRLC_Resume_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_RRC_ConnRelCmpl(p_CellId: INTEGER; p_RB_Id: INTEGER; p_Pdu: UL_DCCH_Message)
$ASP_Id RLC_AM_DATA_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  integrityResult ?,
  aM_message uL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_RRC_ConnRelCmplUM(p_CellId: INTEGER; p_RB_Id: INTEGER ; p_Pdu:UL_DCCH_Message)
$ASP_Id RLC_UM_DATA_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  integrityResult ?,
  uM_message uL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_RRC_ConnReq(p_CellId: INTEGER;  p_RB_Id: SS_RB_Identity; p_Pdu: UL_CCCH_Message)
$ASP_Id RLC_TR_DATA_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  tM_message uL_CCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_RRC_ConnSetupCmpl(p_CellId: INTEGER;  p_RB_Id: INTEGER; p_Pdu: UL_DCCH_Message)
$ASP_Id RLC_AM_DATA_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  integrityResult ?,
  aM_message uL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_RRC_SecModeCmpl( 
p_CellId: INTEGER; 
p_RB : INTEGER ;  
p_Pdu: UL_DCCH_Message 
)
$ASP_Id RLC_AM_DATA_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : p_RB ,
  integrityResult ?,
  aM_message uL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_RRC_SecModeFail( 
   p_CellId: INTEGER; 
   p_RB : INTEGER;  
   p_Pdu: UL_DCCH_Message)
$ASP_Id RLC_AM_DATA_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB ,
  integrityResult ?,
  aM_message uL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_RRC_SigConnRelInd( 
p_CellId: INTEGER; 
p_RB : INTEGER;  
 p_PDU: UL_DCCH_Message 
)
$ASP_Id RLC_AM_DATA_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : p_RB ,
  integrityResult ?,
  aM_message uL_DCCH_Message : p_PDU
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_RRC_Status( 
   p_CellId: INTEGER; 
   p_RBId :INTEGER; 
   p_Pdu: UL_DCCH_Message)
$ASP_Id RLC_AM_DATA_IND
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RBId,
  integrityResult ?,
  aM_message uL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId car_SuspendRB ( p_CellId: INTEGER; p_RB_Id: INTEGER )
$ASP_Id CRLC_Suspend_CNF
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  vt ?
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_CRLC_RRC_MessageSN_REQ(p_CellId, p_RBID : INTEGER )
$ASP_Id CRLC_RRC_MessageSN_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : p_RBID
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_GetFrameNum (p_CellId: INTEGER; p_PhysicalChannelIdentity: PhysicalChannelIdentity)
$ASP_Id CPHY_Frame_Number_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhysicalChannelIdentity
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_GetRLC_SeqNum(p_CellId: INTEGER; p_RB_Id: INTEGER)
$ASP_Id CRLC_SequenceNumber_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_InitReqDef
$ASP_Id CPHY_Ini_REQ
$DerivPath 
$Comment /* Request to initialise the test */
$ASN1_ConsValue
defaultRadioEnvironment
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_InitReqNonDef
$ASP_Id CPHY_Ini_REQ
$DerivPath 
$Comment /* Request to initialise the test */
$ASN1_ConsValue
nonDefaultMultiCell
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_MAC_Rel  ( p_CellId: INTEGER;  p_PhyChId: INTEGER )
$ASP_Id CMAC_Config_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo physicalChannelIdentity: p_PhyChId,
  ratType fdd,
  configMessage release : NULL
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_PagingType1( 
p_CellId: INTEGER;  
p_RB_Id: SS_RB_Identity ;  
p_Pdu: PCCH_Message 
)
$ASP_Id RLC_TR_DATA_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  tM_message pCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_RB_SetUpAM( 
p_CellId: INTEGER;  
p_RB_Id: INTEGER;  
p_Pdu: DL_DCCH_Message 
)
$ASP_Id RLC_AM_DATA_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity : p_RB_Id,
  confirmationRequest noConfirmationRequest : NULL,
  aM_message dL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_RB_SetUpAM_WithCnf( 
p_CellId: INTEGER;  
p_RB_Id: INTEGER;  
p_Mui : Mui; 
p_Pdu: DL_DCCH_Message 
)
$ASP_Id RLC_AM_DATA_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  confirmationRequest confirmationRequested: p_Mui,
  aM_message dL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_ResumeRB(p_CellId: INTEGER; p_RB_Id: INTEGER)
$ASP_Id CRLC_Resume_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_RLC_SuspendRB(p_CellId: INTEGER; p_RB_Id: INTEGER; p_RLC_SeqNum:  RLC_SequenceNumber)
$ASP_Id CRLC_Suspend_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  n p_RLC_SeqNum
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_RRC_ConnRelCCCH(p_CellId: INTEGER; p_RB_Id: INTEGER ; p_Pdu: DL_CCCH_Message)
$ASP_Id RLC_UM_DATA_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  uM_message dL_CCCH_Message : p_Pdu,
  specialLI TRUE 
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_RRC_ConnRelDCCH(p_CellId: INTEGER; p_RB_Id: INTEGER ; p_Pdu : DL_DCCH_Message)
$ASP_Id RLC_UM_DATA_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  uM_message dL_DCCH_Message : p_Pdu,
  specialLI FALSE
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_RRC_ConnSetup(p_CellId: INTEGER;  p_RB_Id: INTEGER ; p_Pdu: DL_CCCH_Message)
$ASP_Id RLC_UM_DATA_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  uM_message dL_CCCH_Message : p_Pdu,
  specialLI TRUE
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_RRC_SecModeCmd(p_CellId: INTEGER;  p_RB_Id: INTEGER ; p_Pdu: DL_DCCH_Message)
$ASP_Id RLC_AM_DATA_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  confirmationRequest noConfirmationRequest : NULL,
  aM_message dL_DCCH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$Begin_ASN1_ASP_Constraint
$ConsId cas_SysInfoChangeInd ( 
p_CellId: INTEGER;  
p_RB_Id: INTEGER;  
p_Pdu:  BCCH_FACH_Message 
)
$ASP_Id RLC_TR_DATA_REQ
$DerivPath 
$ASN1_ConsValue
{
  cellId p_CellId,
  routingInfo rB_Identity: p_RB_Id,
  tM_message bCCH_FACH_Message : p_Pdu
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_ASP_Constraint
$End_ASN1_ASP_Constraints
$End_ASP_Constraints
$PDU_Constraints
$TTCN_PDU_Constraints
$Begin_TTCN_PDU_Constraint
$ConsId cr_ServiceRequestAny
$PDU_Id SERVICEREQUEST
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gMMProtocolDiscriminator
$ConsValue tsc_GMM_PD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00001100'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId serviceType
$ConsValue ?
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ciphKeySeqNo
$ConsValue ?
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ptmsi
$ConsValue c_MobileIdPTMSI_lv(?)
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId pDP_ContextStatus
$ConsValue *
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cr_PagingResponseAny
$PDU_Id PAGINGRESPONSE
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$Comment /* Skip Indicator
M
BITSTRING [4] */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId rRProtocolDiscriminator
$ConsValue '0110'B
$Comment /* RR Protocol Discriminator
M
BITSTRING [4] */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '??100111'B
$Comment /* Message Type (1)
M
BITSTRING [8] */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId spare4
$ConsValue '0000'B
$Comment /* Spare half octet
M
BITSTRING [4] */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ciphKeySeqNum
$ConsValue ?
$Comment /* Ciphering Key Sequence Number
M
BITSTRING [4] */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mSClsmk2
$ConsValue c_MS_Clsmk2_Any_lv
$Comment /* Mobile Station Classmark 2 
M
MSClsmk2 (4 octets) */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mobileId
$ConsValue ?
$Comment /* Mobile Identity LV
M
MobileId (2-10 octets) */
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cr_StatusAnyPad
$PDU_Id RLC_STATUS_PDU
$DerivPath 
$Comment /* This constraint is used to receive an AM STATUS PDU containing the given SUFI 
list. Any padding included is ignored.

Parameters:
p_SuperFields: The SUFI list to be received.
 */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId dC_Field
$ConsValue tsc_DC_ControlPDU
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId type
$ConsValue tsc_PDU_TypeStatus
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId superFields
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId superFieldsRec
$ConsValue ?
$Comment /* 4 */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId padding
$ConsValue *
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cs_StatusAndPad( p_SuperFields: SuperFields; p_NumHalfOctetsPadding: INTEGER )
$PDU_Id RLC_STATUS_PDU
$DerivPath 
$Comment /* This constraint is used to send an AM STATUS PDU containing the given 
superfields.

Parameters:
p_SuperFields:
The super-fields to be included in the STATUS PDU.

p_PaddingSizeHalfOctets:
The number of half octets to be added at the end of the PDU. In general. this
parameter will contain the value ( 2 * tcv_PU_Size ) - ( p_SuperFields size + 1 )

NOTE: SUFI list size = p_Superfields size + 1 half octet (for D/C field and Type) */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId dC_Field
$ConsValue tsc_DC_ControlPDU
$Comment /* 1 bit */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId type
$ConsValue tsc_PDU_TypeStatus
$Comment /* 3 bits */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId superFields
$ConsValue p_SuperFields
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId superFieldsRec
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId padding
$ConsValue INT_TO_BIT( 0, (p_NumHalfOctetsPadding * 4) )
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cs_AMD_LIsAndPad(p_SN: INTEGER;p_Poll: PollingBit; p_LIs: LenInds; p_Data:AM_Data;p_NumofBitsPadding: INTEGER )
$PDU_Id MAC_AMD_PDU
$DerivPath 
$Comment /* This constraint is used to send an AM PDU containing data and a length 
indicator group, and padding.

Parameters:
p_SN: 
An integer containing the next sequence number to be transmitted. This 
parameter is used in a call to INT_TO_BIT, so a value must be provided.

p_Poll:
The value of the Poll bit. This parameter must be one of the following values:
tsc_P_Poll, tsc_P_NoPoll. 

p_LIs:
The length indicator group to be used in the PDU. This field must contain at 
least one LI.

p_Data:
The data to be included in the PDU.

p_NumHalfOctetsPadding:
The number of half octets of padding to be included at the end of the PDU. It
is the callers responsibility to ensure that the LI group size + the data size
+ the padding size is exactly equal to the current PU size. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId dcField
$ConsValue tsc_DC_AMDPDU
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId seqNum
$ConsValue INT_TO_BIT( p_SN, tsc_AM_SN_Size )
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId pollingBit
$ConsValue p_Poll
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId headerExt
$ConsValue tsc_HE_LI_AndE_Bit
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId lenInds
$ConsValue p_LIs
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId piggybackedStatus
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId padding
$ConsValue INT_TO_BIT( 0, p_NumofBitsPadding  )
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_MAC_PDU_TCTF( p_TCTF: TCTF; p_Data: PDU)
$PDU_Id MAC_PDU
$DerivPath 
$Comment /* This PDU is used to send MAC PDU's with various values for the TCTF field. 
Ref 3G TS 25.321 clause 9.1.2

The same constraint can be used for uplink and downlink, since the appropriate 
TCTF field can be provided as a parameter, and all other fields are the same. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId tctf
$ConsValue p_TCTF
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueIdType
$ConsValue tsc_UE_IdTypeC_RNTI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueId
$ConsValue tsc_CRNTI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ctField
$ConsValue tsc_CT_LoCh3
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /* The user of this constraint is responsible for ensuring that the MAC header +
data is the correct length to fit exactly in one transport block.

This PDU will be received by the UE, and routed to the third logical channel mapped to RACH. (High priority NAS SRB) */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cs_MAC_PDU_CT( p_CT_Field: CT_Field; p_Data: PDU)
$PDU_Id MAC_PDU
$DerivPath 
$Comment /* This PDU is used to send a MAC PDU on a DCCH mapped to FACH with the given value 
for the CT field. Separate constraints are provided for uplink and downlink 
since the TCTF field value is different for sending and receiving.

Ref 3G TS 25.321 clause 9.1.2

Parameters
p_CT_Field
The CT field value to be used in the transmitted MAC PDU.

p_Data
The MAC SDU to be used in the transmitted MAC PDU.
NOTE: The user of this constraint is responsible for ensuring that the MAC 
header + data is the correct length to fit exactly in one transport block. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId tctf
$ConsValue tsc_DCCH_OnFACH_FDD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueIdType
$ConsValue tsc_UE_IdTypeC_RNTI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueId
$ConsValue tsc_CRNTI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ctField
$ConsValue p_CT_Field
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cs_MAC_PDU_UE_IdType( p_UE_IdType: UE_IdType; p_Data: PDU;p_Ue_Id : UE_Id )
$PDU_Id MAC_PDU
$DerivPath 
$Comment /* This PDU is used to send a MAC PDU on a DCCH mapped to FACH with the given value 
for the UE-Id type field. Separate constraints are provided for uplink and downlink 
since the TCTF field value is different for sending and receiving.

Ref 3G TS 25.321 clause 9.1.2

Parameters
p_UE_IdType
The UE-Id type field value to be used in the transmitted MAC PDU.

p_Data
The MAC SDU to be used in the transmitted MAC PDU.
NOTE: The user of this constraint is responsible for ensuring that the MAC 
header + data is the correct length to fit exactly in one transport block. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId tctf
$ConsValue tsc_DCCH_OnFACH_FDD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueIdType
$ConsValue p_UE_IdType
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueId
$ConsValue p_Ue_Id
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ctField
$ConsValue tsc_CT_LoCh3
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cs_MAC_PDU_UE_Id( p_UE_Id: UE_Id; p_Data: PDU )
$PDU_Id MAC_PDU
$DerivPath 
$Comment /* This PDU is used to send a MAC PDU on a DCCH mapped to FACH with the given value 
for the UE-Id field. Separate constraints are provided for uplink and downlink 
since the TCTF field value is different for sending and receiving.

Ref 3G TS 25.321 clause 9.1.2

Parameters
p_UE_Id
The UE-Id field value to be used in the transmitted MAC PDU.

p_Data
The MAC SDU to be used in the transmitted MAC PDU.
NOTE: The user of this constraint is responsible for ensuring that the MAC 
header + data is the correct length to fit exactly in one transport block. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId tctf
$ConsValue tsc_DCCH_OnFACH_FDD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueIdType
$ConsValue tsc_UE_IdTypeC_RNTI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueId
$ConsValue p_UE_Id
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ctField
$ConsValue tsc_CT_LoCh3
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cs_MAC_PDU_Def( p_Data: PDU)
$PDU_Id MAC_PDU
$DerivPath 
$Comment /* This PDU is used to send a MAC PDU on DCCH 3 mapped to FACH with the default
field values. Separate constraints are provided for uplink and downlink since the 
TCTF field value is different for sending and receiving.

Ref 3G TS 25.321 clause 9.1.2

Parameters
p_Data
The MAC SDU to be used in the transmitted MAC PDU.
NOTE: The user of this constraint is responsible for ensuring that the MAC 
header + data is the correct length to fit exactly in one transport block. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId tctf
$ConsValue tsc_DCCH_OnFACH_FDD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueIdType
$ConsValue tsc_UE_IdTypeU_RNTI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueId
$ConsValue tsc_CRNTI
$Comment /* o_OctToBit( px_TMSI_Def ) */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ctField
$ConsValue tsc_CT_LoCh3
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_MAC_PDU_CT_DCH( p_CT_Field: CT_Field; p_Data: PDU )
$PDU_Id MAC_PDU
$DerivPath 
$Comment /* This PDU is used to send a MAC PDU on a DCCH mapped to FACH with the given value 
for the CT field. Separate constraints are provided for uplink and downlink 
since the TCTF field value is different for sending and receiving.

Ref 3G TS 25.321 clause 9.1.2

Parameters
p_CT_Field
The CT field value to be used in the transmitted MAC PDU.

p_Data
The MAC SDU to be used in the transmitted MAC PDU.
NOTE: The user of this constraint is responsible for ensuring that the MAC 
header + data is the correct length to fit exactly in one transport block. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId tctf
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueIdType
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueId
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ctField
$ConsValue p_CT_Field
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cs_MAC_PDU_Send_STATUS_Def( p_Data: RLC_STATUS_PDU )
$PDU_Id MAC_PDU
$DerivPath 
$Comment /* This PDU is used to SendMAC PDU's on DCCH 3 mapped to FACH using the default 
field values. Separate constraints are provided for uplink and downlink since the TCTF 
field value is different for sending and receiving.

Ref 3G TS 25.321 clause 9.1.2

Parameters
p_Data
The expected MAC SDU in the received MAC PDU. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId tctf
$ConsValue tsc_DCCH_OnFACH_FDD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueIdType
$ConsValue tsc_UE_IdTypeC_RNTI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueId
$ConsValue tsc_CRNTI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ctField
$ConsValue tsc_CT_LoCh3
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cr_MAC_PDU_RCV_STATUS_TCTF( p_TCTF: TCTF; p_Data: RLC_STATUS_PDU )
$PDU_Id MAC_PDU_RCV_STATUS
$DerivPath 
$Comment /* This PDU is used to send MAC PDU's with various values for the TCTF field. 
Ref 3G TS 25.321 clause 9.1.2

The same constraint can be used for uplink and downlink, since the appropriate 
TCTF field can be provided as a parameter, and all other fields are the same.
 */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId tctf
$ConsValue p_TCTF
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueIdType
$ConsValue tsc_UE_IdTypeC_RNTI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueId
$ConsValue tsc_CRNTI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ctField
$ConsValue tsc_CT_LoCh3
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /* The user of this constraint is responsible for ensuring that the MAC header +
data is the correct length to fit exactly in one transport block.

This PDU will be received by the UE, and routed to the third logical channel mapped to RACH. (High priority NAS SRB) */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_MAC_PDU_CT_RCV_STATUS_DCH( p_CT_Field: CT_Field; p_Data: RLC_STATUS_PDU )
$PDU_Id MAC_PDU_RCV_STATUS
$DerivPath 
$Comment /* This PDU is used to send a MAC PDU on a DCCH mapped to FACH with the given value 
for the CT field. Separate constraints are provided for uplink and downlink 
since the TCTF field value is different for sending and receiving.

Ref 3G TS 25.321 clause 9.1.2

Parameters
p_CT_Field
The CT field value to be used in the transmitted MAC PDU.

p_Data
The MAC SDU to be used in the transmitted MAC PDU.
NOTE: The user of this constraint is responsible for ensuring that the MAC 
header + data is the correct length to fit exactly in one transport block.
 */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId tctf
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueIdType
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueId
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ctField
$ConsValue p_CT_Field
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_UMD(p_SN: INTEGER; p_Data: MAC_UM_Data )
$PDU_Id MAC_UMD_PDU
$DerivPath 
$Comment /* This constraint is used to represent a UM PDU containing data, no length 
indicators, and no padding.

Parameters:
p_SN: 
An integer containing the next sequence number to be transmitted or received. 
This parameter is used in a call to INT_TO_BIT, so a value must be provided.

p_Data:
The data to be included in the PDU. It is the callers responsibility to ensure
that the data size is exactly equal to the current PU size. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId seqNum
$ConsValue INT_TO_BIT( p_SN, tsc_UM_SN_Size )
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId eBit
$ConsValue tsc_E_Data
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId lenInds
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId padding
$ConsValue -
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_UMD_LIs(p_SN: INTEGER; p_LIs: LenInds; p_Data: MAC_UM_Data )
$PDU_Id MAC_UMD_PDU
$DerivPath 
$Comment /* This constraint is used to represent a UM PDU containing data and a length 
indicator group, and no padding.

Parameters:
p_SN: 
An integer containing the next sequence number to be transmitted or received. 
This parameter is used in a call to INT_TO_BIT, so a value must be provided.

p_LIs:
The length indicator group to be used in the PDU. This field must contain at 
least one LI.

p_Data:
The data to be included in the PDU. It is the callers responsibility to ensure
that the data size + the LI group size is exactly equal to the current PU size. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId seqNum
$ConsValue INT_TO_BIT( p_SN, tsc_UM_SN_Size )
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId eBit
$ConsValue tsc_E_LI_AndE_Bit
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId lenInds
$ConsValue p_LIs
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId padding
$ConsValue -
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_UMD_LIsAndPad(p_SN: INTEGER; p_LIs: LenInds; p_Data:MAC_UM_Data;p_NumofBitsPadding: INTEGER )
$PDU_Id MAC_UMD_PDU
$DerivPath 
$Comment /* This constraint is used to represent a UM PDU containing data, a length 
indicator group, and padding.

Parameters:
p_SN: 
An integer containing the next sequence number to be transmitted or received. 
This parameter is used in a call to INT_TO_BIT, so a value must be provided.

p_LIs:
The length indicator group to be used in the PDU. This field must contain at 
least one LI, and at least one LI indicating that the rest of the PDU contains
padding.

p_Data:
The data to be included in the PDU. 

p_NumHalfOctetsPadding:
The number of half octets padding to be included in the PDU. It is the users 
responsibility to ensure that the LI group size + the data size + the padding 
size is exactly equal to the current PU size. This parameter is used in a call
to INT_TO_BIT, so a value must be provided. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId seqNum
$ConsValue INT_TO_BIT( p_SN, tsc_UM_SN_Size )
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId eBit
$ConsValue tsc_E_LI_AndE_Bit
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId lenInds
$ConsValue p_LIs
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_Data
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId padding
$ConsValue INT_TO_BIT( 0, p_NumofBitsPadding  )
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_MAC_PDU_CCCH_TCTF( p_TCTF: TCTF )
$PDU_Id MAC_PDU
$DerivPath 
$Comment /* This PDU is used to send MAC PDU's with various values for the TCTF field. 
Ref 3G TS 25.321 clause 9.1.2

The same constraint can be used for uplink and downlink, since the appropriate 
TCTF field can be provided as a parameter, and all other fields are the same. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId tctf
$ConsValue p_TCTF
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueIdType
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ueId
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ctField
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId data
$ConsValue -
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /* The user of this constraint is responsible for ensuring that the MAC header +
data is the correct length to fit exactly in one transport block.

This PDU will be received by the UE, and routed to the third logical channel mapped to RACH. (High priority NAS SRB) */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_ActivateRB_TestMode
$PDU_Id ACTIVATERBTESTMODE
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId tCProtocolDiscriminator
$ConsValue '1111'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '01000100'B
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_ActivateRB_TestModeCmpl
$PDU_Id ACTIVATERBTESTMODECOMPLETE
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId tCProtocolDiscriminator
$ConsValue '1111'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '01000101'B
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_AuthFailAny
$PDU_Id AUTHENTICATIONFAILURE
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mMProtocolDiscriminator
$ConsValue '0101'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '??011100'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId rejCau
$ConsValue ?
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId authFailParam
$ConsValue c_AuthFailParamAny IF_PRESENT
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_AuthReq(p_KeySeq: KeySeq; p_RAND: MM_RAND; p_AUTN: AUTN)
$PDU_Id AUTHENTICATIONREQUEST
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mMProtocolDiscriminator
$ConsValue '0101'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00010010'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId spare4
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ciphKeySeqNum
$ConsValue c_CiphKeySeqNum(p_KeySeq)
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId rAND
$ConsValue p_RAND
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId aUTN
$ConsValue p_AUTN
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_AuthRspAnyExt
$PDU_Id AUTHENTICATIONRESPONSE
$DerivPath 
$Comment /* Any Authentication Response containing the Authentication Response Extension IE */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mMProtocolDiscriminator
$ConsValue '0101'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '??010100'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId authRsp
$ConsValue ?
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId authRspExt
$ConsValue c_AuthRspExtAny
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_AuthRspAnyNoExt
$PDU_Id AUTHENTICATIONRESPONSE
$DerivPath 
$Comment /* Any Authentication Response NOT containing the Authentication Response Extension IE */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mMProtocolDiscriminator
$ConsValue '0101'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '??010100'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId authRsp
$ConsValue ?
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId authRspExt
$ConsValue -
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_CloseUE_TestLoop(p_UE_TestLoopMode: UE_TestLoopMode; p_UE_TestLoopMode1LB_Setup: 
UE_TestLoopMode1LB_Setup)
$PDU_Id CLOSEUETESTLOOP
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId tCProtocolDiscriminator
$ConsValue '1111'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '01000000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId uE_TestLoopMode
$ConsValue p_UE_TestLoopMode
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId uE_TestLoopMode1LB_Setup
$ConsValue p_UE_TestLoopMode1LB_Setup
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_CloseUE_TestLoopCmpl
$PDU_Id CLOSEUETESTLOOPCOMPLETE
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId tCProtocolDiscriminator
$ConsValue '1111'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '01000001'B
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_DeactivateRB_TestMode
$PDU_Id DEACTIVATERBTESTMODE
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId tCProtocolDiscriminator
$ConsValue '1111'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '01000110'B
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_DeactivateRB_TestModeCmpl
$PDU_Id DEACTIVATERBTESTMODECOMPLETE
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId tCProtocolDiscriminator
$ConsValue '1111'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '01000111'B
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_LocUpdAcpTMSI ( p_MCC: HEXSTRING; p_MNC: HEXSTRING; p_LAC: OCTETSTRING )
$PDU_Id LOCATIONUPDATINGACCEPT
$DerivPath 
$Comment /*  */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mMProtocolDiscriminator
$ConsValue '0101'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00000010'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId locAreaId
$ConsValue c_LocAreaId_v(p_MCC, p_MNC, p_LAC)
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mobileId
$ConsValue c_MobileIdTMSI_Def
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId followOnProceed
$ConsValue '10100001'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId cTSPerm
$ConsValue '10100010'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId equivalentPLMN
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId emergNumList
$ConsValue -
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_LocUpdAcpTMSI_E_PLMN ( p_MCC: HEXSTRING; p_MNC: HEXSTRING; p_LAC: OCTETSTRING; p_ePLMN : PLMN_List )
$PDU_Id LOCATIONUPDATINGACCEPT
$DerivPath 
$Comment /*  */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mMProtocolDiscriminator
$ConsValue '0101'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00000010'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId locAreaId
$ConsValue c_LocAreaId_v(p_MCC, p_MNC, p_LAC)
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mobileId
$ConsValue c_MobileIdTMSI_Def
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId followOnProceed
$ConsValue '10100001'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId cTSPerm
$ConsValue '10100010'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId equivalentPLMN
$ConsValue p_ePLMN
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId emergNumList
$ConsValue -
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_PagRsp ( p_KeySeq: KeySeq; p_MobileId: MS_Identity_lv)
$PDU_Id PAGINGRESPONSE
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId rRProtocolDiscriminator
$ConsValue '0110'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '??100111'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId spare4
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ciphKeySeqNum
$ConsValue c_CiphKeySeqNum(p_KeySeq)
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mSClsmk2
$ConsValue c_MS_Clsmk2_Any_lv
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mobileId
$ConsValue p_MobileId
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_TMSI_ReallocCmpl
$PDU_Id TMSIREALLOCATIONCOMPLETE
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$Comment /* Skip Indicator */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mMProtocolDiscriminator
$ConsValue '0101'B
$Comment /* MM Protocol Discriminator */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '??011011'B
$Comment /* Message Type */
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId c_TrD_Data ( p_DataBitstring : BITSTRING )
$PDU_Id TrD_PDU
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId data
$ConsValue p_DataBitstring
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cb_LocUpdReqAny  ( p_KeySeq : KeySeq )
$PDU_Id LOCATIONUPDATINGREQUEST
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mMProtocolDiscriminator
$ConsValue '0101'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '??001000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ciphKeySeqNum
$ConsValue c_CiphKeySeqNum ( p_KeySeq )
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId locUpdType
$ConsValue c_LocUpdTypeAny
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId locAreaId
$ConsValue c_LocAreaIdAny_v
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mSClsmk1
$ConsValue c_MS_Clsmk1_Any
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mobileId
$ConsValue c_MobileIdAny_lv
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId mSClsmk2
$ConsValue c_MS_Clsmk2_Any IF_PRESENT
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cbr_Deact_PDP_ContextReq_MO(p_SM_Cause: SM_Cause_v)
$PDU_Id DEACTIVATEPDPCONTEXTREQUEST
$DerivPath 
$Comment /* Deactivate PDP Context Request          
n <=> ue          
24.008,  9.5.14
 */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId ti
$ConsValue cr_TI_Any
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId sM_ProtocolDiscriminator
$ConsValue tsc_SMPD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '01000110'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId sM_Cause
$ConsValue p_SM_Cause
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId tearDwnInd
$ConsValue cr_TearDwnInd_tv IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId protocolConfOpts
$ConsValue cr_ProtoCfgOptAny IF_PRESENT
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cbr_RA_UpdReqAny  
(p_UpdateType : UpdateType_v;    p_RAI : RAI_v; p_KeySeq : KeySeq)
$PDU_Id ROUTINGAREAUPDATEREQUEST
$DerivPath 
$Comment /* 
 */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gMMProtocolDiscriminator
$ConsValue tsc_GMM_PD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00001000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gprsCiphKeySeqNo
$ConsValue c_CiphKeySeqNum(p_KeySeq)
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId updateType
$ConsValue p_UpdateType
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId oldRAI
$ConsValue p_RAI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msRadioAccessCap
$ConsValue c_MS_RadioAccessCapAny_lv
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId oldPTMSI_Signature
$ConsValue c_PTMSI_SignatureAny IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId readyTimer
$ConsValue cr_GPRS_TimerAny IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId drxParameter
$ConsValue cr_DRXparamter_tv_Any IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId tmsiStatus
$ConsValue c_TMSI_StatusAny IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ptmsi
$ConsValue c_MobileIdPTMSI_Any IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msnetworkcap
$ConsValue cr_MS_NetworkCap_tlv_Any IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId pDP_ContextStatus
$ConsValue cr_PDP_ContextStatusAny IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId pS_LCS_Capability
$ConsValue cr_PS_LCS_CapabilityAny IF_PRESENT
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cr_ActPDP_ContextReqMO_Any
$PDU_Id ACTIVATEPDPCONTEXTREQUESTul
$DerivPath 
$Comment /* Activate PDP Context Request 
ue  -> n 
3GPP 24.008, 9.5.1 */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId ti
$ConsValue cr_TI_Any
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId sM_ProtocolDiscriminator
$ConsValue tsc_SMPD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '01000001'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId requestedNSAPI
$ConsValue cr_NSAPI_v
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId requestedLLC_SAPI
$ConsValue cr_LLC_SAPI_v
$Comment /* 
This has to be set to Not Assigned by UE in UMTS domain. */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId requestedQoS
$ConsValue cr_QualityOfService_lv_Any
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId pDP_Address
$ConsValue cr_StaticPDP_AddressAny
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId accessPtName
$ConsValue cr_AccessPtNameAny IF_PRESENT
$Comment /* 
The GGSN logical name or the external packet data network logical name */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId protocolConfOpts
$ConsValue cr_ProtoCfgOptAny IF_PRESENT
$Comment /*  */
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cr_AttachComplete
$PDU_Id ATTACHCOMPLETE
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gMMProtocolDiscriminator
$ConsValue tsc_GMM_PD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00000011'B
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cr_AttachReq (p_AttachType : AttachType; p_MobId : MS_Identity_lv; p_RAI : RAI_v; 
p_KeySeq : KeySeq )
$PDU_Id ATTACHREQUEST
$DerivPath 
$Comment /*  */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gMMProtocolDiscriminator
$ConsValue tsc_GMM_PD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00000001'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msNetworkCap
$ConsValue cr_MS_NetworkCapAss_lv
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gprsCiphKeySeqNo
$ConsValue c_CiphKeySeqNum(p_KeySeq)
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId attachType
$ConsValue p_AttachType
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId drxParameter
$ConsValue c_DRX_ParamterAny
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ptmsiORimsi
$ConsValue p_MobId
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId oldRAI
$ConsValue p_RAI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msRadioAccessCap
$ConsValue c_MS_RadioAccessCapAny_lv
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId oldPTMSI_Signature
$ConsValue c_PTMSI_SignatureAny IF_PRESENT
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId readyTimer
$ConsValue c_GPRS_TimerAny IF_PRESENT
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId tmsiStatus
$ConsValue c_TMSI_StatusAny IF_PRESENT
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId pS_LCS_Capability
$ConsValue cr_PS_LCS_CapabilityAny IF_PRESENT
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cr_AuthAndCiphFailureAny
$PDU_Id AUTHENTICATION_AND_CIPHERING_FAILURE
$DerivPath 
$Comment /*  */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gMMProtocolDiscriminator
$ConsValue tsc_GMM_PD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00011100'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gmmCause
$ConsValue ?
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId authFailurePar
$ConsValue c_AuthFailParamGmmAny IF_PRESENT
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cr_AuthAndCiphRsp( p_authRsp : AuthRsp_tv; p_authRspExt :AuthRspExt)
$PDU_Id AUTHENTICATIONANDCIPHERINGRESPONSE
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gMMProtocolDiscriminator
$ConsValue tsc_GMM_PD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00010011'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId spare4
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId acRefNo
$ConsValue ?
$Comment /* Should be the one sent in the auth request */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId authRsp
$ConsValue p_authRsp
$Comment /* Authentication RES */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId imeisv
$ConsValue -
$Comment /* No IMEISV requested */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId authRspExt
$ConsValue p_authRspExt
$Comment /* Authentication paramter AUTN, a UMTS challenge is requested */
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cr_DetachRequest_MO
$PDU_Id DETACHREQUESTMO
$DerivPath 
$Comment /* 3GPP 24.008 V3.6.0 clause 9.4.5.2  (Mobile originating detach, GMM message) */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$Comment /* Skip Indicator */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gMMProtocolDiscriminator
$ConsValue tsc_GMM_PD
$Comment /* GMM Protocol Discriminator */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00000101'B
$Comment /* Message Type */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId spare4
$ConsValue '0000'B
$Comment /* M */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId detachType
$ConsValue c_DetachTypeReAttNotRequiredGPRS
$Comment /* M */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ptmsi
$ConsValue c_MobileIdPTMSI_Any IF_PRESENT
$Comment /* O */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ptmsiSignature
$ConsValue c_PTMSI_Signature_tlv(?) IF_PRESENT
$Comment /* O */
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cr_ServiceRequest (p_sType : ServiceType_v; p_PTMSI : MS_Identity_lv; p_KeySeq : KeySeq)
$PDU_Id SERVICEREQUEST
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gMMProtocolDiscriminator
$ConsValue tsc_GMM_PD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00001100'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId serviceType
$ConsValue p_sType
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ciphKeySeqNo
$ConsValue c_CiphKeySeqNum(p_KeySeq)
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ptmsi
$ConsValue p_PTMSI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId pDP_ContextStatus
$ConsValue cr_PDP_ContextStatusAny IF_PRESENT
$Comment /*  */
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cr_SetupMO_Any
$PDU_Id SETUPul
$DerivPath 
$Comment /* CC SETUP   n <- ue
 */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId ti
$ConsValue cr_TI_MO
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId cC_ProtocolDiscriminator
$ConsValue '0011'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '??000101'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId repeatInd
$ConsValue c_RepeatIndAny IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId bcap1
$ConsValue cr_BcapAnyMO
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId bcap2
$ConsValue cr_BcapAnyMO IF_PRESENT
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId facility
$ConsValue cr_Facility_Any IF_PRESENT
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId cgps
$ConsValue cr_CGPS_Any IF_PRESENT
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId cdpn
$ConsValue cr_CDPN_Any
$Comment /*  */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId cdps
$ConsValue cr_CDPS_Any IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId llcRepeatInd
$ConsValue c_RepeatIndAny IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId llc1
$ConsValue cr_LLC_Any IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId llc2
$ConsValue cr_LLC_Any IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId hlcRepeatInd
$ConsValue c_RepeatIndAny IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId hlc1
$ConsValue cr_HLC_Any IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId hlc2
$ConsValue cr_HLC_Any IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId userUser
$ConsValue cr_UserUserAny IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId sS_VersionInd
$ConsValue cr_SS_VersionIndAny IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId cLIR_Suppression
$ConsValue '10100001'B IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId cLIR_Invocation
$ConsValue '10100010'B IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId cC_Capabilities
$ConsValue cr_CC_CapabilitiesAny IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId facilityCCBS_AdvRecall
$ConsValue cr_FacilityAdvRecall IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId facilityCCBS_RecallAlign
$ConsValue cr_FacilityAdvRecall IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId streamId
$ConsValue cr_StreamIdAny IF_PRESENT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId supportedCodecs
$ConsValue cr_CodecListAny  IF_PRESENT
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cr_StatusAny
$PDU_Id STATUS_PDU
$DerivPath 
$Comment /* This constraint is used to receive an AM STATUS PDU containing the given SUFI  
list. Any padding included is ignored. */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId dC_Field
$ConsValue tsc_DC_ControlPDU
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId type
$ConsValue tsc_PDU_TypeStatus
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId superFieldsTx
$ConsValue OMIT
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId superFieldsAndPadRx
$ConsValue ?
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId paddingTx
$ConsValue OMIT
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cs_AttachAcc ( p_attachRes : AttachResult; p_RAI : RAI_v; p_PTMSIsig : PTMSI_Signature; p_PTMSI : GMM_MS_IdentityPTMSI;  p_TMSI : GMM_MS_Identity  )
$PDU_Id ATTACHACCEPT
$DerivPath 
$Comment /*  */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gMMProtocolDiscriminator
$ConsValue tsc_GMM_PD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00000010'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId forceToStandby
$ConsValue c_ForceToStandby('000'B)
$Comment /* Force to standby not indicated */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId attachResult
$ConsValue p_attachRes
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId periodicRAupdateTimer
$ConsValue c_GPRS_Timer_v('111'B, '00000'B)
$Comment /* Timer deactivated */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId radioPrioTOM8
$ConsValue c_RadioPriority2('000'B)
$Comment /* Lowest
 */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId radioPrioSMS
$ConsValue c_RadioPriority('100'B)
$Comment /* Lowest */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId rai
$ConsValue p_RAI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ptmsiSignature
$ConsValue p_PTMSIsig
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId negReadyTimer
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId allocatedPTMSI
$ConsValue p_PTMSI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msIdentity
$ConsValue p_TMSI
$Comment /* Only required in PS/CS combined procedures */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gmmCause
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId t3302Value
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId cellNotification
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId equivalentPLMN
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ntwFeatureSupport
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId emergNumList
$ConsValue -
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cs_AttachAccE_PLMN ( p_attachRes : AttachResult; p_RAI : RAI_v; p_PTMSIsig : PTMSI_Signature; p_PTMSI : GMM_MS_IdentityPTMSI;  p_TMSI : GMM_MS_Identity; p_ePLMN : PLMN_List  )
$PDU_Id ATTACHACCEPT
$DerivPath 
$Comment /*  */
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gMMProtocolDiscriminator
$ConsValue tsc_GMM_PD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00000010'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId forceToStandby
$ConsValue c_ForceToStandby('000'B)
$Comment /* Force to standby not indicated */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId attachResult
$ConsValue p_attachRes
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId periodicRAupdateTimer
$ConsValue c_GPRS_Timer_v('111'B, '00000'B)
$Comment /* Timer deactivated */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId radioPrioTOM8
$ConsValue c_RadioPriority2('000'B)
$Comment /* Lowest
 */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId radioPrioSMS
$ConsValue c_RadioPriority('100'B)
$Comment /* Lowest */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId rai
$ConsValue p_RAI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ptmsiSignature
$ConsValue p_PTMSIsig
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId negReadyTimer
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId allocatedPTMSI
$ConsValue p_PTMSI
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msIdentity
$ConsValue p_TMSI
$Comment /* Only required in PS/CS combined procedures */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gmmCause
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId t3302Value
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId cellNotification
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId equivalentPLMN
$ConsValue p_ePLMN
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ntwFeatureSupport
$ConsValue -
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId emergNumList
$ConsValue -
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cs_AttachRej( p_cause : RejCau )
$PDU_Id ATTACHREJECT
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gMMProtocolDiscriminator
$ConsValue tsc_GMM_PD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00000100'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gmmCause
$ConsValue p_cause
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId t3302Value
$ConsValue -
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$Begin_TTCN_PDU_Constraint
$ConsId cs_AuthAndCiphReq( p_rand : AuthenticationParamterRAND; p_ckNo : CiphKeySeqNum_tv; p_autn : GMM_AUTN)
$PDU_Id AUTHENTICATIONANDCIPHERINGREQUEST
$DerivPath 
$PDU_FieldValues
$PDU_FieldValue
$PDU_FieldId skipIndicator
$ConsValue '0000'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gMMProtocolDiscriminator
$ConsValue tsc_GMM_PD
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId msgType
$ConsValue '00010010'B
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId imeisvReq
$ConsValue cb_IMEISV_Request('000'B)
$Comment /* IMEISV not requested */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId ciphAlgorithm
$ConsValue c_CiphAlgorithm(px_CipherAlg)
$Comment /* GPRS encryption algorithm GEA/1
 */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId acRefNo
$ConsValue c_AC_RefNum3
$Comment /* Use any reference value */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId forceToStandby
$ConsValue c_ForceToStandby('000'B)
$Comment /* Force to standby not indicated */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId authRand
$ConsValue p_rand
$Comment /* Authentication paramter RAND */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId gprsCiphKeySeqNo
$ConsValue p_ckNo
$Comment /* GPRS ciphering key sequence number */
$End_PDU_FieldValue
$PDU_FieldValue
$PDU_FieldId aUTN
$ConsValue p_autn
$Comment /* Authentication paramter AUTN, an UMTS challenge is requested */
$End_PDU_FieldValue
$End_PDU_FieldValues
$Comment /*  */
$End_TTCN_PDU_Constraint
$End_TTCN_PDU_Constraints
$ASN1_PDU_Constraints
$Begin_ASN1_PDU_Constraint
$ConsId cr_RRC_MeasRepTV
$PDU_Id UL_DCCH_Message
$DerivPath 
$ASN1_ConsValue
{ integrityCheckInfo *,
  message measurementReport :
  {
    measurementIdentity 2,
    measuredResults trafficVolumeMeasuredResultsList :
    {{
        rb_Identity ?,
        rlc_BuffersPayload ?,
        averageRLC_BufferPayload OMIT,
        varianceOfRLC_BufferPayload OMIT
    }},
    measuredResultsOnRACH OMIT,
    additionalMeasuredResults OMIT,
    eventResults OMIT,
    v390nonCriticalExtensions *
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_MeasurementControlTrafficVolumeRelease (
p_IntegrityInfo : IntegrityCheckInfo ; 
p_RRC_TI: RRC_TransactionIdentifier)
$PDU_Id DL_DCCH_Message
$DerivPath 
$EncRuleId PER_Unaligned
$Comment /* Measurement control to report periodically 2 reports on Transport Channel 1 */
$ASN1_ConsValue
{
  integrityCheckInfo p_IntegrityInfo,
  message measurementControl : r3:{
    measurementControl_r3 {
      rrc_TransactionIdentifier p_RRC_TI,
      measurementIdentity 2,
      measurementCommand release : NULL ,
      measurementReportingMode OMIT,
      additionalMeasurementList OMIT,
      dpch_CompressedModeStatusInfo OMIT
    },
    v390nonCriticalExtensions OMIT
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_MeasurementControlTrafficVolumeSetup (
p_IntegrityInfo : IntegrityCheckInfo ; 
p_RRC_TI: RRC_TransactionIdentifier)
$PDU_Id DL_DCCH_Message
$DerivPath 
$EncRuleId PER_Unaligned
$Comment /* Measurement control to report periodically 2 reports on Transport Channel 1 */
$ASN1_ConsValue
{
  integrityCheckInfo p_IntegrityInfo,
  message measurementControl : r3:{
    measurementControl_r3 {
      rrc_TransactionIdentifier p_RRC_TI,
      measurementIdentity 2,
      measurementCommand setup : trafficVolumeMeasurement :
      {
        trafficVolumeMeasurementObjectList { dch: tsc_UL_DCH1 },
        trafficVolumeMeasQuantity rlc_BufferPayload : NULL,
        
        trafficVolumeReportingQuantity {
          rlc_RB_BufferPayload TRUE,
          rlc_RB_BufferPayloadAverage FALSE,
          rlc_RB_BufferPayloadVariance FALSE
        },
        measurementValidity { ue_State cell_DCH } ,
        reportCriteria periodicalReportingCriteria :
        {
          reportingAmount ra8,
          reportingInterval ril0_25
        }
      },
      measurementReportingMode
      {
        measurementReportTransferMode acknowledgedModeRLC,
        periodicalOrEventTrigger periodical
      },
      additionalMeasurementList OMIT,
      dpch_CompressedModeStatusInfo OMIT
    },
    v390nonCriticalExtensions OMIT
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_TransportFormatCombCtrl ( 
p_IntegrityCheckInfo  : IntegrityCheckInfo ;
p_RRC_Ti : RRC_TransactionIdentifier; 
p_TFC : TFC_Subset )
$PDU_Id DL_DCCH_Message
$DerivPath 
$Comment /* Transport Format Combination Control message used to restrict the UL TFCIs */
$ASN1_ConsValue
{ integrityCheckInfo p_IntegrityCheckInfo ,
  message transportFormatCombinationControl :
  {
    rrc_TransactionIdentifier p_RRC_Ti,
    modeSpecificInfo fdd : NULL,
    dpch_TFCS_InUplink p_TFC,
    tfc_ControlDuration OMIT,
    laterNonCriticalExtensions OMIT
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cr_RRC_Status_MAC_NoInteg
$PDU_Id UL_DCCH_Message
$DerivPath 
$Comment /* Ref sec 8.1.9.3a of 25.331 */
$ASN1_ConsValue
{
  integrityCheckInfo OMIT,
  -- As MAC test cases will be run with Integrity and Ciphering off
  message rrcStatus :
  {
    protocolErrorInformation
    {
      diagnosticsType type1 : messageNotCompatibleWithReceiverState :
      {
        rrc_TransactionIdentifier 1,
        --Hard coded value in Pre Coded Dummy downlink Direct Transfer Message
        receivedMessageType downlinkDirectTransfer
      }
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_RB_ReconfigFACH_PS_MAC  (
     p_IntegrityInfo : IntegrityCheckInfo ;
    p_RRC_Ti: RRC_TransactionIdentifier;
    p_Activetime:        ActivationTime;
    p_FreqInfo:            FrequencyInfo;
    p_PrimaryScramblingCode : PrimaryScramblingCode
)
$PDU_Id DL_DCCH_Message
$DerivPath 
$Comment /* Defined in TS 34.123-1 annex A condition A.6 with MAC Priority for RAB assignd as 1. */
$ASN1_ConsValue
{
  integrityCheckInfo p_IntegrityInfo,
  message radioBearerReconfiguration : r3 : {
    radioBearerReconfiguration_r3{
      rrc_TransactionIdentifier p_RRC_Ti,
      integrityProtectionModeInfo OMIT,
      cipheringModeInfo OMIT,
      activationTime p_Activetime,
      new_U_RNTI OMIT,
      new_C_RNTI OMIT,
      rrc_StateIndicator cell_FACH,
      utran_DRX_CycleLengthCoeff OMIT,
      cn_InformationInfo OMIT,
      ura_Identity OMIT,
      rab_InformationReconfigList OMIT,
      rb_InformationReconfigList c_RB_InfoReconfigList20_MAC,
      rb_InformationAffectedList OMIT,
      ul_CommonTransChInfo OMIT,
      ul_deletedTransChInfoList OMIT,
      ul_AddReconfTransChInfoList OMIT,
      modeSpecificTransChInfo fdd:{
        cpch_SetID OMIT,
        addReconfTransChDRAC_Info OMIT
      },
      dl_CommonTransChInfo OMIT,
      dl_DeletedTransChInfoList OMIT,
      dl_AddReconfTransChInfoList OMIT,
      frequencyInfo p_FreqInfo,
      maxAllowedUL_TX_Power tsc_MaxAllowPwr,
      ul_ChannelRequirement OMIT,
      modeSpecificPhysChInfo fdd:{
        dl_PDSCH_Information OMIT
      },
      dl_CommonInformation OMIT,
      dl_InformationPerRL_List c_DL_InfoPerRL_DCH_OrFACH_ToFACH_PS_MAC(p_PrimaryScramblingCode )
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cdr_108_RRC_ConnReq_MAC (p_EstCause:  EstablishmentCause)
$PDU_Id UL_CCCH_Message
$DerivPath cbr_108_RRC_ConnReq.
$ASN1_ConsValue
REPLACE message.rrcConnectionRequest.initialUE_Identity BY
( imsi : ?,
tmsi_and_LAI :
{
  tmsi o_ConvertTMSI(px_TMSI_Def),
  lai
  {
    plmn_Identity
    {
      mcc {0,0,1},
      mnc {0,1}
    },
    lac '0000000000000001'B
  }
},
p_TMSI_and_RAI :
{
  p_TMSI o_ConvertPTMSI(px_PTMSI_Def),
  rai
  {
    lai
    {
      plmn_Identity
      {
        mcc {0,0,1},
        mnc {0,1}
      },
      lac '0000000000000001'B
    },
    rac '00000101'B 
  }
} )
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cds_MAC_RB_SetUpFACH_PS (
    p_Integrityinfo :    IntegrityCheckInfo;
    p_RRC_Ti : RRC_TransactionIdentifier;
    p_RAB_Id : BITSTRING;
    p_NewC_RNTI : C_RNTI
)
$PDU_Id DL_DCCH_Message
$DerivPath cbs_108_RB_SetUpFACH_PS.
$Comment /* to be used in test case tc_7_1_2_4a. Modified MAC logical channel priority and timer Poll disabled */
$ASN1_ConsValue
REPLACE
message.radioBearerSetup.r3.radioBearerSetup_r3.rab_InformationSetupList.[0].rb_InformationSetupList.[0].rb_MappingInfo.[0].ul_LogicalChannelMappings.oneLogicalChannel.mac_LogicalChannelPriority BY 8,
REPLACE message.radioBearerSetup.r3.radioBearerSetup_r3.rab_InformationSetupList.[0].rb_InformationSetupList.[0].rlc_InfoChoice.rlc_Info.ul_RLC_Mode.ul_AM_RLC_Mode.pollingInfo.timerPoll BY OMIT
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cds_RRC_ConnSetupDCH_NoCapEnq
(
    p_InitUEId:             InitialUE_Identity;
    p_RRC_Ti:             RRC_TransactionIdentifier;
    p_PrmbScrmCode: PrimaryScramblingCode;
    p_U_RNTI_New : U_RNTI;
    p_UL_ScramblingCode : UL_ScramblingCode
)
$PDU_Id DL_CCCH_Message
$DerivPath cbs_108_RRC_ConnSetupDCH.
$ASN1_ConsValue
REPLACE message.rrcConnectionSetup.r3.rrcConnectionSetup_r3.capabilityUpdateRequirement BY OMIT
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cds_RRC_ConnSetupFACH_NoCapEnq
(
    p_InitUEId :             InitialUE_Identity;
    p_RRC_Ti :             RRC_TransactionIdentifier;
    p_PrmbScrmCode: PrimaryScramblingCode;
    p_U_RNTI_New : U_RNTI;
    p_CRNTI_New :  C_RNTI;
    p_UL_ScramblingCode : UL_ScramblingCode
)
$PDU_Id DL_CCCH_Message
$DerivPath cbs_108_RRC_ConnSetupFACH.
$ASN1_ConsValue
REPLACE message.rrcConnectionSetup.r3.rrcConnectionSetup_r3.capabilityUpdateRequirement BY OMIT
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cbr_108_RB_SetUpCmpl 
( 
  p_RRC_Ti : RRC_TransactionIdentifier; 
  p_Count_C_ActivationTime : ActivationTime; 
  p_RB_ActivationTimeInfoList : RB_ActivationTimeInfoList 
)
$PDU_Id UL_DCCH_Message
$DerivPath 
$Comment /* Defined in TS 34.108 clause 9. 
 
p_Count_C_ActivationTime : The presence of this IE depends on the following 2 factors: (a) There exists RB(s) mapped to RLC-TM and (b) UE is transiting to CELL_DCH state after the RB establishment procedure. Else, this IE is absent 
 
p_RB_ActivationTimeInfoList : If ciphering is not activated in RADIO BEARER SETUP message, this IE must be absent. Else, SS checks this IE for the presence of activation times of all ciphered uplink RLC-UM and RLC-AM RBs */
$ASN1_ConsValue
{
  integrityCheckInfo * ,
  message radioBearerSetupComplete : {
    rrc_TransactionIdentifier p_RRC_Ti,
    ul_IntegProtActivationInfo *,
    ul_TimingAdvance *,
    start_Value ?, 
    count_C_ActivationTime p_Count_C_ActivationTime,
    rb_UL_CiphActivationTimeInfo p_RB_ActivationTimeInfoList,
    ul_CounterSynchronisationInfo *,
    laterNonCriticalExtensions *
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cbr_108_RRC_ConnRelCmpl ( p_RRC_Ti: RRC_TransactionIdentifier)
$PDU_Id UL_DCCH_Message
$DerivPath 
$Comment /* Defined in TS 34.108 clause 9. */
$ASN1_ConsValue
{ integrityCheckInfo *,
  message rrcConnectionReleaseComplete : {
    rrc_TransactionIdentifier p_RRC_Ti,
    errorIndication *,
    laterNonCriticalExtensions *
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cbr_108_RRC_ConnReq (p_EstCause:  EstablishmentCause)
$PDU_Id UL_CCCH_Message
$DerivPath 
$Comment /* Defined in TS 34.108 clause 9. */
$ASN1_ConsValue
{ integrityCheckInfo OMIT,
  message rrcConnectionRequest :
  {
    initialUE_Identity ( imsi : ? , tmsi_and_LAI : ? , p_TMSI_and_RAI : ?, imei : ? ),
    establishmentCause p_EstCause,
    protocolErrorIndicator noError,
    measuredResultsOnRACH *,
    v3d0NonCriticalExtensions * 
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cbr_108_RRC_SecModeCmpl 
( p_RRC_Ti : RRC_TransactionIdentifier; 
  p_RB_ActivationTimeInfoList : RB_ActivationTimeInfoList 
)
$PDU_Id UL_DCCH_Message
$DerivPath 
$Comment /* Defined in TS 34.108 clause 9. */
$ASN1_ConsValue
{ integrityCheckInfo *,
  message securityModeComplete : {
    rrc_TransactionIdentifier p_RRC_Ti ,
    ul_IntegProtActivationInfo *,
    rb_UL_CiphActivationTimeInfo p_RB_ActivationTimeInfoList,
    laterNonCriticalExtensions * 
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cbs_108_RB_SetUpFACH_PS ( 
    p_Integrityinfo :    IntegrityCheckInfo; 
    p_RRC_Ti : RRC_TransactionIdentifier; 
    p_RAB_Id : BITSTRING; 
    p_NewC_RNTI : C_RNTI 
)
$PDU_Id DL_DCCH_Message
$DerivPath 
$Comment /* Defined in TS 34.123-1 annex A condition A.6 */
$ASN1_ConsValue
{
  integrityCheckInfo p_Integrityinfo,
  message radioBearerSetup: r3 : {
    radioBearerSetup_r3 {
      rrc_TransactionIdentifier p_RRC_Ti,
      integrityProtectionModeInfo OMIT,
      cipheringModeInfo OMIT,
      activationTime OMIT,
      new_U_RNTI OMIT,
      new_C_RNTI p_NewC_RNTI ,
      rrc_StateIndicator cell_FACH,
      utran_DRX_CycleLengthCoeff OMIT,
      cn_InformationInfo OMIT,
      srb_InformationSetupList OMIT,
      rab_InformationSetupList c_RAB_InfoListFACH_PS ( useT315, p_RAB_Id, c_RLC_InfoAM_Def),
      rb_InformationAffectedList OMIT ,
      ul_CommonTransChInfo c_UL_CommTrChInfoDCH_PS_64k,
      ul_deletedTransChInfoList OMIT,
      ul_AddReconfTransChInfoList c_UL_AddReconfTransChInfoListDCH_PS_64k,
      modeSpecificTransChInfo fdd:{
        cpch_SetID OMIT,
        addReconfTransChDRAC_Info OMIT
      },
      dl_CommonTransChInfo c_DL_CommonTransChInfoDCH ( c_TFCS_Cmpl0_1_2_3_4_5_6_7_8_9_Rx),
      dl_DeletedTransChInfoList OMIT,
      dl_AddReconfTransChInfoList c_DL_AddReconfTransChInfoListDCH_PS_64k,
      frequencyInfo OMIT,
      maxAllowedUL_TX_Power OMIT,
      ul_ChannelRequirement OMIT,
      modeSpecificPhysChInfo fdd:{
        dl_PDSCH_Information OMIT
      },
      dl_CommonInformation OMIT ,
      dl_InformationPerRL_List OMIT
    },
    v3a0NonCriticalExtensions {
      radioBearerSetup_v3a0ext { new_DSCH_RNTI OMIT },
      laterNonCriticalExtensions OMIT
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cbs_108_RRC_ConnSetupDCH 
( 
    p_InitUEId :             InitialUE_Identity; 
    p_RRC_Ti :             RRC_TransactionIdentifier; 
    p_PrmbScrmCode : PrimaryScramblingCode; 
    p_U_RNTI_New : U_RNTI; 
    p_UL_ScramblingCode : UL_ScramblingCode 
)
$PDU_Id DL_CCCH_Message
$DerivPath 
$Comment /* Defined in TS 34.108 clause 9. */
$ASN1_ConsValue
{
  integrityCheckInfo OMIT,
  message rrcConnectionSetup:
  r3 :
  {
    rrcConnectionSetup_r3 --RRCConnectionSetup_r3_IEs
    {
      initialUE_Identity p_InitUEId,
      rrc_TransactionIdentifier p_RRC_Ti,
      activationTime OMIT,
      new_U_RNTI p_U_RNTI_New ,
      new_c_RNTI OMIT,
      rrc_StateIndicator cell_DCH ,
      utran_DRX_CycleLengthCoeff 9,
      capabilityUpdateRequirement {
        ue_RadioCapabilityFDDUpdateRequirement TRUE,
        ue_RadioCapabilityTDDUpdateRequirement FALSE,
        systemSpecificCapUpdateReqList {gsm}
      },
      srb_InformationSetupList {
        c_SRB_InfoSetupUM_DCH ( tsc_UL_DCCH1, tsc_UL_MAC_Prt1, tsc_UL_MAC_Prt1, tsc_DL_DCCH1),
        c_SRB_InfoSetupAM_DCH ( tsc_UL_DCCH2, tsc_UL_MAC_Prt2, tsc_UL_MAC_Prt2, tsc_DL_DCCH2),
        c_SRB_InfoSetupAM_DCH ( tsc_UL_DCCH3, tsc_UL_MAC_Prt3, tsc_UL_MAC_Prt3, tsc_DL_DCCH3),
        c_SRB_InfoSetupAM_DCH ( tsc_UL_DCCH4, tsc_UL_MAC_Prt4, tsc_UL_MAC_Prt4, tsc_DL_DCCH4)
      },
      ul_CommonTransChInfo c_UL_CommTrChInfoDCCH_13_6k,
      ul_AddReconfTransChInfoList c_UL_AddReconfTransChInfoListDCCH_13_6k,
      dl_CommonTransChInfo c_DL_CommonTransChInfoSameAsUL,
      dl_AddReconfTransChInfoList c_DL_AddReconfTransChInfoListDCCH_SRB,
      frequencyInfo OMIT,
      maxAllowedUL_TX_Power OMIT,
      ul_ChannelRequirement ul_DPCH_Info : c_UL_DPCH_13_6_StandAlone ( p_UL_ScramblingCode ),
      dl_CommonInformation cd_DL_CommonInformationDCH_DPCH_Offset ( tsc_DL_DPCH1_SFP_SRB ),
      dl_InformationPerRL_List c_DL_InfoPerRL_DPCH_Offset (p_PrmbScrmCode, tsc_DL_DPCH1_2ndScrC, tsc_DL_DPCH1_ChC_SRB)
    },
    laterNonCriticalExtensions OMIT
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cbs_108_RRC_ConnSetupFACH 
( 
    p_InitUEId :             InitialUE_Identity; 
    p_RRC_Ti :             RRC_TransactionIdentifier; 
    p_PrmbScrmCode: PrimaryScramblingCode; 
    p_U_RNTI_New : U_RNTI; 
    p_CRNTI_New :  C_RNTI; 
    p_UL_ScramblingCode : UL_ScramblingCode 
)
$PDU_Id DL_CCCH_Message
$DerivPath 
$Comment /* Defined in TS 34.123-1 annex A */
$ASN1_ConsValue
{
  integrityCheckInfo OMIT,
  message rrcConnectionSetup:
  r3 :
  {
    rrcConnectionSetup_r3 --RRCConnectionSetup_r3_IEs
    {
      initialUE_Identity p_InitUEId,
      rrc_TransactionIdentifier p_RRC_Ti ,
      activationTime OMIT,
      new_U_RNTI p_U_RNTI_New ,
      new_c_RNTI p_CRNTI_New,
      rrc_StateIndicator cell_FACH ,
      utran_DRX_CycleLengthCoeff 9,
      capabilityUpdateRequirement {
        ue_RadioCapabilityFDDUpdateRequirement TRUE,
        ue_RadioCapabilityTDDUpdateRequirement FALSE,
        systemSpecificCapUpdateReqList {gsm}
      },
      srb_InformationSetupList {
        c_SRB_InfoSetupUM_FACH (tsc_RB1, tsc_UL_DCCH1, tsc_UL_MAC_Prt1, tsc_UL_MAC_Prt1, tsc_DL_DCCH1),
        c_SRB_InfoSetupAM_FACH (tsc_RB2,tsc_UL_DCCH2, tsc_UL_MAC_Prt2, tsc_UL_MAC_Prt2, tsc_DL_DCCH2),
        c_SRB_InfoSetupAM_FACH (tsc_RB3, tsc_UL_DCCH3, tsc_UL_MAC_Prt3, tsc_UL_MAC_Prt3, tsc_DL_DCCH3),
        c_SRB_InfoSetupAM_FACH (tsc_RB4, tsc_UL_DCCH4, tsc_UL_MAC_Prt4, tsc_UL_MAC_Prt4, tsc_DL_DCCH4)
      },
      ul_CommonTransChInfo c_UL_CommTrChInfoDCCH_13_6k,
      ul_AddReconfTransChInfoList c_UL_AddReconfTransChInfoListDCCH_3_4k,
      dl_CommonTransChInfo c_DL_CommonTransChInfoSameAsUL,
      dl_AddReconfTransChInfoList c_DL_AddReconfTransChInfoListDCCH_SRB,
      frequencyInfo OMIT,
      maxAllowedUL_TX_Power OMIT,
      ul_ChannelRequirement OMIT,
      dl_CommonInformation OMIT,
      dl_InformationPerRL_List OMIT
    },
    laterNonCriticalExtensions OMIT
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cr_108_RB_ReconfCmpl  
( 
  p_RRC_Ti : RRC_TransactionIdentifier; 
  p_Count_C_ActivationTime : ActivationTime 
)
$PDU_Id UL_DCCH_Message
$DerivPath 
$Comment /* Defined in 34.123-1 annex A */
$ASN1_ConsValue
{
  integrityCheckInfo * ,
  message radioBearerReconfigurationComplete : { --RadioBearerReconfigurationComplete
    rrc_TransactionIdentifier p_RRC_Ti,
    ul_IntegProtActivationInfo *,
    ul_TimingAdvance *,
    count_C_ActivationTime p_Count_C_ActivationTime ,
    rb_UL_CiphActivationTimeInfo OMIT,
    laterNonCriticalExtensions *
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cr_108_RRC_ConnSetupCmpl ( p_RRC_Ti :   RRC_TransactionIdentifier; p_STARTList : STARTList )
$PDU_Id UL_DCCH_Message
$DerivPath 
$Comment /* Defined in TS 34.108 clause 9. */
$ASN1_ConsValue
{ integrityCheckInfo OMIT,
  message rrcConnectionSetupComplete : {
    rrc_TransactionIdentifier p_RRC_Ti,
    startList p_STARTList ,
    ue_RadioAccessCapability *,
    ue_RATSpecificCapability *,
    v370NonCriticalExtensions *
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cr_108_SecModeFail (p_RRC_Ti :   RRC_TransactionIdentifier; p_FailureCauseWithProtErr : FailureCauseWithProtErr )
$PDU_Id UL_DCCH_Message
$DerivPath 
$ASN1_ConsValue
{ integrityCheckInfo * ,
  message securityModeFailure :
  {
    rrc_TransactionIdentifier p_RRC_Ti,
    failureCause p_FailureCauseWithProtErr,
    laterNonCriticalExtensions * 
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cr_RRC_MeasRep
$PDU_Id UL_DCCH_Message
$DerivPath 
$ASN1_ConsValue
{ integrityCheckInfo *,
  message measurementReport : ?
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cr_RRC_RB_SetUpCmplNoStartVal 
( 
  p_RRC_Ti : RRC_TransactionIdentifier; 
  p_Count_C_ActivationTime : ActivationTime; 
  p_RB_ActivationTimeInfoList : RB_ActivationTimeInfoList 
)
$PDU_Id UL_DCCH_Message
$DerivPath 
$Comment /* START value  is omitted 
 
p_Count_C_ActivationTime : The presence of this IE depends on the following 2 factors: (a) There exists RB(s) mapped to RLC-TM and (b) UE is transiting to CELL_DCH state after the RB establishment procedure. Else, this IE is absent 
 
p_RB_ActivationTimeInfoList : If ciphering is not activated in RADIO BEARER SETUP message, this IE must be absent. Else, SS checks this IE for the presence of activation times of all ciphered uplink RLC-UM and RLC-AM RBs */
$ASN1_ConsValue
{
  integrityCheckInfo * ,
  message radioBearerSetupComplete : {
    rrc_TransactionIdentifier p_RRC_Ti,
    ul_IntegProtActivationInfo *,
    ul_TimingAdvance *,
    start_Value OMIT,
    count_C_ActivationTime p_Count_C_ActivationTime,
    rb_UL_CiphActivationTimeInfo p_RB_ActivationTimeInfoList,
    laterNonCriticalExtensions *
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cr_RRC_RrcConnReqAny
$PDU_Id UL_CCCH_Message
$DerivPath 
$ASN1_ConsValue
{ integrityCheckInfo OMIT,
  message rrcConnectionRequest :
  {
    initialUE_Identity ?,
    establishmentCause ?,
    protocolErrorIndicator noError,
    measuredResultsOnRACH *,
    v3d0NonCriticalExtensions * 
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cr_RRC_RrcStatus
$PDU_Id UL_DCCH_Message
$DerivPath 
$ASN1_ConsValue
{ integrityCheckInfo *,
  message rrcStatus : ?
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cr_RRC_SigConnRelInd ( p_CN_Domain : CN_DomainIdentity)
$PDU_Id UL_DCCH_Message
$DerivPath 
$ASN1_ConsValue
{
  integrityCheckInfo *,
  message signallingConnectionReleaseIndication :
  {
    cn_DomainIdentity p_CN_Domain,
    laterNonCriticalExtensions * 
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_108_RRC_ConnRelCCCH ( 
p_U_rnti: U_RNTI;  
p_RRC_Ti: RRC_TransactionIdentifier)
$PDU_Id DL_CCCH_Message
$DerivPath 
$Comment /* Defined in TS 34.108 clause 9. */
$ASN1_ConsValue
{ integrityCheckInfo OMIT,
  message rrcConnectionRelease : r3 :
  {
    rrcConnectionRelease_CCCH_r3
    {
      u_RNTI p_U_rnti,
      rrcConnectionRelease
      {
        rrc_TransactionIdentifier p_RRC_Ti,
        n_308 OMIT,
        releaseCause normalEvent
      }
    },
    laterNonCriticalExtensions OMIT
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_108_RRC_ConnRelDCCH ( 
    p_IntegrityCheckInfo : IntegrityCheckInfo; 
    p_RRC_Ti: RRC_TransactionIdentifier;  
    p_N308: INTEGER)
$PDU_Id DL_DCCH_Message
$DerivPath 
$Comment /* Defined in TS 34.108 clause 9. */
$ASN1_ConsValue
{ integrityCheckInfo p_IntegrityCheckInfo,
  message rrcConnectionRelease : r3 :
  {
    rrcConnectionRelease_r3
    {
      rrc_TransactionIdentifier p_RRC_Ti,
      n_308 p_N308,
      releaseCause normalEvent,
      rplmn_information OMIT
    },
    laterNonCriticalExtensions OMIT
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_108_RRC_SecModeCmd (    p_IntegrityCheckInfo : IntegrityCheckInfo; p_SecModeCmd: SecurityModeCommand)
$PDU_Id DL_DCCH_Message
$DerivPath 
$Comment /* Defined in TS 34.108 clause 9. */
$ASN1_ConsValue
{ integrityCheckInfo p_IntegrityCheckInfo,
  message securityModeCommand : p_SecModeCmd
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_RRC_PagingType1_ModifySI( 
p_mib_valuetag: MIB_ValueTag 
 )
$PDU_Id PCCH_Message
$DerivPath 
$ASN1_ConsValue
{
  message pagingType1: { --PagingType1
    pagingRecordList OMIT,
    bcch_ModificationInfo {
      mib_ValueTag p_mib_valuetag,
      bcch_ModificationTime OMIT -- changed immediately
    },
    laterNonCriticalExtensions OMIT
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_RRC_PagingType1_PTMSI (  
p_PagCause :  PagingCause;  
p_P_tmsi : P_TMSI_GSM_MAP; 
p_Domain :  CN_DomainIdentity 
)
$PDU_Id PCCH_Message
$DerivPath 
$ASN1_ConsValue
{
  message pagingType1: c_PagingType1_P_TMSI ( p_PagCause, p_P_tmsi, p_Domain )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_RRC_PagingType1_TMSI(p_PagCause:  PagingCause; p_Tmsi:TMSI_GSM_MAP; 
    p_Domain :  CN_DomainIdentity)
$PDU_Id PCCH_Message
$DerivPath 
$ASN1_ConsValue
{
  message pagingType1: c_PagingType1_TMSI(p_PagCause, p_Tmsi, p_Domain )
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_RRC_RB_SetUp ( 
    p_Integrityinfo :    IntegrityCheckInfo; 
    p_RRC_Ti : RRC_TransactionIdentifier; 
    p_Activetime :        ActivationTime; 
    p_RRCStateInd :    RRC_StateIndicator;  
    p_FreqInfo :            FrequencyInfo; 
    p_Rablist :               RAB_InformationSetupList; 
    p_UlCommTrChInfo :  UL_CommonTransChInfo; 
    p_UlAddReconfTrChInfo : UL_AddReconfTransChInfoList;  
    p_DlCommTrChInfo :  DL_CommonTransChInfo; 
    p_DlAddReconfTrChInfo : DL_AddReconfTransChInfoList; 
    p_DlInfoPerRl :         DL_InformationPerRL_List; 
    p_DL_CommonInformation : DL_CommonInformation; 
    p_UL_DPCH_Info : UL_DPCH_Info; 
    p_RB_InformationAffectedList : RB_InformationAffectedList 
)
$PDU_Id DL_DCCH_Message
$DerivPath 
$ASN1_ConsValue
{
  integrityCheckInfo p_Integrityinfo,
  message radioBearerSetup: r3 : {
    radioBearerSetup_r3 {
      rrc_TransactionIdentifier p_RRC_Ti,
      integrityProtectionModeInfo OMIT,
      cipheringModeInfo OMIT,
      activationTime p_Activetime,
      new_U_RNTI OMIT,
      new_C_RNTI OMIT,
      rrc_StateIndicator p_RRCStateInd,
      utran_DRX_CycleLengthCoeff OMIT,
      cn_InformationInfo OMIT,
      srb_InformationSetupList OMIT,
      rab_InformationSetupList p_Rablist,
      rb_InformationAffectedList p_RB_InformationAffectedList ,
      ul_CommonTransChInfo p_UlCommTrChInfo,
      ul_deletedTransChInfoList OMIT,
      ul_AddReconfTransChInfoList p_UlAddReconfTrChInfo,
      modeSpecificTransChInfo fdd:{
        cpch_SetID OMIT,
        addReconfTransChDRAC_Info OMIT
      },
      dl_CommonTransChInfo p_DlCommTrChInfo,
      dl_DeletedTransChInfoList OMIT,
      dl_AddReconfTransChInfoList p_DlAddReconfTrChInfo,
      frequencyInfo p_FreqInfo,
      maxAllowedUL_TX_Power tsc_MaxAllowPwr,
      ul_ChannelRequirement ul_DPCH_Info : p_UL_DPCH_Info,
      modeSpecificPhysChInfo fdd:{
        dl_PDSCH_Information OMIT
      },
      dl_CommonInformation p_DL_CommonInformation,
      dl_InformationPerRL_List p_DlInfoPerRl
    },
    v3a0NonCriticalExtensions {
      radioBearerSetup_v3a0ext { new_DSCH_RNTI OMIT },
      laterNonCriticalExtensions OMIT
    }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_SIB_MsgCmpl(p_SIBType : SIB_Type; p_SIBData: SIB_Data_fixed)
$PDU_Id BCCH_BCH_Message
$DerivPath 
$Comment /* System information message contains complete SIB/SB/MIB. The actual value of sfn_Prime shall be filled in by lower layer before sent on air. */
$ASN1_ConsValue
{
  message {
    sfn_Prime 0,
    payload completeSIB : {
      sib_Type p_SIBType,
      sib_Data_fixed p_SIBData }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_SIB_MsgCmplList1(p_SIBType : SIB_Type; p_SIBData: SIB_Data_variable)
$PDU_Id BCCH_BCH_Message
$DerivPath 
$Comment /* System information message contains complete SIB/SB/MIB. The actual value of sfn_Prime shall be filled in by lower layer before sent on air. */
$ASN1_ConsValue
{
  message {
    sfn_Prime 0,
    payload completeSIB_List : {{
        sib_Type p_SIBType,
        sib_Data_variable p_SIBData }}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_SIB_MsgCmplList2(p_SIBType1 : SIB_Type; p_SIBData1:SIB_Data_variable;  p_SIBType2 :SIB_Type; p_SIBData2: SIB_Data_variable)
$PDU_Id BCCH_BCH_Message
$DerivPath 
$Comment /* System information message contains two complete SIB's. The actual value of sfn_Prime shall be filled in by lower layer before sent on air. */
$ASN1_ConsValue
{
  message {
    sfn_Prime 0,
    payload completeSIB_List : {{
        sib_Type p_SIBType1,
        sib_Data_variable p_SIBData1 },
      {
        sib_Type p_SIBType2,
        sib_Data_variable p_SIBData2 }}
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_SIB_MsgFirst(p_SIBType : SIB_Type; p_SegCount: INTEGER; p_SIBData: SIB_Data_fixed)
$PDU_Id BCCH_BCH_Message
$DerivPath 
$Comment /* The actual value of sfn_Prime shall be filled in by lower layer before sent on air. */
$ASN1_ConsValue
{
  message {
    sfn_Prime 0, -- place holder
    payload firstSegment : {
      sib_Type p_SIBType,
      seg_Count p_SegCount,
      sib_Data_fixed p_SIBData }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_SIB_MsgLast(p_SIBType : SIB_Type; p_SegIndex : INTEGER; p_SIBData: SIB_Data_fixed)
$PDU_Id BCCH_BCH_Message
$DerivPath 
$Comment /* The actual value of sfn_Prime shall be filled in by lower layer before sent on air. this message contains last segment which is 222 bits long. */
$ASN1_ConsValue
{
  message {
    sfn_Prime 0,
    payload lastSegment : {
      sib_Type p_SIBType,
      segmentIndex p_SegIndex,
      sib_Data_fixed p_SIBData }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_SIB_MsgLastShort(p_SIBType : SIB_Type; p_SegIndex : INTEGER; p_SIBData: SIB_Data_variable)
$PDU_Id BCCH_BCH_Message
$DerivPath 
$Comment /* The actual value of sfn_Prime shall be filled in by lower layer before sent on air. this message contains last segment which is short than 215 bits. */
$ASN1_ConsValue
{
  message {
    sfn_Prime 0,
    payload lastSegmentShort : {
      sib_Type p_SIBType,
      segmentIndex p_SegIndex,
      sib_Data_variable p_SIBData }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_SIB_MsgNoSegment
$PDU_Id BCCH_BCH_Message
$DerivPath 
$Comment /* System information message contains no SIB, sent on the frame which there is no any SIB/SB/MIB scheduled on. The actual value of sfn_Prime shall be filled in by lower layer before sent on air. */
$ASN1_ConsValue
{
  message {
    sfn_Prime 0,
    payload noSegment : NULL
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_SIB_MsgSubsequent(p_SIBType : SIB_Type; p_SegIndex : INTEGER;  p_SIBData: SIB_Data_fixed)
$PDU_Id BCCH_BCH_Message
$DerivPath 
$Comment /* The actual value of sfn_Prime shall be filled in by lower layer before sent on air. */
$ASN1_ConsValue
{
  message {
    sfn_Prime 0,
    payload subsequentSegment : {
      sib_Type p_SIBType,
      segmentIndex p_SegIndex,
      sib_Data_fixed p_SIBData }
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$Begin_ASN1_PDU_Constraint
$ConsId cs_SysInfoChangeInd(  
p_mib_valuetag: MIB_ValueTag  
 )
$PDU_Id BCCH_FACH_Message
$DerivPath 
$EncRuleId PER_Unaligned
$ASN1_ConsValue
{
  message systemInformationChangeIndication : { --System Information Change Indication
    bcch_ModificationInfo {
      mib_ValueTag p_mib_valuetag,
      bcch_ModificationTime OMIT --0
    },
    laterNonCriticalExtensions OMIT
  }
}
$End_ASN1_ConsValue
$Comment /*  */
$End_ASN1_PDU_Constraint
$End_ASN1_PDU_Constraints
$End_PDU_Constraints
$End_ConstraintsPart
$DynamicPart
$TestCases
$TestGroup
$TestGroupId MAC
$TestGroup
$TestGroupId MappingBetweenLoChAndTrCh
$Begin_TestCase
$TestCaseId tc_7_1_1_1
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$TestPurpose /* 1.	To verify that the UE discards PDUs with reserved or incorrect values in the TCTF field.
2.	To verify that the TCTF field is correctly applied when a CCCH is mapped to the RACH/FACH. */
$DefaultsRef MAC_Default
$Comment /* Reference :
TS 25.321 clauses 9.2.1 and 9.2.1.4. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_Guard( 300 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_GenericSetupProceduresToIdleUpdate_CCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_TestBody
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +po_ConnectionAndSS_Rel( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_TestBody
$BehaviourLine
$LabelId TBS
$Line [0] ( tcv_TestBody := TRUE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_RRC_PagType1_DefMAC (
  tsc_DefaultCellId)
$Cref 
$VerdictId 
$Comment /* Step 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_MAC_ReceiveRRC_ConnReqInDefaultCellAndInit
$Cref 
$VerdictId 
$Comment /* Step 2  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_SendRRC_ConnecSetup( c_MAC_PDU_CCCH_TCTF ( tsc_Reserved1_OnFACH_FDD ), (tsc_UM_CCCH_Payloadsize) ,8)
$Cref 
$VerdictId 
$Comment /* Step 5 Sent with incorrect TCTF '0100 0001'B */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_MAC_ReceiveRRC_ConnReqInDefaultCell
$Cref 
$VerdictId 
$Comment /* Step 6 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_SendRRC_ConnecSetup( c_MAC_PDU_CCCH_TCTF ( tsc_CTCH_OnFACH_FDD ), ( tsc_UM_CCCH_Payloadsize ) ,8)
$Cref 
$VerdictId 
$Comment /* Step 7 Sent with incorrect TCTF '1000 0000'B */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_MAC_ReceiveRRC_ConnReqInDefaultCell
$Cref 
$VerdictId 
$Comment /* Step 8 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SendRRC_ConnecSetup( c_MAC_PDU_CCCH_TCTF ( tsc_Reserved2_OnFACH_FDD ), (tsc_UM_CCCH_Payloadsize ) ,8)
$Cref 
$VerdictId 
$Comment /* Step 9 Sent with incorrect TCTF ''1000 0001'B */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_MAC_ReceiveRRC_ConnReqInDefaultCell
$Cref 
$VerdictId 
$Comment /* Step 10 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_SendRRC_ConnecSetup( c_MAC_PDU_CCCH_TCTF ( tsc_CCCH_OnFACH_FDD), (tsc_UM_CCCH_Payloadsize ) ,8)
$Cref 
$VerdictId 
$Comment /* Step 13 Sent with  correct TCTF '0100 0000'B */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_SetCellCfg (tsc_DefaultCellId, cell_FACH_MAC_SRB0 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSP1
$Line [11] AM ? RLC_AM_DATA_IND
$Cref car_RRC_ConnSetupCmpl(tsc_CellDedicated, 
tsc_RB2,cr_108_RRC_ConnSetupCmpl (0, *))
$VerdictId (P)
$Comment /* Step 14 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] +lt_ReceiveIDT
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TBE
$Line [13] (tcv_TestBody := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_ReceiveIDT
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain = cs_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc?RRC_DataInd
$Cref car_InitDirectTransfer_MAC ( tsc_CellDedicated,  tsc_RB3, tsc_SS_CS_Domain, cr_PagingResponseAny)
$VerdictId 
$Comment /* Receive the Initial direct Transfer Message for Paging Response */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain = ps_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc?RRC_DataInd
$Cref car_InitDirectTransfer_MAC ( tsc_CellDedicated,  tsc_RB3, tsc_SS_PS_Domain, cr_ServiceRequestAny )
$VerdictId 
$Comment /* Receive the Initial direct Transfer Message for Service Request */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. PAGE UE */
$End_TestCase
$Begin_TestCase
$TestCaseId tc_7_1_1_2
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$TestPurpose /* 1. To verify that the UE discards PDUs with reserved or incorrect values in the
   TCTF field
2. To verify that the TCTF field, C/T field, UE-Id type and UE-Id field are 
   correctly applied when a DTCH or DCCH is mapped to the RACH/FACH */
$DefaultsRef MAC_Default
$Comment /* Reference(s)
TS 25.321 clauses 9.2.1 and  9.2.1.1 c). */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_Guard( 300 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_MAC_GenericSetupProceduresToBGP6_2Or6_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_TestBody
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +po_ConnectionAndSS_Rel( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_TestBody
$BehaviourLine
$LabelId TBS
$Line [0] ( tcv_TestBody := TRUE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_SendDLDirectTransfer( tsc_RB_DCCH_FACH_MAC,
  c_MAC_PDU_TCTF(  tsc_Reserved1_OnFACH_FDD, - ), 
  tsc_ExpectedPayloadSize-6,0 )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_MonitorUplinkSpecefiedTime (10)
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  c_MAC_PDU_TCTF( tsc_DCCH_OnFACH_FDD, - ),
  tsc_ExpectedPayloadSize,0 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ReceiveRRC_RLC_StatusPDU_FACH ( tsc_RB_DCCH_FACH_MAC, cr_SUFI_Params ( INT_TO_BIT (0,12) , INT_TO_BIT (0,12), *, *, ?, ?, ?  ) )
$Cref 
$VerdictId 
$Comment /* 6 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  c_MAC_PDU_TCTF(  tsc_Reserved3_OnFACH_FDD, - ),
  tsc_ExpectedPayloadSize - 6,1 )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_MonitorUplinkSpecefiedTime (10)
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  c_MAC_PDU_TCTF( tsc_DCCH_OnFACH_FDD, - ),
  tsc_ExpectedPayloadSize,1 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_ReceiveRRC_RLC_StatusPDU_FACH  ( tsc_RB_DCCH_FACH_MAC, cr_SUFI_Params ( INT_TO_BIT (1,12) , INT_TO_BIT (1,12) , *, *, ?, ?, ?))
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  c_MAC_PDU_TCTF(tsc_CTCH_OnFACH_FDD, - ),
  tsc_ExpectedPayloadSize - 6 ,2)
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] +ts_MonitorUplinkSpecefiedTime (10)
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  c_MAC_PDU_TCTF( tsc_DCCH_OnFACH_FDD, - ),
  tsc_ExpectedPayloadSize,2 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] +ts_ReceiveRRC_RLC_StatusPDU_FACH  ( tsc_RB_DCCH_FACH_MAC, cr_SUFI_Params ( INT_TO_BIT (2,12) , INT_TO_BIT (2,12), *, *, ?, ?, ?) )
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  c_MAC_PDU_TCTF( tsc_Reserved2_OnFACH_FDD, - ),
  tsc_ExpectedPayloadSize - 6,3 )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] +ts_MonitorUplinkSpecefiedTime (10)
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  c_MAC_PDU_TCTF( tsc_DCCH_OnFACH_FDD, - ),
  tsc_ExpectedPayloadSize,3 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] +ts_ReceiveRRC_RLC_StatusPDU_FACH ( tsc_RB_DCCH_FACH_MAC, cr_SUFI_Params ( INT_TO_BIT (3,12) , INT_TO_BIT (3,12), *, *, ?, ?, ?) )
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  c_MAC_PDU_TCTF( tsc_Reserved4_OnFACH_FDD, - ),
  tsc_ExpectedPayloadSize - 6,4 )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [18] +ts_MonitorUplinkSpecefiedTime (10)
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [19] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  c_MAC_PDU_TCTF( tsc_DCCH_OnFACH_FDD, - ),
  tsc_ExpectedPayloadSize,4 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [20] +ts_ReceiveRRC_RLC_StatusPDU_FACH ( tsc_RB_DCCH_FACH_MAC, cr_SUFI_Params ( INT_TO_BIT (4,12) , INT_TO_BIT (4,12), *, *, ?, ?, ?) )
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId TBE
$Line [21] (tcv_TestBody := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Receive PAGING RESPONSE in an RRC InitialDirectTransfer message on the high
priority NAS AM DCCH and Acknowledge receipt of the AM RLC PDU with SN 0. (STEP 1)

The paging response message is expected to fit into a single RLC PDU. This
depends on the following:

1.1. The NAS PAGING RESPONSE message will be exactly 11 octets.
     This results from 7 octets of fixed length information, and since a TMSI is
     available, it shall be used as the mobile identity (4 octets)

1.3. The field measuredResultsOnRACH in InitialDirectTransfer will be omitted,
     because system information block 12 specifies that no measurement reports
     should be provided by the UE.
2. Send the dummy dl direct Transfer message with invalid MAC header (Step 2)
3. Monitor RACH for 10 seconds. If any activity test case fails. (Step 2a)
4 Send the dummy dl direct Transfer Message with correct MAC header (Step 3)

5. Receive RRC and RLC staus PDU's (Step 4 and 5) */
$End_TestCase
$Begin_TestCase
$TestCaseId tc_7_1_1_3
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$TestPurpose /* 1. To verify that the UE discards PDUs with reserved or incorrect values in C/T 
   field.

2. To verify that the TCTF field, C/T field, UE-Id type and UE-Id field are 
   correctly applied when a DTCH or DCCH is mapped to the RACH/FACH. */
$DefaultsRef MAC_Default
$Comment /* Reference(s)
TS 25.321 clauses 9.2.1 and  9.2.1.1 c). */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_Guard( 300 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_MAC_GenericSetupProceduresToBGP6_2Or6_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_TestBody
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +po_ConnectionAndSS_Rel( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_TestBody
$BehaviourLine
$LabelId TBS
$Line [0] ( tcv_TestBody := TRUE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_SendDLDirectTransfer( tsc_RB_DCCH_FACH_MAC,
 cs_MAC_PDU_CT( tsc_CT_LoCh8, - ),
  tsc_ExpectedPayloadSize,0 )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_MonitorUplinkSpecefiedTime (10)
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  cs_MAC_PDU_CT( tsc_CT_LoCh3, - ),
  tsc_ExpectedPayloadSize,0 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ReceiveRRC_RLC_StatusPDU_FACH ( tsc_RB_DCCH_FACH_MAC, cr_SUFI_Params ( INT_TO_BIT (0,12) , INT_TO_BIT (0,12), *, *, ?, ?, ?) )
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  cs_MAC_PDU_CT( tsc_CT_Reserved, - ),
  tsc_ExpectedPayloadSize ,1 )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_MonitorUplinkSpecefiedTime (10)
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
 cs_MAC_PDU_CT( tsc_CT_LoCh3, - ),
  tsc_ExpectedPayloadSize,1 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_ReceiveRRC_RLC_StatusPDU_FACH ( tsc_RB_DCCH_FACH_MAC, cr_SUFI_Params ( INT_TO_BIT (1,12) , INT_TO_BIT (1,12), *, *, ?, ?, ?) )
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId TBE
$Line [9] (tcv_TestBody := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Receive PAGING RESPONSE in an RRC InitialDirectTransfer message on the high
priority NAS AM DCCH. 

The paging response message is expected to fit into a single RLC PDU. This
1. Receive PAGING RESPONSE in an RRC InitialDirectTransfer message on the high
priority NAS AM DCCH and Acknowledge receipt of the AM RLC PDU with SN 0. (STEP 1)

The paging response message is expected to fit into a single RLC PDU. This
depends on the following:

1.1. The NAS PAGING RESPONSE message will be exactly 11 octets.
     This results from 7 octets of fixed length information, and since a TMSI is
     available, it shall be used as the mobile identity (4 octets)

1.3. The field measuredResultsOnRACH in InitialDirectTransfer will be omitted,
     because system information block 12 specifies that no measurement reports
     should be provided by the UE.
2. Send the dummy dl direct Transfer message with invalid MAC header (Step 2)
3. Monitor RACH for 10 seconds. If any activity test case fails. (Step 2a)
4 Send the dummy dl direct Transfer Message with correct MAC header (Step 3)

5. Receive RRC and RLC staus PDU's (Step 4 and 5) */
$End_TestCase
$Begin_TestCase
$TestCaseId tc_7_1_1_4
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$TestPurpose /* 1. To verify that the UE discards PDUs with reserved values in UE-Id type field
2. To verify that the TCTF field, C/T field, UE-Id type and UE-Id field are 
   correctly applied when a DTCH or DCCH is mapped to the RACH/FACH */
$DefaultsRef MAC_Default
$Comment /* Reference(s)
TS 25.321 clauses 9.2.1 and  9.2.1.1 c). */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_Guard( 300 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_MAC_GenericSetupProceduresToBGP6_2Or6_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_TestBody
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +po_ConnectionAndSS_Rel( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_TestBody
$BehaviourLine
$LabelId TBS
$Line [0] ( tcv_TestBody := TRUE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_SendDLDirectTransfer( tsc_RB_DCCH_FACH_MAC,
   cs_MAC_PDU_UE_IdType( tsc_UE_IdTypeReserved1, -,tcv_CellInfoA.cRNTI ), 
  tsc_ExpectedPayloadSize,0 )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_MonitorUplinkSpecefiedTime (10)
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  cs_MAC_PDU_UE_IdType( tsc_UE_IdTypeC_RNTI, - , tcv_CellInfoA.cRNTI),
  tsc_ExpectedPayloadSize,0 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ReceiveRRC_RLC_StatusPDU_FACH ( tsc_RB_DCCH_FACH_MAC, cr_SUFI_Params ( INT_TO_BIT (0,12) , INT_TO_BIT (0,12), *, *, ?, ?, ?) )
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  cs_MAC_PDU_UE_IdType( tsc_UE_IdTypeReserved2, -, tcv_CellInfoA.cRNTI ),
  tsc_ExpectedPayloadSize,1 )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_MonitorUplinkSpecefiedTime (10)
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
 cs_MAC_PDU_UE_IdType( tsc_UE_IdTypeC_RNTI, -,tcv_CellInfoA.cRNTI ),
  tsc_ExpectedPayloadSize,1 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_ReceiveRRC_RLC_StatusPDU_FACH ( tsc_RB_DCCH_FACH_MAC, cr_SUFI_Params ( INT_TO_BIT (1,12) , INT_TO_BIT (1,12), *, *, ?, ?, ?) )
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId TBE
$Line [9] (tcv_TestBody := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Receive PAGING RESPONSE in an RRC InitialDirectTransfer message on the high
priority NAS AM DCCH and Acknowledge receipt of the AM RLC PDU with SN 0. (STEP 1)

The paging response message is expected to fit into a single RLC PDU. This
depends on the following:

1.1. The NAS PAGING RESPONSE message will be exactly 11 octets.
     This results from 7 octets of fixed length information, and since a TMSI is
     available, it shall be used as the mobile identity (4 octets)

.3. The field measuredResultsOnRACH in InitialDirectTransfer will be omitted,
     because system information block 12 specifies that no measurement reports
     should be provided by the UE.
2. Send the dummy dl direct Transfer message with invalid MAC header (Step 2)
3. Monitor RACH for 10 seconds. If any activity test case fails. (Step 2a)
4 Send the dummy dl direct Transfer Message with correct MAC header (Step 3)

5. Receive RRC and RLC staus PDU's (Step 4 and 5) */
$End_TestCase
$Begin_TestCase
$TestCaseId tc_7_1_1_5
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$TestPurpose /* 1. To verify that the UE ignores PDUs with UE-Ids that do not match the Id 
   allocated to it.
2. To verify that the TCTF field, C/T field, UE-Id type and UE-Id field are 
   correctly applied when a DTCH or DCCH is mapped to the RACH/FACH */
$DefaultsRef MAC_Default
$Comment /* Reference(s)
TS 25.321 clauses 9.2.1 and  9.2.1.1 c). */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_Guard( 300 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_MAC_GenericSetupProceduresToBGP6_2Or6_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_TestBody
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +po_ConnectionAndSS_Rel( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_TestBody
$BehaviourLine
$LabelId TBS
$Line [0] ( tcv_TestBody := TRUE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_SendDLDirectTransfer( tsc_RB_DCCH_FACH_MAC,
  cs_MAC_PDU_UE_Id( o_BitstringChange ( (o_BitstringChange( tcv_CellInfoA.cRNTI , 16, 15 )),16,14), - ),
  tsc_ExpectedPayloadSize,0 )
$Cref 
$VerdictId 
$Comment /* 2  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_MonitorUplinkSpecefiedTime (10)
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_SendDLDirectTransfer(tsc_RB_DCCH_FACH_MAC,
  cs_MAC_PDU_UE_Id(  tcv_CellInfoA.cRNTI  , - ),
  tsc_ExpectedPayloadSize,0 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ReceiveRRC_RLC_StatusPDU_FACH ( tsc_RB_DCCH_FACH_MAC, cr_SUFI_Params( INT_TO_BIT (0,12) , INT_TO_BIT (0,12), *, *, ?, ?, ?) )
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId TBE
$Line [5] (tcv_TestBody := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Receive PAGING RESPONSE in an RRC InitialDirectTransfer message on the high
priority NAS AM DCCH and Acknowledge receipt of the AM RLC PDU with SN 0. (STEP 1)

The paging response message is expected to fit into a single RLC PDU. This
depends on the following:

1.1. The NAS PAGING RESPONSE message will be exactly 11 octets.
     This results from 7 octets of fixed length information, and since a TMSI is
     available, it shall be used as the mobile identity (4 octets)



1.3. The field measuredResultsOnRACH in InitialDirectTransfer will be omitted,
     because system information block 12 specifies that no measurement reports
     should be provided by the UE.
2. Send the dummy dl direct Transfer message with invalid MAC header (Step 2)
3. Monitor RACH for 10 seconds. If any activity test case fails. (Step 2a)
4 Send the dummy dl direct Transfer Message with correct MAC header (Step 3)

5. Receive RRC and RLC staus PDU's (Step 4 and 5) */
$End_TestCase
$Begin_TestCase
$TestCaseId tc_7_1_1_8
$TestGroupRef MACv520/MAC/MappingBetweenLoChAndTrCh/
$TestPurpose /* 1. To verify that the UE discards PDUs with reserved or incorrect values in C/T 
   field.

2. To verify that the TCTF field, C/T field, UE-Id type and UE-Id field are 
   correctly applied when a DTCH or DCCH is mapped to the RACH/FACH. */
$DefaultsRef MAC_Default
$Comment /* Reference(s)
TS 25.321 clauses 9.2.1 and  9.2.1.1 b). */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_Guard( 300 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_GenericSetupProceduresToBGP6_1
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_TestBody
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +po_ConnectionAndSS_Rel( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_TestBody
$BehaviourLine
$LabelId TBS
$Line [0] ( tcv_TestBody := TRUE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_SendDLDirectTransfer( tsc_RB_DCCH_DCH_MAC,
 c_MAC_PDU_CT_DCH( tsc_CT_LoCh8, - ),
  tsc_ExpectedPayloadSize,0 )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_MonitorUplinkSpecefiedTime (10)
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_SendDLDirectTransfer(tsc_RB_DCCH_DCH_MAC,
  c_MAC_PDU_CT_DCH( tsc_CT_LoCh3, - ),
  tsc_ExpectedPayloadSize,0 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ReceiveRRC_RLC_StatusPDU_DCH ( tsc_RB_DCCH_DCH_MAC, cr_SUFI_Params( INT_TO_BIT (0,12) , INT_TO_BIT (0,12), *, *, ?, ?, ?) )
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_SendDLDirectTransfer(tsc_RB_DCCH_DCH_MAC,
  c_MAC_PDU_CT_DCH( tsc_CT_Reserved, - ),
  tsc_ExpectedPayloadSize ,1 )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_MonitorUplinkSpecefiedTime (10)
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SendDLDirectTransfer(tsc_RB_DCCH_DCH_MAC,
 c_MAC_PDU_CT_DCH( tsc_CT_LoCh3, - ),
  tsc_ExpectedPayloadSize,1 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_ReceiveRRC_RLC_StatusPDU_DCH ( tsc_RB_DCCH_DCH_MAC, cr_SUFI_Params ( INT_TO_BIT (1,12) , INT_TO_BIT (1,12), *, *, ?, ?, ?) )
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId TBE
$Line [9] (tcv_TestBody := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Receive PAGING RESPONSE in an RRC InitialDirectTransfer message on the high
priority NAS AM DCCH and Acknowledge receipt of the AM RLC PDU with SN 0. (STEP 1)

The paging response message is expected to fit into a single RLC PDU. This
depends on the following:

1.1. The NAS PAGING RESPONSE message will be exactly 11 octets.
     This results from 7 octets of fixed length information, and since a TMSI is
     available, it shall be used as the mobile identity (4 octets)



1.3. The field measuredResultsOnRACH in InitialDirectTransfer will be omitted,
     because system information block 12 specifies that no measurement reports
     should be provided by the UE.
2. Send the dummy dl direct Transfer message with invalid MAC header (Step 2)
3. Monitor RACH for 10 seconds. If any activity test case fails. (Step 2a)
4 Send the dummy dl direct Transfer Message with correct MAC header (Step 3)

5. Receive RRC and RLC staus PDU's (Step 4 and 5) */
$End_TestCase
$End_TestGroup
$TestGroup
$TestGroupId CorrectSelectionOfRACH_Parameters
$Begin_TestCase
$TestCaseId tc_7_1_2_3_1
$TestGroupRef MACv520/MAC/CorrectSelectionOfRACH_Parameters/
$TestPurpose /* A1	the UE, initially:
-	determines the ASC for the given Access Class (AC).
-	derives the available uplink access slots, in the next full access slot set, for the set of available RACH sub-channels within the given ASC with the help of TS 25.214, subclauses 6.1.1. and 6.1.2. and randomly select one access slot among the ones previously determined.
-	randomly select a new signature from the set of available signatures within the given ASC.
A2	the UE, when not receiving any reply from UTRAN:
-	selects the next available access slot in the set of available RACH sub-channels within the given ASC.
-	randomly select a new signature from the set of available signatures within the given ASC.
-	does not transmit on the PRACH resources specified in the BCH message SIB 5 after that the physical random access procedure is terminated.
A3	the UE, when detecting a negative acquisition indicator:
-	does not transmit on the PRACH resources specified in the BCH message SIB 5 after that the physical random access procedure is terminated.
A4	the UE, when detecting a positive acquisition indicator:
-	transmits the random access message three or four uplink access slots after the uplink access slot of the last transmitted preamble depending on the AICH transmission timing parameter.
-	terminates the random access procedure */
$DefaultsRef MAC_Default
$Comment /* Correct Selection of RACH parameters */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_Guard( 300 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [  px_CipheringOnOff = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ px_RAT =fdd ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_MMI_USIM_InsertTypeB
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_RRC_InitVariables (cell_FACH)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_SS_CreateCellFACH ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_SetTmpCellInfo  ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SendDefSysInfo ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_MAC_ModifySIB1_SIB5_And7( tsc_DefaultCellId, cd_SIB1_Def_N300(tcv_CellInfoA ), cd_SIB5_MAC (tcv_CellInfoA ), cd_SIB7_MAC_SIB5_DPL_1, tsc_Now)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_IdleUpdated ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] +lt_TestBody
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_SetPRACH_MeasurementmodeInDefaultCell ( stopMeas)
$Cref 
$VerdictId 
$Comment /* To Stop PRACH Measurements */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] +po_ConnectionAndSS_Rel( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSE1
$Line [2] [ px_RAT = tdd ]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId TSE2
$Line [2] [ TRUE ]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId TSE3
$Line [1] [ TRUE ]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_TestBody
$BehaviourLine
$LabelId TBS
$Line [0] ( tcv_TestBody := TRUE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SetPRACH_MeasurementmodeInDefaultCell(startMeas)
$Cref 
$VerdictId 
$Comment /* To enable PRACH MeasureMent Mode */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_Set_AICH_ACKModeInDefaultCell( noAck )
$Cref 
$VerdictId 
$Comment /* To configure AICH for No Ack transfer */
$End_BehaviourLine
$BehaviourLine
$LabelId TS1
$Line [3] +ts_RRC_PagType1_DefMAC (
  tsc_DefaultCellId)
$Cref 
$VerdictId 
$Comment /* Step 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId TS2
$Line [4] + ts_GetPRACH_PreambleMeasuremntReportInDefaultCell
$Cref 
$VerdictId 
$Comment /* Step 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] [ ( 0 <= tcv_PRACH_PreambleSigUsed) AND ( tcv_PRACH_PreambleSigUsed <= 7) AND 
(   (tcv_PRACH_AccessSlotUsed = 0) OR (tcv_PRACH_AccessSlotUsed = 3) OR (tcv_PRACH_AccessSlotUsed = 6) OR (tcv_PRACH_AccessSlotUsed = 9) OR (tcv_PRACH_AccessSlotUsed = 12)    ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] ( tcv_PRACH_ExpAccessSlot := (  (tcv_PRACH_AccessSlotUsed + 3)  MOD 15), tcv_K :=4)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TS3to6
$Line [7] REPEAT lt_GetPreambleMeasurement UNTIL [ tcv_K = 0 ]
$Cref 
$VerdictId 
$Comment /* Step 3-6 */
$End_BehaviourLine
$BehaviourLine
$LabelId TS7
$Line [8] START t_WaitS ( tsc_WaitNoRACHTransmission )
$Cref 
$VerdictId 
$Comment /* Step 7 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] ? TIMEOUT t_WaitS
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId TS10
$Line [10] +ts_Set_AICH_ACKModeInDefaultCell( negACK )
$Cref 
$VerdictId 
$Comment /* Configure AICH for Negative Ack */
$End_BehaviourLine
$BehaviourLine
$LabelId TS8
$Line [11] +ts_RRC_PagType1_DefMAC (
  tsc_DefaultCellId)
$Cref 
$VerdictId 
$Comment /* Step 8 */
$End_BehaviourLine
$BehaviourLine
$LabelId TS9
$Line [12] + ts_GetPRACH_PreambleMeasuremntReportInDefaultCell
$Cref 
$VerdictId 
$Comment /* Step 9 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] [ ( 0 <= tcv_PRACH_PreambleSigUsed) AND ( tcv_PRACH_PreambleSigUsed <= 7) AND 
(   (tcv_PRACH_AccessSlotUsed = 0) OR (tcv_PRACH_AccessSlotUsed = 3) OR (tcv_PRACH_AccessSlotUsed = 6) OR (tcv_PRACH_AccessSlotUsed = 9) OR (tcv_PRACH_AccessSlotUsed = 12)    ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TS11
$Line [14] START t_WaitS ( tsc_WaitNoRACHTransmission )
$Cref 
$VerdictId 
$Comment /* Step 11 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] ? TIMEOUT t_WaitS
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId TS14
$Line [16] +ts_Set_AICH_ACKModeInDefaultCell( normal)
$Cref 
$VerdictId 
$Comment /* configure AICH  for normal operation */
$End_BehaviourLine
$BehaviourLine
$LabelId TS12
$Line [17] +ts_RRC_PagType1_DefMAC (
  tsc_DefaultCellId)
$Cref 
$VerdictId 
$Comment /* Step 12 */
$End_BehaviourLine
$BehaviourLine
$LabelId TS13
$Line [18] + ts_GetPRACH_PreambleMeasuremntReportInDefaultCell
$Cref 
$VerdictId 
$Comment /* Step 13 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [19] [ ( 0 <= tcv_PRACH_PreambleSigUsed) AND ( tcv_PRACH_PreambleSigUsed <= 7) AND 
(   (tcv_PRACH_AccessSlotUsed = 0) OR (tcv_PRACH_AccessSlotUsed = 3) OR (tcv_PRACH_AccessSlotUsed = 6) OR (tcv_PRACH_AccessSlotUsed = 9) OR (tcv_PRACH_AccessSlotUsed = 12)    ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [20] ( tcv_PRACH_ExpAccessSlot := (  (tcv_PRACH_AccessSlotUsed + 3)  MOD 15), tcv_K := tcv_K -1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [21] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed :=CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  ?)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [22] [ (  tcv_PRACH_AccessSlotUsed = tcv_PRACH_ExpAccessSlot) ]
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [23] TM ? RLC_TR_DATA_IND
$Cref car_RRC_ConnReq (tsc_DefaultCellId, 
tsc_RB0, cbr_108_RRC_ConnReq ( 
       tcv_RRC_EstCauMT
    ))
$VerdictId 
$Comment /* Step 15 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [21] TM ? RLC_TR_DATA_IND
$Cref car_RRC_ConnReq (tsc_DefaultCellId, 
tsc_RB0, cbr_108_RRC_ConnReq ( 
       tcv_RRC_EstCauMT
    ))
$VerdictId 
$Comment /* If RACH dta comes ahead of PRACH Report
Step 15
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [22] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed :=CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  ?)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [23] [ (  tcv_PRACH_AccessSlotUsed = tcv_PRACH_ExpAccessSlot) ]
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [24] START t_WaitS ( tsc_WaitNoRACHTransmission )
$Cref 
$VerdictId 
$Comment /* Step 16 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [25] ? TIMEOUT t_WaitS
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [25] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed :=CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  ?)
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [26] CANCEL t_WaitS
$Cref 
$VerdictId F
$Comment /* If preamble received Test Case fails */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [19] [ TRUE ]
$Cref 
$VerdictId F
$Comment /* If signature or Access slot used is diferent from allowed to use FAIL */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed :=CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  ?)
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] CANCEL t_WaitS
$Cref 
$VerdictId F
$Comment /* If preamble received Test Case fails */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] [ TRUE ]
$Cref 
$VerdictId F
$Comment /* If signature or Access slot used is diferent from allowed to use FAIL */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed :=CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  ?)
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CANCEL t_WaitS
$Cref 
$VerdictId F
$Comment /* If preamble received Test Case fails */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] [ TRUE ]
$Cref 
$VerdictId F
$Comment /* If signature or Access slot used is diferent from allowed to use FAIL */
$End_BehaviourLine
$Header lt_GetPreambleMeasurement
$BehaviourLine
$LabelId 
$Line [0] + ts_GetPRACH_PreambleMeasuremntReportInDefaultCell
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( 0 <= tcv_PRACH_PreambleSigUsed) AND ( tcv_PRACH_PreambleSigUsed <= 7) AND (  tcv_PRACH_AccessSlotUsed = tcv_PRACH_ExpAccessSlot) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_PRACH_ExpAccessSlot := (  (tcv_PRACH_AccessSlotUsed + 3)  MOD 15), tcv_K := tcv_K -1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE ]
$Cref 
$VerdictId F
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestCase
$Begin_TestCase
$TestCaseId tc_7_1_2_4a
$TestGroupRef MACv520/MAC/CorrectSelectionOfRACH_Parameters/
$TestPurpose /* To verify that MAC selects ASC correctly. */
$DefaultsRef MAC_Default
$Comment /* TS 25.321 clause 11.2.1
 */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_Guard( 300 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [  px_CipheringOnOff = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ px_RAT =fdd ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_RRC_InitVariablesPS ( cell_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_SS_CreateCellFACH (tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_SS_RB20_AM_PS_Rel_Cfg_NoTimerPoll
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_SendDefSysInfo (tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_IdleUpdated ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_RRC_PagType1_DefMAC (
  tsc_DefaultCellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_RRC_ConnEst( 
  tsc_DefaultCellId,
  est_MT, 
  tcv_RRC_EstCauMT )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] Dc?RRC_DataInd
(tcv_CellIndInfo.start_PS:= RRC_DataInd.start)
$Cref car_PS_InitDirectTransfer ( tsc_CellDedicated, tsc_RB3,
cr_ServiceRequest (
c_ServiceType_v(?), *,?
)
 )
$VerdictId 
$Comment /* SERVICE REQUEST
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_RRC_Security(
 tsc_DefaultCellId, 
tcv_PS_AuthCK,
tcv_PS_AuthIK,
tcv_AuthKcGSM,
FALSE,
 tcv_CN_Domain)
$Cref 
$VerdictId 
$Comment /* Do Security Procedure to Initiate Integrity Protection if enabled by the PICS.
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_TC_ActivateRB_TestMode ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] ( tcv_CellInfoA.cRNTI := '1010101010101010'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] AM ! RLC_AM_DATA_REQ
$Cref cas_RB_SetUpAM( 
tsc_CellDedicated,
tsc_RB2,
cds_MAC_RB_SetUpFACH_PS  ( 
   tcv_CellIndInfo.dl_IntegrityCheckInfo,
    tcv_RRC_Ti,  
    tcv_RAB_Id,
tcv_CellInfoA.cRNTI
))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] + ts_RRC_Delay (80)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] +ts_CMAC_New_RNTI_Reconf ( FALSE, tsc_CellA, tcv_CellInfoA.uRNTI,  tcv_CellInfoA.cRNTI)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId TSP
$Line [17] + ts_RRC_ReceiveRB_SetupCmpl ( tsc_DefaultCellId , cell_FACH_PS )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [18] + ts_TC_CloseUE_TestLoop ( tsc_CellA,  tsc_UE_TestLoopMode1,  c_UE_TestLoopMode1_LB_Setup ( 312, tsc_RB20 ) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [19] +lt_LocalTest
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [20] + ts_SetPRACH_MeasurementmodeInDefaultCell ( stopMeas)
$Cref 
$VerdictId 
$Comment /* To Stop Prach Measurement */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [21] +po_ConnectionAndSS_Rel( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSE1
$Line [2] [ px_RAT = tdd ]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId TSE2
$Line [2] [ TRUE ]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId TSE3
$Line [1] [ TRUE ]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_LocalTest
$BehaviourLine
$LabelId 
$Line [0] AM ! RLC_AM_TestDataReq
$Cref cas_RLC_AM_DataReq( tsc_CellDedicated, tsc_RB20, c_TrD_Data ( o_OctToBit(tsc_TestData10B)) )
$VerdictId 
$Comment /* Step 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] AM ? RLC_AM_TestDataInd
$Cref car_RLC_AM_DataInd ( tsc_CellDedicated, tsc_RB20, c_TrD_Data (o_OctToBit(tsc_TestData39B)) )
$VerdictId 
$Comment /* Step 1a
Commment 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_SendModifiedSysInfo_Sib6( cd_SIB6_MAC_1ASC (  tcv_CellInfoA ), tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* Step 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] START t_WaitMS (tsc_WaitBeforePaging )
$Cref 
$VerdictId 
$Comment /* Wait for UE to take changes in System info. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] ? TIMEOUT t_WaitMS
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_SetPRACH_MeasurementmodeInDefaultCell ( startMeas)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] AM ! RLC_AM_TestDataReq
$Cref cas_RLC_AM_DataReq( tsc_CellDedicated, tsc_RB20, c_TrD_Data (o_OctToBit(tsc_TestData10B)) )
$VerdictId 
$Comment /* Step 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_ReceiveLoopBackDataAndCheckASC (tsc_RB20,  '0010'B, c_TrD_Data (o_OctToBit(tsc_TestData39B)), OMIT )
$Cref 
$VerdictId 
$Comment /* Step 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_SendModifiedSysInfo_Sib6 ( cd_SIB6_MAC_4ASC ( tcv_CellInfoA ), tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* step 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] START t_WaitMS ( tsc_WaitBeforePaging )
$Cref 
$VerdictId 
$Comment /* Wait for UE to take changes in System info. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] ? TIMEOUT t_WaitMS
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] AM ! RLC_AM_TestDataReq
$Cref cas_RLC_AM_DataReq(  tsc_CellDedicated, tsc_RB20, c_TrD_Data (o_OctToBit(tsc_TestData10B_2) ))
$VerdictId 
$Comment /* Step 6 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] START t_WaitS ( tsc_WaitNoRACHTransmission )
$Cref 
$VerdictId 
$Comment /* Step 6a */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] ? TIMEOUT t_WaitS
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] +lt_RadioBeareReconfig
$Cref 
$VerdictId 
$Comment /* Step 7 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] AM ! RLC_AM_TestDataReq
$Cref cas_RLC_AM_DataReq( tsc_CellDedicated, tsc_RB20, c_TrD_Data( o_OctToBit(tsc_TestData10B)) )
$VerdictId 
$Comment /* Step 8 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] + ts_ReceiveLoopBackDataAndCheckASC (tsc_RB20,  '0001'B, c_TrD_Data (o_OctToBit(tsc_TestData39B_2)) , c_TrD_Data (o_OctToBit(tsc_TestData39B)))
$Cref 
$VerdictId 
$Comment /* Step 9 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + ts_GetPRACH_PreambleMeasuremntReportInDefaultCell
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] CANCEL t_WaitS
$Cref 
$VerdictId F
$Comment /* If preamble received Test Case fails */
$End_BehaviourLine
$Header lt_RadioBeareReconfig
$BehaviourLine
$LabelId 
$Line [0] AM ! RLC_AM_DATA_REQ
$Cref cas_RB_Reconfigure(
tsc_CellDedicated, tsc_RB2, 
cs_RB_ReconfigFACH_PS_MAC (
    tcv_CellIndInfo.dl_IntegrityCheckInfo,
    tcv_RRC_Ti,
  OMIT,
       tcv_CellInfoA.frequencyInfo,
    tcv_CellInfoA.priScrmCode
))
$VerdictId 
$Comment /* 
step 1 in prose;

CELL_FACH UL:32k DL 32k status to CELL_FACH UL:32k DL:32k */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_LP_DataReceived := FALSE , tcv_RBReconfCmplRecvd := FALSE)
$Cref 
$VerdictId 
$Comment /* step 3 in prose; */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] START t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId Loop1
$Line [3] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_PreambleSigUsed :=CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_Signature ,
tcv_PRACH_AccessSlotUsed :=CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1, cs_PRACH_PreamMeasRep)
$VerdictId 
$Comment /* to receive Preamble measurement */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] [ ( 0 <= tcv_PRACH_PreambleSigUsed) AND ( tcv_PRACH_PreambleSigUsed <= 7) AND 
(   (tcv_PRACH_AccessSlotUsed = 0) OR (tcv_PRACH_AccessSlotUsed = 3) OR (tcv_PRACH_AccessSlotUsed = 6) OR (tcv_PRACH_AccessSlotUsed = 9) OR (tcv_PRACH_AccessSlotUsed = 12)    ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] ( tcv_PRACH_ExpAccessSlot := (  (tcv_PRACH_AccessSlotUsed + 3)  MOD 15) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CPHY ? CPHY_PRACH_Measurement_Report_IND
[CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot = tcv_PRACH_ExpAccessSlot ]
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  cs_PRACH_MsgMeasRep)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] AM ? RLC_AM_DATA_IND ( tcv_RBReconfCmplRecvd := TRUE)
$Cref car_RB_ReconfCmpl ( tsc_CellDedicated, 
 tsc_RB2, cr_108_RB_ReconfCmpl ( tcv_RRC_Ti,  OMIT) )
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] [ (tcv_LP_DataReceived = TRUE) AND (  tcv_RBReconfCmplRecvd = TRUE) ]
$Cref 
$VerdictId 
$Comment /* break loop */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CANCEL  t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] [ TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] -> Loop1
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] AM ? RLC_AM_TestDataInd (tcv_LP_DataReceived := TRUE)
$Cref car_RLC_AM_DataInd (  tsc_CellDedicated, tsc_RB20, c_TrD_Data (o_OctToBit(tsc_TestData39B_2)) )
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] [ (tcv_LP_DataReceived = TRUE) AND (  tcv_RBReconfCmplRecvd  = TRUE) ]
$Cref 
$VerdictId 
$Comment /* break loop */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CANCEL  t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] [ TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] -> Loop1
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] AM ? RLC_AM_DATA_IND ( tcv_RBReconfCmplRecvd := TRUE)
$Cref car_RB_ReconfCmpl ( tsc_CellDedicated, 
 tsc_RB2, cr_108_RB_ReconfCmpl ( tcv_RRC_Ti,  OMIT) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CPHY ? CPHY_PRACH_Measurement_Report_IND
[CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot  = tcv_PRACH_ExpAccessSlot ]
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  cs_PRACH_MsgMeasRep)
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] [ (tcv_LP_DataReceived = TRUE) AND ( tcv_RBReconfCmplRecvd = TRUE) ]
$Cref 
$VerdictId 
$Comment /* break loop */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CANCEL  t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] [ TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] -> Loop1
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] AM ? RLC_AM_TestDataInd (tcv_LP_DataReceived := TRUE)
$Cref car_RLC_AM_DataInd (  tsc_CellDedicated, tsc_RB20, c_TrD_Data (o_OctToBit(tsc_TestData39B_2)) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CPHY ? CPHY_PRACH_Measurement_Report_IND
[CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot  = tcv_PRACH_ExpAccessSlot ]
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  cs_PRACH_MsgMeasRep)
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] [ (tcv_LP_DataReceived = TRUE) AND (  tcv_RBReconfCmplRecvd = TRUE) ]
$Cref 
$VerdictId 
$Comment /* break loop */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CANCEL  t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] [ TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] -> Loop1
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] [ TRUE]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId TSF1
$Line [3] ? TIMEOUT t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] [ tcv_RBReconfCmplRecvd = TRUE]
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] [ TRUE]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. with MLP =8, and Num ASC =7, ASC=7 and assignedSubChannelNumber = '1111'B, the reception of RLC loop back data is sufficient to prove it has ben received on correct ASC. */
$End_TestCase
$End_TestGroup
$TestGroup
$TestGroupId PriorityHandlingBetweenDataFlowsOfOneUE
$Begin_TestCase
$TestCaseId tc_7_1_3_1
$TestGroupRef MACv520/MAC/PriorityHandlingBetweenDataFlowsOfOneUE/
$TestPurpose /* To verify that the UE Prioritises signalling to data on a lower priority logical channel */
$DefaultsRef RRC_Def1,RLC_Default
$Comment /* TS 25.321 clause 11.4
25.301 clause 5.3.1.2 */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_Guard( 300 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [  px_CipheringOnOff = FALSE ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ px_RAT = fdd ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +pr_GenericSetupProcedures
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_RRC_SetUpRAB_UM_7_RLC (  tsc_DefaultCellId, tcv_RAB_Id, cbs_DefaultRLC_InfoUM)
$Cref 
$VerdictId 
$Comment /* Step 3-4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +pr_CloseUE_TestLoop( tsc_UL_SDU_Size7_1_3_1)
$Cref 
$VerdictId 
$Comment /* Step 5-6 */
$End_BehaviourLine
$BehaviourLine
$LabelId TBS
$Line [6] ( tcv_TestBody := TRUE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +lt_LocalTest
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TBE
$Line [8] (tcv_TestBody := FALSE )
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_TC_DeactivateRB_TestMode( tsc_DefaultCellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] +po_ConnectionAndSS_Rel( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ px_RAT = tdd ]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ TRUE ]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE ]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_LocalTest
$BehaviourLine
$LabelId 
$Line [0] AM ! RLC_AM_DATA_REQ
$Cref cas_TFC_ControlAM ( tsc_CellDedicated,   tsc_RB2, cs_TransportFormatCombCtrl (tcv_CellIndInfo.dl_IntegrityCheckInfo,
tcv_RRC_Ti, 
C_TFC_RestrictUE_0_1_2))
$VerdictId 
$Comment /* Step 7 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_SendData
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_ReceiveRLC_DataMeasurementReport
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_SendData
$BehaviourLine
$LabelId 
$Line [0] AM ! RLC_AM_DATA_REQ
$Cref cas_MeasurementControl (tsc_CellDedicated,   tsc_RB2, cs_MeasurementControlTrafficVolumeSetup (tcv_CellIndInfo.dl_IntegrityCheckInfo,
tcv_RRC_Ti)
)
$VerdictId 
$Comment /* Transmit the Traffic Volume Measeurement Control on DCH 1. Step 8 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM ! TxMAC
$Cref cas_DataReqRAB(tsc_RB_UM_7_RLC, c_UMD_LIs(0, c_LIs2_7BitLIs(39,tsc_LI7_Padding), o_OctToBit(tsc_DataTx_7_1_3_1) ))
$VerdictId 
$Comment /* Step 9 */
$End_BehaviourLine
$Header lt_ReceiveRLC_DataMeasurementReport
$BehaviourLine
$LabelId 
$Line [0] [ TRUE ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId Loop1
$Line [1] AM ? RLC_AM_DATA_IND
$Cref car_MeasRepAM (tsc_CellDedicated,   tsc_RB2, cr_RRC_MeasRepTV
)
$VerdictId 
$Comment /* receive any measurement  reports before actual loop backed PDU reception */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] GOTO Loop1
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM ? RxMAC START t_WaitMS(500)
$Cref car_DataReqRAB(tsc_RB_UM_7_RLC, c_UMD(tcv_SQN_Received, ?))
$VerdictId 
$Comment /* First Uplink Loop Backed PDU, it will not have any LI and Padding */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SQN_Received := tcv_SQN_Received +1)
$Cref 
$VerdictId 
$Comment /* Increment sequence number */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +lt_ReceiveRLC_DataMeasurementReportContinue
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_ReceiveRLC_DataMeasurementReportContinue
$BehaviourLine
$LabelId 
$Line [0] [ TRUE ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId Loop2
$Line [1] AM ? RLC_AM_DATA_IND CANCEL t_WaitMS
$Cref car_MeasRepAM (tsc_CellDedicated,   tsc_RB2, cr_RRC_MeasRepTV
)
$VerdictId (P)
$Comment /* The  Measurement Report received within 500 ms of First UL Data */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_Clean
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM ? RxMAC
$Cref car_DataReqRAB(tsc_RB_UM_7_RLC, c_UMD(tcv_SQN_Received, ?))
$VerdictId 
$Comment /* Continue receiving loop backed PDU's */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SQN_Received := tcv_SQN_Received +1)
$Cref 
$VerdictId 
$Comment /* Increment sequence number */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] GOTO Loop2
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ? TIMEOUT t_WaitMS
$Cref 
$VerdictId (F)
$Comment /* Measurement Report not transmitted within 500 ms hence Fail */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_Clean
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_Clean
$BehaviourLine
$LabelId 
$Line [0] AM ! RLC_AM_DATA_REQ
$Cref cas_MeasurementControl (tsc_CellDedicated,   tsc_RB2, cs_MeasurementControlTrafficVolumeRelease (tcv_CellIndInfo.dl_IntegrityCheckInfo,
tcv_RRC_Ti)
)
$VerdictId 
$Comment /* Transmit the Traffic Volume Measeurement Control to stop on DCH 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId Loop3
$Line [1] TM ? RxMAC
$Cref car_DataReqRAB(tsc_RB_UM_7_RLC, c_UMD_LIs(24, c_LIs1_7BitLI (40) ,? ))
$VerdictId (P)
$Comment /* Last Loop backed PDU, with one LI 40 (320 Bits) and Sequence number 24 (i.e 25 PDU) received */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM ? RxMAC
$Cref car_DataReqRAB(tsc_RB_UM_7_RLC, c_UMD(tcv_SQN_Received, ?))
$VerdictId 
$Comment /* Continue receiving loop backed PDU's */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SQN_Received := tcv_SQN_Received +1)
$Cref 
$VerdictId 
$Comment /* Increment sequence number */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_SQN_Received <= 24 ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] GOTO Loop3
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_SQN_Received > 24 ]
$Cref 
$VerdictId (F)
$Comment /* Error occured in loop back PDU's */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. with MLP =8, and Num ASC =7, ASC=7 and assignedSubChannelNumber = '1111'B, the reception of RLC loop back data is sufficient to prove it has ben received on correct ASC.
3. the 39 byte 312 bit PDU is transmitted. 312 + 2 LI's(16) = 328 the payload size of the RAB. As this the first PDU to be transmitted on this RAB, the Sequence number is 0.
4. */
$End_TestCase
$End_TestGroup
$End_TestGroup
$End_TestCases
$TestStepLibrary
$TestStepGroup
$TestStepGroupId Preambles
$Begin_TestStep
$TestStepId ts_MAC_GenericSetupProceduresToBGP6_2Or6_4
$TestStepRef MACv520/Preambles/
$Objective /* Initialise the system simulator, and perform the RRC connection establishment 
procedure defined in 3G TS 34.108 clause 7.4.2.1 to bring the UE into state BGP 
6_2. */
$DefaultsRef RRC_Def1
$Comment /* This preamble configures the system simulator for MAC testing, and
then performs the Generic setup procedures as defined in 3G TS 34.108. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [  px_CipheringOnOff = FALSE  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ px_RAT =fdd ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_RRC_InitVariables (cell_FACH)
$Cref 
$VerdictId 
$Comment /* 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_InitDummyDL_Transfer
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_SS_CreateCellFACH ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_SendDefSysInfo( tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_IdleUpdated ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +lt_ReconfigureHiPriNAS_AsTransparent
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_RRC_PagType1_DefMAC (
  tsc_DefaultCellId)
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_RRC_ConnEstForMAC_RecIniTDirecTrans( 
  tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] ( tcv_ReceiveSigConnRelInd := TRUE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSE1
$Line [1] [ px_RAT = tdd ]
$Cref 
$VerdictId I
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId TSE2
$Line [1] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* 6 */
$End_BehaviourLine
$BehaviourLine
$LabelId TSE3
$Line [0] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* 7 */
$End_BehaviourLine
$Header lt_ReconfigureHiPriNAS_AsTransparent
$BehaviourLine
$LabelId 
$Line [0] +ts_CRLC_Rel( tsc_CellDedicated, tsc_RB3 )
$Cref 
$VerdictId 
$Comment /* 9 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfoActNow(
  tsc_DefaultCellId,  
  tsc_S_CCPCH1, 
  c_UE_Info(
    tcv_TmpCellInfo.uRNTI,
    tcv_TmpCellInfo.cRNTI ), 
  c_TrChInfoPCH_FACH,
  c_TrLogMapping_PchFach1TransRB3 )
$VerdictId 
$Comment /* 8 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf(tsc_DefaultCellId,  tsc_S_CCPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfoActNow(
  tsc_DefaultCellId,
  tsc_PRACH1,
  c_UE_Info(
   OMIT,
    tcv_TmpCellInfo.cRNTI ), 
  cb_TrChInfoRACH1,
  c_TrLogMapping_Rach1TransRB3)
$VerdictId 
$Comment /* 8 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf(tsc_DefaultCellId, tsc_PRACH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CRLC ! CRLC_Config_REQ
$Cref ca_RB_TM_Info(
  tsc_CellDedicated, 
  tsc_RB_DCCH_FACH_MAC, 
  168, {
    uLlogicalChannelIdentity tsc_UL_DCCH3, 
    dLlogicalChannelIdentity tsc_DL_DCCH3 } )
$VerdictId 
$Comment /* 9 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf(
  tsc_CellDedicated, 
  tsc_RB_DCCH_FACH_MAC )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SetCellCfg ( tsc_DefaultCellId, cell_FACH_MAC_SRB_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Initialise test case variables ready for system simulator configuration.

2. Initialise system simulator with SRBs ready for RRC connection establishment
   on FACH. Start system information broadcast using the default system 
   information messages.

3. Perform idle updated procedure on FACH.

4. Page UE, and complete mobile terminated RRC connection establishment on FACH.
   (Ref 3G TS 34.108 clause 7.1.2)

5. Generic setup procedures for TDD are not implemented yet. This value of 
   px_RAT results in final inconclusive verdict

6. Unexpected value of px_RAT provided.

7. This test must be performed with integrity off to ensure that the paging 
   response message fits in a single RLC PDU.

8. Reconfigure the MAC for SCCPCH and PRACH to set the macHeaderManipulation 
   field to 'OmitMacHeader' for RB3. This allows the MAC header information to 
   be specified by the TTCN for transmitted PDUs, and inspected by the TTCN for 
   received PDUs.

    NOTE: The 'reconfigure' option in CMAC_Config_REQ is still being discussed. 
    It may be necessary in future to release the MAC layers for these physical 
    channels, and then setup new MAC layers with transparent RB3.

9. Release the RLC entity for RB3, and setup a new RLC entity using transparent 
   mode. This allows the RLC header information to be specified for transmitted 
   PDUs, and inspected for received PDUs. This is required to support the 
   transparent MAC configuration described above. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_GenericSetupProceduresToBGP6_1
$TestStepRef MACv520/Preambles/
$Objective /* Initialise the system simulator, and perform the RRC connection establishment 
procedure defined in 3G TS 34.108 clause 7.4.2.1 to bring the UE into state BGP 
6_1. */
$DefaultsRef RRC_Def1
$Comment /* This preamble configures the system simulator for MAC testing, and
then performs the Generic setup procedures as defined in 3G TS 34.108. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [   px_CipheringOnOff = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ px_RAT =fdd ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_RRC_InitVariables (cell_DCH)
$Cref 
$VerdictId 
$Comment /* 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_InitDummyDL_Transfer
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_SS_CreateCellDCH ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_SendDefSysInfo( tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_IdleUpdated ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +lt_ReconfigureHiPriNAS_AsTransparent
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_RRC_PagType1_DefMAC (
  tsc_DefaultCellId)
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_RRC_ConnEstForMAC_RecIniTDirecTrans( 
  tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] ( tcv_ReceiveSigConnRelInd := TRUE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSE1
$Line [1] [ px_RAT = tdd ]
$Cref 
$VerdictId I
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId TSE2
$Line [1] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* 6 */
$End_BehaviourLine
$BehaviourLine
$LabelId TSE3
$Line [0] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* 7 */
$End_BehaviourLine
$Header lt_ReconfigureHiPriNAS_AsTransparent
$BehaviourLine
$LabelId 
$Line [0] +ts_CRLC_Rel( tsc_CellDedicated, tsc_RB3 )
$Cref 
$VerdictId 
$Comment /* 9 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfo(
 tsc_CellDedicated,  
  tsc_DL_DPCH1, 
  c_UE_Info(
    tcv_TmpCellInfo.uRNTI,
    tcv_TmpCellInfo.cRNTI ), 
 c_TrChInfoDL_13_6_StandAlone,
  c_TrLogMappingDL_4DCCH_TransRB3,
  0 )
$VerdictId 
$Comment /* 8 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf(tsc_CellDedicated,    tsc_DL_DPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfo(
 tsc_CellDedicated,
  tsc_UL_DPCH1,
  c_UE_Info(
    tcv_TmpCellInfo.uRNTI,
    tcv_TmpCellInfo.cRNTI ), 
  c_TrChInfoUL_13_6_StandAlone,
  c_TrLogMappingUL_4DCCH_TransRB3,
  0 )
$VerdictId 
$Comment /* 8 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf(tsc_CellDedicated,   tsc_UL_DPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CRLC ! CRLC_Config_REQ
$Cref ca_RB_TM_Info(
  tsc_CellDedicated, 
  tsc_RB_DCCH_DCH_MAC, 
  148, {
    uLlogicalChannelIdentity tsc_UL_DCCH3, 
    dLlogicalChannelIdentity tsc_DL_DCCH3 } )
$VerdictId 
$Comment /* 9 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf(
  tsc_CellDedicated, 
  tsc_RB_DCCH_DCH_MAC )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SetCellCfg ( tsc_DefaultCellId, cell_DCH_MAC_SRB_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Initialise test case variables ready for system simulator configuration.

2. Initialise system simulator with SRBs ready for RRC connection establishment
   on FACH. Start system information broadcast using the default system 
   information messages.

3. Perform idle updated procedure on FACH.

4. Page UE, and complete mobile terminated RRC connection establishment on FACH.
   (Ref 3G TS 34.108 clause 7.1.2)

5. Generic setup procedures for TDD are not implemented yet. This value of 
   px_RAT results in final inconclusive verdict

6. Unexpected value of px_RAT provided.

7. This test must be performed with integrity off to ensure that the paging 
   response message fits in a single RLC PDU.

8. Reconfigure the MAC for SCCPCH and PRACH to set the macHeaderManipulation 
   field to 'OmitMacHeader' for RB3. This allows the MAC header information to 
   be specified by the TTCN for transmitted PDUs, and inspected by the TTCN for 
   received PDUs.

    NOTE: The 'reconfigure' option in CMAC_Config_REQ is still being discussed. 
    It may be necessary in future to release the MAC layers for these physical 
    channels, and then setup new MAC layers with transparent RB3.

9. Release the RLC entity for RB3, and setup a new RLC entity using transparent 
   mode. This allows the RLC header information to be specified for transmitted 
   PDUs, and inspected for received PDUs. This is required to support the 
   transparent MAC configuration described above. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_GenericSetupProceduresToIdleUpdate_CCCH
$TestStepRef MACv520/Preambles/
$Objective /* Initialise the system simulator, With a configuaration of DL CCCH in TM mode with MAC configured to not add MAC headers. */
$DefaultsRef RRC_Def1
$Comment /* This preamble configures the system simulator for MAC testing, and
then performs the Generic setup procedures as defined in 3G TS 34.108. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ px_CipheringOnOff = FALSE  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ px_RAT =fdd ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_RRC_InitVariables (cell_FACH)
$Cref 
$VerdictId 
$Comment /* 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_SS_CreateCellFACH ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_SendDefSysInfo ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_IdleUpdated ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +lt_ReconfigureDL_CCCH_AsTransparent
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSE1
$Line [1] [ px_RAT = tdd ]
$Cref 
$VerdictId I
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId TSE2
$Line [1] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* 6 */
$End_BehaviourLine
$BehaviourLine
$LabelId TSE3
$Line [0] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* 7 */
$End_BehaviourLine
$Header lt_ReconfigureDL_CCCH_AsTransparent
$BehaviourLine
$LabelId 
$Line [0] +ts_CRLC_Rel(  tsc_DefaultCellId, tsc_RB0 )
$Cref 
$VerdictId 
$Comment /* 9 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfoActNow(
  tsc_DefaultCellId,  
  tsc_S_CCPCH1, 
  c_UE_Info(
    tcv_TmpCellInfo.uRNTI,
    tcv_TmpCellInfo.cRNTI ), 
  c_TrChInfoPCH_FACH,
  cd_TrLogMapping_PchFach1TransRB0 )
$VerdictId 
$Comment /* 8 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf ( tsc_DefaultCellId,  tsc_S_CCPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CRLC ! CRLC_Config_REQ
$Cref ca_RB_DL_TM_Info(
    tsc_DefaultCellId, 
  tsc_RB_CCCH_FACH_MAC, 
  168, {
    dLlogicalChannelIdentity tsc_DL_CCCH5 } )
$VerdictId 
$Comment /* 9
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf(
  tsc_DefaultCellId, 
  tsc_RB_CCCH_FACH_MAC )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CRLC ! CRLC_Config_REQ
$Cref ca_RB_TM_UL_Info(tsc_DefaultCellId, tsc_RB0, 166, {uLlogicalChannelIdentity tsc_UL_CCCH5})
$VerdictId 
$Comment /* cofigure radio bearers (uplink):
RB0 (TM + CCCH + RACH) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf(tsc_DefaultCellId, tsc_RB0)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SetCellCfg ( tsc_DefaultCellId, cell_FACH_MAC_SRB0_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Initialise test case variables ready for system simulator configuration.

2. Initialise system simulator with SRBs ready for RRC connection establishment
   on FACH. Start system information broadcast using the default system 
   information messages.

3. Perform idle updated procedure on FACH.

4. Page UE, and complete mobile terminated RRC connection establishment on FACH.
   (Ref 3G TS 34.108 clause 7.1.2)

5. Generic setup procedures for TDD are not implemented yet. This value of 
   px_RAT results in final inconclusive verdict

6. Unexpected value of px_RAT provided.

7. This test must be performed with integrity off to ensure that the paging 
   response message fits in a single RLC PDU.

8. Reconfigure the MAC for SCCPCH and PRACH to set the macHeaderManipulation 
   field to 'OmitMacHeader' for RB3. This allows the MAC header information to 
   be specified by the TTCN for transmitted PDUs, and inspected by the TTCN for 
   received PDUs.

    NOTE: The 'reconfigure' option in CMAC_Config_REQ is still being discussed. 
    It may be necessary in future to release the MAC layers for these physical 
    channels, and then setup new MAC layers with transparent RB3.

9. Release the RLC entity for RB3, and setup a new RLC entity using transparent 
   mode. This allows the RLC header information to be specified for transmitted 
   PDUs, and inspected for received PDUs. This is required to support the 
   transparent MAC configuration described above. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendModifiedSysInfo_Sib6( p_SIB: SysInfoType6; p_CellId: INTEGER)
$TestStepRef MACv520/Preambles/
$Objective /* To brodcast modified system infomation, with sib 6 Parametrised */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_SendSIB6(p_SIB, 
    p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_SendSB1_DefSchedul(tcv_SB1, p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_SendMIB(tcv_MIB, p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_SendPage1_ModifySI(p_CellId, tcv_MIB.mib_ValueTag)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [px_RAT = tdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MAC_ModifySIB1_SIB5_And7( p_CellId: INTEGER; p_SIB1 : SysInfoType1; p_SIB5 : SysInfoType5; p_SIB7 : SysInfoType7; p_Timing: INTEGER)
$TestStepRef MACv520/Preambles/
$Objective /* To modify the the contents of SIB5 and SIB7. */
$DefaultsRef InitOtherwiseFail
$Comment /* 5 seconds shall be reserved for UE receiving and decoding the modified system information blocks after calling this test Step after the SS broadcasting the new */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_SendSIB1 ( p_SIB1,  
   p_CellId, tsc_Now )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_SendSIB5(p_SIB5,  p_CellId, p_Timing)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_SendSIB7(p_SIB7,  p_CellId, p_Timing)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_SendSB1_DefSchedul ( tcv_SB1, p_CellId, p_Timing)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_SendMIB ( tcv_MIB, p_CellId, p_Timing )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_SendPage1_ModifySI ( p_CellId, tcv_MIB.mib_ValueTag )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [0] [px_RAT = tdd]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [0] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_InitDummyDL_Transfer
$TestStepRef MACv520/Preambles/
$Objective /* To Initialise the Dummy Dl Message to be sent based on the Domain of existing signalling connection */
$DefaultsRef RRC_Def1
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain = cs_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_DummyDL_DirectTransferMsg := tsc_DummyDL_DirectTransferMsg_PS )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain = ps_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_DummyDL_DirectTransferMsg := tsc_DummyDL_DirectTransferMsg_CS )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_InitRRC_ConnecSetup
$TestStepRef MACv520/Preambles/
$Objective /* To Initialise the RRC Connection Setup PDU to be send depending on the domain of the UE */
$DefaultsRef RRC_Def1
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo (  tsc_DefaultCellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_RRC_ConnecSetupMsg := o_PER_EncodeRRC_ConnSetup_MAC(cbs_108_RRC_ConnSetupFACH (
       tcv_InitialUE_Id, 
        tcv_RRC_Ti,
        tcv_TmpCellInfo.priScrmCode ,
         tcv_TmpCellInfo.uRNTI ,
         tcv_TmpCellInfo. cRNTI,
   tcv_TmpCellInfo.uL_ScramblingCode
        )))
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId pr_CloseUE_TestLoop( p_LB_Size: INTEGER )
$TestStepRef MACv520/Preambles/
$Objective /*  */
$DefaultsRef 
$Comment /* This preamble is used to close the UE test loop mode, for the default cellId (tsc_CellA), and the default RB used forMAC testing.         
         
Parameters:         
p_LB_Size: The uplink RLC SDU size in bits. This value will be represented as a         
14 bit value in the LB Setup IE, so the valid range is from 0..16383.         
         
Test case variables affected:         
tcv_UE_TestLoopClosed will be set to TRUE by this test step. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain = ps_domain ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_TC_CloseUE_TestLoop(         
  tsc_DefaultCellId,          
  tsc_UE_TestLoopMode1,          
  c_UE_TestLoopMode1_LB_Setup(         
    p_LB_Size,          
 tsc_RB20 ) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain = cs_domain ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_TC_CloseUE_TestLoop(         
  tsc_DefaultCellId,          
  tsc_UE_TestLoopMode1,          
  c_UE_TestLoopMode1_LB_Setup(         
    p_LB_Size,          
 tsc_RB10 ) )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId pr_GenericSetupProcedures
$TestStepRef MACv520/Preambles/
$Objective /*  */
$DefaultsRef RRC_Def1
$Comment /* This preamble configures the system simulator for AM / UM testing, and         
then performs the Generic setup procedures as defined in 3G TS 34.108. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ px_RAT =fdd ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_InitVariables
$Cref 
$VerdictId 
$Comment /* 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_InitRLC_Variables
$Cref 
$VerdictId 
$Comment /* 9 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_SS_CreateCellDCH ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_SendDefSysInfo( tsc_DefaultCellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_IdleUpdated ( tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + lt_SendPaging
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + lt_ReceiveResponseToPaging
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SS_SecurityDownloadStart ( tcv_CN_Domain, tcv_Start )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_TC_ActivateRB_TestMode( tsc_DefaultCellId )
$Cref 
$VerdictId 
$Comment /* 6 */
$End_BehaviourLine
$BehaviourLine
$LabelId TSE1
$Line [0] [ px_RAT = tdd ]
$Cref 
$VerdictId I
$Comment /* 7 */
$End_BehaviourLine
$BehaviourLine
$LabelId TSE2
$Line [0] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* 8 */
$End_BehaviourLine
$Header lt_InitRLC_Variables
$BehaviourLine
$LabelId 
$Line [0] [pc_PS AND ( px_CN_DomainTested = ps_domain)]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_CN_Domain := ps_domain,  tcv_RAB_Id :=  tsc_RAB_DefPS )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [pc_CS AND ( px_CN_DomainTested = cs_domain)]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_CN_Domain := cs_domain,  tcv_RAB_Id :=  tsc_RAB_DefCS )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_SendPaging
$BehaviourLine
$LabelId 
$Line [0] [tcv_CN_Domain = ps_domain]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_RRC_ConnEst_DCH_MT_PTMSI(          
  tsc_DefaultCellId,         
 terminatingInteractiveCall,          
  o_ConvertPTMSI(px_PTMSI_Def),          
 terminatingInteractiveCall )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_CN_Domain = cs_domain]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_RRC_ConnEst_DCH_MT_TMSI(          
  tsc_DefaultCellId,         
terminatingConversationalCall,          
  px_TMSI_Def,          
  terminatingConversationalCall )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_ReceiveResponseToPaging
$BehaviourLine
$LabelId 
$Line [0] [tcv_CN_Domain = ps_domain]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc ? RRC_DataInd     
( tcv_CellIndInfo.start_PS := RRC_DataInd.start )
$Cref car_PS_InitDirectTransfer (     
tsc_CellDedicated,     
tsc_RB3,     
cr_ServiceRequest (     
c_ServiceType_v(?),     
*,    
tcv_PS_KeySeq      
))
$VerdictId 
$Comment /* SERVICE REQUEST */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_RRC_Security (  
 tsc_DefaultCellId,   
tcv_PS_AuthCK,  
tcv_PS_AuthIK,  
tcv_AuthKcGSM,  
FALSE,  
ps_domain)
$Cref 
$VerdictId 
$Comment /* SECURITY MODE COMMAND  
SECURITY MODE COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_CN_Domain = cs_domain]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc?RRC_DataInd         
( tcv_CellIndInfo.start_CS := RRC_DataInd.start )
$Cref car_InitDirectTransfer(          
  tsc_CellDedicated,         
  tsc_RB3,          
  c_PagRsp(          
    ?,          
    c_MobileIdTMSI_lv ) )
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_MM_Authentication(   tsc_DefaultCellId)
$Cref 
$VerdictId 
$Comment /* Steps 6a-6b */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_RRC_Security ( 
 tsc_DefaultCellId,   
tcv_AuthCK,  
tcv_AuthIK,  
tcv_AuthKcGSM,  
TRUE,   
cs_domain)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Initialise test case variables ready for system simulator configuration.         
         
2. Initialise system simulator with SRBs ready for RRC connection establishment         
   on DCH, with an additional RAB 5 mapped to a TM RLC entity. This RAB will be          
   mapped to the appropriate UE RAB configured as AM or TM, and the RLC test          
   case will create and verify the AM / UM headers.         
         
3. Perform idle updated procedure on DCH.         
         
4. Page UE, and complete mobile terminated RRC connection establishment on DCH.         
    (Ref 3G TS 34.108 clause 7.1.2)         
         
5. Paging response from UE.         
         
6. Activate UE RB test mode (Ref 3G TS 34.109 clause 5.2.1)         
         
7. Generic setup procedures for TDD are not implemented yet. This value of          
   px_RAT results in final inconclusive verdict         
            
8. Unexpected value of px_RAT provided.        
        
9. Initialize RLC specific variables depending on the doamin to be used */
$End_TestStep
$End_TestStepGroup
$TestStepGroup
$TestStepGroupId General
$Begin_TestStep
$TestStepId ts_SS_RB20_AM_PS_Rel_Cfg_NoTimerPoll
$TestStepRef MACv520/General/
$Objective /* Releases configured RB20, and reconfigures  radio bearers :  RB20. default values from 34.108  cl. 6.10.2.4.4 and 6.10.2.4.3.3 except for Timer Poll Omitted */
$DefaultsRef SS_Def
$Comment /* CRLC is configured with cellId -1 (tsc_CellDedicated) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +  ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ! CRLC_Config_REQ
$Cref ca_RB_AM_Info_RAB_T_PollOmit ( tsc_CellDedicated, tsc_RB20, tcv_TimerPollProhibit, OMIT,  tcv_PollSDU, tcv_PollWindow, {uLlogicalChannelIdentity tsc_UL_DTCH1, dLlogicalChannelIdentity tsc_DL_DTCH1}, 320)
$VerdictId 
$Comment /* cofigure radio bearers : 
RB20 (AM + DTCH) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf ( tsc_CellDedicated,  tsc_RB20 )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_ReceiveRRC_RLC_StatusPDU_DCH (p_Rb_Id : SS_RB_Identity; p_SUFI_Params : SUFI_Params )
$TestStepRef MACv520/General/
$Objective /* To receive RRC Status PDU on RB2 and RLC Status on RB1 mapped on DCH. They can come in any order. */
$DefaultsRef MAC_Default
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] AM ? RLC_AM_DATA_IND
$Cref car_RRC_Status(
  tsc_CellDedicated, 
   tsc_RB2, 
   cr_RRC_Status_MAC_NoInteg)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM ? RLC_TR_TestDataInd
( tcv_StatusPDU := RLC_TR_TestDataInd.data)
$Cref car_DataIndHiPriNAS( p_Rb_Id,  c_MAC_PDU_CT_RCV_STATUS_DCH(   tsc_CT_LoCh3,
    cr_StatusAnyPad) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_StatusMatchRes := o_SUFI_Handler( p_SUFI_Params, tcv_StatusPDU.data.superFieldsRec ))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_StatusMatchRes.result = TRUE]
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [TRUE]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] TM ? RLC_TR_TestDataInd
( tcv_StatusPDU := RLC_TR_TestDataInd.data)
$Cref car_DataIndHiPriNAS( p_Rb_Id,  c_MAC_PDU_CT_RCV_STATUS_DCH(   tsc_CT_LoCh3,
    cr_StatusAnyPad ) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] AM ? RLC_AM_DATA_IND
$Cref car_RRC_Status(
  tsc_CellDedicated, 
   tsc_RB2, 
   cr_RRC_Status_MAC_NoInteg)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_StatusMatchRes := o_SUFI_Handler( p_SUFI_Params, tcv_StatusPDU.data.superFieldsRec ))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_StatusMatchRes.result = TRUE]
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [TRUE]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_ReceiveRRC_RLC_StatusPDU_FACH (p_Rb_Id : SS_RB_Identity; p_SUFI_Params : SUFI_Params )
$TestStepRef MACv520/General/
$Objective /* To receive RRC Status PDU on RB2 and RLC Status on RB1 mapped on RACH. They can come in any order. */
$DefaultsRef MAC_Default
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] AM ? RLC_AM_DATA_IND
$Cref car_RRC_Status(
  tsc_CellDedicated, 
   tsc_RB2, 
   cr_RRC_Status_MAC_NoInteg)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM ? RLC_TR_TestDataInd
( tcv_StatusPDU := RLC_TR_TestDataInd.data)
$Cref car_DataIndHiPriNAS( p_Rb_Id,  cr_MAC_PDU_RCV_STATUS_TCTF( 
    tsc_DCCH_OnRACH_FDD, 
    cr_StatusAnyPad) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_StatusMatchRes := o_SUFI_Handler( p_SUFI_Params, tcv_StatusPDU.data.superFieldsRec ))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_StatusMatchRes.result = TRUE]
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [TRUE]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] TM ? RLC_TR_TestDataInd
( tcv_StatusPDU := RLC_TR_TestDataInd.data)
$Cref car_DataIndHiPriNAS( p_Rb_Id,  cr_MAC_PDU_RCV_STATUS_TCTF( 
    tsc_DCCH_OnRACH_FDD, 
    cr_StatusAnyPad ) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] AM ? RLC_AM_DATA_IND
$Cref car_RRC_Status(
  tsc_CellDedicated, 
   tsc_RB2, 
   cr_RRC_Status_MAC_NoInteg)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_StatusMatchRes := o_SUFI_Handler( p_SUFI_Params, tcv_StatusPDU.data.superFieldsRec ))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_StatusMatchRes.result = TRUE]
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [TRUE]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendDLDirectTransfer( p_RB_Identity : SS_RB_Identity;p_MAC_PDU: MAC_PDU;p_SegmentLength : INTEGER; p_RLC_SN : INTEGER)
$TestStepRef MACv520/General/
$Objective /* To Transmit the DLDirect Message to a invalid domain and a dummy NAS String, designed to fit in one RLC Segment */
$DefaultsRef MAC_Default
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] ( tcv_MAC_PDU := p_MAC_PDU )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_MAC_PDU.data :=cs_AMD_LIsAndPad ( 
   p_RLC_SN, 
     tsc_P_Poll, 
    c_LIs2_7BitLIs (
      tsc_DummyDL_DirectTransferLen,
      tsc_LI7_Padding
    ),
    tcv_DummyDL_DirectTransferMsg,
    (p_SegmentLength - (( tsc_DummyDL_DirectTransferLen +2)*8))
  ) )
$Cref 
$VerdictId 
$Comment /* 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] TM ! TxMAC
$Cref cas_DataReqHiPriNAS( p_RB_Identity, tcv_MAC_PDU )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. The RLC PDU is constructed from Lenth Indicators, Dummy downlink PDU and the Padding */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MonitorUplinkSpecefiedTime (p_Time : INTEGER)
$TestStepRef MACv520/General/
$Objective /* To check there is no uplink activity for specified amount of time in seconds */
$DefaultsRef MAC_Default
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_WaitS (p_Time)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TBS
$Line [1] AM ? RLC_AM_DATA_IND
$Cref car_RRC_Status(
  tsc_CellDedicated, 
   ?, 
   cr_RRC_Status_MAC_NoInteg)
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM ? RLC_TR_TestDataInd
( tcv_StatusPDU := RLC_TR_TestDataInd.data)
$Cref car_DataIndHiPriNAS( ?,  cr_MAC_PDU_RCV_STATUS_TCTF( 
    tsc_DCCH_OnRACH_FDD, 
    cr_StatusAnyPad ) )
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ? TIMEOUT t_WaitS
$Cref 
$VerdictId (P)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_Set_AICH_ACKModeInDefaultCell(p_Mode : AICH_Mode  )
$TestStepRef MACv520/General/
$Objective /* To configure the AICH in Default Cell A in the desired operating mode
1Normal
2.No Acknowledgement
3. Negative acknowledgement */
$DefaultsRef MAC_Default
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CPHY ! CPHY_AICH_AckModeSet_REQ
$Cref cas_AICH_AckModeSet_REQ( tsc_DefaultCellId,  tsc_AICH1,  p_Mode)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CPHY ? CPHY_AICH_AckModeSet_CNF
$Cref car_AICH_AckModeSet_CNF( tsc_DefaultCellId,  tsc_AICH1)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SetPRACH_MeasurementmodeInDefaultCell(p_MeasMode : PRACH_MeasurementInd)
$TestStepRef MACv520/General/
$Objective /* To Set the PRACH measurement mode in Default cell CELLA */
$DefaultsRef MAC_Default
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CPHY ! CPHY_PRACH_Measurement_REQ
$Cref cas_PRACH_Measurement_REQ( tsc_DefaultCellId,  tsc_PRACH1,  p_MeasMode)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CPHY ? CPHY_PRACH_Measurement_CNF
$Cref car_PRACH_Measurement_CNF( tsc_DefaultCellId,  tsc_PRACH1)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_GetPRACH_PreambleMeasuremntReportInDefaultCell
$TestStepRef MACv520/General/
$Objective /* To Get the PRACH Preamble measurement Report on CPHY PCO */
$DefaultsRef MAC_Default
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_PreambleSigUsed :=CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_Signature ,
tcv_PRACH_AccessSlotUsed :=CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1, cs_PRACH_PreamMeasRep)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_GetRRC_ConnecSetupSegment( p_SegmentNumber, p_SegmentLength, p_MacHeadLen: INTEGER )
$TestStepRef MACv520/General/
$Objective /* Assign the requested segment of the pre-coded RRC Connection Setup message to 
tcv_RLC_UM_PDU. */
$DefaultsRef MAC_Default
$Comment /* This test step is used to extract the requested segment from the pre-coded AUTHENTICATION REQUEST message, based on the given segment size.

Parameters
p_SegmentNumber
The required segment number, from 1 to 3 inclusive. The pre-coded AUTHENTICATION 
REQUEST message fits in 3 RLC PDUs when the payload size is 128. Any other 
values of p_SegmentNumber will result in a test case error.

p_SegmentLength
The length of the segment to exctract. This value is used to extract the appropriate substring from the pre-coded AUTHENTICATION REQUEST message stored in tsc_AuthReq.

Test case variables affected
tcv_RLC_PDU will contain the requested segment of the AUTHENTICATION REQUEST 
message, including an RLC header with sequence number equal to (p_SegmentNumber 
- 1 ). */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [  p_SegmentNumber = 1 ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (   tcv_RLC_UM_PDU := c_UMD_LIs( 
    p_SegmentNumber - 1, 
   c_LIs1_7BitLI(
      124),
      o_BitstringXtract( 
        o_OctToBit ( tcv_RRC_ConnecSetupMsg), 
        tsc_RRC_ConnecSetupLen, 
        p_SegmentLength-8,   
       0
    )   
  )
)
$Cref 
$VerdictId 
$Comment /* As this is the  PDU with sequence number 0, sent, it is sent with the special length indicator of '111 1100'B i.e 124 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( p_SegmentNumber > 1 ) AND ( p_SegmentNumber < 6) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (   tcv_RLC_UM_PDU := c_UMD( 
    p_SegmentNumber - 1, 
      o_BitstringXtract( 
        o_OctToBit ( tcv_RRC_ConnecSetupMsg), 
        tsc_RRC_ConnecSetupLen, 
        p_SegmentLength,   
       (( ( p_SegmentNumber - 1 ) *   p_SegmentLength )-8)
    )   
  )
)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ p_SegmentNumber  = 6 ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (   tcv_RLC_UM_PDU := c_UMD_LIsAndPad( 
    p_SegmentNumber - 1, 
    c_LIs2_7BitLIs(
      17,
      tsc_LI7_Padding
    ),
      o_BitstringXtract( 
        o_OctToBit ( tcv_RRC_ConnecSetupMsg), 
        tsc_RRC_ConnecSetupLen, 
        (p_SegmentLength - 16-( 8 - p_MacHeadLen )),   
        (( ( p_SegmentNumber - 1 ) *   p_SegmentLength)-8)
    ) ,
    ( 8 - p_MacHeadLen )
)
)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [0] [ (p_SegmentNumber  > 6) OR ( p_SegmentNumber < 0 ) ]
$Cref 
$VerdictId I
$Comment /* 1 */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. the hand codde RRC connection setup message will be always sufficient enough to fill in $ RLC segments. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendRRC_ConnecSetup( p_MAC_PDU: MAC_PDU; p_SegmentLength, p_MacHeadLen: INTEGER )
$TestStepRef MACv520/General/
$Objective /* Send all 5 segments of the hand coded RRC Connection Setipt message using the 
header information provided in the given MAC PDU. */
$DefaultsRef MAC_Default
$Comment /* Parameters
p_MAC_PDU: Used to initialise all fields in tcv_MAC_PDU except for the data 
field, which  is initialised to the appropriate RRC Connection setupsegment 
during each iteration through the loop.

p_SegmentLength: Used to determine how many bits will be used for each 
segment of the RRC connection Setup. Normally this will be 
tsc_ExpectedPayloadSize, but other values may need to be used if the MAC 
header is not the normal length.

Variables affected
tcv_MAC_PDU is used as a working variable by this test step. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] ( tcv_RRC_ConnecSetupSegmentNum := 1 )
$Cref 
$VerdictId 
$Comment /* 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_MAC_PDU := p_MAC_PDU )
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] REPEAT lt_SendRRC_ConnSetupSegment
UNTIL [ tcv_RRC_ConnecSetupSegmentNum  = 7 ]
$Cref 
$VerdictId 
$Comment /* 1 */
$End_BehaviourLine
$Header lt_SendRRC_ConnSetupSegment
$BehaviourLine
$LabelId 
$Line [0] [ tcv_RRC_ConnecSetupSegmentNum <= 6 ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_GetRRC_ConnecSetupSegment ( tcv_RRC_ConnecSetupSegmentNum , p_SegmentLength, p_MacHeadLen )
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_MAC_PDU.data := tcv_RLC_UM_PDU )
$Cref 
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] TM ! TxMAC
$Cref cas_DataReqRB0(tsc_RB_CCCH_FACH_MAC, tcv_MAC_PDU )
$VerdictId 
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] ( tcv_RRC_ConnecSetupSegmentNum:= tcv_RRC_ConnecSetupSegmentNum + 1 )
$Cref 
$VerdictId 
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [0] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* 5 */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. tcv_AuthReqSegmentNumber is used to iterate through the4 segments in the
   hand codedRRC connection setupt message. The variable is initialised to 1,
   and then all 4 segments are sent using the given MAC PDU header. 
   tcv_AuthReqSegmentNumber is incremented in the local tree
   lt_SendAuthReqSegment.

2. Initialise tcv_MAC_PDU to use the given field values for the MAC PDU header.
   The data field will be updated each time through the loop to contain the next 
   segment of the RRC Connection Setup message.

3. Extract the next segment from the Authentication Request message, assign it 
   to the data field of tcv_MAC_PDU, and transmit it on the high priority NAS AM 
   DCCH. The third and final segment includes two length indicators. The first 
   LI indicates the end of the RLC SDU, and the second LI indicates that the 
   rest of the PDU is padding.

4. Increment  tcv_RRC_ConnecSetupSegmentNum ready to transmit the next segment.

5. Iflt_SendRRC_ConnSetupSegment is used and tcv_RRC_ConnecSetupSegmentNum is greater
    than 3, a test case error has occured, and a final inconclusive verdict is
    assigned. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MAC_ReceiveRRC_ConnReqInDefaultCellAndInit
$TestStepRef MACv520/General/
$Objective /* To receive the RRc connection Request message from the Ue in the Default cell. */
$DefaultsRef 
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_WaitMS
$Cref 
$VerdictId 
$Comment /* wait timer with 13.5 seconds */
$End_BehaviourLine
$BehaviourLine
$LabelId TSP1
$Line [1] TM ? RLC_TR_DATA_IND ( 
    tcv_InitialUE_Id  :=  RLC_TR_DATA_IND.tM_message.uL_CCCH_Message.message.rrcConnectionRequest.initialUE_Identity) CANCEL t_WaitMS
$Cref car_RRC_ConnReq (tsc_DefaultCellId , 
tsc_RB0, cdr_108_RRC_ConnReq_MAC ( 
        tcv_RRC_EstCauMT
    ))
$VerdictId (P)
$Comment /* RRC connection received control transferred out of test step */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_InitRRC_ConnecSetup
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ?TIMEOUT t_WaitMS
$Cref 
$VerdictId (F)
$Comment /* UE not responding to Paging */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MAC_ReceiveRRC_ConnReqInDefaultCell
$TestStepRef MACv520/General/
$Objective /* To receive the RRc connection Request message from the Ue in the Default cell. */
$DefaultsRef 
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_WaitMS
$Cref 
$VerdictId 
$Comment /* wait timer with 13.5 seconds */
$End_BehaviourLine
$BehaviourLine
$LabelId TSP1
$Line [1] TM ? RLC_TR_DATA_IND CANCEL t_WaitMS
$Cref car_RRC_ConnReq (tsc_DefaultCellId , 
tsc_RB0, cdr_108_RRC_ConnReq_MAC ( 
        tcv_RRC_EstCauMT
    ))
$VerdictId (P)
$Comment /* RRC connection received control transferred out of test step */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] AM ? RLC_AM_DATA_IND 
CANCEL  t_WaitMS
$Cref car_RRC_ConnSetupCmpl ( tsc_CellDedicated, 
tsc_RB2, 
cr_108_RRC_ConnSetupCmpl ( ?, ? ) )
$VerdictId (F)
$Comment /* RRC Connection Setup complete received, UE has not discarded the previous sent invalid MAC PDU, hence fail */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ?TIMEOUT t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_RRC_PagType1_DefMAC (
  tsc_DefaultCellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] START t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM ? RLC_TR_DATA_IND CANCEL  t_WaitMS
$Cref car_RRC_ConnReq (tsc_DefaultCellId , 
tsc_RB0, cdr_108_RRC_ConnReq_MAC ( 
        tcv_RRC_EstCauMT
    ))
$VerdictId (P)
$Comment /* RRC connection received control transferred out of test step */
$End_BehaviourLine
$BehaviourLine
$LabelId TSF2
$Line [4] ?TIMEOUT t_WaitMS
$Cref 
$VerdictId I
$Comment /* UE not responding to Paging */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_ReceiveLoopBackDataAndCheckASC (p_RBId : INTEGER; p_ASC :  BITSTRING; p_Data1, p_Data2 : PDU )
$TestStepRef MACv520/General/
$Objective /* To Receive the Loopbacked User Data by the Ue and check the validity of the Access slot and hence the ASC selected by the UE. */
$DefaultsRef MAC_PRACH_MeasRecDef,MAC_Default
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_AccessServiceClass :=p_ASC)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +lt_ReceiveData
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] START t_Dly (200)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ? TIMEOUT t_Dly
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$Header lt_ReceiveData
$BehaviourLine
$LabelId 
$Line [0] [ p_ASC = '0010'B ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_GetPRACH_PreambleMeasuremntReportInDefaultCell
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ ( 0 <= tcv_PRACH_PreambleSigUsed) AND ( tcv_PRACH_PreambleSigUsed <= 7) AND 
(   (tcv_PRACH_AccessSlotUsed = 1) OR (tcv_PRACH_AccessSlotUsed = 4) OR (tcv_PRACH_AccessSlotUsed = 7) OR (tcv_PRACH_AccessSlotUsed = 10) OR (tcv_PRACH_AccessSlotUsed = 13)    ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_PRACH_ExpAccessSlot := (  (tcv_PRACH_AccessSlotUsed + 3)  MOD 15) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed := CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  cs_PRACH_MsgMeasRep)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] [  (  tcv_PRACH_AccessSlotUsed = tcv_PRACH_ExpAccessSlot) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] AM ? RLC_AM_TestDataInd
$Cref car_RLC_AM_DataInd (  tsc_CellDedicated, p_RBId, p_Data1 )
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] [ TRUE ]
$Cref 
$VerdictId ( F)
$Comment /* If incorrect ACCESS class used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] AM ? RLC_AM_TestDataInd
$Cref car_RLC_AM_DataInd (  tsc_CellDedicated, p_RBId, p_Data1 )
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed := CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  cs_PRACH_MsgMeasRep)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] [  (  tcv_PRACH_AccessSlotUsed = tcv_PRACH_ExpAccessSlot) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] [ TRUE ]
$Cref 
$VerdictId (F)
$Comment /* If incorrect ACCESS class used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ TRUE ]
$Cref 
$VerdictId (F)
$Comment /* If incorrect ACCESS class used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ p_ASC = '0001'B ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_LP_DataReceived = FALSE ]
$Cref 
$VerdictId 
$Comment /* Loop Back of Data in step 6 not recived
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_GetPRACH_PreambleMeasuremntReportInDefaultCell
$Cref 
$VerdictId 
$Comment /* Preamble measeremnt received first. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ ( 0 <= tcv_PRACH_PreambleSigUsed) AND ( tcv_PRACH_PreambleSigUsed <= 7) AND 
(   (tcv_PRACH_AccessSlotUsed = 0) OR (tcv_PRACH_AccessSlotUsed = 3) OR (tcv_PRACH_AccessSlotUsed = 6) OR (tcv_PRACH_AccessSlotUsed = 9) OR (tcv_PRACH_AccessSlotUsed = 12)    ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] ( tcv_PRACH_ExpAccessSlot := (  (tcv_PRACH_AccessSlotUsed + 3)  MOD 15) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed := CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  cs_PRACH_MsgMeasRep)
$VerdictId 
$Comment /* Data1, dat2 and Message measurement any order  but data1 will come before data 2 due to insequence delivery */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] [  (  tcv_PRACH_AccessSlotUsed = tcv_PRACH_ExpAccessSlot) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] AM ? RLC_AM_TestDataInd
$Cref car_RLC_AM_DataInd (  tsc_CellDedicated, p_RBId, p_Data1 )
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] AM ? RLC_AM_TestDataInd
$Cref car_RLC_AM_DataInd (  tsc_CellDedicated, p_RBId, p_Data2 )
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] [ TRUE ]
$Cref 
$VerdictId ( F)
$Comment /* 
If incorrect ACCESS class used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] AM ? RLC_AM_TestDataInd
$Cref car_RLC_AM_DataInd ( tsc_CellDedicated, p_RBId, p_Data1 )
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed := CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  cs_PRACH_MsgMeasRep)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [  (  tcv_PRACH_AccessSlotUsed = tcv_PRACH_ExpAccessSlot) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] AM ? RLC_AM_TestDataInd
$Cref car_RLC_AM_DataInd (  tsc_CellDedicated, p_RBId, p_Data2 )
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [ TRUE ]
$Cref 
$VerdictId ( F)
$Comment /* 
If incorrect ACCESS class used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] AM ? RLC_AM_TestDataInd
$Cref car_RLC_AM_DataInd (  tsc_CellDedicated, p_RBId, p_Data2 )
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed := CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  cs_PRACH_MsgMeasRep)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] [  (  tcv_PRACH_AccessSlotUsed = tcv_PRACH_ExpAccessSlot) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] [ TRUE ]
$Cref 
$VerdictId ( F)
$Comment /* If incorrect ACCESS class used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ TRUE ]
$Cref 
$VerdictId (F)
$Comment /* If incorrect ACCESS class used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_LP_DataReceived = TRUE]
$Cref 
$VerdictId 
$Comment /* Loop Back of Data in step 6 already  recieved
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_GetPRACH_PreambleMeasuremntReportInDefaultCell
$Cref 
$VerdictId 
$Comment /* Preamble measeremnt received first. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ ( 0 <= tcv_PRACH_PreambleSigUsed) AND ( tcv_PRACH_PreambleSigUsed <= 7) AND 
(   (tcv_PRACH_AccessSlotUsed = 0) OR (tcv_PRACH_AccessSlotUsed = 3) OR (tcv_PRACH_AccessSlotUsed = 6) OR (tcv_PRACH_AccessSlotUsed = 9) OR (tcv_PRACH_AccessSlotUsed = 12)    ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] ( tcv_PRACH_ExpAccessSlot := (  (tcv_PRACH_AccessSlotUsed + 3)  MOD 15) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed := CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  cs_PRACH_MsgMeasRep)
$VerdictId 
$Comment /* Data1, dat2 and Message measurement any order  but data1 will come before data 2 due to insequence delivery */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] [  (  tcv_PRACH_AccessSlotUsed = tcv_PRACH_ExpAccessSlot) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] AM ? RLC_AM_TestDataInd
$Cref car_RLC_AM_DataInd (  tsc_CellDedicated, p_RBId, p_Data2 )
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] [ TRUE ]
$Cref 
$VerdictId ( F)
$Comment /* 
If incorrect ACCESS class used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] AM ? RLC_AM_TestDataInd
$Cref car_RLC_AM_DataInd ( tsc_CellDedicated, p_RBId, p_Data2 )
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed := CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  cs_PRACH_MsgMeasRep)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [  (  tcv_PRACH_AccessSlotUsed = tcv_PRACH_ExpAccessSlot) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [ TRUE ]
$Cref 
$VerdictId ( F)
$Comment /* 
If incorrect ACCESS class used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ TRUE ]
$Cref 
$VerdictId (F)
$Comment /* If incorrect ACCESS class used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE ]
$Cref 
$VerdictId (I)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$End_TestStepGroup
$TestStepGroup
$TestStepGroupId RRC_Steps
$Begin_TestStep
$TestStepId ts_RRC_ConnEstForMAC_RecIniTDirecTrans(
p_CellId: INTEGER
)
$TestStepRef MACv520/RRC_Steps/
$Objective /* To execute the RRC connection establishment Procedure and to receive the Service request or Paging response NAS message */
$DefaultsRef RRC_Def1
$Comment /* This test step is identical to the test step ts_RRC_ConnEst except that the RRC 
connection setup message has been modified to enable Timer_Status_Periodic for 
RB3. This timer is used for MAC testing such that the UE will provide STATUS 
reports regularly even if it has not received any RLC PDUs (because they have 
been discarded by the MAC layer due to invalid MAC headers).

The generic Step to establish RRC Connection and bring UE to CELL_FACH or 
CELL_DCH state. In this Step , 4Signalling Radio Bearers with 3.4kbps DL & UL 
is setup (RB# 1, 2, 3,4) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM ? RLC_TR_DATA_IND ( 
    tcv_InitialUE_Id  :=  RLC_TR_DATA_IND.tM_message.uL_CCCH_Message.message.rrcConnectionRequest.initialUE_Identity)
$Cref car_RRC_ConnReq ( tsc_DefaultCellId, 
tsc_RB0, cbr_108_RRC_ConnReq( tcv_RRC_EstCauMT))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_Send_ConnSetUp
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +lt_ReceiveRRC_ConnCmplAndPagRespOrServReq
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_Send_ConnSetUp
$BehaviourLine
$LabelId 
$Line [0] [ (tcv_TmpCellInfo.cellConfig = cell_FACH_MAC_SRB_NoConn ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] UM!RLC_UM_DATA_REQ
$Cref cas_RRC_ConnSetup(
p_CellId, 
tsc_RB0, 
cds_RRC_ConnSetupFACH_NoCapEnq (
        tcv_InitialUE_Id,
        tcv_RRC_Ti,
        tcv_TmpCellInfo.priScrmCode ,
         tcv_TmpCellInfo.uRNTI ,
         tcv_TmpCellInfo. cRNTI,
   tcv_TmpCellInfo.uL_ScramblingCode
        )
)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg ( p_CellId, cell_FACH_MAC_SRB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB_NoConn ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] UM!RLC_UM_DATA_REQ
$Cref cas_RRC_ConnSetup(
p_CellId, 
tsc_RB0, 
cds_RRC_ConnSetupDCH_NoCapEnq (
    tcv_InitialUE_Id,
    tcv_RRC_Ti,
    tcv_TmpCellInfo.priScrmCode ,
    tcv_TmpCellInfo.uRNTI ,
    tcv_TmpCellInfo.uL_ScramblingCode
        )
)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg ( p_CellId, cell_DCH_MAC_SRB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR
$Line [0] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$Header lt_ReceiveRRC_ConnCmplAndPagRespOrServReq
$BehaviourLine
$LabelId 
$Line [0] (tcv_MAC_Counter :=0)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ (tcv_TmpCellInfo.cellConfig = cell_FACH_MAC_SRB ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId Rcv1
$Line [2] AM ? RLC_AM_DATA_IND
$Cref car_RRC_ConnSetupCmpl ( tsc_CellDedicated, 
tsc_RB2, cr_108_RRC_ConnSetupCmpl(tcv_RRC_Ti, * ))
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] START t_WaitMS(5000)
$Cref 
$VerdictId 
$Comment /* Start a timer of 5 seconds to receive the First Paging response or service request Segment */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_ReceiveSegments_FACH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] TM ? RxMAC
$Cref car_DataIndHiPriNAS( tsc_RB_DCCH_FACH_MAC,
  c_MAC_PDU_TCTF( 
    tsc_DCCH_OnRACH_FDD, 
    ? ) )
$VerdictId 
$Comment /* Receive first segment */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +lt_Updatecounter
$Cref 
$VerdictId 
$Comment /* 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM ! TxMAC
$Cref cas_DataReqHiPriNAS( tsc_RB_DCCH_FACH_MAC,
  cs_MAC_PDU_Send_STATUS_Def(  
   cs_StatusAndPad(
      cs_SF_Ack( tcv_MAC_Counter  ), 31 ) ) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] GOTO Rcv1
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId Rcv2
$Line [2] AM ? RLC_AM_DATA_IND
$Cref car_RRC_ConnSetupCmpl ( tsc_CellDedicated, 
tsc_RB2, cr_108_RRC_ConnSetupCmpl(tcv_RRC_Ti, * ))
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] START t_WaitMS(5000)
$Cref 
$VerdictId 
$Comment /* Start a timer of 5 seconds to receive the First Paging response or service request Segment */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_ReceiveSegments_DCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] TM ? RxMAC
$Cref car_DataIndHiPriNAS( tsc_RB_DCCH_DCH_MAC,
   c_MAC_PDU_CT_DCH( 
    tsc_CT_LoCh3, 
    ? ) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +lt_Updatecounter
$Cref 
$VerdictId 
$Comment /* 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM ! TxMAC
$Cref cas_DataReqHiPriNAS( tsc_RB_DCCH_DCH_MAC,
  c_MAC_PDU_CT_RCV_STATUS_DCH(   tsc_CT_LoCh3,
   cs_StatusAndPad(
      cs_SF_Ack( tcv_MAC_Counter  ),31 ) ) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] GOTO Rcv2
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR
$Line [1] [ TRUE ]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_Updatecounter
$BehaviourLine
$LabelId 
$Line [0] [tcv_MAC_Counter < px_NumOfSegInPagResOrServReq ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_MAC_Counter := tcv_MAC_Counter+1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_ReceiveSegments_FACH
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId Next1
$Line [1] TM ? RxMAC CANCEL t_WaitMS
$Cref car_DataIndHiPriNAS( tsc_RB_DCCH_FACH_MAC,
  c_MAC_PDU_TCTF( 
    tsc_DCCH_OnRACH_FDD, 
    ? ) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_Updatecounter
$Cref 
$VerdictId 
$Comment /* 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [tcv_MAC_Counter =  px_NumOfSegInPagResOrServReq ]
$Cref 
$VerdictId (P)
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM ! TxMAC
$Cref cas_DataReqHiPriNAS( tsc_RB_DCCH_FACH_MAC,
  cs_MAC_PDU_Send_STATUS_Def(  
   cs_StatusAndPad(
      cs_SF_Ack( tcv_MAC_Counter  ), 31 ) ) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] START t_WaitMS (tsc_WaitNextRLC_Segment+100)
$Cref 
$VerdictId 
$Comment /* 100 ms more to check for all retransmissions */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] GOTO Next1
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ TRUE ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] START t_WaitMS (tsc_WaitNextRLC_Segment)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] GOTO Next1
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ? TIMEOUT  t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_MAC_Counter =  px_NumOfSegInPagResOrServReq ]
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ TRUE ]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$Header lt_ReceiveSegments_DCH
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId Next2
$Line [1] TM ? RxMAC CANCEL t_WaitMS
$Cref car_DataIndHiPriNAS( tsc_RB_DCCH_DCH_MAC,
   c_MAC_PDU_CT_DCH( 
    tsc_CT_LoCh3, 
    ? ) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_Updatecounter
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [tcv_MAC_Counter =  px_NumOfSegInPagResOrServReq ]
$Cref 
$VerdictId (P)
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM ! TxMAC
$Cref cas_DataReqHiPriNAS( tsc_RB_DCCH_DCH_MAC,
  c_MAC_PDU_CT_RCV_STATUS_DCH(   tsc_CT_LoCh3,
   cs_StatusAndPad(
      cs_SF_Ack( tcv_MAC_Counter  ),31 ) ) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] START t_WaitMS (tsc_WaitNextRLC_Segment+100)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] GOTO Next2
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ TRUE ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] START t_WaitMS (tsc_WaitNextRLC_Segment)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] GOTO Next2
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ? TIMEOUT  t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_MAC_Counter =  px_NumOfSegInPagResOrServReq ]
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ TRUE ]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Update the cell configuration
2. This step is only intended for use by the MAC layer, for tests to be performed in Cell FACH state. */
$End_TestStep
$End_TestStepGroup
$TestStepGroup
$TestStepGroupId MAC_UT_Steps
$Begin_TestStep
$TestStepId ts_MMI_USIM_InsertTypeB
$TestStepRef MACv520/MAC_UT_Steps/
$Objective /* To make the operator insert the USIM card of type B */
$DefaultsRef UT_OtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "Please insert the USIM card of type B into the UE")
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$End_TestStepGroup
$TestStepGroup
$TestStepGroupId BasicM_General_Steps
$Begin_TestStep
$TestStepId ts_AssignCN_Domain
$TestStepRef MACv520/BasicM_General_Steps/
$Objective /* To assign tcv_CN_Domain based on PICS and PIXIT values. This Steps is to be used by test cases written for both cs and ps domains. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ pc_CS AND ( px_CN_DomainTested = cs_domain ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_CN_Domain := cs_domain )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ pc_PS AND ( px_CN_DomainTested = ps_domain ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_CN_Domain :=ps_domain )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CountConfiguredCell
$TestStepRef MACv520/BasicM_General_Steps/
$Objective /* Assign tcv_NumCfgCell to the number of cells already configured. */
$DefaultsRef SS_Def
$Comment /* When a cell is configured, the corresponding receod.cellConfig is set to a different value than cell_NotConfigured */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] ( tcv_NumCfgCell := 0 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_CheckOneCell ( tcv_CellInfoA )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_CheckOneCell ( tcv_CellInfoB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_CheckOneCell ( tcv_CellInfoC )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_CheckOneCell ( tcv_CellInfoD )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + lt_CheckOneCell ( tcv_CellInfoE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + lt_CheckOneCell ( tcv_CellInfoF )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + lt_CheckOneCell ( tcv_CellInfoG )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + lt_CheckOneCell ( tcv_CellInfoH )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_CheckOneCell ( p_CellInfo : CellInfoCfg )
$BehaviourLine
$LabelId 
$Line [0] [  p_CellInfo.cellConfig <> cell_NotConfigured  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_NumCfgCell := tcv_NumCfgCell + 1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [  p_CellInfo.cellConfig = cell_NotConfigured  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_InitVariables
$TestStepRef MACv520/BasicM_General_Steps/
$Objective /* Initialisation of the test case variables tcv_CellInfoX, tcv_SF_Pilot and tcv_SF512. */
$DefaultsRef SS_Def
$Comment /* tcv_CellInfoA, tcv_CellInfoB, tcv_CellInfoC,  tcv_CellInfoD, tcv_CellInfoE and tcv_CellInfoF : contains the cell information used to configure SS.    
tcv_SF_Pilot and tcv_SF512 are assigned based on the capability of the UE.  */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + lt_CalculateFrequencyInfo
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +lt_Init_SSInfo_CellA
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_Init_SSInfo_CellB
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +lt_Init_SSInfo_CellC
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +lt_Init_SSInfo_CellD
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +lt_Init_SSInfo_CellE
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +lt_Init_SSInfo_CellF
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +lt_Init_SSInfo_CellG
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +lt_Init_SSInfo_CellH
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_CalculateFrequencyInfo
$BehaviourLine
$LabelId 
$Line [0] + lt_CalculateFreqMid
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_CalculateFreqHigh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_CalculateFreqLow
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_CalculateFreqMid
$BehaviourLine
$LabelId 
$Line [0] + lt_CheckFreqSeperation(px_UARFCN_D_Mid, px_UARFCN_U_Mid)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT  tcv_Res ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_FreqInfoMid := c_FreqInfo (  px_UARFCN_U_Mid, px_UARFCN_D_Mid  ) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_Res ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_FreqInfoMid := c_FreqInfo (  OMIT, px_UARFCN_D_Mid  ) )
$Cref 
$VerdictId 
$Comment /* Uplink UARFCN is OMITTED when the distance of 190 MHz is used (distance of 950 in UARFCN) */
$End_BehaviourLine
$Header lt_CalculateFreqHigh
$BehaviourLine
$LabelId 
$Line [0] + lt_CheckFreqSeperation(px_UARFCN_D_High, px_UARFCN_U_High)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT tcv_Res ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_FreqInfoHigh := c_FreqInfo ( px_UARFCN_U_High, px_UARFCN_D_High  ) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_Res ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_FreqInfoHigh := c_FreqInfo ( OMIT, px_UARFCN_D_High  ) )
$Cref 
$VerdictId 
$Comment /* Uplink UARFCN is OMITTED when the distance of 190 MHz is used (distance of 950 in UARFCN) */
$End_BehaviourLine
$Header lt_CalculateFreqLow
$BehaviourLine
$LabelId 
$Line [0] + lt_CheckFreqSeperation( px_UARFCN_D_Low, px_UARFCN_U_Low  )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT tcv_Res ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_FreqInfoLow := c_FreqInfo ( px_UARFCN_U_Low, px_UARFCN_D_Low  ) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_Res ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_FreqInfoLow := c_FreqInfo ( OMIT, px_UARFCN_D_Low  ) )
$Cref 
$VerdictId 
$Comment /* Uplink UARFCN is OMITTED when the distance of 190 MHz is used (distance of 950 in UARFCN) */
$End_BehaviourLine
$Header lt_CheckFreqSeperation(p_UARFCN_D, p_UARFCN_U:INTEGER)
$BehaviourLine
$LabelId 
$Line [0] [px_FDD_OperationBand = 1]
$Cref 
$VerdictId 
$Comment /* Operation Band 1 under test */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( (p_UARFCN_D  - p_UARFCN_U)   = 950 ) ]
$Cref 
$VerdictId 
$Comment /* Default seperation */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_Res := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE]
$Cref 
$VerdictId 
$Comment /* Non default seperation */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_Res := FALSE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [px_FDD_OperationBand = 2]
$Cref 
$VerdictId 
$Comment /* Operation Band 2 under test */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( (p_UARFCN_D  - p_UARFCN_U)   = 400 ) ]
$Cref 
$VerdictId 
$Comment /* Default seperation */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_Res := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE]
$Cref 
$VerdictId 
$Comment /* Non default seperation */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_Res := FALSE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [px_FDD_OperationBand = 3]
$Cref 
$VerdictId 
$Comment /* Operation Band 3 under test */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( (p_UARFCN_D  - p_UARFCN_U)   = 475 ) ]
$Cref 
$VerdictId 
$Comment /* Default seperation */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_Res := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE]
$Cref 
$VerdictId 
$Comment /* Non default seperation */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_Res := FALSE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [(px_FDD_OperationBand = 5) OR (px_FDD_OperationBand = 6)]
$Cref 
$VerdictId 
$Comment /* Operation Band 5 0r 6 under test  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ (( p_UARFCN_D  - p_UARFCN_U )  = 225 ) ]
$Cref 
$VerdictId 
$Comment /* Default seperation */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_Res := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE]
$Cref 
$VerdictId 
$Comment /* Non default seperation */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_Res := FALSE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE ]
$Cref 
$VerdictId I
$Comment /*  */
$End_BehaviourLine
$Header lt_Init_SSInfo_CellA
$BehaviourLine
$LabelId 
$Line [0] (tcv_CellInfoA := c_CellInfoDef ( 
tsc_CellA,  px_PriScrmCode,   
tsc_URA_IdCellA, px_TCellA, tsc_SFN_OffsetA, tcv_FreqInfoMid , px_UL_ScramblingCode ))
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$Header lt_Init_SSInfo_CellB
$BehaviourLine
$LabelId 
$Line [0] (tcv_CellInfoB := c_CellInfoDef ( 
tsc_CellB, ( ( px_PriScrmCode + 50 ) MOD 512) ,   
tsc_URA_IdCellB, px_TCellB, tsc_SFN_OffsetB, tcv_FreqInfoMid , ((px_UL_ScramblingCode +1000) MOD 16777216) ))
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$Header lt_Init_SSInfo_CellC
$BehaviourLine
$LabelId 
$Line [0] (tcv_CellInfoC := c_CellInfoDef ( 
tsc_CellC,   ( ( px_PriScrmCode + 100 ) MOD 512),   
tsc_URA_IdCellC, px_TCellC, tsc_SFN_OffsetC, tcv_FreqInfoMid , ((px_UL_ScramblingCode +2000) MOD 16777216) ) )
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$Header lt_Init_SSInfo_CellD
$BehaviourLine
$LabelId 
$Line [0] (tcv_CellInfoD := c_CellInfoDef ( 
tsc_CellD,   ( ( px_PriScrmCode + 150 ) MOD 512),  
tsc_URA_IdCellD, px_TCellD, tsc_SFN_OffsetD, tcv_FreqInfoHigh , ((px_UL_ScramblingCode +3000) MOD 16777216) ) )
$Cref 
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$Header lt_Init_SSInfo_CellE
$BehaviourLine
$LabelId 
$Line [0] (tcv_CellInfoE := c_CellInfoDef ( 
tsc_CellE,   ( ( px_PriScrmCode + 200 ) MOD 512),  
tsc_URA_IdCellE, px_TCellE,tsc_SFN_OffsetE, tcv_FreqInfoHigh , ((px_UL_ScramblingCode +4000) MOD 16777216) ) )
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$Header lt_Init_SSInfo_CellF
$BehaviourLine
$LabelId 
$Line [0] (tcv_CellInfoF := c_CellInfoDef ( 
tsc_CellF,   ( ( px_PriScrmCode + 250 ) MOD 512),  
tsc_URA_IdCellF, px_TCellF, tsc_SFN_OffsetF, tcv_FreqInfoHigh  , ((px_UL_ScramblingCode +5000) MOD 16777216) ))
$Cref 
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$Header lt_Init_SSInfo_CellG
$BehaviourLine
$LabelId 
$Line [0] (tcv_CellInfoG := c_CellInfoDef ( 
tsc_CellG,   ( ( px_PriScrmCode + 300 ) MOD 512),  
tsc_URA_IdCellG, px_TCellG, tsc_SFN_OffsetG, tcv_FreqInfoMid  , ((px_UL_ScramblingCode +6000) MOD 16777216) ))
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_Init_SSInfo_CellH
$BehaviourLine
$LabelId 
$Line [0] (tcv_CellInfoH := c_CellInfoDef ( 
tsc_CellH,   ( ( px_PriScrmCode + 350 ) MOD 512),  
tsc_URA_IdCellH, px_TCellH, tsc_SFN_OffsetH, tcv_FreqInfoMid  , ((px_UL_ScramblingCode +7000) MOD 16777216) ))
$Cref 
$VerdictId 
$Comment /* . */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. The primary scrambling code of cell A is equal to the pixit value 
2. The primary scrmabling code of cell B is equal to the pixit value + 50 
3. The primary scrmabling code of cell B is equal to the pixit value + 100 
4. Cell A and D do not have the same frequency, the primary scrambling code of cell D is equal to the one of cell A 
5. Cell B and E do not have the same frequency, the primary scrambling code of cell E is equal to the one of cell B 
6. Cell C and F do not have the same frequency, the primary scrambling code of cell F is equal to the one of cell C */
$End_TestStep
$Begin_TestStep
$TestStepId ts_NAS_Delay(p_Dly: INTEGER)
$TestStepRef MACv520/BasicM_General_Steps/
$Objective /* Realization of a Delay */
$DefaultsRef NAS_OtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_Dly(p_Dly)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ?TIMEOUT t_Dly
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_RRC_Delay ( p_Dly: INTEGER )
$TestStepRef MACv520/BasicM_General_Steps/
$Objective /* Realization of a Delay */
$DefaultsRef RRC_Def1
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] START t_Dly(p_Dly)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ?TIMEOUT t_Dly
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_RRC_InitVariables( p_CellToBeCreated : CellToBeCreated )
$TestStepRef MACv520/BasicM_General_Steps/
$Objective /* Initialisation of Testcase and Testsuite variables for RRC testcases */
$DefaultsRef RRC_Def1
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_AssignCN_Domain
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_CN_Domain = cs_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_RRC_InitVariablesCS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_CN_Domain = ps_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_RRC_InitVariablesPS ( p_CellToBeCreated )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [1] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* Programming error */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_RRC_InitVariablesCS
$TestStepRef MACv520/BasicM_General_Steps/
$Objective /* Initialisation of Testcase and Testsuite variables for RRC testcases */
$DefaultsRef RRC_Def1
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_InitVariables
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_CN_Domain := cs_domain, tcv_RAB_Id :=  tsc_RAB_DefCS )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RRC_InitServVarCS
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_RRC_InitServVarCS
$BehaviourLine
$LabelId 
$Line [0] [ ( px_RRC_CS_ServTested = speech ) AND pc_Conversational ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_RRC_RAB_Type := cell_DCH_Speech, 
tcv_RRC_PagingCau := terminatingConversationalCall, 
tcv_RRC_EstCauMO := originatingConversationalCall, 
tcv_RRC_EstCauMT := terminatingConversationalCall)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( px_RRC_CS_ServTested = conversational_64k ) AND  pc_Conversational ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_RRC_RAB_Type := cell_DCH_64kCS_RAB_SRB, 
tcv_RRC_PagingCau := terminatingConversationalCall, 
tcv_RRC_EstCauMO := originatingConversationalCall, 
tcv_RRC_EstCauMT := terminatingConversationalCall)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( px_RRC_CS_ServTested = streaming_57_6k ) AND  pc_Streaming ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_RRC_RAB_Type := cell_DCH_57_6kCS_RAB_SRB, 
tcv_RRC_PagingCau := terminatingStreamingCall, 
tcv_RRC_EstCauMO := originatingConversationalCall, 
tcv_RRC_EstCauMT := terminatingStreamingCall)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [0] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* Programming or parameter error */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_RRC_InitVariablesPS ( p_CellToBeCreated : CellToBeCreated )
$TestStepRef MACv520/BasicM_General_Steps/
$Objective /* Initialisation of Testcase variables for RRC testcases in the PS_domain */
$DefaultsRef RRC_Def1
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_InitVariables
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_CN_Domain := ps_domain, tcv_RAB_Id := tsc_RAB_DefPS )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ p_CellToBeCreated = cell_FACH ]
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_RRC_RAB_Type := cell_FACH_PS )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_RRC_InitServVarPS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ p_CellToBeCreated = cell_DCH ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_RRC_RAB_Type := cell_DCH_64kPS_RAB_SRB)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_RRC_InitServVarPS
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_RRC_InitServVarPS
$BehaviourLine
$LabelId 
$Line [0] [  pc_Interactive AND ( px_RRC_PS_ServTested = ps_Interactive)  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_RRC_PagingCau := terminatingInteractiveCall, 
tcv_RRC_EstCauMO := originatingInteractiveCall, 
tcv_RRC_EstCauMT := terminatingInteractiveCall)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [  pc_Background AND ( px_RRC_PS_ServTested = ps_Background) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_RRC_PagingCau := terminatingBackgroundCall, 
tcv_RRC_EstCauMO := originatingBackgroundCall, 
tcv_RRC_EstCauMT := terminatingBackgroundCall)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [0] [  TRUE ]
$Cref 
$VerdictId I
$Comment /* Parameter  error */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. In the ps_domain with a  cell_FACH configuration, the RAB configuration to be used is cell_FACH_PS */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SaveCellInfo ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_General_Steps/
$Objective /* To save in the variable dedicated to the cell p_CellID, the value contained in tcv_TmpCellInfo. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ p_CellId = tsc_CellA]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_CellInfoA := tcv_TmpCellInfo)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ p_CellId  = tsc_CellB]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (   tcv_CellInfoB:= tcv_TmpCellInfo)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ p_CellId  = tsc_CellC]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (   tcv_CellInfoC:= tcv_TmpCellInfo)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ p_CellId  = tsc_CellD]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (   tcv_CellInfoD:= tcv_TmpCellInfo)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ p_CellId  = tsc_CellE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (   tcv_CellInfoE := tcv_TmpCellInfo)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ p_CellId  = tsc_CellF]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (   tcv_CellInfoF := tcv_TmpCellInfo)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ p_CellId  = tsc_CellG]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (   tcv_CellInfoG := tcv_TmpCellInfo)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ p_CellId  = tsc_CellH]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (   tcv_CellInfoH := tcv_TmpCellInfo)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* programming error */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SetCellCfg ( p_CellId : INTEGER ; p_CellConfig : RB_ConfigType )
$TestStepRef MACv520/BasicM_General_Steps/
$Objective /* To assign the field cellConfig of the cell given as parameter to the value 'p_CellConfig'. 
( tcv_CellInfo[p_CellId] := p_CellConfig ) */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo (p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_TmpCellInfo.cellConfig := p_CellConfig )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SaveCellInfo (p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SetTmpCellInfo (p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_General_Steps/
$Objective /* To Set global variable tcv_TmpCellInfo to the table corresponding to given cell */
$DefaultsRef SS_Def
$Comment /* This Step helps the programmer when he/she needs to  access cell information in a generic test Step. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [p_CellId = tsc_CellA]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_TmpCellInfo := tcv_CellInfoA )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellId = tsc_CellB]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_TmpCellInfo := tcv_CellInfoB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellId = tsc_CellC]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_TmpCellInfo := tcv_CellInfoC )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellId = tsc_CellD]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_TmpCellInfo := tcv_CellInfoD )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellId = tsc_CellE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_TmpCellInfo := tcv_CellInfoE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellId = tsc_CellF]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_TmpCellInfo := tcv_CellInfoF )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellId = tsc_CellG]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_TmpCellInfo := tcv_CellInfoG )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellId = tsc_CellH]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_TmpCellInfo := tcv_CellInfoH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR
$Line [0] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* Fatal error */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$End_TestStepGroup
$TestStepGroup
$TestStepGroupId BasicM_MM_GMM_Steps
$Begin_TestStep
$TestStepId ts_GMM_Authentication ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$Objective /* Generate authentication paramters and run  the GMM Authentication procedure */
$DefaultsRef NAS_OtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_GMM_AuthenticationInit
$Cref 
$VerdictId 
$Comment /* Compute all relevant authentication parameters. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc ! RRC_DataReq
$Cref ca_PS_DataReq(tsc_CellDedicated , tsc_RB3, 
cs_AuthAndCiphReq ( 
c_GMM_AuthRAND(tcv_AuthRAND), 
c_GMM_KeySeq_tv(tcv_PS_KeySeq), 
c_GMM_AuthAUTN(tcv_AuthAUTN) 
))
$VerdictId 
$Comment /* AUTHENTICATION AND CIPHERING REQUEST  
using relevant PS keys computed before. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Dc ? RRC_DataInd ( 
tcv_TmpAuthAndCiphRspPDU := RRC_DataInd.msg, 
tcv_AuthRsp := tcv_TmpAuthAndCiphRspPDU.authRsp.value, 
tcv_AuthRspExt := tcv_TmpAuthAndCiphRspPDU.authRspExt 
)
$Cref car_PS_UplinkDirectTransfer ( tsc_CellDedicated , tsc_RB3,  
cr_AuthAndCiphRsp (c_AuthRspAny_tv,c_AuthCiphRspExtAny) 
)
$VerdictId 
$Comment /* AUTHENTICATION AND CIPHERING RESPONSE 
including both Authentication Response paramters (RES and RES ext) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_Res := o_AuthRspChk( 
tcv_AuthRsp,  
tcv_AuthRspExt,  
tcv_AuthK,  
tcv_AuthRAND, 
TRUE))
$Cref 
$VerdictId 
$Comment /* Verify that the received Authentication Response paramters match expected response. */
$End_BehaviourLine
$BehaviourLine
$LabelId TSF1
$Line [4] [tcv_Res = FALSE]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId TSP1
$Line [4] [tcv_Res = TRUE]
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Dc ? RRC_DataInd ( 
tcv_TmpAuthAndCiphRspPDU := RRC_DataInd.msg, 
tcv_AuthRsp := tcv_TmpAuthAndCiphRspPDU.authRsp.value 
)
$Cref car_PS_UplinkDirectTransfer ( tsc_CellDedicated , tsc_RB3,  
cr_AuthAndCiphRsp (c_AuthRspAny_tv, -) 
)
$VerdictId 
$Comment /* AUTHENTICATION AND CIPHERING RESPONSE 
including only one Authentication Response paramters (RES) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_Res := o_AuthRspChk( 
tcv_AuthRsp,  
-,  
tcv_AuthK,  
tcv_AuthRAND, 
FALSE))
$Cref 
$VerdictId 
$Comment /* Verify that the received Authentication Response paramters match expected response. */
$End_BehaviourLine
$BehaviourLine
$LabelId TSF2
$Line [4] [tcv_Res = FALSE]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId TSP2
$Line [4] [tcv_Res = TRUE]
$Cref 
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Dc ? RRC_DataInd
$Cref car_PS_UplinkDirectTransfer ( tsc_CellDedicated , tsc_RB3, cr_AuthAndCiphFailureAny )
$VerdictId I
$Comment /* AUTHENTICATION AND CIPHERING Failure, then stop execution by assigning INCONCLUSIVE verdict as this might be a USIM issue.
 */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* See 3GPP 24.008 / 4.7, 3GPP 33.102 / 6.3 and  3GPP 34.108 / 8 (for the computation of authentication paramters   
for Test USIM) 
See also the detailed description in test Step ts_MM_Authentication, on which this test Step is based. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_GMM_AuthenticationInit
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$Objective /* Computation of variables related to the Authentication and Key Agreement   
procedure for PS domain */
$DefaultsRef NAS_OtherwiseFail
$Comment /* Based on TS 34.108 cl. 8.1.2 and TS 33.102 cl.s 6.3 and 6.8.1.2 */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +lt_IncrementCiphKeySeqNum
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +lt_AuthCalcAUTN
$Cref 
$VerdictId 
$Comment /* 1. Calculation of AUTN needed for Authentication Request */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_AuthCalcUMTS_Others
$Cref 
$VerdictId 
$Comment /* 2. Calculation of other authentication information needed (IK, CK, XRES) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +lt_AuthCalcKcGSM
$Cref 
$VerdictId 
$Comment /* 3. Calculation of Kc GSM, using IK and CK */
$End_BehaviourLine
$Header lt_IncrementCiphKeySeqNum
$BehaviourLine
$LabelId 
$Line [0] [tcv_PS_KeySeq = '000'B]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_PS_KeySeq := '001'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_PS_KeySeq = '001'B]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_PS_KeySeq := '010'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_PS_KeySeq = '010'B]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_PS_KeySeq := '011'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_PS_KeySeq = '011'B]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_PS_KeySeq := '100'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_PS_KeySeq = '100'B]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_PS_KeySeq := '101'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_PS_KeySeq = '101'B]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_PS_KeySeq := '110'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_PS_KeySeq := '000'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_AuthCalcAUTN
$BehaviourLine
$LabelId 
$Line [0] (tcv_AuthXDOUT :=  
o_BitstringXOR( 
tcv_AuthRAND,  
tcv_AuthK, 
128))
$Cref 
$VerdictId 
$Comment /* XDOUT := RAND XOR K */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_AuthCDOUT :=  
o_BitstringConcat( 
tsv_AuthSQN, 
tcv_AuthAMF,  
48,  
16))
$Cref 
$VerdictId 
$Comment /* CDOUT := SQN || AMF */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_AuthXDOUT_Half :=  
o_BitstringXtract( 
tcv_AuthXDOUT,  
128,  
64,  
0))
$Cref 
$VerdictId 
$Comment /* XDOUT_half := 64 bits of XDOUT starting from offset 0 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_AuthAK :=  
o_BitstringXtract( 
tcv_AuthXDOUT,  
128,  
48,  
24))
$Cref 
$VerdictId 
$Comment /* AK := 48 bits of XDOUT starting from offset 24 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] (tcv_AuthAUTN_1 :=  
o_BitstringXOR( 
tsv_AuthSQN,  
tcv_AuthAK,  
48))
$Cref 
$VerdictId 
$Comment /* AUTN1 := SQN XOR AK */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] (tcv_AuthMAC :=  
o_BitstringXOR( 
tcv_AuthXDOUT_Half,  
tcv_AuthCDOUT,  
64))
$Cref 
$VerdictId 
$Comment /* MAC := XDOUT_half XOR CDOUT */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] (tcv_AuthAUTN_2 :=  
o_BitstringConcat( 
tcv_AuthAMF,  
tcv_AuthMAC,  
16,  
64))
$Cref 
$VerdictId 
$Comment /* AUTN2 := AMF || MAC */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] (tcv_AuthAUTN :=  
o_BitstringConcat( 
tcv_AuthAUTN_1,  
tcv_AuthAUTN_2,  
48,  
80))
$Cref 
$VerdictId 
$Comment /* AUTN  := AUTN1 || AUTN2 */
$End_BehaviourLine
$Header lt_AuthCalcUMTS_Others
$BehaviourLine
$LabelId 
$Line [0] (tcv_PS_AuthIK :=  
o_BitstringXtract( 
tcv_AuthXDOUT,  
128,  
128,  
16))
$Cref 
$VerdictId 
$Comment /* IK := 128 bits of XDOUT starting from offset 16 (wrapping) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_PS_AuthCK :=  
o_BitstringXtract( 
tcv_AuthXDOUT,  
128,  
128,  
8))
$Cref 
$VerdictId 
$Comment /* CK := 128 bits of XDOUT starting from offset 8 (wrapping) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_AuthXRES :=  
o_BitstringXtract( 
tcv_AuthXDOUT,  
128,  
(tcv_AuthN + 1),  
0))
$Cref 
$VerdictId 
$Comment /* XRES := (n+1) bits of XDOUT starting from offset 0 */
$End_BehaviourLine
$Header lt_AuthCalcKcGSM
$BehaviourLine
$LabelId 
$Line [0] (tcv_AuthCK_1 :=  
o_BitstringXtract( 
tcv_PS_AuthCK,  
128,  
64,  
0))
$Cref 
$VerdictId 
$Comment /* CK1 := 64 bits of CK starting from offset 0 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_AuthCK_2 :=  
o_BitstringXtract( 
tcv_PS_AuthCK,  
128,  
64,  
64))
$Cref 
$VerdictId 
$Comment /* CK2 := 64 bits of CK starting from offset 64 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_AuthIK_1 :=  
o_BitstringXtract( 
tcv_PS_AuthIK,  
128,  
64,  
0))
$Cref 
$VerdictId 
$Comment /* IK1 := 64 bits of IK starting from offset 0 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_AuthIK_2 :=  
o_BitstringXtract( 
tcv_PS_AuthIK,  
128,  
64,  
64))
$Cref 
$VerdictId 
$Comment /* IK2 := 64 bits of IK starting from offset 64 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] (tcv_AuthCK_XOR :=  
o_BitstringXOR( 
tcv_AuthCK_1,  
tcv_AuthCK_2,  
64))
$Cref 
$VerdictId 
$Comment /* CK_XOR := CK1 XOR CK2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] (tcv_AuthIK_XOR :=  
o_BitstringXOR( 
tcv_AuthIK_1,  
tcv_AuthIK_2,  
64))
$Cref 
$VerdictId 
$Comment /* IK_XOR := IK1 XOR IK2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] (tcv_AuthKcGSM :=  
o_BitstringXOR( 
tcv_AuthCK_XOR,  
tcv_AuthIK_XOR,  
64))
$Cref 
$VerdictId 
$Comment /* KcGSM := CK_XOR XOR IK_XOR 
(= CK1 XOR CK2 XOR IK1 XOR IK2) */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* (see ts_MM_AuthenticationInit) */
$End_TestStep
$Begin_TestStep
$TestStepId ts_GMM_IdleUpdated ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$Objective /* Turn on UE and register for PS or combined PS/CS services. */
$DefaultsRef NAS_OtherwiseFail
$Comment /* Initial conditions:
- Cell referenced by p_CellId  is configured and sending SysInfos on BCCH
- UE is switched off with a valid Test USIM inserted

Input paramters:
- p_CellId referencing the Cell

Global paramters used:
- The SS will use global authentication paramters and keys which are generated in test Step ts_GMM_Authentication: 
   tcv_AuthRAND, tcv_KeySeq, tcv_AuthAUTN, tcv_AuthCK, tcv_AuthIK, tcv_AuthKcGSM.
- The SS will assign to the UE default values for P-TMSI,  P-TMSI signature and 
   (in case of combined PS/IMSI attach) TMSI. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_SetTmpCellInfo (p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ (tcv_UE_OpMode = opModeA) AND (tcv_TmpCellInfo.nmo = tsc_NMO_I)]
$Cref 
$VerdictId 
$Comment /* If UE is in operation mode A and network mode of operation is I,
then run combined PS/CS  procedures. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_IdleUpdated_NMO_I
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_Use_E_PLMN := FALSE)
$Cref 
$VerdictId 
$Comment /* Invalidate the tcv_E_PLMN */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [(tcv_UE_OpMode = opModeA) AND 
(tcv_TmpCellInfo.nmo = tsc_NMO_II)]
$Cref 
$VerdictId 
$Comment /* If UE is in operation mode A and network mode of operation is II,
then run first CS and PS procedures independently */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_IdleUpdated_NMO_II
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_Use_E_PLMN := FALSE)
$Cref 
$VerdictId 
$Comment /* Invalidate the tcv_E_PLMN */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_UE_OpMode = opModeC]
$Cref 
$VerdictId 
$Comment /* If UE is in operation mode C,
then run GMM procedure (for PS only attach). */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_GMMOnly_IdleUpdated
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_Use_E_PLMN := FALSE)
$Cref 
$VerdictId 
$Comment /* Invalidate the tcv_E_PLMN */
$End_BehaviourLine
$BehaviourLine
$LabelId ERR
$Line [1] [TRUE]
$Cref 
$VerdictId I
$Comment /* Programming error */
$End_BehaviourLine
$Header lt_IdleUpdated_NMO_I
$BehaviourLine
$LabelId 
$Line [0] + ts_MMI_UE_SwitchOn
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_RRC_ConnEst(
p_CellId,
est_Reg,
registration)
$Cref 
$VerdictId 
$Comment /* Establish RRC connection */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [pc_AutomaticAttachSwitchON = TRUE]
$Cref 
$VerdictId 
$Comment /* Perform combined CS/PS procedure */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +lt_AttachRequest
$Cref 
$VerdictId 
$Comment /* ATTACH REQUEST */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_GMM_Authentication ( p_CellId )
$Cref 
$VerdictId 
$Comment /* AUTHENTICATION AND CIPHERING REQUEST
AUTHENTICATION AND CIPHERING RESPONSE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +lt_SecurityMode
$Cref 
$VerdictId 
$Comment /* SECURITY MODE COMMAND
SECURITY MODE COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +lt_AttachAccept
$Cref 
$VerdictId 
$Comment /* ATTACH ACCEPT
ATTACH COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +lt_RRC_ConnRel
$Cref 
$VerdictId 
$Comment /* RRC connection release */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [pc_AutomaticAttachSwitchON = FALSE]
$Cref 
$VerdictId 
$Comment /* First perform Location Update procedure, and then trigger UE via AT command to perform GPRS Attach */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] Dc?RRC_DataInd 
( tcv_Start := RRC_DataInd.start )
$Cref car_InitDirectTransfer ( 
tsc_CellDedicated, 
tsc_RB3,
cb_LocUpdReqAny(?))
$VerdictId 
$Comment /* Any Location Update request */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_SS_SecurityDownloadStart ( cs_domain, tcv_Start )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_MM_Authentication(p_CellId)
$Cref 
$VerdictId 
$Comment /* Authentication */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_RRC_Security
( p_CellId, 
tcv_AuthCK,
tcv_AuthIK,
tcv_AuthKcGSM,
TRUE, 
cs_domain)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + lt_LocUpdAcc
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +lt_RRC_ConnRel
$Cref 
$VerdictId 
$Comment /* Release RRC connection */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] START t_WaitS ( 1 )
$Cref 
$VerdictId 
$Comment /* Wait 1 s to allow UE to relax */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] ?TIMEOUT t_WaitS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] START t_WaitS (60)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] +ts_AT_TriggerGMM_Attach
$Cref 
$VerdictId 
$Comment /* trigger UE to initiate GMM Attach after allowing the UE to decode Sys Infos */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] +ts_RRC_ConnEst(
p_CellId,
est_Reg,
registration)
$Cref 
$VerdictId 
$Comment /* Establish RRC connection */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] Dc ? RRC_DataInd (
tcv_TmpAttachReqPDU := RRC_DataInd.msg,
tcv_TmpB3:= tcv_TmpAttachReqPDU.attachType.type,
tcv_Start := RRC_DataInd.start )CANCEL t_WaitS
$Cref car_PS_InitDirectTransfer (tsc_CellDedicated, tsc_RB3, 
cr_AttachReq (
c_AttachTypeAny, c_MobileIdAny_lv, c_RAI_Any_v, 
?))
$VerdictId 
$Comment /* ATTACH REQUEST
 - Extract Attach type requested */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] + ts_SS_SecurityDownloadStart ( ps_domain, tcv_Start )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] +ts_GMM_Authentication ( p_CellId )
$Cref 
$VerdictId 
$Comment /* AUTHENTICATION AND CIPHERING REQUEST
AUTHENTICATION AND CIPHERING RESPONSE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] +lt_SecurityMode
$Cref 
$VerdictId 
$Comment /* SECURITY MODE COMMAND
SECURITY MODE COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [18] +lt_AttachAccept
$Cref 
$VerdictId 
$Comment /* ATTACH ACCEPT
ATTACH COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [19] +lt_RRC_ConnRel
$Cref 
$VerdictId 
$Comment /* RRC connection release */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] ? TIMEOUT t_WaitS
$Cref 
$VerdictId F
$Comment /* IF UE doesent respond to Attach triggered Fail the UE. */
$End_BehaviourLine
$Header lt_IdleUpdated_NMO_II
$BehaviourLine
$LabelId 
$Line [0] + ts_MMI_UE_SwitchOn
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_RRC_ConnEst(
p_CellId,
est_Reg,
registration)
$Cref 
$VerdictId 
$Comment /* Establish RRC connection */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Dc?RRC_DataInd 
( tcv_Start := RRC_DataInd.start )
$Cref car_InitDirectTransfer ( 
tsc_CellDedicated, 
tsc_RB3,
cb_LocUpdReqAny(?))
$VerdictId 
$Comment /* Any Location Update request */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_GMM_AttachExpect := TRUE, tcv_GMM_AttachRec := FALSE )
$Cref 
$VerdictId 
$Comment /* Set Flags in order to enable default handler to store ATTACH REQUEST PDU in case it is sent during Location Update procedure */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_SS_SecurityDownloadStart ( cs_domain, tcv_Start )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_MM_Authentication(p_CellId)
$Cref 
$VerdictId 
$Comment /* Authentication */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_RRC_Security
( p_CellId, 
tcv_AuthCK,
tcv_AuthIK,
tcv_AuthKcGSM,
TRUE, 
cs_domain)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + lt_LocUpdAcc
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +lt_HandleAttachRequest
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_GMM_Authentication ( p_CellId )
$Cref 
$VerdictId 
$Comment /* AUTHENTICATION AND CIPHERING REQUEST
AUTHENTICATION AND CIPHERING RESPONSE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] +lt_SecurityMode
$Cref 
$VerdictId 
$Comment /* SECURITY MODE COMMAND
SECURITY MODE COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +lt_AttachAccept
$Cref 
$VerdictId 
$Comment /* ATTACH ACCEPT
ATTACH COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] +lt_RRC_ConnRel
$Cref 
$VerdictId 
$Comment /* RRC connection release */
$End_BehaviourLine
$Header lt_HandleAttachRequest
$BehaviourLine
$LabelId 
$Line [0] (tcv_GMM_AttachExpect := FALSE)
$Cref 
$VerdictId 
$Comment /* Disable NAS default handler for ATTACH REQUEST */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_GMM_AttachRec = TRUE]
$Cref 
$VerdictId 
$Comment /* ATTACH REQUEST was received and handled by NAS default handler */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [NOT pc_AutomaticAttachSwitchON]
$Cref 
$VerdictId 
$Comment /* ATTACH REQUEST was NOT yet received and the UE does not automatically attach at switch on */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_RRC_ConnRel
$Cref 
$VerdictId 
$Comment /* RRC connection release */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] START t_WaitS ( 1 )
$Cref 
$VerdictId 
$Comment /* Wait 1 s to allow UE to relax */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] ?TIMEOUT t_WaitS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] START t_WaitS ( 60 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_AT_TriggerGMM_Attach
$Cref 
$VerdictId 
$Comment /* Trigger UE to initiate GMM Attach after allowing the UE to decode Sys Infos */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_RRC_ConnEst(
p_CellId,
est_Reg,
registration)
$Cref 
$VerdictId 
$Comment /* Establish RRC connection */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] Dc ? RRC_DataInd (
tcv_TmpAttachReqPDU := RRC_DataInd.msg,
tcv_TmpB3:= tcv_TmpAttachReqPDU.attachType.type,
tcv_Start := RRC_DataInd.start )CANCEL t_WaitS
$Cref car_PS_InitDirectTransfer (tsc_CellDedicated, tsc_RB3, 
cr_AttachReq (
c_AttachTypeAny, c_MobileIdAny_lv, c_RAI_Any_v, 
?))
$VerdictId 
$Comment /* ATTACH REQUEST
 - Extract Attach type requested */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_SecurityDownloadStart ( ps_domain, tcv_Start )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] ? TIMEOUT t_WaitS
$Cref 
$VerdictId F
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [TRUE]
$Cref 
$VerdictId 
$Comment /* The UE did not send ATTACH REQUEST but it should since it shall automaticall switch attach at switch on */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] START t_WaitS ( 5 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] Dc ? RRC_DataInd (
tcv_TmpAttachReqPDU := RRC_DataInd.msg,
tcv_TmpB3:= tcv_TmpAttachReqPDU.attachType.type,
tcv_Start := RRC_DataInd.start )CANCEL t_WaitS
$Cref car_PS_InitDirectTransfer (tsc_CellDedicated, tsc_RB3, 
cr_AttachReq (
c_AttachTypeAny, c_MobileIdAny_lv, c_RAI_Any_v, 
?))
$VerdictId 
$Comment /* ATTACH REQUEST
 - Extract Attach type requested */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_SS_SecurityDownloadStart ( ps_domain, tcv_Start )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ? TIMEOUT t_WaitS
$Cref 
$VerdictId 
$Comment /* Now, if this event happens, then the UE didn't send an ATTACH REQUEST yet.
We give the UE a last chance: We release the connection and wait for the UE to autamtically start a connection and finally send an ATTACH REQUEST
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +lt_RRC_ConnRel
$Cref 
$VerdictId 
$Comment /* RRC connection release
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] START t_WaitS ( 5 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_RRC_ConnEst(
p_CellId,
est_Reg,
registration)
$Cref 
$VerdictId 
$Comment /* Establish RRC connection
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] Dc ? RRC_DataInd (
tcv_TmpAttachReqPDU := RRC_DataInd.msg,
tcv_TmpB3:= tcv_TmpAttachReqPDU.attachType.type,
tcv_Start := RRC_DataInd.start )CANCEL t_WaitS
$Cref car_PS_InitDirectTransfer (tsc_CellDedicated, tsc_RB3, 
cr_AttachReq (
c_AttachTypeAny, c_MobileIdAny_lv, c_RAI_Any_v, 
?))
$VerdictId 
$Comment /* ATTACH REQUEST
 - Extract Attach type requested
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SS_SecurityDownloadStart ( ps_domain, tcv_Start )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] ? TIMEOUT t_WaitS
$Cref 
$VerdictId F
$Comment /* 
Here we finally FAIL the UE!
[Note: Actually the timout will be handled by the default handler of ts_RRC_ConnEst] */
$End_BehaviourLine
$Header lt_GMMOnly_IdleUpdated
$BehaviourLine
$LabelId 
$Line [0] + ts_MMI_UE_SwitchOn
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +lt_GMMOnly_TriggerAttach
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_RRC_ConnEst(
p_CellId,
est_Reg,
registration)
$Cref 
$VerdictId 
$Comment /* Establish RRC connection */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +lt_AttachRequest
$Cref 
$VerdictId 
$Comment /* ATTACH REQUEST */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_GMM_Authentication ( p_CellId )
$Cref 
$VerdictId 
$Comment /* AUTHENTICATION AND CIPHERING REQUEST
AUTHENTICATION AND CIPHERING RESPONSE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +lt_SecurityMode
$Cref 
$VerdictId 
$Comment /* SECURITY MODE COMMAND
SECURITY MODE COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +lt_AttachAccept
$Cref 
$VerdictId 
$Comment /* ATTACH ACCEPT
ATTACH COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +lt_RRC_ConnRel
$Cref 
$VerdictId 
$Comment /* RRC connection release */
$End_BehaviourLine
$Header lt_GMMOnly_TriggerAttach
$BehaviourLine
$LabelId 
$Line [0] [NOT pc_AutomaticAttachSwitchON]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_NAS_Delay(tsc_TWaitSysInfo)
$Cref 
$VerdictId 
$Comment /* Allow UE to decode Sys Infos
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_AT_TriggerGMM_Attach
$Cref 
$VerdictId 
$Comment /* Trigger UE to initiate GMM Attach after allowing the UE to decode Sys Infos */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$Comment /* Do nothing: UE will automatically attempt PS attach */
$End_BehaviourLine
$Header lt_AttachRequest
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd (
tcv_TmpAttachReqPDU := RRC_DataInd.msg,
tcv_TmpB3:= tcv_TmpAttachReqPDU.attachType.type,
tcv_Start := RRC_DataInd.start )
$Cref car_PS_InitDirectTransfer (tsc_CellDedicated, tsc_RB3, 
cr_AttachReq (
c_AttachTypeAny, c_MobileIdAny_lv, c_RAI_Any_v, 
?))
$VerdictId 
$Comment /* ATTACH REQUEST
 - Extract Attach type requested */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SS_SecurityDownloadStart ( ps_domain, tcv_Start )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_LocUpdAcc
$BehaviourLine
$LabelId 
$Line [0] [tcv_Use_E_PLMN = FALSE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc!RRC_DataReq
$Cref ca_DataReq( 
tsc_CellDedicated, 
tsc_RB3,
c_LocUpdAcpTMSI(
tcv_TmpCellInfo.mcc,
tcv_TmpCellInfo.mnc,
tcv_TmpCellInfo.lac))
$VerdictId 
$Comment /* LOCATION UPDATING ACCEPT */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Dc?RRC_DataInd
$Cref car_UplinkDirectTransfer ( 
tsc_CellDedicated,  
tsc_RB3,
c_TMSI_ReallocCmpl)
$VerdictId 
$Comment /* TMSI REALLOCATION COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$Comment /* [tcv_Use_E_PLMN = TRUE] */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc!RRC_DataReq
$Cref ca_DataReq( 
tsc_CellDedicated, 
tsc_RB3,
c_LocUpdAcpTMSI_E_PLMN (
tcv_TmpCellInfo.mcc,
tcv_TmpCellInfo.mnc,
tcv_TmpCellInfo.lac,
tcv_E_PLMN  ))
$VerdictId 
$Comment /* LOCATION UPDATING ACCEPT
including 'equivalent PLMN list' */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Dc?RRC_DataInd
$Cref car_UplinkDirectTransfer ( 
tsc_CellDedicated,  
tsc_RB3,
c_TMSI_ReallocCmpl)
$VerdictId 
$Comment /* TMSI REALLOCATION COMPLETE */
$End_BehaviourLine
$Header lt_SecurityMode
$BehaviourLine
$LabelId 
$Line [0] + ts_RRC_Security (
p_CellId, 
tcv_PS_AuthCK,
tcv_PS_AuthIK,
tcv_AuthKcGSM,
TRUE, ps_domain)
$Cref 
$VerdictId 
$Comment /* SECURITY MODE COMMAND
SECURITY MODE COMPLETE */
$End_BehaviourLine
$Header lt_AttachAccept
$BehaviourLine
$LabelId 
$Line [0] [ (tcv_UE_OpMode = opModeA ) AND (tcv_TmpCellInfo.nmo = tsc_NMO_I) ]
$Cref 
$VerdictId 
$Comment /* if UE is mode A and NMO II */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_AssignedTMSI :=px_TMSI_Def,
tcv_AssignedPTMSI :=px_PTMSI_Def,
tcv_Assigned_PTMSI_Sig := px_PTMSI_SigDef)
$Cref 
$VerdictId 
$Comment /* Use default values */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Use_E_PLMN = FALSE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] Dc ! RRC_DataReq
$Cref ca_PS_DataReq(tsc_CellDedicated,  tsc_RB3,
cs_AttachAcc(
c_GMM_AttachResult('011'B),
c_RAI_v(
   tcv_TmpCellInfo.mcc, 
   tcv_TmpCellInfo.mnc,
   tcv_TmpCellInfo.lac,
   tcv_TmpCellInfo.rac),
c_PTMSI_Signature (tcv_Assigned_PTMSI_Sig),
c_MobileIdPTMSI (tcv_AssignedPTMSI),
c_GMM_MobileIdTMSI (tcv_AssignedTMSI)
))
$VerdictId 
$Comment /* ATTACH ACCEPT for combined CS/PS

- Attach result 'GPRS/IMSI attached'
- RAI default
- P-TMSI signature
- MobileId P-TMSI
- defaut TMSI */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] Dc ? RRC_DataInd
$Cref car_PS_UplinkDirectTransfer ( tsc_CellDedicated, tsc_RB3, 
cr_AttachComplete)
$VerdictId 
$Comment /* ATTACH COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [TRUE]
$Cref 
$VerdictId 
$Comment /* [tcv_Use_E_PLMN = TRUE] */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] Dc ! RRC_DataReq
$Cref ca_PS_DataReq(tsc_CellDedicated,  tsc_RB3,
cs_AttachAccE_PLMN(
c_GMM_AttachResult('011'B),
c_RAI_v(
   tcv_TmpCellInfo.mcc, 
   tcv_TmpCellInfo.mnc,
   tcv_TmpCellInfo.lac,
   tcv_TmpCellInfo.rac),
c_PTMSI_Signature (tcv_Assigned_PTMSI_Sig),
c_MobileIdPTMSI (tcv_AssignedPTMSI),
c_GMM_MobileIdTMSI (tcv_AssignedTMSI),
tcv_E_PLMN
))
$VerdictId 
$Comment /* ATTACH ACCEPT for combined CS/PS

- Attach result 'GPRS/IMSI attached'
- RAI default
- P-TMSI signature
- MobileId P-TMSI
- defaut TMSI
- equivalent PLMN list */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] Dc ? RRC_DataInd
$Cref car_PS_UplinkDirectTransfer ( tsc_CellDedicated, tsc_RB3, 
cr_AttachComplete)
$VerdictId 
$Comment /* ATTACH COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE ]
$Cref 
$VerdictId 
$Comment /* If mode is C or if NMO is II */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_AssignedPTMSI := px_PTMSI_Def,
tcv_Assigned_PTMSI_Sig := px_PTMSI_SigDef )
$Cref 
$VerdictId 
$Comment /* Use default values */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Use_E_PLMN = FALSE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] Dc ! RRC_DataReq
$Cref ca_PS_DataReq(tsc_CellDedicated,  tsc_RB3,
cs_AttachAcc(
c_GMM_AttachResult('001'B),
c_RAI_v(
   tcv_TmpCellInfo.mcc, 
   tcv_TmpCellInfo.mnc,
   tcv_TmpCellInfo.lac,
   tcv_TmpCellInfo.rac),
c_PTMSI_Signature (tcv_Assigned_PTMSI_Sig),
c_MobileIdPTMSI (tcv_AssignedPTMSI),
-
))
$VerdictId 
$Comment /* ATTACH ACCEPT for PS only

- Attach result 'GPRS attached'
- RAI default (RAI-1)
- P-TMSI-1 signature
- MobileId P-TMSI-1
- omit TMSI */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] Dc ? RRC_DataInd
$Cref car_PS_UplinkDirectTransfer ( tsc_CellDedicated, tsc_RB3, 
cr_AttachComplete)
$VerdictId 
$Comment /* ATTACH COMPLETE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [TRUE]
$Cref 
$VerdictId 
$Comment /* [tcv_Use_E_PLMN = TRUE] */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] Dc ! RRC_DataReq
$Cref ca_PS_DataReq(tsc_CellDedicated,  tsc_RB3,
cs_AttachAccE_PLMN(
c_GMM_AttachResult('001'B),
c_RAI_v(
   tcv_TmpCellInfo.mcc, 
   tcv_TmpCellInfo.mnc,
   tcv_TmpCellInfo.lac,
   tcv_TmpCellInfo.rac),
c_PTMSI_Signature (tcv_Assigned_PTMSI_Sig),
c_MobileIdPTMSI (tcv_AssignedPTMSI),
-,
tcv_E_PLMN
))
$VerdictId 
$Comment /* ATTACH ACCEPT for PS only

- Attach result 'GPRS attached'
- RAI default (RAI-1)
- P-TMSI-1 signature
- MobileId P-TMSI-1
- omit TMSI
- equivalent PLMN list */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] Dc ? RRC_DataInd
$Cref car_PS_UplinkDirectTransfer ( tsc_CellDedicated, tsc_RB3, 
cr_AttachComplete)
$VerdictId 
$Comment /* ATTACH COMPLETE */
$End_BehaviourLine
$Header lt_RRC_ConnRel
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH) OR  
 ( tcv_TmpCellInfo.cellConfig  = cell_FACH_2SCCPCH_StandAlonePCH ) OR  
 ( tcv_TmpCellInfo.cellConfig  = cell_FACH_2_PRACH) OR  
 ( tcv_TmpCellInfo.cellConfig  =   cell_FACH_2_SCCPCH  )OR   
 ( tcv_TmpCellInfo.cellConfig  =   cell_FACH_3_SCCPCH_4_FACH_Cnfg1  ) OR   
 ( tcv_TmpCellInfo.cellConfig  =   cell_FACH_3_SCCPCH_4_FACH_Cnfg2 )OR   
 ( tcv_TmpCellInfo.cellConfig  =   cell_FACH_3_SCCPCH_3_FACH_CTCH  )OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_3_FACH_2a_CTCH) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_2a)OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2) ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_RRC_ConnRel ( p_CellId, cell_Fach_Dcch )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_TmpCellInfo.cellConfig <> cell_FACH ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_RRC_ConnRel ( p_CellId, cell_Dch )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* See 3GPP 24.008 / 4.7 and also 3GPP 34.108 / 7.2.2 (Registration on PS)
See also the detailed description in test Step ts_MM_IdleUpdated, on which this test Step is based. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_IdleUpdated (p_CellId: INTEGER)
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$Objective /* To bring the UE into MM and/or GMM state Idle Updated */
$DefaultsRef NAS_OtherwiseFail
$Comment /* Initial conditions: 
  - The UE is initially switched off  
  - The cell referred has been properly configured. 
Note-1: The cell settings (like PLMN, LAC and RAC) used during the registration procedure are extracted from cell info record in tcv_CellInfoX  
Note-2: If 'equivalent PLMN list' is to be used, please set global variable  tcv_Use_E_PLMN to TRUE and accordingly initialise tcv_E_PLMN */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [pc_CS AND pc_PS]
$Cref 
$VerdictId 
$Comment /* both CS and PS supported and for testing */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_GMM_IdleUpdated ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [pc_CS]
$Cref 
$VerdictId 
$Comment /* CS supported and for testing */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_MM_IdleUpdated (p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [pc_PS]
$Cref 
$VerdictId 
$Comment /* PS supported and for testing */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_GMM_IdleUpdated ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [0] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* Parameter description: 
===================== 
 p_CellIId    Cell Identification                              INTEGER */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MM_Authentication ( p_CellId: INTEGER)
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$Objective /* Normal authentication */
$DefaultsRef NAS_OtherwiseFail
$Comment /* To be used after the synchronization of the authentication in both SS and UE has been achieved. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_MM_AuthenticationInit
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc!RRC_DataReq
$Cref ca_DataReq ( 
tsc_CellDedicated,  
tsc_RB3,  
c_AuthReq ( 
tcv_CS_KeySeq,  
tcv_AuthRAND, c_AUTN( 
tcv_AuthAUTN)))
$VerdictId 
$Comment /* Authentication Request */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Dc?RRC_DataInd 
( tcv_AuthRspPDU := RRC_DataInd.msg,  
tcv_AuthRsp := tcv_AuthRspPDU.authRsp, 
tcv_AuthRspExt := tcv_AuthRspPDU.authRspExt )
$Cref car_UplinkDirectTransfer (  
tsc_CellDedicated, tsc_RB3, 
c_AuthRspAnyExt )
$VerdictId 
$Comment /* Authentication Response with extension */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_Res := o_AuthRspChk ( 
tcv_AuthRsp,  
tcv_AuthRspExt,  
tcv_AuthK,  
tcv_AuthRAND, 
TRUE ) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSF1
$Line [4] [tcv_Res = FALSE]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] [tcv_Res = TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Dc?RRC_DataInd ( 
tcv_AuthRspPDU := RRC_DataInd.msg, 
tcv_AuthRsp := tcv_AuthRspPDU.authRsp )
$Cref car_UplinkDirectTransfer (  
tsc_CellDedicated, tsc_RB3, 
c_AuthRspAnyNoExt )
$VerdictId 
$Comment /* Authentication Response without extension */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_Res := o_AuthRspChk ( 
tcv_AuthRsp, tcv_AuthRspExt,  
tcv_AuthK,  
tcv_AuthRAND,  
FALSE ) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSF2
$Line [4] [tcv_Res = FALSE]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] [tcv_Res = TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSF3
$Line [2] Dc?RRC_DataInd
$Cref car_UplinkDirectTransfer (  
tsc_CellDedicated,  tsc_RB3, 
c_AuthFailAny )
$VerdictId (F)
$Comment /* 2. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* Normal authentication to be used after the synchronization between SS and UE has been performed successfully. 
1. Authentication request is sent by the network.  Key Sequence and RAND  as provided by the corresponding variables tcv_KeySeq and tcv_AuthRAND. 
2. If the UE generates a response, this response may consist of 2 parts which have to be extracted from the received message. 
3. The response is checked against an expected response calculated using a test suite operation. 
4. If the comparison of expected and calculated response is not ok, then authentication fails. 
5. Otherwise authentication is granted. 
6. If the UE sends an Authentication Failure the authentication fails. 
Steps: 
1. Initialization of the authentication variables (see 34.108 cl. 8.1.2) 
2. Authentication Failure: should not happen because the synchronization has  been done already */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MM_AuthenticationInit
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$Objective /* Initialization of variables related to  authentication. */
$DefaultsRef NAS_OtherwiseFail
$Comment /* Based on TS 34.108 cl. 8.1.2 and TS 33.102 cl.s 6.3 and 6.8.1.2 */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +lt_IncrementCiphKeySeqNum
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +lt_AuthCalcAUTN
$Cref 
$VerdictId 
$Comment /* 1. Calculation of AUTN needed for Authentication Request */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_AuthCalcUMTS_Others
$Cref 
$VerdictId 
$Comment /* 2. Calculation of other authentication information needed (IK, CK, XRES) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +lt_AuthCalcKcGSM
$Cref 
$VerdictId 
$Comment /* 3. Calculation of Kc GSM, using IK and CK */
$End_BehaviourLine
$Header lt_IncrementCiphKeySeqNum
$BehaviourLine
$LabelId 
$Line [0] [tcv_CS_KeySeq = '000'B]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_CS_KeySeq := '001'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_CS_KeySeq = '001'B]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_CS_KeySeq := '010'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_CS_KeySeq = '010'B]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_CS_KeySeq := '011'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_CS_KeySeq = '011'B]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_CS_KeySeq := '100'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_CS_KeySeq = '100'B]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_CS_KeySeq := '101'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_CS_KeySeq = '101'B]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_CS_KeySeq := '110'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_CS_KeySeq := '000'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_AuthCalcAUTN
$BehaviourLine
$LabelId 
$Line [0] (tcv_AuthXDOUT :=  
o_BitstringXOR( 
tcv_AuthRAND,  
tcv_AuthK, 
128))
$Cref 
$VerdictId 
$Comment /* XDOUT := RAND XOR K */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_AuthCDOUT :=  
o_BitstringConcat( 
tsv_AuthSQN, 
tcv_AuthAMF,  
48,  
16))
$Cref 
$VerdictId 
$Comment /* CDOUT := SQN || AMF */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_AuthXDOUT_Half :=  
o_BitstringXtract( 
tcv_AuthXDOUT,  
128,  
64,  
0))
$Cref 
$VerdictId 
$Comment /* XDOUT_half := 64 bits of XDOUT starting from offset 0 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_AuthAK :=  
o_BitstringXtract( 
tcv_AuthXDOUT,  
128,  
48,  
24))
$Cref 
$VerdictId 
$Comment /* AK := 48 bits of XDOUT starting from offset 24 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] (tcv_AuthAUTN_1 :=  
o_BitstringXOR( 
tsv_AuthSQN,  
tcv_AuthAK,  
48))
$Cref 
$VerdictId 
$Comment /* AUTN1 := SQN XOR AK */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] (tcv_AuthMAC :=  
o_BitstringXOR( 
tcv_AuthXDOUT_Half,  
tcv_AuthCDOUT,  
64))
$Cref 
$VerdictId 
$Comment /* MAC := XDOUT_half XOR CDOUT */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] (tcv_AuthAUTN_2 :=  
o_BitstringConcat( 
tcv_AuthAMF,  
tcv_AuthMAC,  
16,  
64))
$Cref 
$VerdictId 
$Comment /* AUTN2 := AMF || MAC */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] (tcv_AuthAUTN :=  
o_BitstringConcat( 
tcv_AuthAUTN_1,  
tcv_AuthAUTN_2,  
48,  
80))
$Cref 
$VerdictId 
$Comment /* AUTN  := AUTN1 || AUTN2 */
$End_BehaviourLine
$Header lt_AuthCalcUMTS_Others
$BehaviourLine
$LabelId 
$Line [0] (tcv_AuthIK :=  
o_BitstringXtract( 
tcv_AuthXDOUT,  
128,  
128,  
16))
$Cref 
$VerdictId 
$Comment /* IK := 128 bits of XDOUT starting from offset 16 (wrapping) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_AuthCK :=  
o_BitstringXtract( 
tcv_AuthXDOUT,  
128,  
128,  
8))
$Cref 
$VerdictId 
$Comment /* CK := 128 bits of XDOUT starting from offset 8 (wrapping) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_AuthXRES :=  
o_BitstringXtract( 
tcv_AuthXDOUT,  
128,  
(tcv_AuthN + 1),  
0))
$Cref 
$VerdictId 
$Comment /* XRES := (n+1) bits of XDOUT starting from offset 0 */
$End_BehaviourLine
$Header lt_AuthCalcKcGSM
$BehaviourLine
$LabelId 
$Line [0] (tcv_AuthCK_1 :=  
o_BitstringXtract( 
tcv_AuthCK,  
128,  
64,  
0))
$Cref 
$VerdictId 
$Comment /* CK1 := 64 bits of CK starting from offset 0 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_AuthCK_2 :=  
o_BitstringXtract( 
tcv_AuthCK,  
128,  
64,  
64))
$Cref 
$VerdictId 
$Comment /* CK2 := 64 bits of CK starting from offset 64 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_AuthIK_1 :=  
o_BitstringXtract( 
tcv_AuthIK,  
128,  
64,  
0))
$Cref 
$VerdictId 
$Comment /* IK1 := 64 bits of IK starting from offset 0 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_AuthIK_2 :=  
o_BitstringXtract( 
tcv_AuthIK,  
128,  
64,  
64))
$Cref 
$VerdictId 
$Comment /* IK2 := 64 bits of IK starting from offset 64 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] (tcv_AuthCK_XOR :=  
o_BitstringXOR( 
tcv_AuthCK_1,  
tcv_AuthCK_2,  
64))
$Cref 
$VerdictId 
$Comment /* CK_XOR := CK1 XOR CK2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] (tcv_AuthIK_XOR :=  
o_BitstringXOR( 
tcv_AuthIK_1,  
tcv_AuthIK_2,  
64))
$Cref 
$VerdictId 
$Comment /* IK_XOR := IK1 XOR IK2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] (tcv_AuthKcGSM :=  
o_BitstringXOR( 
tcv_AuthCK_XOR,  
tcv_AuthIK_XOR,  
64))
$Cref 
$VerdictId 
$Comment /* KcGSM := CK_XOR XOR IK_XOR 
(= CK1 XOR CK2 XOR IK1 XOR IK2) */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* Initialization of the variables needed for authentication. The calculation is done according to the prescription of TS 34.108 cl. 8.1.2. and TS 33.102 cl. 6.8.1.2 
The AUTN calculated is used as parameter of the Authentication Request. 
CK, IK and Kc GSM are used by RRC. 
XRES is used to check the RES contained in Authentication Response. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MM_IdleUpdated (p_CellId: INTEGER)
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$Objective /* To bring the UE into MM state Idle Updated -  CS mode, general case */
$DefaultsRef NAS_OtherwiseFail
$Comment /* Before IdleUpdated can be used a Cell is to be created and System Information must be sent. This test Step covers the general case: the UE has a valid TMSI. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_SetTmpCellInfo (p_CellId)
$Cref 
$VerdictId 
$Comment /* Fetch SS_CellInfo  table correponding to the cell */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_MM_PwrOrUSIM_On(tsc_USIM_NeedRmv)
$Cref 
$VerdictId 
$Comment /* 2. Activate the UE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] START t_Dly (150000)
$Cref 
$VerdictId 
$Comment /* 3. Supervise the reception of the expected Location Updating Request
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +  ts_RRC_ConnEst ( 
p_CellId,  
est_Reg,  
OMIT)
$Cref 
$VerdictId 
$Comment /* Connection Establishment MO */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] Dc?RRC_DataInd  
( tcv_Start := RRC_DataInd.start ) 
CANCEL t_Dly
$Cref car_InitDirectTransfer (  
tsc_CellDedicated,  
tsc_RB3, 
cb_LocUpdReqAny(?))
$VerdictId 
$Comment /* 4. Any Location Update request */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_SS_SecurityDownloadStart ( cs_domain, tcv_Start )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_MM_Authentication(p_CellId)
$Cref 
$VerdictId 
$Comment /* 4.1 Authentication */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_RRC_Security 
( p_CellId,  
tcv_AuthCK, 
tcv_AuthIK, 
tcv_AuthKcGSM, 
TRUE,  
cs_domain)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] [tcv_Use_E_PLMN = FALSE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] Dc!RRC_DataReq
$Cref ca_DataReq(  
tsc_CellDedicated,  
tsc_RB3, 
c_LocUpdAcpTMSI( 
tcv_TmpCellInfo.mcc, 
tcv_TmpCellInfo.mnc, 
tcv_TmpCellInfo.lac))
$VerdictId 
$Comment /* 4.2 Location Updating Accept 
without 'equivalent PLMN list' */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] Dc?RRC_DataInd
$Cref car_UplinkDirectTransfer (  
tsc_CellDedicated,   
tsc_RB3, 
c_TMSI_ReallocCmpl)
$VerdictId 
$Comment /* 4.3 TMSI reallocation complete */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + lt_RRC_ConnRel
$Cref 
$VerdictId 
$Comment /* Connection Release */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] [TRUE]
$Cref 
$VerdictId 
$Comment /* [tcv_Use_E_PLMN = TRUE] */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] Dc!RRC_DataReq
$Cref ca_DataReq(  
tsc_CellDedicated,  
tsc_RB3, 
c_LocUpdAcpTMSI_E_PLMN ( 
tcv_TmpCellInfo.mcc, 
tcv_TmpCellInfo.mnc, 
tcv_TmpCellInfo.lac, 
tcv_E_PLMN  ))
$VerdictId 
$Comment /* 4.2 Location Updating Accept including 'equivalent PLMN list' */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] Dc?RRC_DataInd
$Cref car_UplinkDirectTransfer (  
tsc_CellDedicated,   
tsc_RB3, 
c_TMSI_ReallocCmpl)
$VerdictId 
$Comment /* 4.3 TMSI reallocation complete */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + lt_RRC_ConnRel
$Cref 
$VerdictId 
$Comment /* Connection Release */
$End_BehaviourLine
$Header lt_RRC_ConnRel
$BehaviourLine
$LabelId 
$Line [0] (tcv_Use_E_PLMN := FALSE)
$Cref 
$VerdictId 
$Comment /* De-initialise the variable tcv_Use_E_PLMN */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH) OR   
 ( tcv_TmpCellInfo.cellConfig  = cell_FACH_2SCCPCH_StandAlonePCH ) OR   
 ( tcv_TmpCellInfo.cellConfig  = cell_FACH_2_PRACH) OR   
 ( tcv_TmpCellInfo.cellConfig  =   cell_FACH_2_SCCPCH  )OR    
 ( tcv_TmpCellInfo.cellConfig  =   cell_FACH_3_SCCPCH_4_FACH_Cnfg1  ) OR    
 ( tcv_TmpCellInfo.cellConfig  =   cell_FACH_3_SCCPCH_4_FACH_Cnfg2 )OR    
 ( tcv_TmpCellInfo.cellConfig  =   cell_FACH_3_SCCPCH_3_FACH_CTCH  )]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_RRC_ConnRel ( p_CellId, cell_Fach_Dcch )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TmpCellInfo.cellConfig <> cell_FACH ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_RRC_ConnRel ( p_CellId, cell_Dch )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* Parameter description: 
===================== 
 
 p_CellIId    Cell Identification                              INTEGER 
 
Algorithm/Steps: 
================ 
1. UE is deactivated 
2. UE is activated 
3. Location registration is expected to happen within time TwaitLocUpdReq 
4. The location registration is accepted, and a new TMSI - the default TMSI used for testing - is passed to the UE. The UE stores the newly provided TMSI. 
4.1 Authentication with default values 
4.2 Location Updating Accept with default TMSI and MNC, MCC, LAI  
4.3 Completion of the TMSI reallocation procedure 
5. If NO Location Updating Request is received, ie the timer supervising the receipt of the Location registration runs out, this is assumed to be due to the fact that the PLMN is in the forbidden list. In this case local test Step lt_RmvFbdnList is executed to clear this situation. 
6. This should not happen, so the verdict is INCONCLUSIVE. Resources are to be released properly and automatic PLMN selection is to be restablished. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MM_PwrOrUSIM_Off (p_USIM_Rmvd : BOOLEAN)
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$Objective /* Deactivation of the UE */
$DefaultsRef NAS_OtherwiseFail
$Comment /* Depending upon UE's properties (USIM removal, switching off or powering off) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [( p_USIM_Rmvd) AND 
(pc_USIM_Rmv)]
$Cref 
$VerdictId 
$Comment /* SIM needs to be removed.
  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_MMI_USIM_Remove
$Cref 
$VerdictId 
$Comment /* remove SIM card */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [pc_SwitchOnOff ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_MMI_UE_SwitchOff
$Cref 
$VerdictId 
$Comment /* switch off the UE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_MMI_UE_PwrOff
$Cref 
$VerdictId 
$Comment /* power off the UE */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* There are 2 types of deactivation required for testing: 
1. USIM removal or switching off or removal of the power source 
2. Switching off or removal of the power source 
Parameter p_USIM_Rmvd controls the variant to be applied: 
1. tsc_USIM_NeedRmv(=TRUE): variant 1 is to be used, the USIM is to be removed if possible */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MM_PwrOrUSIM_On (p_USIM_Rmvd : BOOLEAN)
$TestStepRef MACv520/BasicM_MM_GMM_Steps/
$Objective /* Activation of the UE */
$DefaultsRef NAS_OtherwiseFail
$Comment /* Depending upon the UE's properties (USIM insertion, switching on or powering on) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [(p_USIM_Rmvd) AND  
(pc_USIM_Rmv)]
$Cref 
$VerdictId 
$Comment /* USIM has been removed */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_MMI_USIM_Insert
$Cref 
$VerdictId 
$Comment /* insert USIM card */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [pc_SwitchOnOff ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_MMI_UE_SwitchOn
$Cref 
$VerdictId 
$Comment /* switch on the UE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [(((NOT p_USIM_Rmvd) OR   
(NOT pc_USIM_Rmv)) AND  
(NOT pc_SwitchOnOff))]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_MMI_UE_PwrOn
$Cref 
$VerdictId 
$Comment /* power on the UE */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* There are 2 types of activation required for testing: 
1. USIM insertion or switching on or restoration of the power source 
2. Switching on or restoration of the power source 
Parameter p_USIM_Rmvd controls the variant to be applied: 
1. tsc_USIM_NeedRmv(=TRUE): variant 1 is to be used, the USIM is to be inserted if possible 
This test Step is the counterpart to ts_MM_PwrOrUSIM_Off resp ts_MM_IMSI_Detach. */
$End_TestStep
$End_TestStepGroup
$TestStepGroup
$TestStepGroupId BasicM_Postambles
$Begin_TestStep
$TestStepId po_ConnectionAndSS_Rel ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_Postambles/
$Objective /* To release the existing RRC connection and release the channels that are configured in the SS. */
$DefaultsRef RRC_Def1
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TmpCellInfo.cellConfig <> cell_NotConfigured ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_Send_RRC_ConnectionRelease
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SS_Rel ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TmpCellInfo.cellConfig = cell_NotConfigured ]
$Cref 
$VerdictId I
$Comment /* 0. */
$End_BehaviourLine
$Header lt_Send_RRC_ConnectionRelease
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_NoConn )  OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_BMC_NoConn ) OR    
( tcv_TmpCellInfo.cellConfig = cell_NoDPCH ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_NoDedicated) OR  
 ( tcv_TmpCellInfo.cellConfig = cell_FACH_2_PRACH_NoConn) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_2_SCCPCH_NoConn ) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_MAC_SRB_NoConn) OR 
( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB_NoConn) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_MAC_SRB0_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1_NoConn) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2_NoConn)OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH_NoConn)OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_3_FACH_2a_CTCH_NoConn) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_2a_NoConn)OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1_NoConn) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2_NoConn)]
$Cref 
$VerdictId 
$Comment /* 3.
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE  ]
$Cref 
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH ) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_PS ) OR  
( tcv_TmpCellInfo.cellConfig =cell_FACH_BMC ) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_2_PRACH  ) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_2_SCCPCH ) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_MAC_SRB  )  OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_MAC_SRB0  ) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH)OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_PS)OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2)OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH)OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_3_FACH_2a_CTCH) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_2a)OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2)OR
(tcv_TmpCellInfo.cellConfig=cell_FACH_2SCCPCH_StandAlonePCH_PS_2a)]
$Cref 
$VerdictId 
$Comment /* 1.
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] UM!RLC_UM_DATA_REQ
$Cref cas_RRC_ConnRelDCCH ( tsc_CellDedicated,  tsc_RB1,  cs_108_RRC_ConnRelDCCH(tcv_CellIndInfo.dl_IntegrityCheckInfo, 
tcv_RRC_Ti, OMIT ))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] AM?RLC_AM_DATA_IND
$Cref car_RRC_ConnRelCmpl ( tsc_CellDedicated,  tsc_RB2, cbr_108_RRC_ConnRelCmpl ( tcv_RRC_Ti )  )
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_RRC_Delay ( tsc_DelayAfterRRC_ConnRel )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE  ]
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_N308 := 1,  tcv_K := 1 )
$Cref 
$VerdictId 
$Comment /* Maximum number of retransmissions of the RRC CONNECTION RELEASE COMPLETE message */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] UM!RLC_UM_DATA_REQ
$Cref cas_RRC_ConnRelDCCH ( tsc_CellDedicated,  tsc_RB1,  cs_108_RRC_ConnRelDCCH(tcv_CellIndInfo.dl_IntegrityCheckInfo, 
tcv_RRC_Ti, tcv_N308 ))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] UM?RLC_UM_DATA_IND
$Cref car_RRC_ConnRelCmplUM(tsc_CellDedicated,  tsc_RB1, cbr_108_RRC_ConnRelCmpl ( tcv_RRC_Ti ) )
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] REPEAT lt_RptRcvConnRel UNTIL [ tcv_K = ( tcv_N308+1) ]
$Cref 
$VerdictId 
$Comment /* UE sends RRC Connection Release Complete for N308 times */
$End_BehaviourLine
$Header lt_RptRcvConnRel
$BehaviourLine
$LabelId 
$Line [0] START t_Dly
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSF2
$Line [1] ? TIMEOUT t_Dly
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_K := tcv_N308 + 1 )
$Cref 
$VerdictId 
$Comment /* To stop the loop */
$End_BehaviourLine
$BehaviourLine
$LabelId TSP2
$Line [1] UM?RLC_UM_DATA_IND 
( tcv_K := tcv_K+1 ) CANCEL t_Dly
$Cref car_RRC_ConnRelCmplUM (  tsc_CellDedicated , 
      tsc_RB1, 
    cbr_108_RRC_ConnRelCmpl (  tcv_RRC_Ti ) 
)
$VerdictId (P)
$Comment /* Retransmission */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 0. The cell has not been configured, it shall not be released 
1. cell_FACH state 
2. cell_DCH state 
3. No  RRC connection is established 
4. An RRC connection is established */
$End_TestStep
$End_TestStepGroup
$TestStepGroup
$TestStepGroupId BasicM_RRC_Steps
$TestStepGroup
$TestStepGroupId RRC_RAB_Steps
$Begin_TestStep
$TestStepId ts_RRC_SetUpRAB_UM_7_RLC ( p_CellId: INTEGER; p_RAB_Id : BITSTRING; p_RLC_Info : RLC_Info )
$TestStepRef MACv520/BasicM_RRC_Steps/RRC_RAB_Steps/
$Objective /*  */
$DefaultsRef RRC_Def1
$Comment /* This test step performs an RB setup procedure to configure RB10 in the UE as a UM DTCH entity that should use 7 bit length indicators. Reference 3G TS 34.108 clause 6.11.1. 
The corresponding entity in the SS is configured as TM, but with an identical transport block size. The UM header information is specified in the TTCN for DL, and can be inspected by the TTCN for UL. 
 
Parameters 
p_CellId: The cell id to use for signalling, and configuration of the RB for testing. 
 
p_RAB_Id: The RAB Id to be used within the RB SETUP message. 
 
p_RLC_Info: The RLC configuration information to be used within the RB setup message for DTCH. This parameter is provided so that different configurations can be used to meet the requirements of each specific test case. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CPHY ! CPHY_Frame_Number_REQ
$Cref cas_GetFrameNum( p_CellId, tsc_DL_DPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CPHY ? CPHY_Frame_Number_CNF 
(tcv_FrameNumber := CPHY_Frame_Number_CNF.frameNumber)
$Cref car_GetFrameNum( p_CellId, tsc_DL_DPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_ActTime := (256 + tcv_FrameNumber - ( tcv_FrameNumber MOD 8 + 8)) MOD 256, 
  tcv_TGCFN := (tcv_FrameNumber + (256 - 4)) MOD 256 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_SendRAB_SetupCS_OrPS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] AM ? RLC_AM_DATA_CNF
$Cref car_AM_DataMuiCnf (tsc_CellDedicated, tsc_RB2, tsc_Mui)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_SS_2DCH_Modify( 
  p_CellId,  
  c_DCH_336_148_UL_InfoRLC_UM( tcv_ActTime) ,  
  c_DCH_336_148_DL_InfoRLC_UM( tcv_ActTime) ,  
  c_TrChInfoUL_336_148_RLC_UM,  
  c_TrChInfoDL_336_148_RLC_UM,  
  c_TrLogMappingUL_4DCCH_1DTCH_RLC( 
   tsc_RB_UM_7_RLC 
  ),  
  c_TrLogMappingDL_4DCCH_1DTCH_RLC( 
    tsc_RB_UM_7_RLC 
  ), 
  tcv_ActTime, 
  cb_DL_DPCH_8K_RLC_7BitLI ( c_DL_CommonInformationRB_SetUp ( tsc_DL_DPCH1_SFP_RLC_7BitLI), tcv_TmpCellInfo.dl_DPCH_2ndScrCode  ), 
  cb_UL_DPCH_Info ( tsc_UL_DPDCH_SF_RLC_7BitLI, pl1, tcv_TmpCellInfo.uL_ScramblingCode )  
)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SS_RB_TM_Cfg_RLC(  336, tsc_RB_UM_7_RLC)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSP
$Line [8] + ts_RRC_ReceiveRB_SetupCmpl ( p_CellId , cell_RLC_DCH_UM_RAB_7Lis)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SetCellCfg  ( p_CellId,  cell_RLC_DCH_UM_RAB_7Lis )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_SendRAB_SetupCS_OrPS
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain = cs_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] AM ! RLC_AM_DATA_REQ
$Cref cas_RB_SetUpAM_WithCnf( 
  tsc_CellDedicated, 
  tsc_RB2, 
  tsc_Mui, 
  cs_RRC_RB_SetUp(  
    tcv_CellIndInfo.dl_IntegrityCheckInfo, 
    tcv_RRC_Ti, 
    tcv_ActTime, 
    cell_DCH,  
    OMIT, 
    c_RAB_InfoListRLC( 
      p_RAB_Id, 
      p_RLC_Info, 
      cs_domain, 
      tsc_RB10  
    ), 
    c_UL_CommTrChInfoRLC_8K, 
    c_UL_AddReconfTransChInfoList7_RLC_UM,  
    c_DL_CommonTransChInfoSameAsUL, 
    c_DL_AddReconfTransChInfoListRLC, 
    c_DL_InformationPerRL (tcv_TmpCellInfo.priScrmCode, tsc_DL_DPCH1_ChC_RLC_7_BitLI, tcv_TmpCellInfo.dl_DPCH_2ndScrCode ), 
    c_DL_CommonInformationRB_SetUp ( tsc_DL_DPCH1_SFP_RLC_7BitLI), 
    cb_UL_DPCH_Info ( tsc_UL_DPDCH_SF_RLC_7BitLI, pl1, tcv_TmpCellInfo.uL_ScramblingCode ), 
    OMIT 
  ) 
)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain = ps_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] AM ! RLC_AM_DATA_REQ
$Cref cas_RB_SetUpAM_WithCnf( 
  tsc_CellDedicated, 
  tsc_RB2, 
  tsc_Mui, 
  cs_RRC_RB_SetUp(  
    tcv_CellIndInfo.dl_IntegrityCheckInfo, 
    tcv_RRC_Ti, 
    tcv_ActTime, 
    cell_DCH,  
    OMIT, 
    c_RAB_InfoListRLC( 
      p_RAB_Id, 
      p_RLC_Info, 
      ps_domain, 
      tsc_RB20  
    ), 
    c_UL_CommTrChInfoRLC_8K, 
    c_UL_AddReconfTransChInfoList7_RLC_UM,  
    c_DL_CommonTransChInfoSameAsUL, 
    c_DL_AddReconfTransChInfoListRLC, 
    c_DL_InformationPerRL (tcv_TmpCellInfo.priScrmCode, tsc_DL_DPCH1_ChC_RLC_7_BitLI, tcv_TmpCellInfo.dl_DPCH_2ndScrCode ), 
    c_DL_CommonInformationRB_SetUp ( tsc_DL_DPCH1_SFP_RLC_7BitLI), 
    cb_UL_DPCH_Info ( tsc_UL_DPDCH_SF_RLC_7BitLI, pl1, tcv_TmpCellInfo.uL_ScramblingCode ), 
    OMIT 
  ) 
)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$End_TestStepGroup
$Begin_TestStep
$TestStepId ts_RRC_ConnEst ( 
p_CellId : INTEGER; 
p_MO_Reg : RegOr_MO; 
p_EstCause :  EstablishmentCause 
)
$TestStepRef MACv520/BasicM_RRC_Steps/
$Objective /* The generic Step to establish RRC Connection and bring UE to CELL_FACH or CELL_DCH state. */
$DefaultsRef RRC_DefConnEst
$Comment /* In this Step , 5 Signalling Radio Bearers with 3.4kbps DL & UL is setup (RB#0, 1, 2, 3,4) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_SS_PrepareCellRRC_ConnEst  ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_RcvConnReq
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +lt_Send_ConnSetUp
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_RRC_ReceiveConnSetupCmpl (  p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_RcvConnReq
$BehaviourLine
$LabelId 
$Line [0] [ p_MO_Reg = est_Reg ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM ? RLC_TR_DATA_IND (  
    tcv_InitialUE_Id  :=  RLC_TR_DATA_IND.tM_message.uL_CCCH_Message.message.rrcConnectionRequest.initialUE_Identity)
$Cref car_RRC_ConnReq  (p_CellId,  
tsc_RB0, cbr_108_RRC_ConnReq  (  
       registration 
    ))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ (  p_MO_Reg = est_MO ) OR (  p_MO_Reg = est_MT ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM ? RLC_TR_DATA_IND (  
    tcv_InitialUE_Id  :=  RLC_TR_DATA_IND.tM_message.uL_CCCH_Message.message.rrcConnectionRequest.initialUE_Identity)
$Cref car_RRC_ConnReq (p_CellId,  
tsc_RB0, cbr_108_RRC_ConnReq (  
        p_EstCause 
    ))
$VerdictId 
$End_BehaviourLine
$Header lt_Send_ConnSetUp
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_NoConn ) OR  ( tcv_TmpCellInfo.cellConfig = cell_FACH_BMC_NoConn )  OR  ( tcv_TmpCellInfo.cellConfig = cell_FACH_2_PRACH_NoConn ) OR   ( tcv_TmpCellInfo.cellConfig = cell_FACH_2_SCCPCH_NoConn ) OR ( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_NoConn ) OR (tcv_TmpCellInfo.cellConfig = cell_FACH_MAC_SRB_NoConn )OR (tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1_NoConn ) OR (tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2_NoConn )OR (tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH_NoConn ) OR
 (tcv_TmpCellInfo.cellConfig =cell_FACH_2SCCPCH_StandAlonePCH_2a_NoConn)OR
(tcv_TmpCellInfo.cellConfig =cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1_NoConn) OR
( tcv_TmpCellInfo.cellConfig =cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2_NoConn ) OR
(tcv_TmpCellInfo.cellConfig =cell_FACH_3_SCCPCH_3_FACH_2a_CTCH_NoConn)]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] UM!RLC_UM_DATA_REQ
$Cref cas_RRC_ConnSetup( 
p_CellId,  
tsc_RB0,  
cbs_108_RRC_ConnSetupFACH ( 
        tcv_InitialUE_Id, 
        tcv_RRC_Ti, 
        tcv_TmpCellInfo.priScrmCode , 
         tcv_TmpCellInfo.uRNTI , 
         tcv_TmpCellInfo. cRNTI, 
   tcv_TmpCellInfo.uL_ScramblingCode 
        ) 
)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_TmpCellInfo.cellConfig = cell_FACH_NoConn   ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg  ( p_CellId,  cell_FACH )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [  tcv_TmpCellInfo.cellConfig = cell_FACH_BMC_NoConn ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg  ( p_CellId,  cell_FACH_BMC )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [  tcv_TmpCellInfo.cellConfig = cell_FACH_2_PRACH_NoConn ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg  ( p_CellId,  cell_FACH_2_PRACH )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [  tcv_TmpCellInfo.cellConfig = cell_FACH_2_SCCPCH_NoConn ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg  ( p_CellId,  cell_FACH_2_SCCPCH )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_NoConn ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg ( p_CellId, cell_FACH_2SCCPCH_StandAlonePCH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_TmpCellInfo.cellConfig = cell_FACH_MAC_SRB_NoConn  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg ( p_CellId, cell_FACH_MAC_SRB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1_NoConn  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg ( p_CellId, cell_FACH_3_SCCPCH_4_FACH_Cnfg1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2_NoConn  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg ( p_CellId, cell_FACH_3_SCCPCH_4_FACH_Cnfg2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH_NoConn  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg ( p_CellId, cell_FACH_3_SCCPCH_3_FACH_CTCH )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_2a_NoConn  ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg ( p_CellId, cell_FACH_2SCCPCH_StandAlonePCH_2a )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1_NoConn  ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg ( p_CellId, cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1 )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2_NoConn  ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg ( p_CellId, cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2 )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_2a_CTCH_NoConn  ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg ( p_CellId, cell_FACH_3_SCCPCH_3_FACH_2a_CTCH )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR ( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB_NoConn ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] UM!RLC_UM_DATA_REQ
$Cref cas_RRC_ConnSetup( 
p_CellId,  
tsc_RB0,  
cbs_108_RRC_ConnSetupDCH ( 
    tcv_InitialUE_Id, 
    tcv_RRC_Ti, 
    tcv_TmpCellInfo.priScrmCode , 
    tcv_TmpCellInfo.uRNTI , 
    tcv_TmpCellInfo.uL_ScramblingCode 
        ) 
)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB_NoConn ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg ( p_CellId, cell_DCH_StandAloneSRB)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB_NoConn ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SetCellCfg ( p_CellId, cell_DCH_MAC_SRB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR
$Line [0] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Update the cell configuration 
2.  A RRC connection has already been established. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_RRC_ConnEst_DCH_MT_PTMSI ( 
p_CellId: INTEGER; 
p_PagCause:  PagingCause;  
p_P_tmsi:P_TMSI_GSM_MAP;  
p_EstCause:  EstablishmentCause 
)
$TestStepRef MACv520/BasicM_RRC_Steps/
$Objective /* To bring the the UE into CELL_DCH state with a MT call with Paging Type P_TMSI */
$DefaultsRef RRC_DefConnEst
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_SS_PrepareCellRRC_ConnEst  ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_RRC_Delay(tsc_WaitBeforePaging)
$Cref 
$VerdictId 
$Comment /* Give delay before paging type1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_CMAC_Pag1_Cfg( p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM ! RLC_TR_DATA_REQ
$Cref cas_PagingType1 ( 
    p_CellId,  
        tsc_RB_PCCH, 
    cs_RRC_PagingType1_PTMSI ( 
        p_PagCause,  
        p_P_tmsi, 
        tcv_CN_Domain 
    ) 
)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] TM ? RLC_TR_DATA_IND  
(tcv_InitialUE_Id := RLC_TR_DATA_IND.tM_message.uL_CCCH_Message.message.rrcConnectionRequest.initialUE_Identity)
$Cref car_RRC_ConnReq (p_CellId,  
tsc_RB0, cbr_108_RRC_ConnReq (  
        p_EstCause 
    ))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] UM!RLC_UM_DATA_REQ
$Cref cas_RRC_ConnSetup( 
p_CellId,  
tsc_RB0,  
cbs_108_RRC_ConnSetupDCH ( 
    tcv_InitialUE_Id, 
    tcv_RRC_Ti, 
    tcv_TmpCellInfo.priScrmCode ,  
    tcv_TmpCellInfo.uRNTI ,   
    tcv_TmpCellInfo.uL_ScramblingCode 
    ) 
)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_RRC_ReceiveConnSetupCmpl ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SetCellCfg  ( p_CellId,  cell_DCH_StandAloneSRB )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Update the cell configuration 
2.  Download the START value to SS */
$End_TestStep
$Begin_TestStep
$TestStepId ts_RRC_ConnEst_DCH_MT_TMSI ( 
p_CellId: INTEGER; 
p_PagCause:  PagingCause;  
p_Tmsi:OCTETSTRING;  
p_EstCause:  EstablishmentCause)
$TestStepRef MACv520/BasicM_RRC_Steps/
$Objective /* To bring the the UE into CELL_DCH state with a MT call with Paging Type TMSI */
$DefaultsRef RRC_DefConnEst
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_SS_PrepareCellRRC_ConnEst  ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_RRC_Delay(tsc_WaitBeforePaging)
$Cref 
$VerdictId 
$Comment /* Give delay before paging type1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_CMAC_Pag1_Cfg( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM ! RLC_TR_DATA_REQ
$Cref cas_PagingType1 ( 
    p_CellId,  
tsc_RB_PCCH,  
    cs_RRC_PagingType1_TMSI ( p_PagCause, o_ConvertTMSI(p_Tmsi), tcv_CN_Domain ))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] TM ? RLC_TR_DATA_IND  
(tcv_InitialUE_Id := RLC_TR_DATA_IND.tM_message.uL_CCCH_Message.message.rrcConnectionRequest.initialUE_Identity)
$Cref car_RRC_ConnReq (p_CellId,  
tsc_RB0, cbr_108_RRC_ConnReq (  
        p_EstCause 
    ))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] UM!RLC_UM_DATA_REQ
$Cref cas_RRC_ConnSetup( 
p_CellId,  
tsc_RB0,  
cbs_108_RRC_ConnSetupDCH ( 
    tcv_InitialUE_Id, 
    tcv_RRC_Ti, 
    tcv_TmpCellInfo.priScrmCode , 
    tcv_TmpCellInfo.uRNTI ,  
    tcv_TmpCellInfo.uL_ScramblingCode 
    ) 
)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_RRC_ReceiveConnSetupCmpl ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SetCellCfg  ( p_CellId,  cell_DCH_StandAloneSRB )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_RRC_ConnRel ( 
p_CellId: INTEGER; 
p_RRC_RelStatus : RRC_Rel_Status 
)
$TestStepRef MACv520/BasicM_RRC_Steps/
$Objective /* To bring the UE from state CELL_DCH/ CELL_FACH to idle state by releasing the RRC connection */
$DefaultsRef RRC_Def1
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_RRC_Delay ( tsc_DelayBeforeRRC_ConnRel )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_Send_RRC_ConnectionRelease
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_RestartCRLC_ForNextConnection
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_SS_ResetSecurityKey
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_RestartCRLC_ForNextConnection
$BehaviourLine
$LabelId 
$Line [0] [ tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_DCH_StandAloneSRB_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH ) OR ( tcv_TmpCellInfo.cellConfig = cell_FACH_PS ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_FACH_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_TmpCellInfo.cellConfig = cell_FACH_BMC ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId   )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_FACH_BMC_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_TmpCellInfo.cellConfig = cell_FACH_2_PRACH]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId   )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_FACH_2_PRACH_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_TmpCellInfo.cellConfig = cell_FACH_2_SCCPCH ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId   )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_FACH_2_SCCPCH_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH) OR ( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_PS) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId   )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_FACH_2SCCPCH_StandAlonePCH_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1 ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId   )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_FACH_3_SCCPCH_4_FACH_Cnfg1_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2 ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId   )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_FACH_3_SCCPCH_4_FACH_Cnfg2_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId   )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_FACH_3_SCCPCH_3_FACH_CTCH_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [(tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_2a) OR(tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_PS_2a)  ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId   )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_FACH_2SCCPCH_StandAlonePCH_2a_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [(tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1)   ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId   )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [(tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2)   ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId   )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [(tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_2a_CTCH )   ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_RelReconfSRB ( p_CellId   )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_FACH_3_SCCPCH_3_FACH_2a_CTCH_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [  ( tcv_TmpCellInfo.cellConfig = cell_DCH_Speech ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_DCH_64kCS_RAB_SRB ) OR  
( tcv_TmpCellInfo.cellConfig = cell_DCH_57_6kCS_RAB_SRB ) OR  
(  tcv_TmpCellInfo.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR  
(  tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_AM_RAB_15Lis )  OR  
(  tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_AM_RAB_7Lis )  OR  
(  tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_UM_RAB_7Lis ) OR  
(  tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_UM_RAB_15Lis )  OR  
(  tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_RAB ) OR  
(  tcv_TmpCellInfo.cellConfig = cell_PDCP_UM_RAB ) OR  
(  tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_UM_RAB ) OR  
( tcv_TmpCellInfo.cellConfig = cell_Two_DTCH) OR  
( tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_CS ) OR  
( tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_CS_PS ) OR 
( tcv_TmpCellInfo.cellConfig = cell_DCH_2AM_PS ) OR 
( tcv_TmpCellInfo.cellConfig =    cell_DCH_2_PS_Call ) OR
( tcv_TmpCellInfo.cellConfig = cell_Two_DTCH_CS_PS ) ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SS_ReconfigRAB_ToSRB ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SetCellCfg  ( p_CellId, cell_DCH_StandAloneSRB_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [0] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_NoConn ) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_BMC_NoConn ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_PRACH_NoConn ) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_2_SCCPCH_NoConn )  OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_NoConn )]
$Cref 
$VerdictId I
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [0] [ TRUE ]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_Send_RRC_ConnectionRelease
$BehaviourLine
$LabelId 
$Line [0] [ p_RRC_RelStatus= cell_Dch ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_N308 := 1,  tcv_K := 1 )
$Cref 
$VerdictId 
$Comment /* Maximum number of retransmissions of the RRC CONNECTION RELEASE COMPLETE message */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] UM ! RLC_UM_DATA_REQ
$Cref cas_RRC_ConnRelDCCH ( 
    tsc_CellDedicated,  
    tsc_RB1,  
    cs_108_RRC_ConnRelDCCH(tcv_CellIndInfo.dl_IntegrityCheckInfo, 
tcv_RRC_Ti, tcv_N308))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSP1
$Line [3] UM ? RLC_UM_DATA_IND
$Cref car_RRC_ConnRelCmplUM ( 
tsc_CellDedicated,  
    tsc_RB1,     cbr_108_RRC_ConnRelCmpl (  tcv_RRC_Ti )  
)
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] REPEAT lt_RptRcvConnRel UNTIL [ tcv_K = ( tcv_N308+1) ]
$Cref 
$VerdictId 
$Comment /* UE sends RRC Connection Release Complete for N308 times */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ p_RRC_RelStatus =   cell_Fach_Dcch ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] UM ! RLC_UM_DATA_REQ
$Cref cas_RRC_ConnRelDCCH ( 
   tsc_CellDedicated,  
        tsc_RB1,  
    cs_108_RRC_ConnRelDCCH ( tcv_CellIndInfo.dl_IntegrityCheckInfo, 
tcv_RRC_Ti, OMIT ) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSP2
$Line [2] AM ? RLC_AM_DATA_IND
$Cref car_RRC_ConnRelCmpl (   tsc_CellDedicated,  
        tsc_RB2, 
    cbr_108_RRC_ConnRelCmpl (  tcv_RRC_Ti )  
)
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_RRC_Delay ( tsc_DelayAfterRRC_ConnRel )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ p_RRC_RelStatus = cell_Fach_Ccch ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] UM!RLC_UM_DATA_REQ
$Cref cas_RRC_ConnRelCCCH( 
    p_CellId,  
        tsc_RB0,  
    cs_108_RRC_ConnRelCCCH (  
        c_U_RNTI, tcv_RRC_Ti))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [  TRUE ]
$Cref 
$VerdictId I
$Comment /* Programming error */
$End_BehaviourLine
$Header lt_RptRcvConnRel
$BehaviourLine
$LabelId 
$Line [0] START t_Dly
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSF2
$Line [1] ? TIMEOUT t_Dly
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_K := tcv_N308 + 1 )
$Cref 
$VerdictId 
$Comment /* To stop the loop */
$End_BehaviourLine
$BehaviourLine
$LabelId TSP2
$Line [1] UM?RLC_UM_DATA_IND 
( tcv_K := tcv_K+1 ) CANCEL t_Dly
$Cref car_RRC_ConnRelCmplUM (  tsc_CellDedicated , 
      tsc_RB1, 
    cbr_108_RRC_ConnRelCmpl (   tcv_RRC_Ti ) 
)
$VerdictId (P)
$Comment /* Retransmission */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. No RRC connection is established */
$End_TestStep
$Begin_TestStep
$TestStepId ts_RRC_PagType1_DefMAC ( p_CellId: INTEGER )
$TestStepRef MACv520/BasicM_RRC_Steps/
$Objective /* To send PAGING TYPE 1 with the default TIMSI for CS and PTMSI for PS and with the default paging cause */
$DefaultsRef RRC_Def1
$Comment /* SS CMAC shall be configured before sending the PAGING TYPE 1 message. 
tcv_RRC_PagingCau is assigned in ts_RRC_InitVariables (shall be called before). */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_RRC_Delay(tsc_WaitBeforePaging)
$Cref 
$VerdictId 
$Comment /* Give delay before paging type1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_CMAC_Pag1_Cfg( p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_CN_Domain = cs_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] TM ! RLC_TR_DATA_REQ
$Cref cas_PagingType1 ( 
    p_CellId,  
tsc_RB_PCCH,  
    cs_RRC_PagingType1_TMSI( tcv_RRC_PagingCau, o_ConvertTMSI(px_TMSI_Def), tcv_CN_Domain ))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ tcv_CN_Domain = ps_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] TM ! RLC_TR_DATA_REQ
$Cref cas_PagingType1 ( 
    p_CellId,  
tsc_RB_PCCH,  
    cs_RRC_PagingType1_PTMSI ( tcv_RRC_PagingCau, o_ConvertPTMSI ( px_PTMSI_Def ), tcv_CN_Domain ))
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_RRC_ReceiveConnSetupCmpl ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_RRC_Steps/
$Objective /* To receive RRC CONNECTION SETUP COMPLETE  message and download SS security keys according to the received information element. */
$DefaultsRef RRC_DefConnEst,RRC_Def1
$Comment /*  */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB_NoConn )  OR 
 ( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB  )  OR 
 ( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB_NoConn  )  OR 
 ( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB )  OR 
 ( tcv_TmpCellInfo.cellConfig = cell_DCH_2AM_PS) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] START t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSF1
$Line [3] ? TIMEOUT t_WaitMS
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId TSP1
$Line [3] AM ? RLC_AM_DATA_IND  
 ( tcv_StartList := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.rrcConnectionSetupComplete.startList, 
tcv_CellIndInfo.cipheringAlgorithmCapability := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.rrcConnectionSetupComplete.ue_RadioAccessCapability.securityCapability.cipheringAlgorithmCap )  
 CANCEL  t_WaitMS
$Cref car_RRC_ConnSetupCmpl ( tsc_CellDedicated,  
tsc_RB2,  
cr_108_RRC_ConnSetupCmpl ( tcv_RRC_Ti, ? ) )
$VerdictId (P)
$Comment /* UE capability ie is present in a DCH comfiguration */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_GetHFN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig =  cell_FACH_NoConn ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH_BMC_NoConn ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH_BMC ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_PRACH_NoConn ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_PRACH ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_SCCPCH_NoConn ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_SCCPCH ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH_MAC_SRB_NoConn ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH_MAC_SRB ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH_MAC_SRB0_NoConn ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH_MAC_SRB0 ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_Cnfg1_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_Cnfg1 ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_Cnfg2_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_Cnfg2 )OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_3_FACH_CTCH_NoConn  ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_3_FACH_CTCH )OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_NoConn  ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH ) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_3_FACH_2a_CTCH) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_2a)OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2)]
$Cref 
$VerdictId 
$Comment /* 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] START t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSF2
$Line [3] ? TIMEOUT t_WaitMS
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId TSP2
$Line [3] AM ? RLC_AM_DATA_IND  
 ( tcv_StartList := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.rrcConnectionSetupComplete.startList )  
 CANCEL  t_WaitMS
$Cref car_RRC_ConnSetupCmpl ( tsc_CellDedicated,  
tsc_RB2,  
cr_108_RRC_ConnSetupCmpl ( tcv_RRC_Ti, ? ) )
$VerdictId (P)
$Comment /* UE capability ie is not present in a FACH configuration */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_GetHFN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_GetHFN
$BehaviourLine
$LabelId 
$Line [0] ( tcv_Count := NUMBER_OF_ELEMENTS ( tcv_StartList ))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_Count = 1 ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_FirstValue
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_Count = 2 ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_FirstValue
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_SecondValue
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [1] [ TRUE ]
$Cref 
$VerdictId F
$End_BehaviourLine
$Header lt_FirstValue
$BehaviourLine
$LabelId 
$Line [0] [ tcv_StartList.[0].cn_DomainIdentity  = tsc_CS_Domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_CellIndInfo.start_CS := tcv_StartList.[0].start_Value )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_StartList.[0].cn_DomainIdentity = tsc_PS_Domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_CellIndInfo.start_PS := tcv_StartList.[0].start_Value )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [0] [ TRUE ]
$Cref 
$VerdictId F
$End_BehaviourLine
$Header lt_SecondValue
$BehaviourLine
$LabelId 
$Line [0] [ tcv_StartList.[1].cn_DomainIdentity = tsc_CS_Domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_CellIndInfo.start_CS := tcv_StartList.[1].start_Value )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_StartList.[1].cn_DomainIdentity = tsc_PS_Domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_CellIndInfo.start_PS := tcv_StartList.[1].start_Value )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR3
$Line [0] [ TRUE ]
$Cref 
$VerdictId F
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1.  Download the START value to SS */
$End_TestStep
$Begin_TestStep
$TestStepId ts_RRC_ReceiveRB_SetupCmpl ( p_CellId : INTEGER;  p_RbType: RB_ConfigType )
$TestStepRef MACv520/BasicM_RRC_Steps/
$Objective /* To receive RADIO BEARER SETUP COMPLETE message and reconfigure SS according to the received information element values. */
$DefaultsRef RRC_Def1
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] START t_WaitMS
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ (  p_RbType = cell_DCH_Speech ) OR  
( p_RbType = cell_DCH_64kCS_RAB_SRB ) OR  
(   p_RbType =  cell_DCH_57_6kCS_RAB_SRB ) OR 
(  p_RbType = cell_Two_DTCH ) OR 
(  p_RbType = cell_Four_DTCH_CS ) OR 
( (p_RbType = cell_Two_DTCH_PS_CS) AND (tcv_CN_Domain = cs_domain))  OR 
(  (p_RbType = cell_Four_DTCH_PS_CS ) AND (tcv_CN_Domain = cs_domain)) OR 
(  (p_RbType = cell_DCH_DSCH_CS_PS ) AND (tcv_CN_Domain = cs_domain))  ]
$Cref 
$VerdictId 
$Comment /* TM RAB
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [( tcv_CellIndInfo.cs_cipheringStarted = TRUE)  AND( tcv_CellIndInfo.recentSecureDomain = cs_domain)]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_CipheringStartedTM_RAB
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [( tcv_CellIndInfo.cs_cipheringStarted = TRUE)  AND ( (  p_RbType = cell_DCH_Speech ) OR  
( p_RbType = cell_DCH_64kCS_RAB_SRB ) )]
$Cref 
$VerdictId 
$Comment /* For RAB test cases
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_CipheringStartedTM_RAB
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_CellIndInfo.cs_cipheringStarted = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_CipheringNotStartedTM_RAB
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ TRUE ]
$Cref 
$VerdictId 
$Comment /* AM/UM RAB */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [  ( tcv_CellIndInfo.ps_cipheringStarted = TRUE)  AND( tcv_CellIndInfo.recentSecureDomain = ps_domain) 
  ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_CipheringStartedAM_RAB
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_CipheringNotStartedAM_RAB
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_CipheringStartedTM_RAB
$BehaviourLine
$LabelId 
$Line [0] + ts_CMAC_DownloadSecurityKey (  tcv_AuthCK, 
OMIT, OMIT, tcv_CN_Domain, tcv_CellIndInfo.start_CS )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CMAC_UL_DL_CipherCfg  (  tcv_CellIndInfo.dL_CipherMode, tcv_ActTime ,notInc )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId TSF1
$Line [2] ? TIMEOUT t_WaitMS
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId TSP2
$Line [2] AM ?RLC_AM_DATA_IND 
( tcv_CipherActTime := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.radioBearerSetupComplete.count_C_ActivationTime, 
tcv_CellIndInfo.start_CS := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.radioBearerSetupComplete.start_Value  )  
CANCEL t_WaitMS
$Cref car_RB_SetUpCmpl ( tsc_CellDedicated, 
 tsc_RB2, cbr_108_RB_SetUpCmpl (  tcv_RRC_Ti,  *, OMIT ) )
$VerdictId (P)
$Comment /* A new start value is provided */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_CMAC_DownloadSecurityKey(tcv_AuthCK, OMIT, OMIT,
tcv_CN_Domain, tcv_CellIndInfo.start_CS)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CMAC_UL_DL_CipherCfg  (  tcv_CellIndInfo.dL_CipherMode, tcv_CipherActTime, incPerCFN_Cycle )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$Header lt_CipheringStartedAM_RAB
$BehaviourLine
$LabelId TSF3
$Line [0] ? TIMEOUT t_WaitMS
$Cref 
$VerdictId (F)
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId TSP4
$Line [0] AM ?RLC_AM_DATA_IND 
( tcv_CellIndInfo.start_PS := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.radioBearerSetupComplete.start_Value , 
tcv_CellIndInfo.uL_CipherMode := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.radioBearerSetupComplete.rb_UL_CiphActivationTimeInfo )  
CANCEL t_WaitMS
$Cref car_RB_SetUpCmpl ( tsc_CellDedicated, 
 tsc_RB2, cbr_108_RB_SetUpCmpl (  tcv_RRC_Ti,  OMIT, * ) )
$VerdictId (P)
$Comment /* A new start value is provided 
A RB UL cipher is not present */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_SS_CipheringAM_RAB_UL_DL ( tcv_PS_AuthCK)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$Header lt_CipheringNotStartedTM_RAB
$BehaviourLine
$LabelId TSF5
$Line [0] ? TIMEOUT t_WaitMS
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId TSP5
$Line [0] AM ?RLC_AM_DATA_IND 
 ( tcv_CipherActTime := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.radioBearerSetupComplete.count_C_ActivationTime, 
 tcv_CellIndInfo.uL_CipherMode := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.radioBearerSetupComplete.rb_UL_CiphActivationTimeInfo ) 
CANCEL t_WaitMS
$Cref car_RB_SetUpCmpl ( tsc_CellDedicated, 
 tsc_RB2, cr_RRC_RB_SetUpCmplNoStartVal (  tcv_RRC_Ti,  *,*) )
$VerdictId (P)
$Comment /* No start value  
No RB UL cipher */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CMAC_DownloadSecurityKey (  OMIT, 
OMIT, OMIT, tcv_CN_Domain, tcv_CellIndInfo.start_CS )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_CMAC_UL_CipherCfg ( tcv_CellIndInfo.dL_CipherMode, tcv_CipherActTime,notInc  )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId TSP6
$Line [0] AM ?RLC_AM_DATA_IND 
( tcv_CipherActTime := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.radioBearerSetupComplete.count_C_ActivationTime,  
tcv_CellIndInfo.start_CS := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.radioBearerSetupComplete.start_Value  )  
CANCEL t_WaitMS
$Cref car_RB_SetUpCmpl ( tsc_CellDedicated, 
 tsc_RB2, cbr_108_RB_SetUpCmpl (  tcv_RRC_Ti,  *, OMIT ) )
$VerdictId (P)
$Comment /* A new start value is provided */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CMAC_DownloadSecurityKey ( OMIT, 
OMIT, OMIT, tcv_CN_Domain, tcv_CellIndInfo.start_CS )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_CMAC_UL_CipherCfg ( tcv_CellIndInfo.dL_CipherMode, tcv_CipherActTime ,notInc )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$Header lt_CipheringNotStartedAM_RAB
$BehaviourLine
$LabelId TSF5
$Line [0] ? TIMEOUT t_WaitMS
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId TSP5
$Line [0] AM ?RLC_AM_DATA_IND 
 CANCEL t_WaitMS
$Cref car_RB_SetUpCmpl ( tsc_CellDedicated, 
 tsc_RB2, cr_RRC_RB_SetUpCmplNoStartVal (  tcv_RRC_Ti,  OMIT,OMIT) )
$VerdictId (P)
$Comment /* No start value  
No RB UL cipher */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_SS_CipheringAM_RAB_UL_DL(OMIT)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSP6
$Line [0] AM ?RLC_AM_DATA_IND 
( tcv_CellIndInfo.start_PS := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.radioBearerSetupComplete.start_Value  )  
CANCEL t_WaitMS
$Cref car_RB_SetUpCmpl ( tsc_CellDedicated, 
 tsc_RB2, cbr_108_RB_SetUpCmpl (  tcv_RRC_Ti,  OMIT, OMIT ) )
$VerdictId (P)
$Comment /* A new start value is provided */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_SS_CipheringAM_RAB_UL_DL (OMIT)
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_SS_CipheringAM_RAB_UL_DL ( p_KC : KeyCiphering )
$BehaviourLine
$LabelId 
$Line [0] [ ( p_RbType = cell_DCH_64kPS_RAB_SRB ) OR 
  
( p_RbType = cell_FACH_PS ) OR 
( p_RbType = cell_Two_DTCH_CS_PS ) OR 
( p_RbType = cell_Four_DTCH_CS_PS ) OR  
( p_RbType = cell_PDCP_AM_RAB )OR  
( p_RbType= cell_FACH_3_SCCPCH_4_FACH_Cnfg1) OR  
(  p_RbType = cell_FACH_3_SCCPCH_4_FACH_Cnfg2)OR  
( p_RbType = cell_FACH_3_SCCPCH_3_FACH_CTCH) OR
 ( p_RbType = cell_DCH_DSCH_PS)  OR
 ( p_RbType = cell_DCH_DSCH_CS_PS) OR
( p_RbType = cell_FACH_2SCCPCH_StandAlonePCH_PS)]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_CRLC_SecurityConfig (tcv_CellIndInfo.start_PS, p_KC)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_RLC_SeqNumDL_RB20 := 0 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_DL_CipherCfgRB (  tcv_CellIndInfo.dL_CipherMode , p_RbType ,notInc )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_UL_CipherCfg_RAB (ps_domain, cs_RB_ActTimeInfoList20 ( 0 ) ,notInc )
$Cref 
$VerdictId 
$Comment /* 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( p_RbType = cell_DCH_2AM_PS ) OR ( p_RbType =cell_DCH_2_PS_Call )]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_CRLC_SecurityConfig (tcv_CellIndInfo.start_PS, p_KC)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_RLC_SeqNumDL_RB20 := 0,   tcv_RLC_SeqNumDL_RB22 := 0)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_DL_CipherCfgRB (  tcv_CellIndInfo.dL_CipherMode , p_RbType ,notInc )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_UL_CipherCfg_RAB (ps_domain,cs_RB_ActTimeInfoList20_22 ( 0, 0 ),notInc )
$Cref 
$VerdictId 
$Comment /* 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( p_RbType = cell_PDCP_AM_UM_RAB )   ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_CRLC_SecurityConfig (tcv_CellIndInfo.start_PS, p_KC)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_RLC_SeqNumDL_RB20 := 0,   tcv_RLC_SeqNumDL_RB21 := 0)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_DL_CipherCfgRB (  tcv_CellIndInfo.dL_CipherMode , p_RbType ,notInc )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_UL_CipherCfg_RAB (ps_domain,cs_RB_ActTimeInfoList20_21 ( 0, 0 ),notInc )
$Cref 
$VerdictId 
$Comment /* 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( p_RbType = cell_PDCP_UM_RAB ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_CRLC_SecurityConfig (tcv_CellIndInfo.start_PS, p_KC)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_RLC_SeqNumDL_RB21 := 0 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_DL_CipherCfgRB ( tcv_CellIndInfo.dL_CipherMode , p_RbType ,notInc )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_UL_CipherCfg_RAB (ps_domain, cs_RB_ActTimeInfoList21 ( 0 ) ,notInc )
$Cref 
$VerdictId 
$Comment /* 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( p_RbType = cell_FACH_3_SCCPCH_3_FACH_2a_CTCH ) OR  
( p_RbType= cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1) OR
( p_RbType = cell_FACH_2SCCPCH_StandAlonePCH_PS_2a)OR  
(  p_RbType = cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2)]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_CRLC_SecurityConfig (tcv_CellIndInfo.start_PS, p_KC)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_RLC_SeqNumDL_RB20 := 0,   tcv_RLC_SeqNumDL_RB24 := 0)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_DL_CipherCfgRB (  tcv_CellIndInfo.dL_CipherMode , p_RbType ,notInc )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_UL_CipherCfg_RAB (ps_domain,cs_RB_ActTimeInfoList20_24 ( 0, 0 ),notInc )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE ]
$Cref 
$VerdictId 
$Comment /* for RLC do nothing */
$End_BehaviourLine
$Header lt_CRLC_SecurityConfig (  p_Hfn_LT: HyperFrameNumber ; p_KC_LT: KeyCiphering )
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_SecurityMode_Config_REQ
$Cref ca_CRLC_SecurityModeCfgReq ( tsc_CellDedicated , tcv_CellIndInfo.recentSecureDomain,  p_Hfn_LT , p_KC_LT, OMIT, OMIT )
$VerdictId 
$Comment /* Download security keys for  RLC. 
CRLC is configured with cellId -1 ( tsc_CellDedicated )  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_SecurityMode_Config_CNF
$Cref ca_CRLC_SecurityModeCfgCnf ( tsc_CellDedicated )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$End_TestStepGroup
$TestStepGroup
$TestStepGroupId BasicM_Security_Steps
$Begin_TestStep
$TestStepId ts_CRLC_GetRLC_SeqNumSecurity ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* To assign the variables  to the current RLC sequnce number of its corresponding SRB and RAB if configured. */
$DefaultsRef SS_Def_Special
$Comment /*  */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ! CRLC_SequenceNumber_REQ
$Cref cas_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CRLC ? CRLC_SequenceNumber_CNF 
( tcv_RLC_SeqNumDL_RB1 := CRLC_SequenceNumber_CNF.count_C_LSB_DL )
$Cref car_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CRLC ! CRLC_SequenceNumber_REQ
$Cref cas_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB2 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CRLC ? CRLC_SequenceNumber_CNF 
( tcv_RLC_SeqNumDL_RB2 := CRLC_SequenceNumber_CNF.count_C_LSB_DL )
$Cref car_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB2 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CRLC ! CRLC_SequenceNumber_REQ
$Cref cas_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB3 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CRLC ? CRLC_SequenceNumber_CNF 
( tcv_RLC_SeqNumDL_RB3 := CRLC_SequenceNumber_CNF.count_C_LSB_DL )
$Cref car_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB3 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CRLC ! CRLC_SequenceNumber_REQ
$Cref cas_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB4 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CRLC ? CRLC_SequenceNumber_CNF 
( tcv_RLC_SeqNumDL_RB4 := CRLC_SequenceNumber_CNF.count_C_LSB_DL )
$Cref car_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB4 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] [( ( tcv_TmpCellInfo.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR 
( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_RAB ) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_PS ) OR 
(( tcv_TmpCellInfo.cellConfig = cell_Two_DTCH_CS_PS ) ) OR 
( (tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_CS_PS)  ) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_PS ) OR  
(tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1 ) OR  
(tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2 )OR 
 (tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH )OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_3_FACH_2a_CTCH) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_2a)) AND( tcv_CellIndInfo. recentSecureDomain =ps_domain)]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CRLC ! CRLC_SequenceNumber_REQ
$Cref cas_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB20 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] CRLC ? CRLC_SequenceNumber_CNF 
( tcv_RLC_SeqNumDL_RB20 := CRLC_SequenceNumber_CNF.count_C_LSB_DL )
$Cref car_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB20 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] [( tcv_TmpCellInfo.cellConfig = cell_PDCP_UM_RAB)AND( tcv_CellIndInfo. recentSecureDomain =ps_domain) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CRLC ! CRLC_SequenceNumber_REQ
$Cref cas_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB21 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] CRLC ? CRLC_SequenceNumber_CNF 
( tcv_RLC_SeqNumDL_RB21 := CRLC_SequenceNumber_CNF.count_C_LSB_DL )
$Cref car_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB21 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] [ ( tcv_TmpCellInfo.cellConfig =  cell_DCH_2AM_PS) AND( tcv_CellIndInfo. recentSecureDomain =ps_domain) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CRLC ! CRLC_SequenceNumber_REQ
$Cref cas_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB20 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] CRLC ? CRLC_SequenceNumber_CNF 
( tcv_RLC_SeqNumDL_RB20 := CRLC_SequenceNumber_CNF.count_C_LSB_DL )
$Cref car_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB20 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CRLC ! CRLC_SequenceNumber_REQ
$Cref cas_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB22 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] CRLC ? CRLC_SequenceNumber_CNF 
( tcv_RLC_SeqNumDL_RB22 := CRLC_SequenceNumber_CNF.count_C_LSB_DL )
$Cref car_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB22 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] [ (  tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_UM_RAB )AND( tcv_CellIndInfo. recentSecureDomain =ps_domain) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CRLC ! CRLC_SequenceNumber_REQ
$Cref cas_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB20 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] CRLC ? CRLC_SequenceNumber_CNF 
( tcv_RLC_SeqNumDL_RB20 := CRLC_SequenceNumber_CNF.count_C_LSB_DL )
$Cref car_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB20 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CRLC ! CRLC_SequenceNumber_REQ
$Cref cas_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB21 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] CRLC ? CRLC_SequenceNumber_CNF 
( tcv_RLC_SeqNumDL_RB21 := CRLC_SequenceNumber_CNF.count_C_LSB_DL )
$Cref car_GetRLC_SeqNum ( tsc_CellDedicated, tsc_RB21 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] [ TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_InitSystemSpecificCap
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* If UE supports GSM, this step initialises tcv_UE_SystemSpecificCap based on PICS */
$DefaultsRef RRC_Def1
$Comment /*  */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ pc_UMTS_GSM]
$Cref 
$VerdictId 
$Comment /* IF GSM is supported */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_UE_SystemSpecificCap := 0)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_A57
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +lt_A56
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +lt_A55
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +lt_A54
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +lt_A53
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +lt_A52
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +lt_A51
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE ]
$Cref 
$VerdictId 
$Comment /* IF GSM not Supported */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_UE_SystemSpecificCap := 0)
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_A57
$BehaviourLine
$LabelId 
$Line [0] [ pc_MS_ClsmkA5_7='1'B]
$Cref 
$VerdictId 
$Comment /* A5_7 Supported */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_UE_SystemSpecificCap := tcv_UE_SystemSpecificCap+64)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_A56
$BehaviourLine
$LabelId 
$Line [0] [ pc_MS_ClsmkA5_6='1'B]
$Cref 
$VerdictId 
$Comment /* A5_6 Supported */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_UE_SystemSpecificCap := tcv_UE_SystemSpecificCap+32)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_A55
$BehaviourLine
$LabelId 
$Line [0] [ pc_MS_ClsmkA5_5='1'B]
$Cref 
$VerdictId 
$Comment /* A5_5 Supported */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_UE_SystemSpecificCap := tcv_UE_SystemSpecificCap+16)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_A54
$BehaviourLine
$LabelId 
$Line [0] [ pc_MS_ClsmkA5_4='1'B]
$Cref 
$VerdictId 
$Comment /* A5_4 Supported */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_UE_SystemSpecificCap := tcv_UE_SystemSpecificCap+8)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_A53
$BehaviourLine
$LabelId 
$Line [0] [ pc_MS_ClsmkA5_3='1'B]
$Cref 
$VerdictId 
$Comment /* A5_3 Supported */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_UE_SystemSpecificCap := tcv_UE_SystemSpecificCap+4)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_A52
$BehaviourLine
$LabelId 
$Line [0] [ pc_MS_ClsmkA5_2='1'B]
$Cref 
$VerdictId 
$Comment /* A5_2 Supported */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_UE_SystemSpecificCap := tcv_UE_SystemSpecificCap+2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_A51
$BehaviourLine
$LabelId 
$Line [0] [ pc_MS_ClsmkA5_1='0'B]
$Cref 
$VerdictId 
$Comment /* A5_1 Supported */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_UE_SystemSpecificCap := tcv_UE_SystemSpecificCap+1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CMAC_DownloadSecurityKey ( 
p_KC : KeyCiphering;  
p_IK :  IntegrityKey; 
p_GSM_ck : GSM_CipheringKey;  
p_CN_Domain : CN_DomainIdentity; 
p_HFN : B20  
)
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* To download all security keys to CMAC. 
Only the keys/Parameters to be downloaded will be passed as parameters, rest will be omitted depending on the PICS. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CMAC ! CMAC_SecurityMode_Config_REQ
$Cref ca_CMAC_SecurityModeCfgReq ( tsc_CellDedicated , p_CN_Domain, p_HFN , p_KC, p_IK,  p_GSM_ck )
$VerdictId 
$Comment /* Download security keys for MAC */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CMAC ? CMAC_SecurityMode_Config_CNF
$Cref ca_CMAC_SecurityModeCfgCnf ( tsc_CellDedicated )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CMAC_DL_CipherCfg ( p_CipherMode: CipheringModeCommand; p_ActTime: INTEGER; p_IncrDcr : Increment_Mode )
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* Configure ciphering on the MAC layer for DL RBs. 
This step shal be called when required. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CMAC ! CMAC_Ciphering_Activate_REQ
$Cref ca_CMAC_DL_CipherActReq ( tsc_CellDedicated,  tsc_DL_DPCH1, p_CipherMode,  p_ActTime, p_IncrDcr )
$VerdictId 
$Comment /* start, restart or stop ciphering for TM RB */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CMAC ? CMAC_Ciphering_Activate_CNF
$Cref ca_CMAC_CipherActCnf(tsc_CellDedicated,  tsc_DL_DPCH1)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CMAC_UL_CipherCfg ( p_CipherMode: CipheringModeCommand; p_ActTime: INTEGER;  p_IncrDcr : Increment_Mode  )
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* Configure ciphering on the MAC layer for UL RBs. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CMAC ! CMAC_Ciphering_Activate_REQ
$Cref ca_CMAC_UL_CipherActReq (  tsc_CellDedicated, tsc_UL_DPCH1,  p_CipherMode, p_ActTime , p_IncrDcr )
$VerdictId 
$Comment /* start, restart or stop ciphering */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CMAC ? CMAC_Ciphering_Activate_CNF
$Cref ca_CMAC_CipherActCnf (  tsc_CellDedicated, tsc_UL_DPCH1 )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CRLC_DL_CipherCfgRB (  p_CipherMode: CipheringModeCommand; p_RbType : RB_ConfigType  ;p_IncMode : RLC_IncMode)
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* Configure ciphering for RLC layer for configured AM/UM RAB's */
$DefaultsRef SS_Def
$Comment /* CRLC is configured with cellId -1 ( tsc_CellDedicated )  */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ ( p_RbType = cell_DCH_64kPS_RAB_SRB ) OR 
  
( p_RbType = cell_FACH_PS ) OR 
( p_RbType = cell_Two_DTCH_CS_PS ) OR 
( p_RbType = cell_Four_DTCH_CS_PS ) OR  
( p_RbType = cell_PDCP_AM_RAB )OR  
( p_RbType = cell_PDCP_UM_RAB )OR  
( p_RbType= cell_FACH_3_SCCPCH_4_FACH_Cnfg1) OR  
(  p_RbType = cell_FACH_3_SCCPCH_4_FACH_Cnfg2)OR  
( p_RbType = cell_FACH_3_SCCPCH_3_FACH_CTCH) OR
 ( p_RbType = cell_DCH_DSCH_PS)  OR
 ( p_RbType = cell_DCH_DSCH_CS_PS) OR
( p_RbType = cell_FACH_2SCCPCH_StandAlonePCH) OR
( p_RbType = cell_FACH_2SCCPCH_StandAlonePCH_PS)]
$Cref 
$VerdictId 
$Comment /* 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_RLC_Activate ( tsc_RB20,  tcv_RLC_SeqNumDL_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( p_RbType = cell_PDCP_UM_RAB) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_RLC_Activate ( tsc_RB21,  tcv_RLC_SeqNumDL_RB21 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( p_RbType = cell_PDCP_AM_UM_RAB)   ]
$Cref 
$VerdictId 
$Comment /* 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_RLC_Activate ( tsc_RB20,  tcv_RLC_SeqNumDL_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RLC_Activate ( tsc_RB21,  tcv_RLC_SeqNumDL_RB21 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [  ( p_RbType = cell_DCH_2AM_PS) OR ( p_RbType =    cell_DCH_2_PS_Call)  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_RLC_Activate ( tsc_RB20,  tcv_RLC_SeqNumDL_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RLC_Activate ( tsc_RB22,  tcv_RLC_SeqNumDL_RB22 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( p_RbType = cell_FACH_3_SCCPCH_3_FACH_2a_CTCH ) OR  
( p_RbType= cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1) OR
( p_RbType = cell_FACH_2SCCPCH_StandAlonePCH_PS_2a)OR  
(  p_RbType = cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2)]
$Cref 
$VerdictId 
$Comment /* 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_RLC_Activate ( tsc_RB20,  tcv_RLC_SeqNumDL_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RLC_Activate ( tsc_RB24,  tcv_RLC_SeqNumDL_RB24 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_RLC_Activate ( p_rbId : INTEGER ; p_SeqNum : RLC_SequenceNumber )
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Ciphering_Activate_REQ
$Cref ca_CRLC_DL_CipherActReq ( tsc_CellDedicated , ps_domain ,  p_rbId , p_CipherMode, p_SeqNum   , p_IncMode)
$VerdictId 
$Comment /* configure ciphering for signaling radio bearers 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_Ciphering_Activate_CNF
$Cref ca_CRLC_CipherActCnf(tsc_CellDedicated  )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CRLC_DL_CipherCfgSRB (p_CipherMode: CipheringModeCommand;p_IncMode : RLC_IncMode)
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* Configure ciphering for RLC layer for RB1, RB2,  RB3 and RB4 */
$DefaultsRef SS_Def
$Comment /* CRLC is configured with cellId -1 ( tsc_CellDedicated ) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + lt_RLC_Activate ( tsc_RB1, tcv_RLC_SeqNumDL_RB1 )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_RLC_Activate ( tsc_RB2 , tcv_RLC_SeqNumDL_RB2+2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RLC_Activate ( tsc_RB3 , tcv_RLC_SeqNumDL_RB3 )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_RLC_Activate ( tsc_RB4 ,  tcv_RLC_SeqNumDL_RB4)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$Header lt_RLC_Activate ( p_rb : INTEGER ; p_RLC_Seq : RLC_SequenceNumber )
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Ciphering_Activate_REQ
$Cref ca_CRLC_DL_CipherActReq ( tsc_CellDedicated ,tcv_CellIndInfo. recentSecureDomain,   p_rb, p_CipherMode, p_RLC_Seq,p_IncMode )
$VerdictId 
$Comment /* configure ciphering for signaling radio bearers 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_Ciphering_Activate_CNF
$Cref ca_CRLC_CipherActCnf(tsc_CellDedicated  )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CRLC_DL_Integrity (   p_IntegrityProtectionModeInfo : IntegrityProtectionModeInfo )
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* To start the integrity protection */
$DefaultsRef SS_Def
$Comment /* CRLC is configured with cellId -1 ( tsc_CellDedicated ) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Integrity_Activate_REQ
$Cref ca_CRLC_DL_IntegrityActivateReq ( tsc_CellDedicated , tcv_CellIndInfo. recentSecureDomain, p_IntegrityProtectionModeInfo )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ?CRLC_Integrity_Activate_CNF
$Cref ca_CRLC_IntegrityActivateCnf ( tsc_CellDedicated )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CRLC_UL_CipherCfg ( p_RB_ActivationTimeInfoList : RB_ActivationTimeInfoList ;p_IncMode : RLC_IncMode)
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* Configure ciphering for RLC layer */
$DefaultsRef SS_Def
$Comment /* CRLC is configured with cellId -1 ( tsc_CellDedicated ) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Ciphering_Activate_REQ
$Cref ca_CRLC_UL_CipherActReq ( tsc_CellDedicated ,  tcv_CellIndInfo. recentSecureDomain,  p_RB_ActivationTimeInfoList ,p_IncMode)
$VerdictId 
$Comment /* configure ciphering for signaling radio bearers 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_Ciphering_Activate_CNF
$Cref ca_CRLC_CipherActCnf(tsc_CellDedicated  )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CRLC_UL_CipherCfg_RAB ( p_CN_Domain : CN_DomainIdentity; p_RB_ActivationTimeInfoList : RB_ActivationTimeInfoList   ;p_IncMode : RLC_IncMode)
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* Configure ciphering for RLC layer */
$DefaultsRef SS_Def
$Comment /* CRLC is configured with cellId -1 ( tsc_CellDedicated ) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Ciphering_Activate_REQ
$Cref ca_CRLC_UL_CipherActReq ( tsc_CellDedicated , p_CN_Domain,    p_RB_ActivationTimeInfoList ,p_IncMode )
$VerdictId 
$Comment /* configure ciphering for signaling radio bearers 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_Ciphering_Activate_CNF
$Cref ca_CRLC_CipherActCnf(tsc_CellDedicated  )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CRLC_UL_Integrity ( p_IntegrityProtActivationInfo : IntegrityProtActivationInfo )
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* To start the integrity protection */
$DefaultsRef SS_Def
$Comment /* CRLC is configured with cellId -1 ( tsc_CellDedicated ) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Integrity_Activate_REQ
$Cref ca_CRLC_UL_IntegrityActivateReq ( tsc_CellDedicated , tcv_CellIndInfo. recentSecureDomain, c_RestRB_IntegrityProtActivationInfoList(p_IntegrityProtActivationInfo.rrc_MessageSequenceNumberList.[0], p_IntegrityProtActivationInfo.rrc_MessageSequenceNumberList.[1], p_IntegrityProtActivationInfo.rrc_MessageSequenceNumberList.[3], p_IntegrityProtActivationInfo.rrc_MessageSequenceNumberList.[4]))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ?CRLC_Integrity_Activate_CNF
$Cref ca_CRLC_IntegrityActivateCnf (tsc_CellDedicated )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_RRC_Security ( 
p_CellId : INTEGER;   
p_KC : KeyCiphering;  
p_IK :  IntegrityKey; 
p_GSM_ck : GSM_CipheringKey;  
p_NewKey : BOOLEAN; 
p_CN_Domain : CN_DomainIdentity )
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* Configure and Activate (or deactivate) ciphering for all concerned RBs */
$DefaultsRef RRC_Def1
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_RRC_InitVariables
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SS_DownloadSecurityKey ( p_CellId, p_KC, p_IK, p_GSM_ck, p_CN_Domain )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_ActivateSecurity_DL_SS
$Cref 
$VerdictId 
$Comment /* To Start Integrity on the UL RB2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +lt_RB2_UL_IntegrityActivate
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + lt_StartSecurity_UE
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] [( ( tcv_CellIndInfo.ps_cipheringStarted = TRUE) AND ( tcv_CellIndInfo. recentSecureDomain = ps_domain) ) OR (( tcv_CellIndInfo.cs_cipheringStarted = TRUE) AND( tcv_CellIndInfo. recentSecureDomain = cs_domain))]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CRLC_ResumeSecurity ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] [ TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_RB2_UL_IntegrityActivate
$BehaviourLine
$LabelId 
$Line [0] [ tcv_Int_ModifyFlag ]
$Cref 
$VerdictId 
$Comment /* If Start of Integrity Set DL RRC_MSN to 0, else skipt it. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_RB2_UL_IntegrityActivate(tcv_RRC_MSN_RB2_UL)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [NOT  tcv_Int_ModifyFlag ]
$Cref 
$VerdictId 
$Comment /* If Start of Integrity Set DL RRC_MSN to 0, else skipt it. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_RB2_UL_IntegrityActivate(0)
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_ActivateSecurity_DL_SS
$BehaviourLine
$LabelId 
$Line [0] + lt_InitialiseRRC_MSN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_DL_Integrity  (  tcv_CellIndInfo.dL_Integrity )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [( ( tcv_CellIndInfo.ps_cipheringStarted = TRUE) AND ( tcv_CellIndInfo. recentSecureDomain =ps_domain) ) OR (( tcv_CellIndInfo.cs_cipheringStarted = TRUE) AND( tcv_CellIndInfo. recentSecureDomain =cs_domain))]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_GetRLC_SeqNumSecurity ( p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_AssignRB_ActivationTimeInfoList
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_SuspendSecurity ( p_CellId )
$Cref 
$VerdictId 
$Comment /* Suspend SRBs 1, 3 and 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_DL_CipherCfgSRB ( tcv_CellIndInfo.dL_CipherMode,notInc)
$Cref 
$VerdictId 
$Comment /* Configure ciphering for RLC (RBs 1, 2, 3 and 4) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CRLC_DL_CipherCfgRB (  tcv_CellIndInfo.dL_CipherMode, tcv_TmpCellInfo.cellConfig,notInc)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CMAC_CipherCfg ( p_CellId ,TRUE , tcv_CellIndInfo.dL_CipherMode  ,incPerCFN_Cycle)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ TRUE ]
$Cref 
$VerdictId 
$Comment /* If no New Ciphering config */
$End_BehaviourLine
$Header lt_InitialiseRRC_MSN
$BehaviourLine
$LabelId 
$Line [0] [ NOT  tcv_Int_ModifyFlag ]
$Cref 
$VerdictId 
$Comment /* If Start of Integrity Set DL RRC_MSN to 0, else skipt it. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SetDL_RRC_MessageSN ( p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [  tcv_Int_ModifyFlag ]
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_StartSecurity_UE
$BehaviourLine
$LabelId 
$Line [0] + lt_SendSecurityModeCommand
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ px_CipheringOnOff  ]
$Cref 
$VerdictId 
$Comment /* Ciphering and Integrity */
$End_BehaviourLine
$BehaviourLine
$LabelId TSP1
$Line [2] AM?RLC_AM_DATA_IND 
( tcv_CellIndInfo.uL_Integrity := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.securityModeComplete.ul_IntegProtActivationInfo,  
tcv_CellIndInfo.uL_CipherMode := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.securityModeComplete.rb_UL_CiphActivationTimeInfo)
$Cref car_RRC_SecModeCmpl ( 
tsc_CellDedicated,  tsc_RB2,  
cbr_108_RRC_SecModeCmpl ( 
     tcv_RRC_Ti , ?) 
)
$VerdictId (P)
$Comment /* UL ciphering information is present */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_UL_CipherCfg ( tcv_CellIndInfo.uL_CipherMode ,notInc )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_UL_Integrity (  tcv_CellIndInfo.uL_Integrity )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSF1
$Line [2] AM?RLC_AM_DATA_IND
$Cref car_RRC_SecModeFail (  
tsc_CellDedicated,  
tsc_RB2,  
cr_108_SecModeFail ( tcv_RRC_Ti, ? ))
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT ( px_CipheringOnOff ) ]
$Cref 
$VerdictId 
$Comment /* Integrity only no ciphering */
$End_BehaviourLine
$BehaviourLine
$LabelId TSP2
$Line [2] AM?RLC_AM_DATA_IND 
( tcv_CellIndInfo.uL_Integrity := RLC_AM_DATA_IND.aM_message.uL_DCCH_Message.message.securityModeComplete.ul_IntegProtActivationInfo 
)
$Cref car_RRC_SecModeCmpl ( 
tsc_CellDedicated,  tsc_RB2,  
cbr_108_RRC_SecModeCmpl ( 
     tcv_RRC_Ti , OMIT) 
)
$VerdictId (P)
$Comment /* No UL Ciphering information */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_UL_Integrity ( tcv_CellIndInfo.uL_Integrity )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSF2
$Line [2] AM?RLC_AM_DATA_IND
$Cref car_RRC_SecModeFail (  
tsc_CellDedicated,  
tsc_RB2,  
cr_108_SecModeFail ( tcv_RRC_Ti, ? ) )
$VerdictId (F)
$End_BehaviourLine
$Header lt_SendSecurityModeCommand
$BehaviourLine
$LabelId 
$Line [0] [ pc_UMTS_GSM]
$Cref 
$VerdictId 
$Comment /*  Branching if GSM Supported */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ px_CipheringOnOff  ]
$Cref 
$VerdictId 
$Comment /* Ciphering ON and integrity ON */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [( (  tcv_TmpCellInfo.cellConfig = cell_DCH_Speech) OR (   tcv_TmpCellInfo.cellConfig =cell_DCH_64kCS_RAB_SRB) OR (   tcv_TmpCellInfo.cellConfig =  cell_DCH_57_6kCS_RAB_SRB) OR (  tcv_TmpCellInfo.cellConfig =  cell_Two_DTCH ) OR (  tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_CS) OR (  ( tcv_TmpCellInfo.cellConfig =cell_Two_DTCH_PS_CS) AND (tcv_CellIndInfo. recentSecureDomain =cs_domain) ) OR (   tcv_TmpCellInfo.cellConfig =cell_Four_DTCH_PS_CS  ) OR(   tcv_TmpCellInfo.cellConfig =cell_Two_DTCH_CS_PS ) OR (   tcv_TmpCellInfo.cellConfig =cell_Four_DTCH_CS_PS  ) OR (  tcv_TmpCellInfo.cellConfig =cell_DCH_DSCH_CS_PS  )) AND ( tcv_CellIndInfo. recentSecureDomain =cs_domain) ]
$Cref 
$VerdictId 
$Comment /* Ciphering on TM  RAB present, hence include Ciphering activation time */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] AM!RLC_AM_DATA_REQ
$Cref cas_RRC_SecModeCmd ( 
tsc_CellDedicated,  
tsc_RB2,  
cs_108_RRC_SecModeCmd ( tcv_CellIndInfo.dl_IntegrityCheckInfo, 
 cs_RRC_SecModeCmdCiphInt (  
tcv_RRC_Ti, tcv_CellIndInfo.dL_CipherMode,   
tcv_RB_ActivationTimeInfoList , 
tcv_CipherActTime, p_CN_Domain, tcv_CellIndInfo.dL_Integrity, 
tcv_CellIndInfo.cipheringAlgorithmCapability, cs_UE_SysSpecCap (INT_TO_BIT (tcv_UE_SystemSpecificCap,7)) 
) ) )
$VerdictId 
$Comment /* Ciphering for signalling RBs 1 to 4  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] AM!RLC_AM_DATA_REQ
$Cref cas_RRC_SecModeCmd ( 
tsc_CellDedicated,  
tsc_RB2,  
cs_108_RRC_SecModeCmd ( tcv_CellIndInfo.dl_IntegrityCheckInfo, 
 cs_RRC_SecModeCmdCiphInt (  
tcv_RRC_Ti, tcv_CellIndInfo.dL_CipherMode,   
tcv_RB_ActivationTimeInfoList , 
OMIT, p_CN_Domain, tcv_CellIndInfo.dL_Integrity, 
tcv_CellIndInfo.cipheringAlgorithmCapability,cs_UE_SysSpecCap (INT_TO_BIT (tcv_UE_SystemSpecificCap,7)) 
) ) )
$VerdictId 
$Comment /* Ciphering for signalling RBs 1 to 4  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT ( px_CipheringOnOff )  ]
$Cref 
$VerdictId 
$Comment /* Integrity ON and  ciphering OFF */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] AM!RLC_AM_DATA_REQ
$Cref cas_RRC_SecModeCmd ( 
tsc_CellDedicated,  
tsc_RB2,  
cs_108_RRC_SecModeCmd (  
 tcv_CellIndInfo.dl_IntegrityCheckInfo, 
 cs_RRC_SecModeCmdInt ( 
   tcv_RRC_Ti,  
   p_CN_Domain, 
   tcv_CellIndInfo.dL_Integrity,   tcv_CellIndInfo.cipheringAlgorithmCapability, cs_UE_SysSpecCap (INT_TO_BIT (tcv_UE_SystemSpecificCap,7)) 
) ) )
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [NOT pc_UMTS_GSM]
$Cref 
$VerdictId 
$Comment /*  Branching if GSM Not Supported */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ px_CipheringOnOff  ]
$Cref 
$VerdictId 
$Comment /* Ciphering ON and integrity ON */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [( (  tcv_TmpCellInfo.cellConfig = cell_DCH_Speech) OR (   tcv_TmpCellInfo.cellConfig =cell_DCH_64kCS_RAB_SRB) OR (   tcv_TmpCellInfo.cellConfig =  cell_DCH_57_6kCS_RAB_SRB) OR (  tcv_TmpCellInfo.cellConfig =  cell_Two_DTCH ) OR (  tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_CS) OR (  ( tcv_TmpCellInfo.cellConfig =cell_Two_DTCH_PS_CS) AND (tcv_CellIndInfo. recentSecureDomain =cs_domain) ) OR (   tcv_TmpCellInfo.cellConfig =cell_Four_DTCH_PS_CS  ) OR(   tcv_TmpCellInfo.cellConfig =cell_Two_DTCH_CS_PS ) OR (   tcv_TmpCellInfo.cellConfig =cell_Four_DTCH_CS_PS  ) OR (  tcv_TmpCellInfo.cellConfig =cell_DCH_DSCH_CS_PS  )) AND ( tcv_CellIndInfo. recentSecureDomain =cs_domain) ]
$Cref 
$VerdictId 
$Comment /* Ciphering on TM  RAB present, hence include Ciphering activation time */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] AM!RLC_AM_DATA_REQ
$Cref cas_RRC_SecModeCmd ( 
tsc_CellDedicated,  
tsc_RB2,  
cs_108_RRC_SecModeCmd ( tcv_CellIndInfo.dl_IntegrityCheckInfo, 
 cs_RRC_SecModeCmdCiphInt (  
tcv_RRC_Ti, tcv_CellIndInfo.dL_CipherMode,   
tcv_RB_ActivationTimeInfoList , 
tcv_CipherActTime, p_CN_Domain, tcv_CellIndInfo.dL_Integrity, 
tcv_CellIndInfo.cipheringAlgorithmCapability,OMIT 
) ) )
$VerdictId 
$Comment /* Ciphering for signalling RBs 1 to 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] AM!RLC_AM_DATA_REQ
$Cref cas_RRC_SecModeCmd ( 
tsc_CellDedicated,  
tsc_RB2,  
cs_108_RRC_SecModeCmd ( tcv_CellIndInfo.dl_IntegrityCheckInfo, 
 cs_RRC_SecModeCmdCiphInt (  
tcv_RRC_Ti, tcv_CellIndInfo.dL_CipherMode,   
tcv_RB_ActivationTimeInfoList , 
OMIT, p_CN_Domain, tcv_CellIndInfo.dL_Integrity, 
tcv_CellIndInfo.cipheringAlgorithmCapability,OMIT 
) ) )
$VerdictId 
$Comment /* Ciphering for signalling RBs 1 to 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT ( px_CipheringOnOff )  ]
$Cref 
$VerdictId 
$Comment /* Integrity ON and  ciphering OFF */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] AM!RLC_AM_DATA_REQ
$Cref cas_RRC_SecModeCmd ( 
tsc_CellDedicated,  
tsc_RB2,  
cs_108_RRC_SecModeCmd (  
 tcv_CellIndInfo.dl_IntegrityCheckInfo, 
 cs_RRC_SecModeCmdInt ( 
   tcv_RRC_Ti,  
   p_CN_Domain, 
   tcv_CellIndInfo.dL_Integrity, 
   tcv_CellIndInfo.cipheringAlgorithmCapability,OMIT 
  ) 
 ) 
)
$VerdictId 
$End_BehaviourLine
$Header lt_RRC_InitVariables
$BehaviourLine
$LabelId 
$Line [0] + lt_InitCipherMode
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + lt_InitIntegrity
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_InitSystemSpecificCap
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SaveCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] [p_NewKey = TRUE]
$Cref 
$VerdictId 
$Comment /* Authentication was done, reset HFN */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] (tcv_HFN := '00000000000000000000'B)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] [ p_CN_Domain = cs_domain]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] (  tcv_CellIndInfo.start_CS  := '00000000000000000000'B )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] [ p_CN_Domain = ps_domain]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] ( tcv_CellIndInfo.start_PS := '00000000000000000000'B )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] [p_NewKey = FALSE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] [ p_CN_Domain = cs_domain]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] ( tcv_HFN :=  tcv_CellIndInfo.start_CS )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] [ p_CN_Domain = ps_domain]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] ( tcv_HFN :=  tcv_CellIndInfo.start_PS )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_InitCipherMode
$BehaviourLine
$LabelId 
$Line [0] [ px_CipheringOnOff = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ pc_UEA1_Supp ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellIndInfo.dL_CipherMode := cs_CipheringModeCmdOn ( uea1 ),  
tcv_CellIndInfo.cipheringAlgorithmCapability := '0000000000000011'B )
$Cref 
$VerdictId 
$Comment /* Swithch On ciphering */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ p_CN_Domain = cs_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] ( tcv_CellIndInfo.cs_cipheringStarted := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [p_CN_Domain = ps_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] ( tcv_CellIndInfo.ps_cipheringStarted := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT ( pc_UEA1_Supp ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellIndInfo.dL_CipherMode := cs_CipheringModeCmdOn ( uea0 ),  
tcv_CellIndInfo.cipheringAlgorithmCapability := '0000000000000001'B )
$Cref 
$VerdictId 
$Comment /* Swithch On ciphering */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ p_CN_Domain = cs_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] ( tcv_CellIndInfo.cs_cipheringStarted := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ p_CN_Domain = ps_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] ( tcv_CellIndInfo.ps_cipheringStarted := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ NOT ( px_CipheringOnOff ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_CellIndInfo.cs_cipheringStarted := FALSE ,  tcv_CellIndInfo.ps_cipheringStarted := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ pc_UEA1_Supp ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_CellIndInfo.cipheringAlgorithmCapability := '0000000000000011'B )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ NOT ( pc_UEA1_Supp ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_CellIndInfo.cipheringAlgorithmCapability := '0000000000000001'B )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_InitIntegrity
$BehaviourLine
$LabelId 
$Line [0] (tcv_CellIndInfo.recentSecureDomain:= p_CN_Domain)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_GetRRC_MessageSN (p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_CellIndInfo.dL_Integrity := cs_IntegrityProtectModify_P( tcv_RRC_MSN_RB0 , tcv_RRC_MSN_RB1 , tcv_RRC_MSN_RB2, tcv_RRC_MSN_RB3, tcv_RRC_MSN_RB4) , tcv_Int_ModifyFlag := TRUE)
$Cref 
$VerdictId 
$Comment /* Modify integrity */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellIndInfo.dL_Integrity := cs_IntegrityProtectStart (  px_FRESH ), tcv_CellIndInfo.integrityStarted := TRUE,  
tcv_CellIndInfo.dl_IntegrityCheckInfo := cs_IntegrityCheckInfo0, tcv_Int_ModifyFlag := FALSE)
$Cref 
$VerdictId 
$Comment /* Start integrity */
$End_BehaviourLine
$Header lt_AssignRB_ActivationTimeInfoList
$BehaviourLine
$LabelId 
$Line [0] [ ( ( tcv_TmpCellInfo.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR 
( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_RAB ) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_PS ) OR 
( tcv_TmpCellInfo.cellConfig = cell_Two_DTCH_CS_PS ) OR 
( tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_CS_PS ) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_PS )  OR  
 (tcv_TmpCellInfo.cellConfig = cell_DCH_DSCH_PS ) OR  
 (tcv_TmpCellInfo.cellConfig = cell_DCH_DSCH_CS_PS )  )  
AND (p_CN_Domain = ps_domain ) ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_RB_ActivationTimeInfoList := cs_RB_ActTimeInfoListSRBs_20 (tcv_RLC_SeqNumDL_RB1, tcv_RLC_SeqNumDL_RB2+2, tcv_RLC_SeqNumDL_RB3, tcv_RLC_SeqNumDL_RB4,  tcv_RLC_SeqNumDL_RB20 ) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ (  tcv_TmpCellInfo.cellConfig = cell_PDCP_UM_RAB ) AND (p_CN_Domain = ps_domain ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_RB_ActivationTimeInfoList := cs_RB_ActTimeInfoListSRBs_21 (tcv_RLC_SeqNumDL_RB1, tcv_RLC_SeqNumDL_RB2+2, tcv_RLC_SeqNumDL_RB3, tcv_RLC_SeqNumDL_RB4,  tcv_RLC_SeqNumDL_RB21 ) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_UM_RAB ) AND (p_CN_Domain = ps_domain ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_RB_ActivationTimeInfoList := cs_RB_ActTimeInfoListSRBs_20_21 (tcv_RLC_SeqNumDL_RB1, tcv_RLC_SeqNumDL_RB2+2, tcv_RLC_SeqNumDL_RB3, tcv_RLC_SeqNumDL_RB4,  tcv_RLC_SeqNumDL_RB20,  tcv_RLC_SeqNumDL_RB21 ))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( (tcv_TmpCellInfo.cellConfig = cell_DCH_2AM_PS ) OR  ( tcv_TmpCellInfo.cellConfig = cell_DCH_2_PS_Call ))AND (p_CN_Domain = ps_domain ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_RB_ActivationTimeInfoList := cs_RB_ActTimeInfoListSRBs_20_22 (tcv_RLC_SeqNumDL_RB1, tcv_RLC_SeqNumDL_RB2+2, tcv_RLC_SeqNumDL_RB3, tcv_RLC_SeqNumDL_RB4,  tcv_RLC_SeqNumDL_RB20,  tcv_RLC_SeqNumDL_RB22 ))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_RB_ActivationTimeInfoList := cs_RB_ActTimeInfoListSRBs (tcv_RLC_SeqNumDL_RB1 , tcv_RLC_SeqNumDL_RB2 +2, tcv_RLC_SeqNumDL_RB3 , tcv_RLC_SeqNumDL_RB4  ) )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. this step is necessary if ( ciphering is tested and shall be switch on) OR (ciphering is tested and shall be switch off and was previously switched on) OR integrity is tested */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_ResetSecurityKey
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* To download all security keys to CMAC (for DCH cell configurations only) and CRLC. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] ( tcv_CellIndInfo:=c_CellIndInfoDef )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ pc_UEA1_Supp ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellIndInfo.cipheringAlgorithmCapability := '0000000000000011'B )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT (pc_UEA1_Supp) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellIndInfo.cipheringAlgorithmCapability := '0000000000000001'B )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_DownloadSecurityKey ( p_CellId : INTEGER; p_KC : KeyCiphering; p_IK :  IntegrityKey;p_GSM_ck : GSM_CipheringKey; p_CN_Domain : CN_DomainIdentity )
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* To download all security keys to CMAC (for DCH cell configurations only) and CRLC. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ px_CipheringOnOff  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ ( tcv_TmpCellInfo.cellConfig =  cell_FACH_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_NoDedicated ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_PS ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_BMC ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_BMC_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_PRACH_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_PRACH ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_SCCPCH_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_SCCPCH  ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_PS )OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1_NoConn) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2_NoConn) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH_NoConn)OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH)OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_3_FACH_2a_CTCH) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_2a)OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2)]
$Cref 
$VerdictId 
$Comment /* Cell FACH
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_DownloadKeyCRLC ( tcv_HFN, p_KC, p_IK )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_AM_RAB_15Lis ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_AM_RAB_7Lis ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_UM_RAB_15Lis ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_UM_RAB_7Lis ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_RAB ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_PDCP_UM_RAB ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_UM_RAB ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB_NoConn ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_DCH_2AM_PS ) OR   
  ( tcv_TmpCellInfo.cellConfig =   cell_DCH_2_PS_Call ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_Two_DTCH_CS_PS_Init)  OR  
  ( tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_CS_PS_Init) ]
$Cref 
$VerdictId 
$Comment /* Cell DCH no TM RAB
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_DownloadKeyCRLC ( tcv_HFN, p_KC,p_IK  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_Speech ) OR  
( tcv_TmpCellInfo.cellConfig = cell_DCH_64kCS_RAB_SRB ) OR  
( tcv_TmpCellInfo.cellConfig = cell_DCH_57_6kCS_RAB_SRB)
OR  
( tcv_TmpCellInfo.cellConfig =cell_Two_DTCH_PS_CS_Init) OR  
( tcv_TmpCellInfo.cellConfig =cell_Four_DTCH_PS_CS_Init) OR  
( tcv_TmpCellInfo.cellConfig = cell_Two_DTCH_PS_CS) OR  
( tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_PS_CS ) ]
$Cref 
$VerdictId 
$Comment /* cell DCH with TM RAB
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_DownloadKeyCRLC ( tcv_HFN,p_KC,p_IK  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +  lt_DownloadKeyCMAC ( tcv_HFN, p_KC )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT px_CipheringOnOff  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ ( tcv_TmpCellInfo.cellConfig =  cell_FACH_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_NoDedicated ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_PS ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_BMC ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_BMC_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_PRACH_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_PRACH ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_SCCPCH_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_SCCPCH  ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_PS ) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1_NoConn) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2_NoConn) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH_NoConn)OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH)OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_3_FACH_2a_CTCH) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_2SCCPCH_StandAlonePCH_2a)OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1) OR
(tcv_TmpCellInfo.cellConfig =  cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2)]
$Cref 
$VerdictId 
$Comment /* Cell FACH
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_DownloadKeyCRLC ( tcv_HFN,OMIT,p_IK )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_AM_RAB_15Lis ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_AM_RAB_7Lis ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_UM_RAB_15Lis ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_UM_RAB_7Lis ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_RAB ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_PDCP_UM_RAB ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_UM_RAB ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB_NoConn ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_DCH_2AM_PS )OR   
  ( tcv_TmpCellInfo.cellConfig =   cell_DCH_2_PS_Call ) OR  
  ( tcv_TmpCellInfo.cellConfig = cell_Two_DTCH_CS_PS_Init)  OR  
  ( tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_CS_PS_Init) ]
$Cref 
$VerdictId 
$Comment /* Cell DCH no TM RAB
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_DownloadKeyCRLC ( tcv_HFN ,OMIT, p_IK  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_Speech ) OR  
( tcv_TmpCellInfo.cellConfig = cell_DCH_64kCS_RAB_SRB ) OR  
( tcv_TmpCellInfo.cellConfig = cell_DCH_57_6kCS_RAB_SRB) ]
$Cref 
$VerdictId 
$Comment /* cell DCH with TM RAB */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_DownloadKeyCRLC ( tcv_HFN,OMIT, p_IK  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [TRUE]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$Header lt_DownloadKeyCMAC ( p_HFN : B20; p_KC_LT : KeyCiphering  )
$BehaviourLine
$LabelId 
$Line [0] CMAC ! CMAC_SecurityMode_Config_REQ
$Cref ca_CMAC_SecurityModeCfgReq ( tsc_CellDedicated , p_CN_Domain, p_HFN , p_KC_LT, OMIT,  OMIT )
$VerdictId 
$Comment /* Download security keys for MAC */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CMAC ? CMAC_SecurityMode_Config_CNF
$Cref ca_CMAC_SecurityModeCfgCnf ( tsc_CellDedicated )
$VerdictId 
$End_BehaviourLine
$Header lt_DownloadKeyCRLC ( p_HFN : B20; p_KC_LT : KeyCiphering;  
p_IK_LT :  IntegrityKey  )
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_SecurityMode_Config_REQ
$Cref ca_CRLC_SecurityModeCfgReq ( tsc_CellDedicated , p_CN_Domain,  p_HFN , p_KC_LT, p_IK_LT, OMIT )
$VerdictId 
$Comment /* Download security keys for  RLC. 
CRLC is configured with cellId -1 ( tsc_CellDedicated ) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_SecurityMode_Config_CNF
$Cref ca_CRLC_SecurityModeCfgCnf ( tsc_CellDedicated )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_SecurityDownloadStart ( p_domain : CN_DomainIdentity ;  p_StartValue : B20  )
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* To download a new START value In the cell Independent Record */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [  p_domain = cs_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_CellIndInfo.start_CS := p_StartValue )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [  p_domain = ps_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_CellIndInfo.start_PS := p_StartValue )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SetDL_RRC_MessageSN (p_ActCell : INTEGER)
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* To Set the Message sequence number in DL to all 0 for RB0 to RB4 */
$DefaultsRef SS_Def
$Comment /* This step to be used when Integrity is to be started */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_SetRRC_MessageSN_REQ
$Cref ca_DL_CRLC_SetRRC_MSN_REQ (p_ActCell, tsc_RB0,   0  )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ?CRLC_SetRRC_MessageSN_CNF
$Cref ca_CRLC_SetRRC_MSN_CNF ( p_ActCell, tsc_RB0 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CRLC ! CRLC_SetRRC_MessageSN_REQ
$Cref ca_DL_CRLC_SetRRC_MSN_REQ( tsc_CellDedicated, tsc_RB1, 0 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CRLC ?CRLC_SetRRC_MessageSN_CNF
$Cref ca_CRLC_SetRRC_MSN_CNF (tsc_CellDedicated, tsc_RB1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CRLC ! CRLC_SetRRC_MessageSN_REQ
$Cref ca_DL_CRLC_SetRRC_MSN_REQ( tsc_CellDedicated, tsc_RB2,  0 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CRLC ?CRLC_SetRRC_MessageSN_CNF
$Cref ca_CRLC_SetRRC_MSN_CNF (tsc_CellDedicated, tsc_RB2 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CRLC ! CRLC_SetRRC_MessageSN_REQ
$Cref ca_DL_CRLC_SetRRC_MSN_REQ( tsc_CellDedicated, tsc_RB3,  0 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CRLC ?CRLC_SetRRC_MessageSN_CNF
$Cref ca_CRLC_SetRRC_MSN_CNF (tsc_CellDedicated, tsc_RB3 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CRLC ! CRLC_SetRRC_MessageSN_REQ
$Cref ca_DL_CRLC_SetRRC_MSN_REQ( tsc_CellDedicated, tsc_RB4,  0 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CRLC ?CRLC_SetRRC_MessageSN_CNF
$Cref ca_CRLC_SetRRC_MSN_CNF (tsc_CellDedicated, tsc_RB4 )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_RB2_UL_IntegrityActivate(p_RRCSN :  RRC_MessageSequenceNumber)
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /*  */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Integrity_Activate_REQ
$Cref ca_CRLC_UL_IntegrityActivateReq ( tsc_CellDedicated , tcv_CellIndInfo.recentSecureDomain, c_RB2_IntegrityProtActivationInfoList( p_RRCSN) )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ?CRLC_Integrity_Activate_CNF
$Cref ca_CRLC_IntegrityActivateCnf (tsc_CellDedicated )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CMAC_CipherCfg ( p_CellId : INTEGER;p_CalcNewActTime : BOOLEAN; p_CipherMode: CipheringModeCommand;  p_IncrDcr : Increment_Mode )
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* To Configuare the MAC Layer with the */
$DefaultsRef 
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [( (  tcv_TmpCellInfo.cellConfig = cell_DCH_Speech) OR 
(   tcv_TmpCellInfo.cellConfig =cell_DCH_64kCS_RAB_SRB) OR
 (   tcv_TmpCellInfo.cellConfig =  cell_DCH_57_6kCS_RAB_SRB) OR 
(  tcv_TmpCellInfo.cellConfig =  cell_Two_DTCH ) OR 
(  tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_CS) OR
 (   tcv_TmpCellInfo.cellConfig =cell_Two_DTCH_PS_CS ) OR 
(  tcv_TmpCellInfo.cellConfig =cell_Four_DTCH_PS_CS)  OR
(  tcv_TmpCellInfo.cellConfig =cell_Two_DTCH_CS_PS)   OR
(   tcv_TmpCellInfo.cellConfig =cell_Four_DTCH_CS_PS)   OR 
(   tcv_TmpCellInfo.cellConfig = cell_DCH_DSCH_CS_PS )) AND( tcv_CellIndInfo. recentSecureDomain =cs_domain)]
$Cref 
$VerdictId 
$Comment /* 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_CalcActivationTime
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_CMAC_DL_CipherCfg ( p_CipherMode, tcv_CipherActTime, p_IncrDcr  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_CMAC_UL_CipherCfg ( p_CipherMode, tcv_CipherActTime, p_IncrDcr  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [TRUE]
$Cref 
$VerdictId (P)
$Comment /* No TM RAB configured */
$End_BehaviourLine
$Header lt_CalcActivationTime
$BehaviourLine
$LabelId 
$Line [0] [ p_CalcNewActTime = TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CPHY ! CPHY_Frame_Number_REQ
$Cref cas_GetFrameNum( p_CellId, tsc_DL_DPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CPHY ? CPHY_Frame_Number_CNF 
(tcv_FrameNumber := CPHY_Frame_Number_CNF.frameNumber)
$Cref car_GetFrameNum( p_CellId, tsc_DL_DPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_CipherActTime := (256 + tcv_FrameNumber- ( tcv_FrameNumber MOD 8 +8)) MOD 256)
$Cref 
$VerdictId 
$Comment /* Calculate the Ciphering Activation Time */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ p_CalcNewActTime = FALSE]
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_GetRRC_MessageSN(p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* To Calculate the Message sequence numbers for RB0 to RB4 and store in TCV's. */
$DefaultsRef 
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC !CRLC_RRC_MessageSN_REQ
$Cref cas_CRLC_RRC_MessageSN_REQ ( tsc_CellDedicated, tsc_RB0 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_RRC_MessageSN_CNF 
( tcv_RRC_MSN_RB0 := CRLC_RRC_MessageSN_CNF.count_I_LSB_DL )
$Cref car_CRLC_RRC_MessageSN_CNF ( tsc_CellDedicated, tsc_RB0 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CRLC !CRLC_RRC_MessageSN_REQ
$Cref cas_CRLC_RRC_MessageSN_REQ ( tsc_CellDedicated, tsc_RB1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CRLC ? CRLC_RRC_MessageSN_CNF 
( tcv_RRC_MSN_RB1 := CRLC_RRC_MessageSN_CNF.count_I_LSB_DL )
$Cref car_CRLC_RRC_MessageSN_CNF ( tsc_CellDedicated, tsc_RB1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CRLC ! CRLC_RRC_MessageSN_REQ
$Cref cas_CRLC_RRC_MessageSN_REQ ( tsc_CellDedicated, tsc_RB2 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CRLC ? CRLC_RRC_MessageSN_CNF 
(  tcv_RRC_MSN_RB2 := CRLC_RRC_MessageSN_CNF.count_I_LSB_DL, 
 tcv_RRC_MSN_RB2_UL := CRLC_RRC_MessageSN_CNF.count_I_LSB_UL)
$Cref car_CRLC_RRC_MessageSN_CNF ( tsc_CellDedicated, tsc_RB2 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CRLC ! CRLC_RRC_MessageSN_REQ
$Cref cas_CRLC_RRC_MessageSN_REQ ( tsc_CellDedicated, tsc_RB3 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CRLC ? CRLC_RRC_MessageSN_CNF 
(  tcv_RRC_MSN_RB3 := CRLC_RRC_MessageSN_CNF.count_I_LSB_DL )
$Cref car_CRLC_RRC_MessageSN_CNF ( tsc_CellDedicated, tsc_RB3 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CRLC ! CRLC_RRC_MessageSN_REQ
$Cref cas_CRLC_RRC_MessageSN_REQ ( tsc_CellDedicated, tsc_RB4 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CRLC ? CRLC_RRC_MessageSN_CNF 
( tcv_RRC_MSN_RB4 := CRLC_RRC_MessageSN_CNF.count_I_LSB_DL )
$Cref car_CRLC_RRC_MessageSN_CNF ( tsc_CellDedicated, tsc_RB4 )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CMAC_UL_DL_CipherCfg ( p_CipherMode: CipheringModeCommand; p_ActTime: INTEGER;  p_IncrDcr : Increment_Mode  )
$TestStepRef MACv520/BasicM_Security_Steps/
$Objective /* Configure ciphering on the MAC layer for UL  and DLRBs. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_CMAC_DL_CipherCfg ( p_CipherMode, p_ActTime,  p_IncrDcr )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_CMAC_UL_CipherCfg ( p_CipherMode, p_ActTime,  p_IncrDcr )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$End_TestStepGroup
$TestStepGroup
$TestStepGroupId BasicM_SS_Configuration_Steps
$Begin_TestStep
$TestStepId ts_CRLC_ReconfRLC_Size (p_urnti:BOOLEAN)
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To Reconfigure RLC size to allow U-RNTI in MAC header or C-RNTI in MAC header depending on parameter if it is TRUE allow U-RNTI in MAC header and if it is false allow C-RNTI in MAC header */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [p_urnti=TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ! CRLC_Config_REQ
$Cref cad_RB_UM_ReconfInfo ( tsc_CellDedicated , tsc_RB1, {uLlogicalChannelIdentity tsc_UL_DCCH1, dLlogicalChannelIdentity tsc_DL_DCCH1})
$VerdictId 
$Comment /* cofigure radio bearers : 
RB1 (UM + DCCH) and (UM + DCCH) 
 
Payload size=120 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf ( tsc_CellDedicated, tsc_RB1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_urnti=FALSE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ! CRLC_Config_REQ
$Cref ca_RB_UM_ReconfInfo ( tsc_CellDedicated , tsc_RB1, {uLlogicalChannelIdentity tsc_UL_DCCH1, dLlogicalChannelIdentity tsc_DL_DCCH1})
$VerdictId 
$Comment /* cofigure radio bearers : 
RB1 (UM + DCCH) and (UM + DCCH) 
 
Payload size=136 (default) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf ( tsc_CellDedicated, tsc_RB1)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CMAC_New_RNTI_Reconf ( p_urnti:BOOLEAN; p_CellId : INTEGER; p_U_RNTI : U_RNTI; p_C_RNTI : BITSTRING )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* Reconfigure MAC when a new U_RNTI or C_RNTI  is assigned to UE. */
$DefaultsRef SS_Def
$Comment /* U-RNTI and C-RNTI are not required on DPCH. 
U-RNTI and C-RNTI is necessary when DCCH/DTCH mapped on S-CCPCH. 
C-RNTI is necessary when DCCH/DTCH mapped on PRACH. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_ReconfRLC_Size ( p_urnti )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_CMAC_Reconf ( p_urnti )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_CMAC_Reconf ( p_urnti: BOOLEAN )
$BehaviourLine
$LabelId 
$Line [0] [ p_urnti ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfoActNow ( p_CellId ,  tsc_S_CCPCH1, c_UE_Info(p_U_RNTI, OMIT ), c_TrChInfoPCH_FACH_PS, c_TrLogMappingPCH_FACH_PS )
$VerdictId 
$Comment /* SS has valid U-RNTI, C-RNTI is not valid */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf ( p_CellId ,  tsc_S_CCPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ NOT p_urnti ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig  =  cell_FACH ) OR 
( tcv_TmpCellInfo.cellConfig  =  cell_FACH_PS ) OR ( tcv_TmpCellInfo.cellConfig  = cell_FACH_NoConn ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfoActNow ( p_CellId ,  tsc_PRACH1, c_UE_Info ( OMIT, p_C_RNTI ), cb_TrChInfoRACH1, c_TrLogMappingRACH_DTCH  )
$VerdictId 
$Comment /* SS has valid C-RNTI, U-RNTI is not valid 
Only C-RNTI is required on PRACH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf ( p_CellId , tsc_PRACH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfoActNow ( p_CellId ,  tsc_S_CCPCH1, c_UE_Info( OMIT, p_C_RNTI ), c_TrChInfoPCH_FACH_PS, c_TrLogMappingPCH_FACH_PS )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf ( p_CellId ,  tsc_S_CCPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CMAC_Pag1_Cfg ( p_CellId: INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* Configure paging on the MAC layer. */
$DefaultsRef SS_Def
$Comment /* This step shall be used when UE in idle mode.  
The DRX cycle length to use is the shortest of the CN domain specific Drx cycle length. 
The test case variable tcv_dRX_CycleLengthPaging is assigned to: the smallest value of CN Drx cycle length for the CN domain the UE is attached to. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [px_RAT = fdd ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_CalculateDrxCycleLength
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC ! CMAC_PAGING_Config_REQ
$Cref ca_CMAC_PagingCfgReq(p_CellId, tsc_S_CCPCH1, fdd, c_MAC_PagingCfg (o_GetPI(px_IMSI_Def, 18), tcv_dRX_CycleLengthPaging ))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CMAC ? CMAC_PAGING_Config_CNF
$Cref ca_CMAC_PagingCfgCnf(p_CellId, tsc_S_CCPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [1] [px_RAT = tdd ]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [1] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_CalculateDrxCycleLength
$BehaviourLine
$LabelId 
$Line [0] [pc_CS AND pc_PS]
$Cref 
$VerdictId 
$Comment /* 0. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TmpCellInfo.dRX_CycleLength.cN_CS_DRX_CycleLength <= tcv_TmpCellInfo.dRX_CycleLength.cN_PS_DRX_CycleLength ]
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_dRX_CycleLengthPaging :=  tcv_TmpCellInfo.dRX_CycleLength.cN_CS_DRX_CycleLength )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE ]
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_dRX_CycleLengthPaging :=  tcv_TmpCellInfo.dRX_CycleLength.cN_PS_DRX_CycleLength )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [pc_CS AND NOT (pc_PS) ]
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_dRX_CycleLengthPaging :=  tcv_TmpCellInfo.dRX_CycleLength.cN_CS_DRX_CycleLength )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [pc_PS AND NOT (pc_CS) ]
$Cref 
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_dRX_CycleLengthPaging :=  tcv_TmpCellInfo.dRX_CycleLength.cN_PS_DRX_CycleLength )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 0.  UE supports CS and PS 
1.  CN Drx Cycle length for CS is smaller than PS, then CN Drx Cycle  length for CS is used 
2.  CN Drx Cycle length for CS is smaller than PS, then CN Drx Cycle  length for PS is used 
3.  UE supports only CS, the CN Drx cycle length for CS is used 
4.  UE supports only PS, the CN Drx cycle length for PS is used */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CMAC_Rel ( p_CellId : INTEGER; p_PhyCH : PhysicalChannelIdentity )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To request to release the Radio Link */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CMAC ! CMAC_Config_REQ
$Cref cas_MAC_Rel  ( p_CellId ,  p_PhyCH )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf ( p_CellId ,  p_PhyCH )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CPHY_TrChRelDCH_NoSHO ( p_CellId : INTEGER; p_PhyCH : PhysicalChannelIdentity )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To request to release the Radio Link */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CPHY ! CPHY_TrCH_Release_REQ
$Cref ca_PHY_RelReqDCH_NoSHO ( p_CellId ,  p_PhyCH )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CPHY ? CPHY_TrCH_Release_CNF
$Cref ca_PHY_RelCnf ( p_CellId ,  p_PhyCH )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CPHY_TrChRelNonDch ( p_CellId : INTEGER; p_PhyCH : PhysicalChannelIdentity )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To request to release the Radio Link */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CPHY ! CPHY_TrCH_Release_REQ
$Cref ca_PHY_RelReqNonDch ( p_CellId ,  p_PhyCH )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CPHY ? CPHY_TrCH_Release_CNF
$Cref ca_PHY_RelCnf ( p_CellId ,  p_PhyCH )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CRLC_Rel ( p_CellId : INTEGER; p_RB_Id : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To release RLC entity. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Config_REQ
$Cref ca_CRLC_RB_RelReq (p_CellId, p_RB_Id )
$VerdictId 
$Comment /* release radio bearer */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf ( p_CellId, p_RB_Id )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CRLC_RelReconfSRB (p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To release RLC counter sequence number for SRB 1 to 4, by  first releasing them and  then setting them up again. */
$DefaultsRef SS_Def
$Comment /* This step is used only in conjonction with the RRC Connestion Release step. The configuration for SRBs 1 to 4 is the same as the one used for cell_DCH and cell_FACH. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_CRLC_Rel ( tsc_CellDedicated, tsc_RB1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_Rel (tsc_CellDedicated,  tsc_RB2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_CRLC_Rel (tsc_CellDedicated,  tsc_RB3 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (tsc_CellDedicated, tsc_RB4 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_SS_RB1_ToRB4_Cfg
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CRLC_ResumeSecurity  ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* resume radio bearers for the security procedure */
$DefaultsRef SS_Def
$Comment /* CRLC is configured with cellId -1 ( tsc_CellDedicated ) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$Comment /* Swithch On ciphering */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ! CRLC_Resume_REQ
$Cref cas_ResumeRB(tsc_CellDedicated , tsc_RB1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CRLC ? CRLC_Resume_CNF
$Cref car_ResumeRB(tsc_CellDedicated , tsc_RB1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CRLC ! CRLC_Resume_REQ
$Cref cas_ResumeRB(tsc_CellDedicated , tsc_RB3)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CRLC ? CRLC_Resume_CNF
$Cref car_ResumeRB(tsc_CellDedicated , tsc_RB3)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CRLC ! CRLC_Resume_REQ
$Cref cas_ResumeRB(tsc_CellDedicated , tsc_RB4)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CRLC ? CRLC_Resume_CNF 
(tcv_RB_SigResumed := TRUE)
$Cref car_ResumeRB(tsc_CellDedicated , tsc_RB4)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [ (( tcv_TmpCellInfo.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR 
( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_RAB ) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_PS ) OR 
( tcv_TmpCellInfo.cellConfig =cell_Two_DTCH_PS_CS) OR 
  ( tcv_TmpCellInfo.cellConfig =cell_Four_DTCH_PS_CS)  OR
  ( tcv_TmpCellInfo.cellConfig =cell_Two_DTCH_CS_PS) OR
  ( tcv_TmpCellInfo.cellConfig =cell_Four_DTCH_CS_PS)  OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_PS ) OR  
(tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1 ) OR  
(tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2 )OR 
 (tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH ) OR  
 (tcv_TmpCellInfo.cellConfig = cell_DCH_DSCH_PS ) OR  
 (tcv_TmpCellInfo.cellConfig = cell_DCH_DSCH_CS_PS ))AND ( tcv_CellIndInfo. recentSecureDomain =ps_domain)   ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CRLC ! CRLC_Resume_REQ
$Cref cas_ResumeRB(tsc_CellDedicated , tsc_RB20)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CRLC ? CRLC_Resume_CNF
$Cref car_ResumeRB(tsc_CellDedicated , tsc_RB20)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [ tcv_TmpCellInfo.cellConfig = cell_PDCP_UM_RAB ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CRLC ! CRLC_Resume_REQ
$Cref cas_ResumeRB(tsc_CellDedicated , tsc_RB21)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CRLC ? CRLC_Resume_CNF
$Cref car_ResumeRB(tsc_CellDedicated , tsc_RB21)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [ ( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_UM_RAB )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CRLC ! CRLC_Resume_REQ
$Cref cas_ResumeRB(tsc_CellDedicated , tsc_RB20)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CRLC ? CRLC_Resume_CNF
$Cref car_ResumeRB(tsc_CellDedicated , tsc_RB20)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CRLC ! CRLC_Resume_REQ
$Cref cas_ResumeRB(tsc_CellDedicated , tsc_RB21)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] CRLC ? CRLC_Resume_CNF
$Cref car_ResumeRB(tsc_CellDedicated , tsc_RB21)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [( tcv_TmpCellInfo.cellConfig = cell_DCH_2AM_PS ) OR ( tcv_TmpCellInfo.cellConfig = cell_DCH_2_PS_Call )]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CRLC ! CRLC_Resume_REQ
$Cref cas_ResumeRB(tsc_CellDedicated , tsc_RB20)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CRLC ? CRLC_Resume_CNF
$Cref car_ResumeRB(tsc_CellDedicated , tsc_RB20)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CRLC ! CRLC_Resume_REQ
$Cref cas_ResumeRB(tsc_CellDedicated , tsc_RB22)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] CRLC ? CRLC_Resume_CNF
$Cref car_ResumeRB(tsc_CellDedicated , tsc_RB22)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [ TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_CRLC_SuspendSecurity ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* suspend radio bearers  for the security procedure */
$DefaultsRef SS_Def_Special
$Comment /* CRLC is configured with cellId -1 ( tsc_CellDedicated )
 */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$Comment /* Swithch On ciphering */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ! CRLC_Suspend_REQ
$Cref cas_RLC_SuspendRB ( tsc_CellDedicated , tsc_RB1,  tcv_RLC_SeqNumDL_RB1 )
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CRLC ? CRLC_Suspend_CNF
$Cref car_SuspendRB ( tsc_CellDedicated , tsc_RB1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CRLC ! CRLC_Suspend_REQ
$Cref cas_RLC_SuspendRB ( tsc_CellDedicated , tsc_RB3,  tcv_RLC_SeqNumDL_RB3 )
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CRLC ? CRLC_Suspend_CNF
$Cref car_SuspendRB ( tsc_CellDedicated , tsc_RB3 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CRLC ! CRLC_Suspend_REQ
$Cref cas_RLC_SuspendRB (tsc_CellDedicated , tsc_RB4,  tcv_RLC_SeqNumDL_RB4 )
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CRLC ? CRLC_Suspend_CNF
$Cref car_SuspendRB ( tsc_CellDedicated , tsc_RB4 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [( ( tcv_TmpCellInfo.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR 
( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_RAB ) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_PS ) OR 
 ( tcv_TmpCellInfo.cellConfig =cell_Two_DTCH_PS_CS)  OR  ( tcv_TmpCellInfo.cellConfig =cell_Four_DTCH_PS_CS)    OR( tcv_TmpCellInfo.cellConfig =cell_Two_DTCH_CS_PS)   OR   ( tcv_TmpCellInfo.cellConfig =cell_Four_DTCH_CS_PS)    OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_PS ) OR  
(tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1 ) OR  
(tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2 )OR 
 (tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH ) OR  
 (tcv_TmpCellInfo.cellConfig = cell_DCH_DSCH_PS ) OR  
 (tcv_TmpCellInfo.cellConfig = cell_DCH_DSCH_CS_PS ) ) AND (tcv_CellIndInfo. recentSecureDomain =ps_domain) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CRLC ! CRLC_Suspend_REQ
$Cref cas_RLC_SuspendRB (tsc_CellDedicated , tsc_RB20,  tcv_RLC_SeqNumDL_RB20 )
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CRLC ? CRLC_Suspend_CNF
$Cref car_SuspendRB ( tsc_CellDedicated , tsc_RB20 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [( tcv_TmpCellInfo.cellConfig = cell_PDCP_UM_RAB) AND (tcv_CellIndInfo. recentSecureDomain =ps_domain)]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CRLC ! CRLC_Suspend_REQ
$Cref cas_RLC_SuspendRB (tsc_CellDedicated , tsc_RB21,  tcv_RLC_SeqNumDL_RB21 )
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CRLC ? CRLC_Suspend_CNF
$Cref car_SuspendRB ( tsc_CellDedicated , tsc_RB21 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [ ( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_UM_RAB)AND (tcv_CellIndInfo. recentSecureDomain =ps_domain) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CRLC ! CRLC_Suspend_REQ
$Cref cas_RLC_SuspendRB (tsc_CellDedicated , tsc_RB20,  tcv_RLC_SeqNumDL_RB20 )
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CRLC ? CRLC_Suspend_CNF
$Cref car_SuspendRB ( tsc_CellDedicated , tsc_RB20 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CRLC ! CRLC_Suspend_REQ
$Cref cas_RLC_SuspendRB (tsc_CellDedicated , tsc_RB21,  tcv_RLC_SeqNumDL_RB21)
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] CRLC ? CRLC_Suspend_CNF
$Cref car_SuspendRB ( tsc_CellDedicated , tsc_RB21 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [(( tcv_TmpCellInfo.cellConfig = cell_DCH_2AM_PS  ) OR ( tcv_TmpCellInfo.cellConfig = cell_DCH_2_PS_Call )) AND (tcv_CellIndInfo. recentSecureDomain =ps_domain)]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CRLC ! CRLC_Suspend_REQ
$Cref cas_RLC_SuspendRB (tsc_CellDedicated , tsc_RB20,  tcv_RLC_SeqNumDL_RB20 )
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CRLC ? CRLC_Suspend_CNF
$Cref car_SuspendRB ( tsc_CellDedicated , tsc_RB20 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CRLC ! CRLC_Suspend_REQ
$Cref cas_RLC_SuspendRB (tsc_CellDedicated , tsc_RB22,  tcv_RLC_SeqNumDL_RB22)
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] CRLC ? CRLC_Suspend_CNF
$Cref car_SuspendRB ( tsc_CellDedicated , tsc_RB22 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] [ TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Get the RLC sequence number  
2. suspend the SRB at the current RLC sequence number */
$End_TestStep
$Begin_TestStep
$TestStepId ts_ReconfigFACH_ToNoDedicated ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To reconfig the cell from cell_FACH to cell_FACH_NoDedicated. */
$DefaultsRef SS_Def
$Comment /* In cell_FACH_NoDedicated, no DCCH/DTCH are configured: no C-RNTI nor U-RNTI are downloaded to CMAC. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_SetTmpCellInfo (p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelBCCH_FACH
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfoActNow ( p_CellId,  tsc_S_CCPCH1, c_UE_Info( OMIT, OMIT ), c_TrChInfoPCH_FACH, c_TrLogMappingPCH_FACH_CellDCH )
$VerdictId 
$Comment /* map PCCH to PCH, CCCH to FACH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf(p_CellId,  tsc_S_CCPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfoActNow (p_CellId,  tsc_PRACH1, c_UE_Info( OMIT, OMIT ), cb_TrChInfoRACH1, cb_TrLogMappingRACH2)
$VerdictId 
$Comment /* mapping CCCH to RACH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf(p_CellId, tsc_PRACH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [1] [px_RAT = tdd]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [1] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_RelBCCH_FACH
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_NoConn ) OR  
(tcv_TmpCellInfo.cellConfig = cell_FACH) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_PS )  ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_Rel ( p_CellId ,  tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_1DCH_DCCH_Cfg ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* to configure physical channel DPCH1and connect DCH5 to the physical channel,then map DCCH1-4 on to the DCH5 transport channel. Used for setting up stand-alone UL:13.6 DL:13.6 kbps SRBs */
$DefaultsRef SS_Def
$Comment /* The transport channel DCH5 carries only dedicated control channels. 
MAC-d  is configured with cellId -1 (tsc_CellDedicated). */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_TGCFN := 0)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CPHY!CPHY_RL_Setup_REQ
$Cref ca_DL_DPCH_Info ( p_CellId, tsc_DL_DPCH1, cb_DL_DPCH_SRB_StandAloneDPCH_Offset ( tcv_TmpCellInfo.dl_DPCH_2ndScrCode ) )
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf ( p_CellId, tsc_DL_DPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY!CPHY_TrCH_Config_REQ
$Cref ca_DCH_148_TTI_10_DL_InfoActNow ( p_CellId, tsc_DL_DPCH1 )
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CPHY?CPHY_TrCH_Config_CNF
$Cref ca_TrChCfgCnf(p_CellId, tsc_DL_DPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_CfgInfo ( tsc_CellDedicated,  tsc_DL_DPCH1, c_UE_Info ( OMIT, OMIT), c_TrChInfoDL_13_6_StandAlone, c_TrLogMappingDL_4DCCH )
$VerdictId 
$Comment /* 3.  
C-RNTI and U-RNTI are not needed on DPCH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf( tsc_CellDedicated, tsc_DL_DPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CPHY!CPHY_RL_Setup_REQ
$Cref ca_UL_DPCH_Info(p_CellId, tsc_UL_DPCH1, c_UL_DPCH_13_6_StandAlone( tcv_TmpCellInfo.uL_ScramblingCode))
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf(p_CellId, tsc_UL_DPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] CPHY!CPHY_TrCH_Config_REQ
$Cref ca_DCH_148_TTI_10_UL_InfoActNow ( p_CellId, tsc_UL_DPCH1 )
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CPHY?CPHY_TrCH_Config_CNF
$Cref ca_TrChCfgCnf ( p_CellId, tsc_UL_DPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_CfgInfo (  tsc_CellDedicated,  tsc_UL_DPCH1, c_UE_Info ( OMIT, OMIT ), c_TrChInfoUL_13_6_StandAlone, c_TrLogMappingUL_4DCCH )
$VerdictId 
$Comment /* 3.  
C-RNTI and U-RNTI are not needed on DPCH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf ( tsc_CellDedicated, tsc_UL_DPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [1] [px_RAT = tdd]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [1] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. configure physical channel DPCH1. 
2. connect DCH5 to DPCH1. 
3. map logical channels:  DCCH1-4 to DCH5. MAC-d is to be configured with cellId -1. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_2DCH_Modify ( p_CellId : INTEGER; p_UL_TrChConfig:  CphyTrchConfigReq; p_DL_TrChConfig:  CphyTrchConfigReq; p_UL_TrCHInfo, p_DL_TrCHInfo: TrCHInfo; p_UL_TrLogMapping, p_DL_TrLogMapping: TrCH_LogCHMappingList1; p_ActTime: ActivationTime; 
    p_DL_DPCHInfo : DL_DPCHInfo; p_UL_DPCH_Info : UL_DPCH_Info)
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* to modify physical channel DPCH1and connect DCH1and DCH5  to the physical channel, then map DCCH1-4 on to the DCH5 transport channel and map DTCH1 to the DCH1 transport channel. used for RLC testing. */
$DefaultsRef SS_Def
$Comment /* SS is in TM mode different from the mode of UE. 
Transport channel configuration is parameter (of type:  CphyTrchConfigReq); DPCH is 64 kbps physical channel. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CPHY!CPHY_RL_Modify_REQ
$Cref ca_DL_DPCH_ModifyInfo ( p_CellId, tsc_DL_DPCH1, p_DL_DPCHInfo,p_ActTime )
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CPHY?CPHY_RL_Modify_CNF
$Cref ca_RL_ModifyCnf(p_CellId, tsc_DL_DPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CPHY!CPHY_TrCH_Config_REQ
$Cref ca_TrChCfgInfo(p_CellId, tsc_DL_DPCH1, c_TrChConfigTypeDCH_NoSHO, p_DL_TrChConfig )
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY?CPHY_TrCH_Config_CNF
$Cref ca_TrChCfgCnf(p_CellId, tsc_DL_DPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfo( tsc_CellDedicated ,   tsc_DL_DPCH1, c_UE_Info( OMIT, OMIT ), p_DL_TrCHInfo, p_DL_TrLogMapping,p_ActTime)
$VerdictId 
$Comment /* 4.  
U-RNTI and C-RNTI are not needed on DPCH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf( tsc_CellDedicated , tsc_DL_DPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CPHY!CPHY_RL_Modify_REQ
$Cref ca_UL_DPCH_ModifyInfo(p_CellId, tsc_UL_DPCH1, p_UL_DPCH_Info,p_ActTime )
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CPHY?CPHY_RL_Modify_CNF
$Cref ca_RL_ModifyCnf(p_CellId, tsc_UL_DPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CPHY!CPHY_TrCH_Config_REQ
$Cref ca_TrChCfgInfo ( p_CellId, tsc_UL_DPCH1, c_TrChConfigTypeDCH_NoSHO, p_UL_TrChConfig )
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] CPHY?CPHY_TrCH_Config_CNF
$Cref ca_TrChCfgCnf(p_CellId, tsc_UL_DPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfo( tsc_CellDedicated ,   tsc_UL_DPCH1, c_UE_Info( OMIT, OMIT ), p_UL_TrCHInfo, p_UL_TrLogMapping,p_ActTime)
$VerdictId 
$Comment /* 4.  
U-RNTI and C-RNTI are not needed on DPCH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf( tsc_CellDedicated ,  tsc_UL_DPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [1] [px_RAT = tdd]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [1] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. configure DPCH1supporting 64 kspb data rate. 
2. connect uplink DCH1and DCH5 to DPCH1. 
3. connect downlink DCH1and DCH5 to DPCH1. 
4. map logical channels: DCCH1-4 to DCH5, DTCH1 to DCH1 for both uplink and downlink and send relevant transport channel configuration information to MAC. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_AddDPCH ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To reconfigure the cell p_CellId from cell_NoDPCH to cell_DCH_StandaloneSRB_NoConn. */
$DefaultsRef SS_Def
$Comment /* The following channels need to be created: 
physical channels:  DPCH; 
transport channesl: DCH 
logical channels:  DCCH; and 
signalling radio bearer: signalling bearer RB1, RB2, RB3, RB4  on DCH. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SS_1DCH_DCCH_Cfg ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_SS_RB1_ToRB4_Cfg
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_BCH_SCH_CPICH_Cfg ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To configure P-CCPCH, P-SCH, S-SCH and P-CPICH physical channels. To map BCH to P-PCCPCH, then to map logical channel BCCH to transport channel BCH. */
$DefaultsRef SS_Def
$Comment /* To configre P-CCPCH, P-SCH, S-SCH and P-CPICH physical channels and map BCH to P-PCCPCH, then to map logical channel BCCH to transport channel BCH. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_SetTmpCellInfo (p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CPHY!CPHY_RL_Setup_REQ
$Cref ca_pCPICH_Info ( p_CellId, (tcv_TmpCellInfo.powerpCPICH) )
$VerdictId 
$Comment /* p-CPICH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf ( p_CellId, tsc_P_CPICH )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CPHY!CPHY_RL_Setup_REQ
$Cref ca_pSCH_Info ( p_CellId, (tcv_TmpCellInfo.powerpSCH))
$VerdictId 
$Comment /* p-SCH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf ( p_CellId, tsc_P_SCH )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CPHY!CPHY_RL_Setup_REQ
$Cref ca_sSCH_Info ( p_CellId, (tcv_TmpCellInfo.powersSCH) )
$VerdictId 
$Comment /* s-SCH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf ( p_CellId, tsc_S_SCH )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CPHY!CPHY_RL_Setup_REQ
$Cref ca_pCCPCH_Info ( p_CellId, (tcv_TmpCellInfo.powerpCCPCH) )
$VerdictId 
$Comment /* p-CCPCH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf ( p_CellId, tsc_P_CCPCH )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CPHY!CPHY_TrCH_Config_REQ
$Cref ca_BCH_InfoActNow ( p_CellId )
$VerdictId 
$Comment /* BCH connected to p-CCPCH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] CPHY?CPHY_TrCH_Config_CNF
$Cref ca_TrChCfgCnf ( p_CellId, tsc_P_CCPCH )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC!CMAC_Config_REQ
$Cref ca_CMAC_CfgInfo(p_CellId,  tsc_P_CCPCH, c_UE_Info ( OMIT, OMIT ) , c_TrChInfoBCH1, c_TrLogMappingBCH1)
$VerdictId 
$Comment /* mapping BCCH to BCH. C-RNTI and U-RNTI are not needed on P-CCPCH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] CMAC?CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf ( p_CellId, tsc_P_CCPCH )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [1] [px_RAT = tdd]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [1] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_CellCfg (p_CellId : INTEGER)
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To setup the cell parameter in CPHY, if the cell 'p_CellId' is the first one to be created, then CPHY shall be initialised using CHY_INIT_REquest ASP. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_SetTmpCellInfo (p_CellId)
$Cref 
$VerdictId 
$Comment /* Fetch table correponding to the cell */
$End_BehaviourLine
$BehaviourLine
$LabelId ERR
$Line [1] [ tcv_TmpCellInfo.cellConfig <> cell_NotConfigured ]
$Cref 
$VerdictId I
$Comment /* Fatal error: cell already configured */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TmpCellInfo.cellConfig = cell_NotConfigured]
$Cref 
$VerdictId 
$Comment /* Cell not yet configured */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_CelllsAlreadyStarted
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CPHY!CPHY_Cell_Config_REQ
$Cref ca_CellCfgReq(p_CellId, tcv_TmpCellInfo.tCell, tcv_TmpCellInfo.frequencyInfo, tcv_TmpCellInfo.priScrmCode, tcv_TmpCellInfo.attenuationLevel, tcv_TmpCellInfo.sfnOffset, tcv_TmpCellInfo.cellTxPowerLevel )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY?CPHY_Cell_Config_CNF
$Cref ca_CellCfgCnf(p_CellId)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_SaveCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [3] [px_RAT = tdd]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR3
$Line [3] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_CelllsAlreadyStarted
$BehaviourLine
$LabelId 
$Line [0] + ts_CountConfiguredCell
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_NumCfgCell = 0 ]
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_MM_PwrOrUSIM_Off(tsc_USIM_NeedRmv)
$Cref 
$VerdictId 
$Comment /* 1. Deactivate the UE */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_DefaultRadioCnf = TRUE ]
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CPHY ! CPHY_Ini_REQ
$Cref cas_InitReqDef
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY ? CPHY_Ini_CNF
$Cref car_IniCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] ( tcv_TmpCellInfo.tCell := 0 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_DefaultRadioCnf = FALSE ]
$Cref 
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CPHY ! CPHY_Ini_REQ
$Cref cas_InitReqNonDef
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY ? CPHY_Ini_CNF
$Cref car_IniCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] ( tcv_TmpCellInfo.tCell := 0 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_NumCfgCell <> 0 ]
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. The cell 'p_CellId'  is the first one to be created 
2. The cell 'p_CellId' is not the first one to be created 
3. CPHY_Init_Request is sent with a defaultRadioEnvironment value 
4.  CPHY_Init_Request is sent with a nonDefaultMultiCell value */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_CreateCellDCH (p_CellId : INTEGER)
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* This test Step sets up a cell with stand-alone UL:3.4 DL:3.4 kbps SRBs for DCCH which consists of the following: 
For a first cell: 
physical channels: p-SCH, s-SCH, p-CPICH,  p-CCPCH, s-CCPCH, PRACH and DPCH; 
transport channesl: BCH, FACH, PCH, RACH, DCH;  
logical channels: BCCH, CCCH, PCCH, DCCH; and 
signalling radio bearer RB0 on FACH and RACH; signalling bearer RB1, RB2, RB3, RB4  on DCH. 
 
For cells other than the first cell 
physical channels: p-SCH, s-SCH, p-CPICH,  p-CCPCH, s-CCPCH, PRACH (no DPCH) 
transport channesl: BCH, FACH, PCH, RACH (no DCH) 
logical channels: BCCH, CCCH, PCCH (no DCCH) 
signalling radio bearer RB0 on FACH and RACH (not RB1 RB2 RB3 RB4 on DCH) */
$DefaultsRef InitOtherwiseFail
$Comment /* Cell configuration supporting UL:3.4 DL:3.4 kbps stand-alone signalling RB. 
CRLC is configured with cellId -1 (tsc_CellDedicated) 
CMAC for DCCH (MAC-d)  is configured with cellId -1 (tsc_CellDedicated). */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_SS_CellCfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_SS_BCH_SCH_CPICH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_SS_PCH_FACH_CCCH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_SS_RACH_CCCH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CountConfiguredCell
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] [ tcv_NumCfgCell = 0 ]
$Cref 
$VerdictId 
$Comment /* First cell to be created */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_SS_1DCH_DCCH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SS_RB_BCCH_BCH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_SS_RB_PCCH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_SS_RB0_Cfg (p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] +ts_SS_RB1_ToRB4_Cfg
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] ( tcv_TmpCellInfo.DL_DPCH_SHO := TRUE, 
tcv_TmpCellInfo.UL_DPCH_SHO := TRUE, 
tcv_TmpCellInfo.cellConfig := cell_DCH_StandAloneSRB_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_SaveCellInfo ( p_CellId )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] [ tcv_NumCfgCell <> 0 ]
$Cref 
$VerdictId 
$Comment /* Next cell to be created */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_SS_RB_BCCH_BCH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_SS_RB_PCCH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SS_RB0_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SetCellCfg ( p_CellId,  cell_NoDPCH)
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Set the cell configuration in the CellInfoCfg record */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_CreateCellFACH ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To setup a baseline cell which consists of the following: 
For a first cell_FACH cell 
physical channels: p-SCH, s-SCH, p-CPICH,  p-CCPCH, s-CCPCH and PRACH; 
transport channesl: BCH, FACH, PCH, RACH;  
logical channels: BCCH, CCCH, PCCH, DCCH; and 
signalling radio bearer RB0(CCCH), RB1(UM DCCH), RB2(AM DCCH), RB3(AM DCCH for NAS high priority), RB4(AM DCCH for NAS low priority) on FACH and RACH, RB-3(TM BCCH FACH) on FACH, RB20(AM DTCH) on FACH and RACH, RB-1 (TM, BCCH) on BCH, RB-2 (TM, PCCH, PCH) 
 
For cells other than the first cell 
Same physical channels as for the first cell (p-SCH, s-SCH, p-CPICH,  p-CCPCH, s-CCPCH and PRACH); 
Same transport channels as for the first cell (BCH, FACH, PCH, RACH);  
Logical channels: BCCH, CCCH, PCCH, no DCCH 
Signalling radio bearer RB0(CCCH), RB-3(TM BCCH FACH) on FACH, RB-1 (TM, BCCH) on BCH, RB-2 (TM, PCCH, PCH) */
$DefaultsRef InitOtherwiseFail
$Comment /* CRLC is configured with cellId -1 (tsc_CellDedicated) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_SS_CellCfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_SS_BCH_SCH_CPICH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_CountConfiguredCell
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_NumCfgCell = 0 ]
$Cref 
$VerdictId 
$Comment /* First cell to be created */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_SS_PCH_2FACH_CCCH_DCCH_BCCH_DTCH_Cfg ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_SS_RACH_CCCH_DCCH_DTCH_Cfg ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_SS_RB_BCCH_BCH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SS_RB_PCCH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_SS_RB0_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_SS_RB1_ToRB4_Cfg
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] +ts_SS_RB_BCCH_FACH_Cfg(p_CellId)
$Cref 
$VerdictId 
$Comment /* RB9 is on BCCH-FACH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_SS_RB20_AM_PS_Cfg ( 320 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] +ts_SetCellCfg ( p_CellId, cell_FACH_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_NumCfgCell <> 0 ]
$Cref 
$VerdictId 
$Comment /* Not first cell to be created */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_SS_PCH_FACH_CCCH_Cfg ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_SS_RACH_CCCH_Cfg ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_SS_RB_BCCH_BCH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SS_RB_PCCH_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_SS_RB0_Cfg(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SetCellCfg ( p_CellId,  cell_FACH_NoDedicated )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_PCH_2FACH_CCCH_DCCH_BCCH_DTCH_Cfg ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To configure a secondary CCPCH ( tsc_S_CCPCH1), then connect PCH and 2 FACH's to the secondary CCPCH . finally to map PCCH to PCH and DCCH1, DCCH2, DCCH3, DCCH4, CCCH,  BCCH(for BCCH_FACH) to FACH1 and DTCH to FACH2. */
$DefaultsRef SS_Def
$Comment /* one secondary CCPCH( tsc_S_CCPCH1) for PCH and FACH. PCCH mapping to PCH and DCCH1, DCCH2, DCCH3, DCCH4, CCCH, BCCH(for BCCH_FACH) to FACH1, and DTCH to FACH2. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CPHY!CPHY_RL_Setup_REQ
$Cref ca_sCCPCH_Info(p_CellId, tsc_S_CCPCH1,  tsc_S_CCPCH_2ndScrCode, tsc_S_CCPCH1_ChC, tcv_TmpCellInfo.slotFormatsCCPCH1, (tcv_TmpCellInfo.powersCCPCH1),  tcv_TmpCellInfo.timingsCCPCH1)
$VerdictId 
$Comment /* s-CCPCH1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf(p_CellId, tsc_S_CCPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CPHY!CPHY_TrCH_Config_REQ
$Cref ca_PCH_2_FACH_InfoActNow (p_CellId, tsc_S_CCPCH1)
$VerdictId 
$Comment /* connect PCH and FACH to s-CCPCH1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY ? CPHY_TrCH_Config_CNF
$Cref ca_TrChCfgCnf (p_CellId, tsc_S_CCPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_CfgInfo ( p_CellId,  tsc_S_CCPCH1, c_UE_Info( tcv_TmpCellInfo.uRNTI,  tcv_TmpCellInfo.cRNTI ), c_TrChInfoPCH_FACH_PS, c_TrLogMappingPCH_FACH_PS )
$VerdictId 
$Comment /* map PCCH to PCH, and map CCCH, BCCH,  DTCH and DCCH's to FACH. C-RNTI and U-RNTI are needed when DCCH/DTCH are mapped on S-CCPCH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf(p_CellId,  tsc_S_CCPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CPHY!CPHY_RL_Setup_REQ
$Cref ca_PICH_Info ( p_CellId, c_PichInfo, (tcv_TmpCellInfo.powerPICH),tsc_S_CCPCH1 )
$VerdictId 
$Comment /* PICH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf(p_CellId, tsc_PICH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [1] [px_RAT = tdd]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [1] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_PCH_FACH_CCCH_Cfg ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To configure a secondary CCPCH ( tsc_S_CCPCH1), then connect PCH  and FACH to the secondary CCPCH .(34.108  cl. 4.2.1), finally to map PCCH to PCH and CCCH to FACH. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_SetTmpCellInfo (p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CPHY!CPHY_RL_Setup_REQ
$Cref ca_sCCPCH_Info(p_CellId, tsc_S_CCPCH1,  tsc_S_CCPCH_2ndScrCode, tsc_S_CCPCH1_ChC, tcv_TmpCellInfo.slotFormatsCCPCH1, (tcv_TmpCellInfo.powersCCPCH1), tcv_TmpCellInfo.timingsCCPCH1)
$VerdictId 
$Comment /* s-CCPCH1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf(p_CellId, tsc_S_CCPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CPHY!CPHY_TrCH_Config_REQ
$Cref ca_PCH_2_FACH_InfoActNow ( p_CellId, tsc_S_CCPCH1)
$VerdictId 
$Comment /* connect PCH and FACH to s-CCPCH1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY ? CPHY_TrCH_Config_CNF
$Cref ca_TrChCfgCnf(p_CellId, tsc_S_CCPCH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_CfgInfo ( p_CellId,  tsc_S_CCPCH1, c_UE_Info ( OMIT, OMIT ), c_TrChInfoPCH_FACH, c_TrLogMappingPCH_FACH_CellDCH )
$VerdictId 
$Comment /* map PCCH to PCH.  
U-RNTI and C-RNTI are not needed (no DCCH/DTCH) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf(p_CellId,  tsc_S_CCPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CPHY!CPHY_RL_Setup_REQ
$Cref ca_PICH_Info(p_CellId, c_PichInfo, (tcv_TmpCellInfo.powerPICH),tsc_S_CCPCH1 )
$VerdictId 
$Comment /* PICH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf(p_CellId, tsc_PICH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [1] [px_RAT = tdd]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [1] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_PrepareCellRRC_ConnEst ( 
p_CellId: INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To reconfigure the cell if it is not ready for an RRC connection establishment. 
4 cases are handled: 
1> the cell is already configure (  cell_DCH_StandAloneSRB_NoConn OR  cell_FACH_NoConn OR  cell_FACH_BMC_NoConn OR  cell_FACH_2PRACH_NoConn OR cell_FACH_2_SCCPCH_NoConn ) 
2> the cell is configured to cell_NoDPCH, then remove the DPCH from the 'old' cell and configure the DPCH in the cell p_CellId 
3> the cell is configured to cell_FACH_NoDedicated , then reconfigure the old cell where the  
4> the configuration of the cell to not allow an RRC connection establishment -> error case */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR   
 ( tcv_TmpCellInfo.cellConfig = cell_FACH_NoConn ) OR 
 ( tcv_TmpCellInfo.cellConfig =  cell_FACH_BMC_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_FACH_2_PRACH_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig = cell_FACH_2_SCCPCH_NoConn ) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_NoConn) OR 
( tcv_TmpCellInfo.cellConfig = cell_FACH_MAC_SRB_NoConn) OR  
( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB_NoConn ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1_NoConn ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2_NoConn ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH_NoConn)OR
 (tcv_TmpCellInfo.cellConfig =cell_FACH_2SCCPCH_StandAlonePCH_2a_NoConn)OR
(tcv_TmpCellInfo.cellConfig =cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1_NoConn) OR
( tcv_TmpCellInfo.cellConfig =cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2_NoConn ) OR
(tcv_TmpCellInfo.cellConfig =cell_FACH_3_SCCPCH_3_FACH_2a_CTCH_NoConn)]
$Cref 
$VerdictId 
$Comment /* 0
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [( tcv_TmpCellInfo.cellConfig  =  cell_NoDPCH ) OR  
( tcv_CellInfoA.cellConfig = cell_DCH_Speech )  OR  
( tcv_CellInfoA.cellConfig = cell_DCH_64kCS_RAB_SRB )  OR  
( tcv_CellInfoA.cellConfig =  cell_DCH_57_6kCS_RAB_SRB )  OR  
( tcv_CellInfoA.cellConfig = cell_DCH_64kPS_RAB_SRB )]
$Cref 
$VerdictId 
$Comment /* 1  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_ReconfOldDPCH_Cell
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SS_AddDPCH( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] ( tcv_TmpCellInfo.cellConfig := cell_DCH_StandAloneSRB_NoConn, 
tcv_TmpCellInfo.DL_DPCH_SHO := TRUE,  
tcv_TmpCellInfo.UL_DPCH_SHO := TRUE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_SaveCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TmpCellInfo.cellConfig = cell_FACH_NoDedicated ]
$Cref 
$VerdictId 
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_ReconfOldFACH_Cell
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SS_ReconfNoDedicatedToCellFACH ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_SetCellCfg ( p_CellId,  cell_FACH_NoConn )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR
$Line [1] [ TRUE ]
$Cref 
$VerdictId I
$Comment /* Programming error */
$End_BehaviourLine
$Header lt_ReconfOldFACH_Cell
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoA.cellConfig = cell_FACH_NoConn ) OR  
( tcv_CellInfoA.cellConfig = cell_FACH) OR  
( tcv_CellInfoA.cellConfig =  cell_FACH_PS )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_ReconfigFACH_ToNoDedicated ( tsc_CellA )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoA.cellConfig := cell_FACH_NoDedicated )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoB.cellConfig = cell_FACH_NoConn ) OR  
( tcv_CellInfoB.cellConfig = cell_FACH) OR  
( tcv_CellInfoB.cellConfig =  cell_FACH_PS )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_ReconfigFACH_ToNoDedicated ( tsc_CellB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoB.cellConfig := cell_FACH_NoDedicated )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoC.cellConfig = cell_FACH_NoConn ) OR  
( tcv_CellInfoC.cellConfig = cell_FACH) OR  
( tcv_CellInfoC.cellConfig =  cell_FACH_PS )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_ReconfigFACH_ToNoDedicated ( tsc_CellC )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoC.cellConfig := cell_FACH_NoDedicated )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoD.cellConfig = cell_FACH_NoConn ) OR  
( tcv_CellInfoD.cellConfig = cell_FACH) OR  
( tcv_CellInfoD.cellConfig =  cell_FACH_PS )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_ReconfigFACH_ToNoDedicated ( tsc_CellD )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoD.cellConfig := cell_FACH_NoDedicated )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoE.cellConfig = cell_FACH_NoConn ) OR  
( tcv_CellInfoE.cellConfig = cell_FACH) OR  
( tcv_CellInfoE.cellConfig =  cell_FACH_PS )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_ReconfigFACH_ToNoDedicated ( tsc_CellE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoE.cellConfig := cell_FACH_NoDedicated )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoF.cellConfig = cell_FACH_NoConn ) OR  
( tcv_CellInfoF.cellConfig = cell_FACH) OR  
( tcv_CellInfoF.cellConfig =  cell_FACH_PS )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_ReconfigFACH_ToNoDedicated ( tsc_CellF )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoF.cellConfig := cell_FACH_NoDedicated )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoG.cellConfig = cell_FACH_NoConn ) OR  
( tcv_CellInfoG.cellConfig = cell_FACH) OR  
( tcv_CellInfoG.cellConfig =  cell_FACH_PS )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_ReconfigFACH_ToNoDedicated ( tsc_CellG )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoG.cellConfig := cell_FACH_NoDedicated )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoH.cellConfig = cell_FACH_NoConn ) OR  
( tcv_CellInfoH.cellConfig = cell_FACH) OR  
( tcv_CellInfoH.cellConfig =  cell_FACH_PS )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_ReconfigFACH_ToNoDedicated ( tsc_CellH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoH.cellConfig := cell_FACH_NoDedicated )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [0] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_ReconfOldDPCH_Cell
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoA.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
( tcv_CellInfoA.cellConfig = cell_DCH_StandAloneSRB)  OR  
( tcv_CellInfoA.cellConfig = cell_DCH_Speech )  OR  
( tcv_CellInfoA.cellConfig = cell_DCH_64kCS_RAB_SRB )  OR  
( tcv_CellInfoA.cellConfig =  cell_DCH_57_6kCS_RAB_SRB )  OR  
( tcv_CellInfoA.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR  
( tcv_CellInfoA.cellConfig = cell_RLC_DCH_AM_RAB_15Lis ) OR  
( tcv_CellInfoA.cellConfig = cell_RLC_DCH_AM_RAB_7Lis )  OR  
( tcv_CellInfoA.cellConfig = cell_RLC_DCH_UM_RAB_15Lis )  OR  
( tcv_CellInfoA.cellConfig = cell_RLC_DCH_UM_RAB_7Lis )  OR  
( tcv_CellInfoA.cellConfig = cell_PDCP_AM_RAB )  OR  
( tcv_CellInfoA.cellConfig = cell_PDCP_UM_RAB )  OR  
( tcv_CellInfoA.cellConfig = cell_PDCP_AM_UM_RAB ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SS_RelDPCH ( tsc_CellA )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoA.cellConfig := cell_NoDPCH, 
tcv_CellInfoA.DL_DPCH_SHO := FALSE,  
tcv_CellInfoA.UL_DPCH_SHO := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoB.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
( tcv_CellInfoB.cellConfig = cell_DCH_StandAloneSRB)  OR  
( tcv_CellInfoB.cellConfig = cell_DCH_Speech )  OR  
( tcv_CellInfoB.cellConfig = cell_DCH_64kCS_RAB_SRB )  OR  
( tcv_CellInfoB.cellConfig =  cell_DCH_57_6kCS_RAB_SRB )  OR  
( tcv_CellInfoB.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR  
( tcv_CellInfoB.cellConfig = cell_RLC_DCH_AM_RAB_15Lis ) OR  
( tcv_CellInfoB.cellConfig = cell_RLC_DCH_AM_RAB_7Lis )  OR  
( tcv_CellInfoB.cellConfig = cell_RLC_DCH_UM_RAB_15Lis )  OR  
( tcv_CellInfoB.cellConfig = cell_RLC_DCH_UM_RAB_7Lis )  OR  
( tcv_CellInfoB.cellConfig = cell_PDCP_AM_RAB )  OR  
( tcv_CellInfoB.cellConfig = cell_PDCP_UM_RAB )  OR  
( tcv_CellInfoB.cellConfig = cell_PDCP_AM_UM_RAB ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SS_RelDPCH ( tsc_CellB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoB.cellConfig := cell_NoDPCH , 
tcv_CellInfoB.DL_DPCH_SHO := FALSE,  
tcv_CellInfoB.UL_DPCH_SHO := FALSE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoC.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
( tcv_CellInfoC.cellConfig = cell_DCH_StandAloneSRB)  OR  
( tcv_CellInfoC.cellConfig = cell_DCH_Speech )  OR  
( tcv_CellInfoC.cellConfig = cell_DCH_64kCS_RAB_SRB )  OR  
( tcv_CellInfoC.cellConfig =  cell_DCH_57_6kCS_RAB_SRB )  OR  
( tcv_CellInfoC.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR  
( tcv_CellInfoC.cellConfig = cell_RLC_DCH_AM_RAB_15Lis ) OR  
( tcv_CellInfoC.cellConfig = cell_RLC_DCH_AM_RAB_7Lis )  OR  
( tcv_CellInfoC.cellConfig = cell_RLC_DCH_UM_RAB_15Lis )  OR  
( tcv_CellInfoC.cellConfig = cell_RLC_DCH_UM_RAB_7Lis )  OR  
( tcv_CellInfoC.cellConfig = cell_PDCP_AM_RAB )  OR  
( tcv_CellInfoC.cellConfig = cell_PDCP_UM_RAB )  OR  
( tcv_CellInfoC.cellConfig = cell_PDCP_AM_UM_RAB ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SS_RelDPCH ( tsc_CellC )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoC.cellConfig := cell_NoDPCH, 
tcv_CellInfoC.DL_DPCH_SHO := FALSE,  
tcv_CellInfoC.UL_DPCH_SHO := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoD.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
( tcv_CellInfoD.cellConfig = cell_DCH_StandAloneSRB)  OR  
( tcv_CellInfoD.cellConfig = cell_DCH_Speech )  OR  
( tcv_CellInfoD.cellConfig = cell_DCH_64kCS_RAB_SRB )  OR  
( tcv_CellInfoD.cellConfig =  cell_DCH_57_6kCS_RAB_SRB )  OR  
( tcv_CellInfoD.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR  
( tcv_CellInfoD.cellConfig = cell_RLC_DCH_AM_RAB_15Lis ) OR  
( tcv_CellInfoD.cellConfig = cell_RLC_DCH_AM_RAB_7Lis )  OR  
( tcv_CellInfoD.cellConfig = cell_RLC_DCH_UM_RAB_15Lis )  OR  
( tcv_CellInfoD.cellConfig = cell_RLC_DCH_UM_RAB_7Lis )  OR  
( tcv_CellInfoD.cellConfig = cell_PDCP_AM_RAB )  OR  
( tcv_CellInfoD.cellConfig = cell_PDCP_UM_RAB )  OR  
( tcv_CellInfoD.cellConfig = cell_PDCP_AM_UM_RAB ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SS_RelDPCH ( tsc_CellD )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoD.cellConfig := cell_NoDPCH, 
tcv_CellInfoD.DL_DPCH_SHO := FALSE,  
tcv_CellInfoD.UL_DPCH_SHO := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoE.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
( tcv_CellInfoE.cellConfig = cell_DCH_StandAloneSRB)  OR  
( tcv_CellInfoE.cellConfig = cell_DCH_Speech )  OR  
( tcv_CellInfoE.cellConfig = cell_DCH_64kCS_RAB_SRB )  OR  
( tcv_CellInfoE.cellConfig =  cell_DCH_57_6kCS_RAB_SRB )  OR  
( tcv_CellInfoE.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR  
( tcv_CellInfoE.cellConfig = cell_RLC_DCH_AM_RAB_15Lis ) OR  
( tcv_CellInfoE.cellConfig = cell_RLC_DCH_AM_RAB_7Lis )  OR  
( tcv_CellInfoE.cellConfig = cell_RLC_DCH_UM_RAB_15Lis )  OR  
( tcv_CellInfoE.cellConfig = cell_RLC_DCH_UM_RAB_7Lis )  OR  
( tcv_CellInfoE.cellConfig = cell_PDCP_AM_RAB )  OR  
( tcv_CellInfoE.cellConfig = cell_PDCP_UM_RAB )  OR  
( tcv_CellInfoE.cellConfig = cell_PDCP_AM_UM_RAB ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SS_RelDPCH ( tsc_CellE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoE.cellConfig := cell_NoDPCH, 
tcv_CellInfoE.DL_DPCH_SHO := FALSE,  
tcv_CellInfoE.UL_DPCH_SHO := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoF.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
( tcv_CellInfoF.cellConfig = cell_DCH_StandAloneSRB)  OR  
( tcv_CellInfoF.cellConfig = cell_DCH_Speech )  OR  
( tcv_CellInfoF.cellConfig = cell_DCH_64kCS_RAB_SRB )  OR  
( tcv_CellInfoF.cellConfig =  cell_DCH_57_6kCS_RAB_SRB )  OR  
( tcv_CellInfoF.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR  
( tcv_CellInfoF.cellConfig = cell_RLC_DCH_AM_RAB_15Lis ) OR  
( tcv_CellInfoF.cellConfig = cell_RLC_DCH_AM_RAB_7Lis )  OR  
( tcv_CellInfoF.cellConfig = cell_RLC_DCH_UM_RAB_15Lis )  OR  
( tcv_CellInfoF.cellConfig = cell_RLC_DCH_UM_RAB_7Lis )  OR  
( tcv_CellInfoF.cellConfig = cell_PDCP_AM_RAB )  OR  
( tcv_CellInfoF.cellConfig = cell_PDCP_UM_RAB )  OR  
( tcv_CellInfoF.cellConfig = cell_PDCP_AM_UM_RAB ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SS_RelDPCH ( tsc_CellF )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoF.cellConfig := cell_NoDPCH, 
tcv_CellInfoF.DL_DPCH_SHO := FALSE,  
tcv_CellInfoF.UL_DPCH_SHO := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoG.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
( tcv_CellInfoG.cellConfig = cell_DCH_StandAloneSRB)  OR  
( tcv_CellInfoG.cellConfig = cell_DCH_Speech )  OR  
( tcv_CellInfoG.cellConfig = cell_DCH_64kCS_RAB_SRB )  OR  
( tcv_CellInfoG.cellConfig =  cell_DCH_57_6kCS_RAB_SRB )  OR  
( tcv_CellInfoG.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR  
( tcv_CellInfoG.cellConfig = cell_RLC_DCH_AM_RAB_15Lis ) OR  
( tcv_CellInfoG.cellConfig = cell_RLC_DCH_AM_RAB_7Lis )  OR  
( tcv_CellInfoG.cellConfig = cell_RLC_DCH_UM_RAB_15Lis )  OR  
( tcv_CellInfoG.cellConfig = cell_RLC_DCH_UM_RAB_7Lis )  OR  
( tcv_CellInfoG.cellConfig = cell_PDCP_AM_RAB )  OR  
( tcv_CellInfoG.cellConfig = cell_PDCP_UM_RAB )  OR  
( tcv_CellInfoG.cellConfig = cell_PDCP_AM_UM_RAB ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SS_RelDPCH ( tsc_CellG )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoG.cellConfig := cell_NoDPCH, 
tcv_CellInfoG.DL_DPCH_SHO := FALSE,  
tcv_CellInfoG.UL_DPCH_SHO := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_CellInfoH.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
( tcv_CellInfoH.cellConfig = cell_DCH_StandAloneSRB)  OR  
( tcv_CellInfoH.cellConfig = cell_DCH_Speech )  OR  
( tcv_CellInfoH.cellConfig = cell_DCH_64kCS_RAB_SRB )  OR  
( tcv_CellInfoH.cellConfig =  cell_DCH_57_6kCS_RAB_SRB )  OR  
( tcv_CellInfoH.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR  
( tcv_CellInfoH.cellConfig = cell_RLC_DCH_AM_RAB_15Lis ) OR  
( tcv_CellInfoH.cellConfig = cell_RLC_DCH_AM_RAB_7Lis )  OR  
( tcv_CellInfoH.cellConfig = cell_RLC_DCH_UM_RAB_15Lis )  OR  
( tcv_CellInfoH.cellConfig = cell_RLC_DCH_UM_RAB_7Lis )  OR  
( tcv_CellInfoH.cellConfig = cell_PDCP_AM_RAB )  OR  
( tcv_CellInfoH.cellConfig = cell_PDCP_UM_RAB )  OR  
( tcv_CellInfoH.cellConfig = cell_PDCP_AM_UM_RAB ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SS_RelDPCH ( tsc_CellH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_CellInfoH.cellConfig := cell_NoDPCH, 
tcv_CellInfoH.DL_DPCH_SHO := FALSE,  
tcv_CellInfoH.UL_DPCH_SHO := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 0. No reconfiguration of the cell is needed before RRC connection establishment 
1. Reconfigure the cell p_CellId to cell_DCH_StandAloneSRB_NoConn and reconfigure the cell set to cell_DCH_StandAloneSRB_NoConn to cell_NoDPCH 
2. Reconfigure the cell p_CellId to cell_FACH_NoConn and reconfigure the cell set to cell_FACH_NoConn  to cell_FACH_NoDedicated */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_RACH_CCCH_Cfg ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To configure AICH and PRACH physical channels and connect RACH onto PRACH, then map one logical channel (CCCH) to RACH */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_SetTmpCellInfo (p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CPHY!CPHY_RL_Setup_REQ
$Cref ca_AichInfo ( p_CellId, tsc_AICH1,  c_AICH_Info,  tcv_TmpCellInfo.powerAICH  )
$VerdictId 
$Comment /* AICH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf ( p_CellId, tsc_AICH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CPHY!CPHY_RL_Setup_REQ
$Cref ca_PRACH_Info ( p_CellId, tsc_PRACH1, tsc_PRACH1_Signatures, tsc_PRACH1_ScrC, tcv_TmpCellInfo.puncLimit,  tcv_TmpCellInfo.sf_PRACH, tcv_SubChNum)
$VerdictId 
$Comment /* PRACH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf ( p_CellId, tsc_PRACH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CPHY!CPHY_TrCH_Config_REQ
$Cref cab_RACH_InfoActNow ( p_CellId, tsc_PRACH1)
$VerdictId 
$Comment /* connectRACH  to PRACH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CPHY?CPHY_TrCH_Config_CNF
$Cref ca_TrChCfgCnf ( p_CellId, tsc_PRACH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_CfgInfo ( p_CellId,  tsc_PRACH1, c_UE_Info ( OMIT, OMIT), cb_TrChInfoRACH1, cb_TrLogMappingRACH2 )
$VerdictId 
$Comment /* mapping CCCH to RACH. C-RNTI and U-RNTI are not needed on */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf ( p_CellId, tsc_PRACH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [1] [px_RAT = tdd]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [1] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_RACH_CCCH_DCCH_DTCH_Cfg ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To configure AICH and PRACH physical channels and connect RACH onto PRACH, then map five logical channels (CCCH, DCCH1, DCCH2, DCCH3, DCCH4) to RACH */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CPHY!CPHY_RL_Setup_REQ
$Cref ca_AichInfo(p_CellId, tsc_AICH1, c_AICH_Info, (tcv_TmpCellInfo.powerAICH))
$VerdictId 
$Comment /* AICH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf(p_CellId, tsc_AICH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CPHY!CPHY_RL_Setup_REQ
$Cref ca_PRACH_Info(p_CellId, tsc_PRACH1, tsc_PRACH1_Signatures, tsc_PRACH1_ScrC,  tcv_TmpCellInfo.puncLimit,  tcv_TmpCellInfo.sf_PRACH, tcv_SubChNum)
$VerdictId 
$Comment /* PRACH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CPHY?CPHY_RL_Setup_CNF
$Cref ca_RL_SetupCnf(p_CellId, tsc_PRACH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CPHY!CPHY_TrCH_Config_REQ
$Cref cab_RACH_InfoActNow (p_CellId, tsc_PRACH1)
$VerdictId 
$Comment /* connect RACH to PRACH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CPHY?CPHY_TrCH_Config_CNF
$Cref ca_TrChCfgCnf(p_CellId,  tsc_PRACH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_CfgInfo(p_CellId,  tsc_PRACH1, c_UE_Info( OMIT, tcv_TmpCellInfo.cRNTI), cb_TrChInfoRACH1, c_TrLogMappingRACH_DTCH )
$VerdictId 
$Comment /* CCCH, DCCH1, DCCH2, DCCH3, DCCH4 to RACH. Only C-RNTI is used for DCCH/DTCH on PRACH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf(p_CellId, tsc_PRACH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [1] [px_RAT = tdd]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [1] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_RB0_Cfg( p_CellId : INTEGER)
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* to setup radio bearers :  RB0 ( the downlink is UM + CCCH + FACH + sCCPCH1 and uplink is TM + CCCH + RACH + PRACH).The configuration is  adapted from 34.108  cl. 6.10.2.4.3 and 6.10.2.4.4 */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Config_REQ
$Cref ca_RB_UM_DL_Info(p_CellId, tsc_RB0, { dLlogicalChannelIdentity tsc_DL_CCCH5})
$VerdictId 
$Comment /* cofigure radio bearers (downlink): 
RB0 (UM + CCCH + FACH) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf(p_CellId, tsc_RB0 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CRLC ! CRLC_Config_REQ
$Cref ca_RB_TM_UL_Info(p_CellId, tsc_RB0, 166, {uLlogicalChannelIdentity tsc_UL_CCCH5})
$VerdictId 
$Comment /* cofigure radio bearers (uplink): 
RB0 (TM + CCCH + RACH) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf(p_CellId, tsc_RB0)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_RB1_ToRB4_Cfg
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To setup radio bearers :  RB1, RB2, RB3, RB4. default values from 34.123-1 */
$DefaultsRef SS_Def
$Comment /* CRLC is configured with cellId -1 (tsc_CellDedicated) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Config_REQ
$Cref ca_RB_UM_Info ( tsc_CellDedicated , tsc_RB1, {uLlogicalChannelIdentity tsc_UL_DCCH1, dLlogicalChannelIdentity tsc_DL_DCCH1})
$VerdictId 
$Comment /* cofigure radio bearers : 
RB1 (UM + DCCH) and (UM + DCCH) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf ( tsc_CellDedicated, tsc_RB1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CRLC ! CRLC_Config_REQ
$Cref ca_RB_AM_Info_SRB ( tsc_CellDedicated, tsc_RB2, tcv_TimerPollProhibit, tcv_TimerPoll,  tcv_PollSDU, tcv_PollWindow, {uLlogicalChannelIdentity tsc_UL_DCCH2, dLlogicalChannelIdentity tsc_DL_DCCH2}, 128)
$VerdictId 
$Comment /* cofigure radio bearers : 
RB2 (AM + DCCH) and (AM + DCCH) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf ( tsc_CellDedicated,  tsc_RB2)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CRLC ! CRLC_Config_REQ
$Cref ca_RB_AM_Info_SRB ( tsc_CellDedicated,  tsc_RB3,  tcv_TimerPollProhibit, tcv_TimerPoll,  tcv_PollSDU, tcv_PollWindow, {uLlogicalChannelIdentity tsc_UL_DCCH3, dLlogicalChannelIdentity tsc_DL_DCCH3},128)
$VerdictId 
$Comment /* cofigure radio bearers : 
RB3 (AM + DCCH) and (AM + DCCH) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf ( tsc_CellDedicated,  tsc_RB3)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CRLC ! CRLC_Config_REQ
$Cref ca_RB_AM_Info_SRB ( tsc_CellDedicated, tsc_RB4, tcv_TimerPollProhibit, tcv_TimerPoll,  tcv_PollSDU, tcv_PollWindow, {uLlogicalChannelIdentity tsc_UL_DCCH4, dLlogicalChannelIdentity tsc_DL_DCCH4},128)
$VerdictId 
$Comment /* cofigure radio bearers : 
RB4(AM + DCCH) and (AM + DCCH) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf ( tsc_CellDedicated, tsc_RB4)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_RB20_AM_PS_Cfg (  p_Payloadsize: INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* setup radio bearers :  RB20. default values from 34.108  cl. 6.10.2.4.4 and 6.10.2.4.3.3 */
$DefaultsRef SS_Def
$Comment /* CRLC is configured with cellId -1 (tsc_CellDedicated) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Config_REQ
$Cref ca_RB_AM_Info_RAB ( tsc_CellDedicated, tsc_RB20, tcv_TimerPollProhibit, tcv_TimerPoll,  tcv_PollSDU, tcv_PollWindow, {uLlogicalChannelIdentity tsc_UL_DTCH1, dLlogicalChannelIdentity tsc_DL_DTCH1},p_Payloadsize)
$VerdictId 
$Comment /* cofigure radio bearers : 
RB20 (AM + DTCH) */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf ( tsc_CellDedicated,  tsc_RB20 )
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_RB_BCCH_BCH_Cfg(p_CellId : INTEGER)
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* to setup the radio bearer (RB_BCCH) which is used for sending system information blocks. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC!CRLC_Config_REQ
$Cref ca_RB_BCCH_Info(p_CellId, tsc_RB_BCCH, {dLlogicalChannelIdentity tsc_BCCH1})
$VerdictId 
$Comment /* configure radio bearer (RB_BCCH) for BCCH on TM + BCCH + BCH, used for sending system information blocks */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC?CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf(p_CellId, tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_RB_BCCH_FACH_Cfg (p_CellId: INTEGER)
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* setup radio bearers :  RB9 (downlink only) this bearer is for BCCH-FACH (TM + BCCH + FACH + sCCPCH1). The configuration is  adapted from 34.108  cl. 6.10.2.4.3. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Config_REQ
$Cref ca_RB_TM_DL_InfoNoSeg (p_CellId, tsc_RB_BCCH_FACH,  166, {dLlogicalChannelIdentity tsc_BCCH6})
$VerdictId 
$Comment /* configure radio bearers (downlink): 
RB9 (TM + BCCH + FACH)
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf(p_CellId, tsc_RB_BCCH_FACH)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_RB_PCCH_Cfg(p_CellId: INTEGER)
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* to setup radio bearer (RB_PCCH) used for paging message sending */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Config_REQ
$Cref ca_RB_PCCH_Info(p_CellId, tsc_RB_PCCH, {dLlogicalChannelIdentity tsc_PCCH1})
$VerdictId 
$Comment /* configure radio bearer(RB_PCCH) on TM + PCCH + PCH, used for sending paging message */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf(p_CellId, tsc_RB_PCCH)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_RB_TM_Cfg_RLC ( p_PayLoad: INTEGER; p_RB_Identity: SS_RB_Identity)
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /*  */
$DefaultsRef InitOtherwiseFail
$Comment /* Configure TM RLC entity in SS for RLC testing. The given RB identity can be used by the SS decoder to determine which RLC mode is being simulated. 
 
The UE entity should be configured as an AM or UM entity using the same transport block size. This allows the RLC header information to be specified and / or inspected by the TTCN. 
 
DL Logical channel mapping list for RLC tests. The DTCH RAB for RLC testing is mapped to DCH1. The SRBs are mapped to DCH5. 
 
Parameters 
p_CellId: 
The cell to be used to configure the new RLC entity. 
 
p_Payload: 
The TM payload size in bits. This should be equal to the simulated AM or UM payload size, plus the relevant RLC header size. 
 
p_RB_Identity: 
The RB Id to be used within the SS. Different values can be used by the SS decoder to determine which RLC mode is being simulated. 
 
Expected values: 
  -10 => UM7 
  -11 => UM15 
  -12 => AM7 
  -13 => AM15 
 
CRLC is configured with cellId -1 (tsc_CellDedicated) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CRLC ! CRLC_Config_REQ
$Cref ca_RB_TM_Info( 
  tsc_CellDedicated,  
  p_RB_Identity,   
  p_PayLoad,  
  { 
    uLlogicalChannelIdentity tsc_UL_DTCH1,  
    dLlogicalChannelIdentity tsc_DL_DTCH1 
  } 
)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CRLC ? CRLC_Config_CNF
$Cref ca_CRLC_CfgCnf( 
  tsc_CellDedicated,  
  p_RB_Identity  
)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_ReconfigRAB_ToSRB ( p_CellId: INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To reconfigure SS from a configuration including RABS to cell_DCH. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_SS_RelDPCH ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SS_1DCH_DCCH_Cfg ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SS_RB1_ToRB4_Cfg
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_ReconfNoDedicatedToCellFACH ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To reconfig the cell from cell_FACH_NoDedicated to cell_FACH. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfoActNow (p_CellId,  tsc_S_CCPCH1, c_UE_Info( tcv_TmpCellInfo.uRNTI,  tcv_TmpCellInfo.cRNTI), c_TrChInfoPCH_FACH_PS, c_TrLogMappingPCH_FACH_PS)
$VerdictId 
$Comment /* map PCCH to PCH, and map CCCH, BCCH,  DTCH and DCCH's to FACH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf(p_CellId,  tsc_S_CCPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CMAC ! CMAC_Config_REQ
$Cref ca_CMAC_ReconfigInfoActNow (p_CellId,  tsc_PRACH1, c_UE_Info(OMIT, tcv_TmpCellInfo.cRNTI), cb_TrChInfoRACH1, c_TrLogMappingRACH_DTCH )
$VerdictId 
$Comment /* CCCH, DCCH1, DCCH2, DCCH3, DCCH4 to RACH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CMAC ? CMAC_Config_CNF
$Cref ca_CMAC_CfgCnf(p_CellId, tsc_PRACH1)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + lt_RB_BCCH_FACH_Cfg
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [1] [px_RAT = tdd]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [1] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_RB_BCCH_FACH_Cfg
$BehaviourLine
$LabelId 
$Line [0] [ tcv_TmpCellInfo.cellConfig = cell_FACH_NoDedicated ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_SS_RB_BCCH_FACH_Cfg(p_CellId)
$Cref 
$VerdictId 
$Comment /* Config BCCH on FACH */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_Rel  ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To release all channels that are configured in the SS. */
$DefaultsRef SS_Def
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB ) OR  
( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
( tcv_TmpCellInfo.cellConfig = cell_DCH_Speech) OR   
( tcv_TmpCellInfo.cellConfig =  cell_DCH_64kCS_RAB_SRB )  OR  
( tcv_TmpCellInfo.cellConfig =  cell_DCH_57_6kCS_RAB_SRB)  OR  
( tcv_TmpCellInfo.cellConfig =  cell_DCH_64kPS_RAB_SRB  ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_RLC_DCH_AM_RAB_15Lis ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_RLC_DCH_AM_RAB_7Lis ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_RLC_DCH_UM_RAB_15Lis ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_RLC_DCH_UM_RAB_7Lis ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_PDCP_AM_RAB ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_PDCP_UM_RAB ) OR  
( tcv_TmpCellInfo.cellConfig =  cell_PDCP_AM_UM_RAB ) OR 
( tcv_TmpCellInfo.cellConfig =  cell_DCH_2AM_PS) OR  
( tcv_TmpCellInfo.cellConfig = cell_DCH_2_PS_Call) OR 
( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB) OR 
( tcv_TmpCellInfo.cellConfig = cell_DCH_MAC_SRB_NoConn )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_SS_RelDPCH ( p_CellId )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_NoDPCH ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_PS  ) OR ( tcv_TmpCellInfo.cellConfig = cell_FACH ) OR ( tcv_TmpCellInfo.cellConfig = cell_FACH_NoConn ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( p_CellId ,  tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_MAC_SRB  ) OR 
 ( tcv_TmpCellInfo.cellConfig =  cell_FACH_MAC_SRB_NoConn ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_CRLC_Rel ( tsc_CellDedicated,  tsc_RB1 )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (  tsc_CellDedicated,  tsc_RB2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB_DCCH_FACH_MAC)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB4 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CRLC_Rel ( p_CellId ,  tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_MAC_SRB0  ) OR ( tcv_TmpCellInfo.cellConfig = cell_FACH_MAC_SRB0_NoConn ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_CRLC_Rel ( tsc_CellDedicated,  tsc_RB1 )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (  tsc_CellDedicated,  tsc_RB2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB3)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB4 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CRLC_Rel ( p_CellId,   tsc_RB_CCCH_FACH_MAC )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [  ( tcv_TmpCellInfo.cellConfig = cell_FACH_BMC ) OR ( tcv_TmpCellInfo.cellConfig = cell_FACH_BMC_NoConn ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( p_CellId , tsc_RB30 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( p_CellId , tsc_RB_PCCH  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_2_PRACH_NoConn) OR   ( tcv_TmpCellInfo.cellConfig = cell_FACH_2_PRACH ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( p_CellId , tsc_RB_2ndCCCH)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CMAC_Rel (p_CellId,  tsc_PRACH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_PRACH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_PRACH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_SS_StopRL ( p_CellId , tsc_AICH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_2_SCCPCH_NoConn ) OR  ( tcv_TmpCellInfo.cellConfig = cell_FACH_2_SCCPCH ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( p_CellId , tsc_RB30 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel ( p_CellId , tsc_RB_PCCH  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( p_CellId, tsc_RB31)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CRLC_Rel ( p_CellId, tsc_RB_2ndPCCH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_SS_StopRL ( p_CellId ,   tsc_PICH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_NoDedicated ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_NoConn ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_PS ) ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel ( p_CellId,  tsc_RB0 )
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CMAC_Rel (p_CellId,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_PRACH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SS_StopRL ( p_CellId ,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId , tsc_AICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_CRLC_Rel ( p_CellId , tsc_RB_PCCH2  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] + ts_SS_StopRL ( p_CellId ,   tsc_PICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [18] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [19] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_2a_NoConn ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_2a ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_PS_2a ) ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB24 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( p_CellId,  tsc_RB0 )
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CMAC_Rel (p_CellId,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_PRACH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_SS_StopRL ( p_CellId , tsc_AICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_CRLC_Rel ( p_CellId , tsc_RB_PCCH2  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] + ts_SS_StopRL ( p_CellId ,   tsc_PICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [18] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [19] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [20] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1_NoConn  ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1 ) OR ( tcv_TmpCellInfo.cellConfig =cell_FACH_3_SCCPCH_4_FACH_Cnfg2_NoConn ) OR ( tcv_TmpCellInfo.cellConfig =cell_FACH_3_SCCPCH_4_FACH_Cnfg2) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel (p_CellId,   tsc_RB29)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH_RAB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CRLC_Rel ( p_CellId , tsc_RB_PCCH  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CRLC_Rel ( p_CellId,  tsc_RB0 )
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_CMAC_Rel (p_CellId,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_PRACH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_SS_StopRL ( p_CellId ,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_SS_StopRL ( p_CellId , tsc_AICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] + ts_SS_StopRL ( p_CellId ,   tsc_PICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [18] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [19] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [20] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH3 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [21] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH3)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [22] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH3 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [23] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [24] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH_NoConn ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel (p_CellId,   tsc_RB30)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel (p_CellId,   tsc_RB29)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH_RAB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CRLC_Rel ( p_CellId , tsc_RB_PCCH  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_CRLC_Rel ( p_CellId,  tsc_RB0 )
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_CMAC_Rel (p_CellId,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_PRACH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_SS_StopRL ( p_CellId ,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + ts_SS_StopRL ( p_CellId , tsc_AICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] + ts_SS_StopRL ( p_CellId ,   tsc_PICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [18] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [19] +ts_CPHY_TrChRelNonDch( p_CellId ,  tsc_S_CCPCH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [20] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [21] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH3 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [22] + ts_CPHY_TrChRelNonDch( p_CellId ,  tsc_S_CCPCH3)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [23] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH3 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [24] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [25] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TmpCellInfo.cellConfig = cell_Two_DTCH  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB10 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB11 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_CS ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB10 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB11 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB12 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB13 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ (tcv_TmpCellInfo.cellConfig = cell_Two_DTCH_CS_PS) OR ( tcv_TmpCellInfo.cellConfig = cell_Two_DTCH_PS_CS) ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB10 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ (tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_CS_PS) OR (tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_PS_CS) ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB10 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB11 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB12 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] +ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_DSCH_PS )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,    tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_PDSCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_DL_PDSCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_SS_StopRL ( p_CellId ,  tsc_DL_PDSCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_DSCH_CS_PS )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB10 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB11 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB12 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( tsc_CellDedicated,    tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_PDSCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_DL_PDSCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] + ts_SS_StopRL ( p_CellId ,  tsc_DL_PDSCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [18] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_NoConn ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH ) ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB24 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( p_CellId , tsc_RB_PCCH2  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CRLC_Rel ( p_CellId,  tsc_RB0 )
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CMAC_Rel (p_CellId,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_PRACH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_SS_StopRL ( p_CellId ,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_SS_StopRL ( p_CellId , tsc_AICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] + ts_SS_StopRL ( p_CellId ,   tsc_PICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [18] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [19] + ts_SS_StopRL ( p_CellId ,   tsc_PICH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [20] + lt_ReleaseCommonCh
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [21] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [22] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [23] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [24] + ts_SS_StopRL ( p_CellId ,   tsc_PICH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [25] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [26] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1_NoConn  ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg1 ) OR ( tcv_TmpCellInfo.cellConfig =cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2_NoConn ) OR ( tcv_TmpCellInfo.cellConfig =cell_FACH_3_SCCPCH_4_FACH_2a_Cnfg2) ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB24)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel (p_CellId,   tsc_RB29)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH_RAB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CRLC_Rel ( p_CellId , tsc_RB_PCCH  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_CRLC_Rel ( p_CellId,  tsc_RB0 )
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_CMAC_Rel (p_CellId,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_PRACH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_SS_StopRL ( p_CellId ,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + ts_SS_StopRL ( p_CellId , tsc_AICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] + ts_SS_StopRL ( p_CellId ,   tsc_PICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [18] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [19] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [20] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [21] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH3 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [22] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH3)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [23] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH3 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [24] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [25] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_2a_CTCH_NoConn ) OR   
( tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_2a_CTCH ) ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB24 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel (p_CellId,   tsc_RB30)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel (p_CellId,   tsc_RB29)
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH_FACH_RAB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_CRLC_Rel ( p_CellId , tsc_RB_PCCH  )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_CRLC_Rel ( p_CellId,  tsc_RB0 )
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_CMAC_Rel (p_CellId,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] +ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_PRACH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] + ts_SS_StopRL ( p_CellId ,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] + ts_SS_StopRL ( p_CellId , tsc_AICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [18] + ts_SS_StopRL ( p_CellId ,   tsc_PICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [19] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [20] +ts_CPHY_TrChRelNonDch( p_CellId ,  tsc_S_CCPCH2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [21] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [22] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH3 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [23] + ts_CPHY_TrChRelNonDch( p_CellId ,  tsc_S_CCPCH3)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [24] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH3 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [25] + lt_Release_BCCH
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [26] +  ts_SetCellCfg ( p_CellId,  cell_NotConfigured )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_Release_BCCH
$BehaviourLine
$LabelId 
$Line [0] + ts_CRLC_Rel ( p_CellId , tsc_RB_BCCH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CMAC_Rel (p_CellId, tsc_P_CCPCH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +  ts_CPHY_TrChRelNonDch ( p_CellId ,   tsc_P_CCPCH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SS_StopRL ( p_CellId, tsc_S_SCH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_SS_StopRL ( p_CellId, tsc_P_SCH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_SS_StopRL ( p_CellId ,  tsc_P_CCPCH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_SS_StopRL ( p_CellId, tsc_P_CPICH )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CPHY ! CPHY_Cell_Release_REQ
$Cref ca_CPHY_Cell_Release_REQ(p_CellId)
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] CPHY ? CPHY_Cell_Release_CNF
$Cref ca_CPHY_Cell_Release_CNF(p_CellId)
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$Header lt_ReleaseCommonCh
$BehaviourLine
$LabelId 
$Line [0] + ts_CRLC_Rel ( p_CellId,  tsc_RB0 )
$Cref 
$VerdictId 
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CMAC_Rel (p_CellId,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +  ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_PRACH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_SS_StopRL ( p_CellId , tsc_AICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_SS_StopRL ( p_CellId ,  tsc_PRACH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel ( p_CellId,  tsc_RB_PCCH )
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CMAC_Rel (p_CellId, tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CPHY_TrChRelNonDch ( p_CellId ,  tsc_S_CCPCH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SS_StopRL ( p_CellId ,   tsc_PICH1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_S_CCPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_RelSRB1_4
$BehaviourLine
$LabelId 
$Line [0] + ts_CRLC_Rel ( tsc_CellDedicated,  tsc_RB1 )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_Rel (  tsc_CellDedicated,  tsc_RB2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB3 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB4 )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1.  Release DPCH 
2.  Release PRACH 
3.  Release S-CCPCH */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_RelDPCH ( p_CellId : INTEGER )
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To release the DPCH channel. */
$DefaultsRef SS_Def
$Comment /* The following channels need to be removed: 
physical channels:  DPCH; 
transport channesl: DCH 
logical channels:  DCCH; and 
signalling radio bearer: signalling bearers on DCH radio access bearer on DCH. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB_NoConn ) OR  
(  tcv_TmpCellInfo.cellConfig = cell_DCH_StandAloneSRB) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_Speech ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,  tsc_RB10 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB11 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB12 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_CPHY_TrChRelDCH_NoSHO( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_64kCS_RAB_SRB )  OR  
( tcv_TmpCellInfo.cellConfig =  cell_DCH_57_6kCS_RAB_SRB )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB10 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_64kPS_RAB_SRB ) OR  
( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_RAB )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CMAC_Rel (tsc_CellDedicated,   tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CMAC_Rel (tsc_CellDedicated,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_PDCP_UM_RAB ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (tsc_CellDedicated,     tsc_RB21 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_PDCP_AM_UM_RAB )  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,    tsc_RB20 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,    tsc_RB21 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_AM_RAB_15Lis ) OR  
( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_AM_RAB_7Lis )  OR  
( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_UM_RAB_15Lis )  OR  
( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_UM_RAB_7Lis ) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + lt_ReleaseRLC_RB
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ (  tcv_TmpCellInfo.cellConfig =  cell_DCH_MAC_SRB) OR 
 ( tcv_TmpCellInfo.cellConfig =  cell_DCH_MAC_SRB_NoConn )]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_CRLC_Rel ( tsc_CellDedicated,  tsc_RB1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (  tsc_CellDedicated,  tsc_RB2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB_DCCH_DCH_MAC )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB4 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CPHY_TrChRelDCH_NoSHO( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [  ( tcv_TmpCellInfo.cellConfig = cell_DCH_2AM_PS)   
OR    
( tcv_TmpCellInfo.cellConfig =cell_DCH_2_PS_Call)  ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,  tsc_RB20)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB22 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_Two_DTCH_CS_PS ) ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,  tsc_RB10 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,  tsc_RB20)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CPHY_TrChRelDCH_NoSHO( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_Four_DTCH_CS_PS ) ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel ( tsc_CellDedicated,  tsc_RB10 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB11 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB12 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CRLC_Rel ( tsc_CellDedicated,  tsc_RB20)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] + ts_CPHY_TrChRelDCH_NoSHO( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( tcv_TmpCellInfo.cellConfig = cell_DCH_64kPS_RAB_SRB_HS )  ]
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_RelSRB1_4
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_CRLC_Rel (tsc_CellDedicated, tsc_RB25)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] + ts_CMAC_Rel (tsc_CellDedicated,    tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] + ts_CPHY_TrChRelDCH_NoSHO ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] + ts_SS_StopRL ( p_CellId ,  tsc_DL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] + ts_SS_StopRL ( p_CellId ,  tsc_UL_DPCH1 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR
$Line [1] [ TRUE ]
$Cref 
$VerdictId I
$End_BehaviourLine
$Header lt_ReleaseRLC_RB
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_TmpCellInfo.cellConfig =  cell_RLC_DCH_AM_RAB_15Lis) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_Rel (tsc_CellDedicated,    tsc_RB_AM_15_RLC )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_TmpCellInfo.cellConfig =  cell_RLC_DCH_AM_RAB_7Lis) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_Rel ( tsc_CellDedicated,    tsc_RB_AM_7_RLC)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [  ( tcv_TmpCellInfo.cellConfig = cell_RLC_DCH_UM_RAB_15Lis) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_Rel ( tsc_CellDedicated,    tsc_RB_UM_15_RLC)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ ( tcv_TmpCellInfo.cellConfig =  cell_RLC_DCH_UM_RAB_7Lis) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_Rel ( tsc_CellDedicated,    tsc_RB_UM_7_RLC)
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_RelSRB1_4
$BehaviourLine
$LabelId 
$Line [0] + ts_CRLC_Rel ( tsc_CellDedicated,  tsc_RB1 )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] + ts_CRLC_Rel (  tsc_CellDedicated,  tsc_RB2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + ts_CRLC_Rel ( tsc_CellDedicated,   tsc_RB3 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_CRLC_Rel (tsc_CellDedicated,   tsc_RB4 )
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SS_StopRL(p_CellId : INTEGER; p_PhyCH : PhysicalChannelIdentity)
$TestStepRef MACv520/BasicM_SS_Configuration_Steps/
$Objective /* To stop transmission and receiving on the specified physical channel */
$DefaultsRef SS_Def
$Comment /* To release (stop transmission and receiving) the specified physical channel */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CPHY!CPHY_RL_Release_REQ
$Cref ca_RL_RelReq(p_CellId, p_PhyCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CPHY?CPHY_RL_Release_CNF
$Cref ca_RL_RelCnf(p_CellId, p_PhyCH)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$End_TestStepGroup
$TestStepGroup
$TestStepGroupId BasicM_SysInfoHandling_Steps
$TestStepGroup
$TestStepGroupId Default
$Begin_TestStep
$TestStepId ts_InitializeSIB11_SIB12 ( p_CellID : INTEGER )
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To assign tcv_SIB11 and tcv_SIB12 */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellID )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_NumOfPLMN = 1]
$Cref 
$VerdictId 
$Comment /* Default I 
PLMN test case */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_1Or2PLMN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_NumOfPLMN = 2]
$Cref 
$VerdictId 
$Comment /* 2 PLMN test case */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_1Or2PLMN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_NumOfPLMN = 3]
$Cref 
$VerdictId 
$Comment /* 3 PLMN test case */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +lt_3PLMN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE ]
$Cref 
$VerdictId (I)
$Comment /* Test step not designed for this */
$End_BehaviourLine
$Header lt_1Or2PLMN
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellA ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_SIB11 := cb_SIB11_Def ( tcv_CellInfoA, tcv_CellInfoB, tcv_CellInfoC,   tcv_CellInfoG,  tcv_CellInfoH, tcv_CellInfoD,  tcv_CellInfoE,  tcv_CellInfoF ), 
 tcv_SIB12 := cb_SIB12_Def )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellB ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB11 := cb_SIB11_Def ( tcv_CellInfoB, tcv_CellInfoA, tcv_CellInfoC,   tcv_CellInfoG,  tcv_CellInfoH, tcv_CellInfoD,  tcv_CellInfoE,  tcv_CellInfoF ), 
tcv_SIB12 := cb_SIB12_Def )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellC]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB11 := cb_SIB11_Def ( tcv_CellInfoC, tcv_CellInfoA, tcv_CellInfoB,   tcv_CellInfoG,  tcv_CellInfoH,  tcv_CellInfoD,  tcv_CellInfoE,  tcv_CellInfoF), 
tcv_SIB12 := cb_SIB12_Def)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellD]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB11 := cb_SIB11_Freq2 ( tcv_CellInfoD, tcv_CellInfoE,  tcv_CellInfoF,  tcv_CellInfoA, tcv_CellInfoB,  tcv_CellInfoC,   tcv_CellInfoG,  tcv_CellInfoH ), 
tcv_SIB12 := cb_SIB12_Freq2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB11 := cb_SIB11_Freq2 ( tcv_CellInfoE, tcv_CellInfoD, tcv_CellInfoF,  tcv_CellInfoA,  tcv_CellInfoB,  tcv_CellInfoC,  tcv_CellInfoG,  tcv_CellInfoH ), 
tcv_SIB12 := cb_SIB12_Freq2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellF]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB11 := cb_SIB11_Freq2 ( tcv_CellInfoF,  tcv_CellInfoD,  tcv_CellInfoE, tcv_CellInfoA, tcv_CellInfoB,  tcv_CellInfoC,  tcv_CellInfoG,  tcv_CellInfoH ), 
tcv_SIB12 := cb_SIB12_Freq2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellG]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB11 := cb_SIB11_Def ( tcv_CellInfoG, tcv_CellInfoA, tcv_CellInfoB,  tcv_CellInfoC,  tcv_CellInfoH,  tcv_CellInfoD,  tcv_CellInfoE,  tcv_CellInfoF ), 
tcv_SIB12 := cb_SIB12_Def)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellH]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB11 := cb_SIB11_Def ( tcv_CellInfoH, tcv_CellInfoA, tcv_CellInfoB,  tcv_CellInfoC,  tcv_CellInfoG,  tcv_CellInfoD,  tcv_CellInfoE,  tcv_CellInfoF ), 
tcv_SIB12 := cb_SIB12_Def )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId I
$Comment /* no such cell */
$End_BehaviourLine
$Header lt_3PLMN
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellA ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_SIB11 := cb_SIB11_Freq3_PLMN1Or2 ( tcv_CellInfoA, tcv_CellInfoB, tcv_CellInfoC, tcv_CellInfoD,  tcv_CellInfoE,  tcv_CellInfoF ,   tcv_CellInfoG,  tcv_CellInfoH), 
 tcv_SIB12 := cb_SIB12_Def )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellB ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_SIB11 := cb_SIB11_Freq3_PLMN1Or2 ( tcv_CellInfoB, tcv_CellInfoA, tcv_CellInfoC, tcv_CellInfoD,  tcv_CellInfoE,  tcv_CellInfoF ,   tcv_CellInfoG,  tcv_CellInfoH), 
 tcv_SIB12 := cb_SIB12_Def )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellC]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_SIB11 := cb_SIB11_Freq3_PLMN1Or2 (tcv_CellInfoC,  tcv_CellInfoA, tcv_CellInfoB, tcv_CellInfoD,  tcv_CellInfoE,  tcv_CellInfoF ,   tcv_CellInfoG,  tcv_CellInfoH), 
 tcv_SIB12 := cb_SIB12_Def )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellD]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB11 := cb_SIB11_Freq3_PLMN1Or2( tcv_CellInfoD, tcv_CellInfoE,  tcv_CellInfoF,  tcv_CellInfoA, tcv_CellInfoB,  tcv_CellInfoC,   tcv_CellInfoG,  tcv_CellInfoH ), 
tcv_SIB12 := cb_SIB12_Freq2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB11 := cb_SIB11_Freq3_PLMN1Or2 ( tcv_CellInfoE, tcv_CellInfoD, tcv_CellInfoF,  tcv_CellInfoA,  tcv_CellInfoB,  tcv_CellInfoC,  tcv_CellInfoG,  tcv_CellInfoH ), 
tcv_SIB12 := cb_SIB12_Freq2 )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellF]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB11 := cb_SIB11_Freq3_PLMN1Or2 ( tcv_CellInfoF,  tcv_CellInfoD,  tcv_CellInfoE, tcv_CellInfoA, tcv_CellInfoB,  tcv_CellInfoC,  tcv_CellInfoG,  tcv_CellInfoH ), 
tcv_SIB12 := cb_SIB12_Freq2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellG]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB11 := cb_SIB11_Freq3_PLMN3 ( tcv_CellInfoG,  tcv_CellInfoH,tcv_CellInfoA, tcv_CellInfoB,  tcv_CellInfoC,   tcv_CellInfoD,  tcv_CellInfoE,  tcv_CellInfoF ), 
tcv_SIB12 := cb_SIB12_Def)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [p_CellID = tsc_CellH]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB11 := cb_SIB11_Freq3_PLMN3 (tcv_CellInfoH,  tcv_CellInfoG,  tcv_CellInfoA, tcv_CellInfoB,  tcv_CellInfoC,   tcv_CellInfoD,  tcv_CellInfoE,  tcv_CellInfoF ), 
tcv_SIB12 := cb_SIB12_Def)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId I
$Comment /* no such cell */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_InitializeSIB2AndSIB18( p_CellInfo: CellInfoCfg)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To initialize tcv_SIB2 and tcv_SIB18 */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_SIB2 := c_SIB2_Def ( p_CellInfo))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_NumOfPLMN = 1]
$Cref 
$VerdictId 
$Comment /* Default I 
PLMN test case */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SIB18 :=  c_SIB18_Def(p_CellInfo))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_NumOfPLMN = 2]
$Cref 
$VerdictId 
$Comment /* 2 PLMN Test Case */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_Init2PLMN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_NumOfPLMN = 3]
$Cref 
$VerdictId 
$Comment /* 3 PLMN Test case */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] + lt_Init3PLMN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE ]
$Cref 
$VerdictId (I)
$Comment /* The test step not designed for this */
$End_BehaviourLine
$Header lt_Init2PLMN
$BehaviourLine
$LabelId 
$Line [0] [ (p_CellInfo.cellId = tsc_CellA) OR 
(p_CellInfo.cellId = tsc_CellB) OR
(p_CellInfo.cellId = tsc_CellC) OR
(p_CellInfo.cellId = tsc_CellG) OR
(p_CellInfo.cellId = tsc_CellH) ]
$Cref 
$VerdictId 
$Comment /* PLMN Group 1 cells, Hence MCC and MNC of Cell D used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB18 :=  c_SIB18_2PLMN(tcv_CellInfoD))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE ]
$Cref 
$VerdictId 
$Comment /* PLMN Group 2 cells, Hence MCC and MNC of Cell A used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB18 :=  c_SIB18_2PLMN(tcv_CellInfoA))
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_Init3PLMN
$BehaviourLine
$LabelId 
$Line [0] [ (p_CellInfo.cellId = tsc_CellA) OR 
(p_CellInfo.cellId = tsc_CellB) OR
(p_CellInfo.cellId = tsc_CellC) ]
$Cref 
$VerdictId 
$Comment /* PLMN Group 1 cells, Hence MCC and MNC of Cell D and G used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB18 :=  c_SIB18_3PLMN(tcv_CellInfoD, tcv_CellInfoG))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ (p_CellInfo.cellId = tsc_CellD) OR 
(p_CellInfo.cellId = tsc_CellE) OR
(p_CellInfo.cellId = tsc_CellF) ]
$Cref 
$VerdictId 
$Comment /* PLMN Group 2 cells, Hence MCC and MNC of Cell A and G used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB18 :=  c_SIB18_3PLMN(tcv_CellInfoA, tcv_CellInfoG))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ TRUE ]
$Cref 
$VerdictId 
$Comment /* PLMN Group 3 cells, Hence MCC and MNC of Cell A and D used */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SIB18 :=  c_SIB18_3PLMN(tcv_CellInfoA, tcv_CellInfoD))
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendDefSysInfo ( p_CellId: INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To broadcast default system infomation. */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_UTRAN_GERAN_ParaInit( p_CellId )
$Cref 
$VerdictId 
$Comment /* ts_SetTmpCellInfo done already in ts_UTRAN_GERAN_ParaInit */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_CellDependentPara(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_InitializeSIB2AndSIB18( tcv_TmpCellInfo)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] + ts_InitializeSIB11_SIB12 ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] [px_RAT = fdd]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_SendNoSegDefSchedul(p_CellId)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_SendSIB1 ( cb_SIB1_Def(  tcv_TmpCellInfo),  
   p_CellId, tsc_Now )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +ts_SendSIB2 ( tcv_SIB2 ,  
     p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_SendSIB3(tcv_SIB3,  
    p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_SendSIB4(tcv_SIB4, p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] +ts_SendSIB5(cb_SIB5_Def(tcv_TmpCellInfo),  p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_SendSIB6(cb_SIB6_Def(tcv_TmpCellInfo), p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] +ts_SendSIB7(c_SIB7_Def, p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] +ts_SendSIB11(tcv_SIB11, p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] +ts_SendSIB12( tcv_SIB12, p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] +ts_SendSIB18( tcv_SIB18, p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] +ts_SendSB1_DefSchedul(tcv_SB1, p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] +ts_SendMIB(tcv_MIB, p_CellId, tsc_Now)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId ERR1
$Line [4] [px_RAT = tdd]
$Cref 
$VerdictId I
$End_BehaviourLine
$BehaviourLine
$LabelId ERR2
$Line [4] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendNoSegDefSchedul(p_CellId : INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To deliver the system information message with NoSegment to SS on the frames on which there is no any SIB/MIB/SB scheduled */
$DefaultsRef InitOtherwiseFail
$Comment /* Current scheduling assumption: 
Repetition period: 64 frames; 
Not scheduled positions: frame 54 (SIB_POS 27).  
Above unscheduled positions can be used for other SIBs later, if so this test Step shall be modified accordingly. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_Scheduling(p_CellId,  6, 27, tsc_Now)
$Cref 
$VerdictId 
$Comment /* pos = 27 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendSB1_DefSchedul (p_SB: SysInfoTypeSB1; p_CellId : INTEGER; p_Timing : INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To deliver the SysInfoTypeSB1 to SS */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_Segs := o_SIB_Segmentation ( o_SIB_PER_Encoding ( sB1 :  p_SB )))
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_Segs.segCount =1]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_Scheduling(p_CellId,  4, 1, p_Timing )
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +lt_CompleteSIB(schedulingBlock1)
$Cref 
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_ChangeSB1_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] (tcv_MIB.sibSb_ReferenceList.[0].scheduling := c_SB1_Schedul1, tcv_SB1_ValueTagChanged := FALSE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_Segs.segCount <>1]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$Header lt_CompleteSIB(p_SIBType : SIB_Type)
$BehaviourLine
$LabelId 
$Line [0] [LENGTH_OF(tcv_Segs.seg1) = 226]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmpl( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [LENGTH_OF(tcv_Segs.seg1) <> 226]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList1( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Unaligned PER encoding of the SB1 then segmentation. 
2. The result of segmentation shall be one segment for the SB1 ( current assumption). 
3. Send the scheduling info to SS.(one segment; REP=16; POS=1). 
4. Construct the system information message containing the first segment of SB1 and send it  to SS. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendSIB1 (p_SIB: SysInfoType1; p_CellId : INTEGER; p_Timing: INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To deliver the SIBType1 to SS */
$DefaultsRef InitOtherwiseFail
$Comment /* SIB1 is concatenated with SIB2. 
system information on air changes imediatly if p_Timing => 512. change of system information on air starts at the frame number = p_Timing. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_SIB1 := p_SIB,  
tcv_Segs.seg1 := o_SIB_PER_Encoding ( sIB1: p_SIB),  
tcv_Segs.seg2 := o_SIB_PER_Encoding ( sIB2 : tcv_SIB2))
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [(LENGTH_OF(tcv_Segs.seg1) + LENGTH_OF(tcv_Segs.seg2)) >201]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_Scheduling(p_CellId,  6, 11, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList2( systemInformationBlockType1, tcv_Segs.seg1, systemInformationBlockType2,  tcv_Segs.seg2))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] (tcv_MIB.sibSb_ReferenceList.[1].sibSb_Type.sysInfoType1 := (tcv_MIB.sibSb_ReferenceList.[1].sibSb_Type.sysInfoType1) MOD 256 + 1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_ChangeMIB_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Save the new SIB1 value to tcv_SIB1, unaligned PER encoding of the SIB1 and SIB2. 
2. The concatenated SIB1 and SIB2 is too long . 
3. Send the scheduling info to SS. one segment: REP=64, POS=11. 
4. Construct the system information message containing  completeList of SIB1+SIB2 and send it to SS. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendSIB11(p_SIB: SysInfoType11; p_CellId : INTEGER; p_Timing: INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To deliver the SIBType11 to SS */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_Segs := o_SIB_Segmentation(o_SIB_PER_Encoding ( sIB11 : p_SIB)))
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_Segs.segCount >3]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_Segs.segCount <=3]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 1]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_SB1.sib_ReferenceList.[2].sib_Type.sysInfoType11 := (tcv_SB1.sib_ReferenceList.[2].sib_Type.sysInfoType11) MOD 4 + 1, tcv_SB1.sib_ReferenceList.[2].scheduling := c_SIB11_Schedul1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeSB1_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 29, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +lt_CompleteSIB(systemInformationBlockType11)
$Cref 
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId, 6, 30, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 31, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 2]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_SB1.sib_ReferenceList.[2].sib_Type.sysInfoType11 := (tcv_SB1.sib_ReferenceList.[2].sib_Type.sysInfoType11) MOD 4 + 1, tcv_SB1.sib_ReferenceList.[2].scheduling := c_SIB11_Schedul2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeSB1_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 31, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId,  6, 29, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgFirst(systemInformationBlockType11, 2, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 30, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] [LENGTH_OF(tcv_Segs.seg2) <= 214]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,   cs_SIB_MsgLastShort(systemInformationBlockType11, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLast(systemInformationBlockType11, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 3]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_SB1.sib_ReferenceList.[2].sib_Type.sysInfoType11 := (tcv_SB1.sib_ReferenceList.[2].sib_Type.sysInfoType11) MOD 4 + 1, tcv_SB1.sib_ReferenceList.[2].scheduling := c_SIB11_Schedul3)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeSB1_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 30, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgSubsequent(systemInformationBlockType11, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId,  6, 29, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgFirst(systemInformationBlockType11, 3, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 31, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] [LENGTH_OF(tcv_Segs.seg3) <= 214]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,   cs_SIB_MsgLastShort(systemInformationBlockType11, 2, tcv_Segs.seg3))
$VerdictId 
$Comment /* 9. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLast(systemInformationBlockType11, 2, tcv_Segs.seg3))
$VerdictId 
$Comment /* 9. */
$End_BehaviourLine
$Header lt_CompleteSIB(p_SIBType : SIB_Type)
$BehaviourLine
$LabelId 
$Line [0] [LENGTH_OF(tcv_Segs.seg1) = 226]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmpl( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList1( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Unaligned PER encoding of the SIB11 then segmentation. 
2. The result of segmentation shall be one or two or three segments for the SIB11 ( current assumption). 
3. Send the scheduling info to SS. one segment: REP=64, POS=29. 
4. Construct the system information message containing first segment of SIB11 and send it  to SS. 
5. Send the scheduling info to SS. one segment: REP=64, POS=30. 
6. Send no segment system information message to SS. 
7. Construct the system information message containing the second segment of SIB11 and send it  to SS. 
8. Send the scheduling info segment to SS. one segment: REP=64, POS=31. 
9. Construct thesystem information message containing the third segment of SIB11 and send it  to SS. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendSIB12(p_SIB: SysInfoType12; p_CellId : INTEGER; p_Timing: INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To deliver the SIBType12 to SS */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_Segs := o_SIB_Segmentation(o_SIB_PER_Encoding ( sIB12 : p_SIB)))
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_Segs.segCount >3]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_Segs.segCount <=3]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 1]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_SB1.sib_ReferenceList.[3].sib_Type.sysInfoType12 := (tcv_SB1.sib_ReferenceList.[3].sib_Type.sysInfoType12) MOD 4 + 1, tcv_SB1.sib_ReferenceList.[3].scheduling := c_SIB12_Schedul1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeSB1_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 13, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +lt_CompleteSIB(systemInformationBlockType12)
$Cref 
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId, 6, 14, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,   cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 15, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,   cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 2]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_SB1.sib_ReferenceList.[3].sib_Type.sysInfoType12 := (tcv_SB1.sib_ReferenceList.[3].sib_Type.sysInfoType12) MOD 4 + 1, tcv_SB1.sib_ReferenceList.[3].scheduling := c_SIB12_Schedul2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeSB1_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 15, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,   cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId,  6, 13, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgFirst(systemInformationBlockType12, 2, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 14, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] [LENGTH_OF(tcv_Segs.seg2) <= 214]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLastShort(systemInformationBlockType12, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,   cs_SIB_MsgLast(systemInformationBlockType12, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 3]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_SB1.sib_ReferenceList.[3].sib_Type.sysInfoType12 := (tcv_SB1.sib_ReferenceList.[3].sib_Type.sysInfoType12) MOD 4 + 1, tcv_SB1.sib_ReferenceList.[3].scheduling := c_SIB12_Schedul3)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeSB1_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 14, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgSubsequent(systemInformationBlockType12, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId,  6, 13, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgFirst(systemInformationBlockType12, 3, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 15, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] [LENGTH_OF(tcv_Segs.seg3) <= 214]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLastShort(systemInformationBlockType12, 2, tcv_Segs.seg3))
$VerdictId 
$Comment /* 9. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,   cs_SIB_MsgLast(systemInformationBlockType12, 2, tcv_Segs.seg3))
$VerdictId 
$Comment /* 9. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_CompleteSIB(p_SIBType : SIB_Type)
$BehaviourLine
$LabelId 
$Line [0] [LENGTH_OF(tcv_Segs.seg1) = 226]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmpl( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList1( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Unaligned PER encoding of the SIB12 then segmentation. 
2. The result of segmentation shall be one or two or three segments for the SIB12 ( current assumption). 
3. Send the scheduling info segment to SS. one segment: REP=64, POS=13 . 
4. Construct the system information message containing the first segment of SIB12 and send it  to SS. 
5. Send the scheduling info segment to SS. one segment: REP=64, POS=14. 
6. Send no segment system information message to SS. 
7. Construct the system information message containing the second segment of SIB12 and send it  to SS. 
8. Send the scheduling info to SS. one segment: REP=64, POS=15 . 
9. Construct the system information message containing the third segment of SIB12 and send it  to SS. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendSIB18 (p_SIB: SysInfoType18; p_CellId : INTEGER; p_Timing: INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To deliver the SIB18 to SS */
$DefaultsRef InitOtherwiseFail
$Comment /* SIB18 is concatenated with SIB7, default scheduling described in 3GPP TS 34.123-3 clause 8.4.3 */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_SIB18 := p_SIB, tcv_Segs.seg1 := o_SIB_PER_Encoding ( sIB18 :  p_SIB), tcv_Segs.seg2 := o_SIB_PER_Encoding ( sIB7 :  tcv_SIB7))
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [(LENGTH_OF(tcv_Segs.seg1) + LENGTH_OF(tcv_Segs.seg2)) >201]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_Scheduling(p_CellId, 6, 18, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList2( 
systemInformationBlockType7,  tcv_Segs.seg2, 
 systemInformationBlockType18, tcv_Segs.seg1 ))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] (tcv_SB1.sib_ReferenceList.[4].sib_Type.sysInfoType18 := (tcv_SB1.sib_ReferenceList.[4].sib_Type.sysInfoType18) MOD 4 + 1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_ChangeSB1_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. save the new value of SIB18, unaligned PER encoding of the SIB7 and SIB18. 
2. The concatenated SIB7 and SIB18 is too long. 
3. Send the scheduling info to SS. one segment: REP=64, POS=18. 
4. Construct the system information message containing SIB18 + SIB7 and sent to SS. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendSIB2 ( p_SIB: SysInfoType2; p_CellId : INTEGER; p_Timing: INTEGER )
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To deliver the SIB2 to SS */
$DefaultsRef InitOtherwiseFail
$Comment /* SIB2 is concatenated with SIB1 */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_SIB2 := p_SIB,  
tcv_Segs.seg1 := o_SIB_PER_Encoding ( sIB2 :  p_SIB),  
tcv_Segs.seg2 := o_SIB_PER_Encoding ( sIB1 :  tcv_SIB1))
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [(LENGTH_OF(tcv_Segs.seg1) + LENGTH_OF(tcv_Segs.seg2)) >201]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_Scheduling(p_CellId, 6, 11, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq ( p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList2 ( systemInformationBlockType1,  tcv_Segs.seg2, systemInformationBlockType2, tcv_Segs.seg1 ))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] (tcv_MIB.sibSb_ReferenceList.[2].sibSb_Type.sysInfoType2 := (tcv_MIB.sibSb_ReferenceList.[2].sibSb_Type.sysInfoType2) MOD 4 + 1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_ChangeMIB_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Save the new SIB2 value to tcv_SIB2, unaligned PER encoding of the SIB1 and SIB2. 
2. The concatenated SIB1 and SIB2 is too long. 
3. Send the scheduling info to SS. one segment, REP=64, POS=11. 
4. Construct the system information message containing SIB2 + SIB1 and send it  to SS. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendSIB3(p_SIB: SysInfoType3; p_CellId : INTEGER; p_Timing: INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To deliver the SIB3 to SS */
$DefaultsRef InitOtherwiseFail
$Comment /* SIB3 is concatenated with SIB7. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] ( tcv_SIB3 := p_SIB, tcv_Segs.seg1 := o_SIB_PER_Encoding ( sIB3 :  p_SIB),  
tcv_Segs.seg2 := o_SIB_PER_Encoding ( sIB7 :  tcv_SIB7))
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [(LENGTH_OF(tcv_Segs.seg1) + LENGTH_OF(tcv_Segs.seg2)) >201]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_Scheduling(p_CellId, 6, 10, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList2( systemInformationBlockType7, tcv_Segs.seg2, systemInformationBlockType3,  tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] (tcv_MIB.sibSb_ReferenceList.[3].sibSb_Type.sysInfoType3 := (tcv_MIB.sibSb_ReferenceList.[3].sibSb_Type.sysInfoType3) MOD 4 + 1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_ChangeMIB_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Save the new value of SIB3 to tcv_SIB3, unaligned PER encoding of the SIB3 and SIB7. 
2. The concatenated SIB3 and SIB7 is too long. 
3. Send the scheduling info to SS. one segment; REP=64, POS=10. 
4. Construct the system information message containing SIB3 + SIB7 and send it  to SS. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendSIB4(p_SIB: SysInfoType4; p_CellId : INTEGER; p_Timing: INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To deliver the SIB4 to SS */
$DefaultsRef InitOtherwiseFail
$Comment /* SIB4 is concatenated with SIB7 */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_SIB4 := p_SIB, tcv_Segs.seg1 := o_SIB_PER_Encoding ( sIB4 :  p_SIB), tcv_Segs.seg2 := o_SIB_PER_Encoding ( sIB7 : tcv_SIB7))
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [(LENGTH_OF(tcv_Segs.seg1) + LENGTH_OF(tcv_Segs.seg2)) >201]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_Scheduling(p_CellId, 6, 26, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList2(  
 systemInformationBlockType7,  tcv_Segs.seg2, 
systemInformationBlockType4, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] (tcv_MIB.sibSb_ReferenceList.[4].sibSb_Type.sysInfoType4 := (tcv_MIB.sibSb_ReferenceList.[4].sibSb_Type.sysInfoType4) MOD 4 + 1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_ChangeMIB_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Save the new value of SIB3 to tcv_SIB3, unaligned PER encoding of the SIB3 and SIB7. 
2. The concatenated SIB4 and SIB7 is too long. 
3. Send the scheduling info to SS. one segment; REP=64, POS=10. 
4. Construct the system information message containing SIB4 + SIB7 and send it  to SS. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendSIB5 ( p_SIB: SysInfoType5; p_CellId : INTEGER; p_Timing: INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To deliver the SIBType5 to SS */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_Segs := o_SIB_Segmentation (o_SIB_PER_Encoding ( sIB5 :  p_SIB)))
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_Segs.segCount >4]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_Segs.segCount <=4]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 1]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_Scheduling(p_CellId, 6, 19, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +lt_CompleteSIB(systemInformationBlockType5)
$Cref 
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +ts_Scheduling(p_CellId, 6, 21, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,   cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] +ts_Scheduling(p_CellId, 6, 22, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] +ts_Scheduling(p_CellId, 6, 23, p_Timing)
$Cref 
$VerdictId 
$Comment /* 10. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] (tcv_MIB.sibSb_ReferenceList.[5].sibSb_Type.sysInfoType5 := (tcv_MIB.sibSb_ReferenceList.[5].sibSb_Type.sysInfoType5) MOD 4 + 1, tcv_MIB.sibSb_ReferenceList.[5].scheduling := c_SIB5_Schedul1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] +ts_ChangeMIB_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 2]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_MIB.sibSb_ReferenceList.[5].sibSb_Type.sysInfoType5 := (tcv_MIB.sibSb_ReferenceList.[5].sibSb_Type.sysInfoType5) MOD 4 + 1, tcv_MIB.sibSb_ReferenceList.[5].scheduling := c_SIB5_Schedul2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeMIB_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 22, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId, 6, 23, p_Timing)
$Cref 
$VerdictId 
$Comment /* 10. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 19, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgFirst(systemInformationBlockType5, 2, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] +ts_Scheduling(p_CellId, 6, 21, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] [LENGTH_OF(tcv_Segs.seg2) <= 214]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLastShort(systemInformationBlockType5, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLast(systemInformationBlockType5, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 3]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_MIB.sibSb_ReferenceList.[5].sibSb_Type.sysInfoType5 := (tcv_MIB.sibSb_ReferenceList.[5].sibSb_Type.sysInfoType5) MOD 4 + 1, tcv_MIB.sibSb_ReferenceList.[5].scheduling := c_SIB5_Schedul3)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeMIB_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 23, p_Timing)
$Cref 
$VerdictId 
$Comment /* 10. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId, 6, 19, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgFirst(systemInformationBlockType5, 3, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 21, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgSubsequent(systemInformationBlockType5, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] +ts_Scheduling(p_CellId, 6, 22, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] [LENGTH_OF(tcv_Segs.seg3) <= 214]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLastShort(systemInformationBlockType5, 2, tcv_Segs.seg3))
$VerdictId 
$Comment /* 9. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLast(systemInformationBlockType5, 2, tcv_Segs.seg3))
$VerdictId 
$Comment /* 9. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 4]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_MIB.sibSb_ReferenceList.[5].sibSb_Type.sysInfoType5 := (tcv_MIB.sibSb_ReferenceList.[5].sibSb_Type.sysInfoType5) MOD 4 + 1, tcv_MIB.sibSb_ReferenceList.[5].scheduling := c_SIB5_Schedul4)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeMIB_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 19, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgFirst(systemInformationBlockType5, 4, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId, 6, 21, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgSubsequent(systemInformationBlockType5, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 22, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgSubsequent(systemInformationBlockType5, 2, tcv_Segs.seg3))
$VerdictId 
$Comment /* 9. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] +ts_Scheduling(p_CellId, 6, 23, p_Timing)
$Cref 
$VerdictId 
$Comment /* 10. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] [LENGTH_OF(tcv_Segs.seg4) <= 214]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLastShort(systemInformationBlockType5, 3, tcv_Segs.seg4))
$VerdictId 
$Comment /* 11. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLast(systemInformationBlockType5, 3, tcv_Segs.seg4))
$VerdictId 
$Comment /* 11. */
$End_BehaviourLine
$Header lt_CompleteSIB(p_SIBType : SIB_Type)
$BehaviourLine
$LabelId 
$Line [0] [LENGTH_OF(tcv_Segs.seg1) = 226]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmpl( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList1( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Unaligned PER encoding of the SIB5 then segmentation. 
2. The result of segmentation shall be less that 5 segments for the SIB5 ( current assumption). 
3. Send the scheduling info segment to SS. one segment: REP=64, POS=19. 
4. Construct the system information message containing the first segment of SIB5 and send it  to SS. 
5. Send the scheduling info segment to SS. one segment: REP=64, POS=21. 
6. Send no segment system information message to SS. 
7. Construct the system information message containing the second segment of SIB5 and send it  to SS. 
8. Send the scheduling info to SS. one segment: REP=64, POS=22. 
9. Construct thesystem information message containing the third segment of SIB5 and send it  to SS. 
10. Send the scheduling info to SS. one segment: REP=64, POS=23. 
11. Construct the system information message containing the fourth segment of SIB5 and send it  to SS. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendSIB6(p_SIB: SysInfoType6; p_CellId : INTEGER; p_Timing: INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To deliver the SIBType6 to SS */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_Segs := o_SIB_Segmentation(o_SIB_PER_Encoding ( sIB6 :  p_SIB)))
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_Segs.segCount >4]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_Segs.segCount <=4]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 1]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_SB1.sib_ReferenceList.[0].sib_Type.sysInfoType6 := (tcv_SB1.sib_ReferenceList.[0].sib_Type.sysInfoType6) MOD 4 + 1, tcv_SB1.sib_ReferenceList.[0].scheduling := c_SIB6_Schedul1)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeSB1_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 3, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +lt_CompleteSIB(systemInformationBlockType6)
$Cref 
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId, 6, 5, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,   cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 6, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] +ts_Scheduling(p_CellId, 6, 7, p_Timing)
$Cref 
$VerdictId 
$Comment /* 10. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 2]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_SB1.sib_ReferenceList.[0].sib_Type.sysInfoType6 := (tcv_SB1.sib_ReferenceList.[0].sib_Type.sysInfoType6) MOD 4 + 1, tcv_SB1.sib_ReferenceList.[0].scheduling := c_SIB6_Schedul2)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeSB1_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 6, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId, 6, 7, p_Timing)
$Cref 
$VerdictId 
$Comment /* 10. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 3, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgFirst(systemInformationBlockType6, 2, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] +ts_Scheduling(p_CellId, 6, 5, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] [LENGTH_OF(tcv_Segs.seg2) <= 214]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLastShort(systemInformationBlockType6, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLast(systemInformationBlockType6, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 3]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_SB1.sib_ReferenceList.[0].sib_Type.sysInfoType6 := (tcv_SB1.sib_ReferenceList.[0].sib_Type.sysInfoType6) MOD 4 + 1, tcv_SB1.sib_ReferenceList.[0].scheduling := c_SIB6_Schedul3)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeSB1_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 7, p_Timing)
$Cref 
$VerdictId 
$Comment /* 10. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgNoSegment)
$VerdictId 
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId, 6, 3, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgFirst(systemInformationBlockType6, 3, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 5, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgSubsequent(systemInformationBlockType6, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] +ts_Scheduling(p_CellId, 6, 6, p_Timing)
$Cref 
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] [LENGTH_OF(tcv_Segs.seg3) <= 214]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLastShort(systemInformationBlockType6, 2, tcv_Segs.seg3))
$VerdictId 
$Comment /* 9. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLast(systemInformationBlockType6, 2, tcv_Segs.seg3))
$VerdictId 
$Comment /* 9. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] [tcv_Segs.segCount = 4]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] (tcv_SB1.sib_ReferenceList.[0].sib_Type.sysInfoType6 := (tcv_SB1.sib_ReferenceList.[0].sib_Type.sysInfoType6) MOD 4 + 1, tcv_SB1.sib_ReferenceList.[0].scheduling := c_SIB6_Schedul4)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_ChangeSB1_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +ts_Scheduling(p_CellId, 6, 3, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgFirst(systemInformationBlockType6, 4, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [8] +ts_Scheduling(p_CellId, 6, 5, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [9] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [10] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgSubsequent(systemInformationBlockType6, 1, tcv_Segs.seg2))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [11] +ts_Scheduling(p_CellId, 6, 6, p_Timing)
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [12] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [13] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgSubsequent(systemInformationBlockType6, 2, tcv_Segs.seg3))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [14] +ts_Scheduling(p_CellId, 6, 7, p_Timing)
$Cref 
$VerdictId 
$Comment /* 10. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [15] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] [LENGTH_OF(tcv_Segs.seg4) <= 214]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLastShort(systemInformationBlockType6, 3, tcv_Segs.seg4))
$VerdictId 
$Comment /* 11. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [16] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [17] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgLast(systemInformationBlockType6, 3, tcv_Segs.seg4))
$VerdictId 
$Comment /* 11. */
$End_BehaviourLine
$Header lt_CompleteSIB(p_SIBType : SIB_Type)
$BehaviourLine
$LabelId 
$Line [0] [LENGTH_OF(tcv_Segs.seg1) = 226]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmpl( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList1( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Unaligned PER encoding of the SIB6 then segmentation. 
2. The result of segmentation shall be one or two or three or four segments for the SIB6 ( current assumption). 
3. Send the scheduling info to SS. one segment: REP=64, POS=3. 
4. Construct the system information message containing the first segment of SIB6 and send it  to SS. 
5. Send the scheduling infot to SS. one segment: REP=64, POS=5. 
6. Send no segment system information message to SS. 
7. Construct the system information message containing the second segment of SIB6 and send it  to SS. 
8. Send the scheduling info to SS. one segment: REP=64, POS=6. 
9. Construct the system information message containing the third segment of SIB6 and send it  to SS. 
10. Send the scheduling info to SS. one segment: REP=64, POS=7. 
11. Construct the system information message containing the fourth segment of SIB6 and send it  to SS. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendSIB7(p_SIB: SysInfoType7; p_CellId : INTEGER; p_Timing: INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/Default/
$Objective /* To deliver the SIB7 to SS */
$DefaultsRef InitOtherwiseFail
$Comment /* single SIB7 or concatenated with SIB3 or SIB4 or SIB18, default scheduling described in 3GPP TS 34.123-3 clause 8.4.3 */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_Segs := o_SIB_Segmentation(o_SIB_PER_Encoding ( sIB7 :  p_SIB)), tcv_SIB7 := p_SIB)
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_Segs.segCount <>1]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [tcv_Segs.segCount =1]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_Scheduling(p_CellId, 6, 2, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +lt_CompleteSIB(systemInformationBlockType7)
$Cref 
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] +lt_ConcatWithSIB3
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +lt_ConcatWithSIB18
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] +lt_ConcatWithSIB4
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_CompleteSIB(p_SIBType : SIB_Type)
$BehaviourLine
$LabelId 
$Line [0] [LENGTH_OF(tcv_Segs.seg1) = 226]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmpl( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList1( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$Header lt_ConcatWithSIB3
$BehaviourLine
$LabelId 
$Line [0] (tcv_Segs.seg1 := o_SIB_PER_Encoding ( sIB7 :  p_SIB),  
tcv_Segs.seg2 := o_SIB_PER_Encoding ( sIB3 :  tcv_SIB3))
$Cref 
$VerdictId 
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [(LENGTH_OF(tcv_Segs.seg1) + LENGTH_OF(tcv_Segs.seg2)) >201]
$Cref 
$VerdictId I
$Comment /* 6. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_Scheduling(p_CellId,  6, 10, p_Timing)
$Cref 
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList2( systemInformationBlockType7, tcv_Segs.seg1, systemInformationBlockType3,  tcv_Segs.seg2))
$VerdictId 
$Comment /* 8. */
$End_BehaviourLine
$Header lt_ConcatWithSIB18
$BehaviourLine
$LabelId 
$Line [0] ( tcv_Segs.seg2 := o_SIB_PER_Encoding ( sIB18 :  tcv_SIB18))
$Cref 
$VerdictId 
$Comment /* 9. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [(LENGTH_OF(tcv_Segs.seg1) + LENGTH_OF(tcv_Segs.seg2)) >201]
$Cref 
$VerdictId I
$Comment /* 10. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_Scheduling(p_CellId,  6, 18, p_Timing)
$Cref 
$VerdictId 
$Comment /* 11. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList2( systemInformationBlockType7, tcv_Segs.seg1, systemInformationBlockType18,  tcv_Segs.seg2))
$VerdictId 
$Comment /* 12. */
$End_BehaviourLine
$Header lt_ConcatWithSIB4
$BehaviourLine
$LabelId 
$Line [0] ( tcv_Segs.seg2 := o_SIB_PER_Encoding ( sIB4 :  tcv_SIB4))
$Cref 
$VerdictId 
$Comment /* 13. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [(LENGTH_OF(tcv_Segs.seg1) + LENGTH_OF(tcv_Segs.seg2)) >201]
$Cref 
$VerdictId I
$Comment /* 14. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_Scheduling(p_CellId,  6, 26, p_Timing)
$Cref 
$VerdictId 
$Comment /* 15. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf(p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList2( systemInformationBlockType7, tcv_Segs.seg1, systemInformationBlockType4,  tcv_Segs.seg2))
$VerdictId 
$Comment /* 16. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. save the new value of SIB7, unaligned PER encoding of the SIB7 then segmentation. 
2. The result of segmentation shall be one segment for the SIB7 ( current assumption). 
3. Send the scheduling info to SS. one segment: REP=64, POS=2. 
4. Construct the system information message containing SIB7 and send it  to SS. 
5. unaligned PER encoding of the SIB7 and SIB3. 
6. concateneted SIB7 and SIB3 is too long. 
7. Send the scheduling info to SS. one segment: REP=64, POS=10. 
8. Construct the system information message containing SIB7 + SIB3 and send it  to SS. 
9. unaligned PER encoding of the SIB18. 
10. concatenated SIB7 and SIB18 is too long. 
11. Send the scheduling info to SS. one segment: REP=64, POS=18. 
12. Construct the system information message containing SIB7 + SIB18 and send it  to SS. 
13. unaligned PER encoding of the SIB4. 
14. concatenated SIB7 and SIB4 is too long. 
15. Send the scheduling info to SS. one segment: REP=64, POS=26. 
16. Construct the system information message containing SIB7 + SIB4 and send it  to SS. 
 
In system information broadcasting, SIB7 is concatinated with SIB3, SIB4, and SIB18, the assignment tcv_SIB7 := p_SIB in line 1 is to provide a communication mechanism between ts_SendSIB7 and ts_SendSIB4, ts_SendSIB3, ts_SendSIB18.  Normally the ts_SendSIB7 is called in the preamble part of the test case to establish the default system information broadcasting. If in the test body the contents of SIB7 need be changed  and afterards SIB3 or SIB4 or SIB18 needs also be changed, the  ts_SendSIB7 will be called again with a new SIB7 value and  ts_SendSIB3 or ts_SendSIB4 or ts_SendSIB18 will also be called again with new SIB value, in the new call of  ts_SendSIB3 or ts_SendSIB4 or ts_SendSIB18 new SIB7 value, which was used in the new call of ts_SendSIB7, shall be used. the assignment tcv_SIB7 := p_SIB in line 1 is to provide this new value for ts_SendSIB3 or ts_SendSIB4 or ts_SendSIB18. */
$End_TestStep
$End_TestStepGroup
$Begin_TestStep
$TestStepId ts_CellDependentPara ( p_CellID : INTEGER )
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$Objective /* To set cell dependent parameters */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellID )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [p_CellID = tsc_CellA ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SIB3.cellIdentity := tsc_CellIdCellA,  
tcv_SIB4.cellIdentity :=  tsc_CellIdCellA )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [p_CellID = tsc_CellB ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SIB3.cellIdentity := tsc_CellIdCellB,  
tcv_SIB4.cellIdentity :=  tsc_CellIdCellB )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [p_CellID = tsc_CellC]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SIB3.cellIdentity := tsc_CellIdCellC,  
tcv_SIB4.cellIdentity :=  tsc_CellIdCellC)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [p_CellID = tsc_CellD]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SIB3.cellIdentity := tsc_CellIdCellD,  
tcv_SIB4.cellIdentity :=  tsc_CellIdCellD)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [p_CellID = tsc_CellE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SIB3.cellIdentity := tsc_CellIdCellE,  
tcv_SIB4.cellIdentity :=  tsc_CellIdCellE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [p_CellID = tsc_CellF]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SIB3.cellIdentity := tsc_CellIdCellF,  
tcv_SIB4.cellIdentity :=  tsc_CellIdCellF)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [p_CellID = tsc_CellG]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SIB3.cellIdentity := tsc_CellIdCellG,  
tcv_SIB4.cellIdentity :=  tsc_CellIdCellG)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [p_CellID = tsc_CellH]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SIB3.cellIdentity := tsc_CellIdCellH,  
tcv_SIB4.cellIdentity :=  tsc_CellIdCellH)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [TRUE]
$Cref 
$VerdictId I
$Comment /* no such cell */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_ChangeMIB_ValueTag
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$Objective /* To increment MIBValueTag if tcv_MIB_ValueTagChanged = FALSE. */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [tcv_MIB_ValueTagChanged = FALSE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (  tcv_MIB.mib_ValueTag := ( tcv_MIB.mib_ValueTag) MOD 8 + 1,   tcv_MIB_ValueTagChanged := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [tcv_MIB_ValueTagChanged = TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_ChangeSB1_ValueTag
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$Objective /* To increment SB1ValueTag if tcv_SB1_ValueTagChanged = FALSE. */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [tcv_SB1_ValueTagChanged = FALSE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_SB1_ValueTag := (tcv_MIB.sibSb_ReferenceList.[0].sibSb_Type.sysInfoTypeSB1) MOD 4 + 1,  tcv_MIB.sibSb_ReferenceList.[0].sibSb_Type.sysInfoTypeSB1 := tcv_SB1_ValueTag, 
tcv_SB1_ValueTagChanged := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] +ts_ChangeMIB_ValueTag
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_Scheduling(p_CellId: INTEGER; p_REP : INTEGER; p_POS : INTEGER; p_Timing : INTEGER )
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$Objective /*  */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] (tcv_BCCH_ModifyTime := p_Timing)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [p_Timing >= 512]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CMAC!CMAC_SYSINFO_Config_REQ
$Cref ca_SchedulNow ( p_CellId, p_REP, p_POS )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [p_Timing <= 511]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] CMAC!CMAC_SYSINFO_Config_REQ
$Cref ca_SchedulLater(p_CellId, p_REP, p_POS, p_Timing)
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendMIB(p_MIB: MasterInformationBlock; p_CellId : INTEGER; p_Timing: INTEGER)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$Objective /* To deliver the MIB to SS */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_MIB.plmn_Type.gsm_MAP.plmn_Identity.mcc := o_HexToDigitsMCC ( tcv_TmpCellInfo.mcc),  
tcv_MIB.plmn_Type.gsm_MAP.plmn_Identity.mnc := o_HexToDigitsMNC ( tcv_TmpCellInfo.mnc ) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_Segs := o_SIB_Segmentation(o_SIB_PER_Encoding ( mIB :  tcv_MIB)))
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [tcv_Segs.segCount <>1]
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [tcv_Segs.segCount =1]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [4] +ts_Scheduling(p_CellId,  3, 0, p_Timing)
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [5] CMAC?CMAC_SYSINFO_Config_CNF
$Cref ca_SysInfoCfgCnf (p_CellId,  tsc_RB_BCCH)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [6] +lt_CompleteSIB(masterInformationBlock)
$Cref 
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [7] (tcv_MIB_ValueTagChanged := FALSE)
$Cref 
$VerdictId 
$End_BehaviourLine
$Header lt_CompleteSIB(p_SIBType : SIB_Type)
$BehaviourLine
$LabelId 
$Line [0] [LENGTH_OF(tcv_Segs.seg1) = 226]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmpl ( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] TM!RLC_TR_DATA_REQ
$Cref ca_TR_DataReq(p_CellId,  tsc_RB_BCCH,  cs_SIB_MsgCmplList1( p_SIBType, tcv_Segs.seg1))
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Unaligned PER encoding of the MIB then segmentation. 
2. The result of segmentation shall be one segment for the MIB ( current assumption). 
3. Send the scheduling info to SS.(one segment; REP=8; POS=0) 
4. Construct the system information message containing MIB and sent to SS. */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendSysInfoChangeInd_InFACHConfig( 
p_CellId:INTEGER; 
p_mib_valuetag: MIB_ValueTag 
)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$Objective /* Transmit System Information change indication message with IE "BCCH modification info" on the BCCH, to inform UE the change of System Information. */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [   (tcv_TmpCellInfo.cellConfig = cell_FACH) OR 
(tcv_TmpCellInfo.cellConfig =  cell_FACH_NoConn) OR  
(tcv_TmpCellInfo.cellConfig =  cell_FACH_PS) OR 
(tcv_TmpCellInfo.cellConfig =  cell_FACH_2_PRACH_NoConn) OR  
(tcv_TmpCellInfo.cellConfig = cell_FACH_2_PRACH )OR 
 (tcv_TmpCellInfo.cellConfig = cell_FACH_BMC) OR  
 (tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH_NoConn) OR  
 (tcv_TmpCellInfo.cellConfig = cell_FACH_2SCCPCH_StandAlonePCH) OR  
 (tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1_NoConn) OR  
 (tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg1) OR  
 (tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2_NoConn) OR  
 (tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_4_FACH_Cnfg2) OR  
 (tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH_NoConn) OR  
(tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH) OR  
(tcv_TmpCellInfo.cellConfig = cell_FACH_3_SCCPCH_3_FACH_CTCH_NoConn) ]
$Cref 
$VerdictId 
$Comment /* If BCCH on FACH is configured then send System info change indication 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] TM ! RLC_TR_DATA_REQ
$Cref cas_SysInfoChangeInd (  
    p_CellId,  
     tsc_RB_BCCH_FACH, 
    cs_SysInfoChangeInd ( 
        p_mib_valuetag 
    )  
)
$VerdictId 
$Comment /* SS sends SYSTEM INFORMATION CHANGE INDICATION message containing IE "BCCH modification info"on the BCCH to inform UE the change of system information. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE]
$Cref 
$VerdictId 
$Comment /* do nothing */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_SendPage1_ModifySI ( 
p_CellId:INTEGER; 
p_mib_valuetag: MIB_ValueTag 
)
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$Objective /* Transmit Paging Type 1 with IE "BCCH modification info" on the PCCH, to informed UE the change of System Information. and Transmit System Information change indication message with IE "BCCH modification info" on the BCCH, to inform UE the change of System Information. */
$DefaultsRef InitOtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] +ts_RRC_Delay(tsc_WaitBeforePaging)
$Cref 
$VerdictId 
$Comment /* Give delay before paging type1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] +ts_CMAC_Pag1_Cfg(p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] TM ! RLC_TR_DATA_REQ
$Cref cas_PagingType1 (  
    p_CellId,  
     tsc_RB_PCCH, 
    cs_RRC_PagingType1_ModifySI ( 
        p_mib_valuetag 
    )  
)
$VerdictId 
$Comment /* SS sends PAGING TYPE1 message containing IE "BCCH modification info"on the PCCH to inform UE the change of system information. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] +ts_SendSysInfoChangeInd_InFACHConfig(p_CellId,   p_mib_valuetag)
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_UTRAN_GERAN_ParaInit ( p_CellId: INTEGER )
$TestStepRef MACv520/BasicM_SysInfoHandling_Steps/
$Objective /* Initialize default parameters for different region */
$DefaultsRef InitOtherwiseFail
$Comment /* currently only UTRAN and UTRAN/GERAN  are defined */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] + ts_SetTmpCellInfo ( p_CellId )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [px_UTRAN_GERAN = "UTRAN and GERAN"]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SIB3 := cb_SIB3_DefUTRAN_GERAN ( tcv_TmpCellInfo), 
tcv_SIB4 := cb_SIB4_DefUTRAN_GERAN ( tcv_TmpCellInfo))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [px_UTRAN_GERAN = "UTRAN only"]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] (tcv_SIB3 := cb_SIB3_DefUTRAN ( tcv_TmpCellInfo), 
tcv_SIB4 := cb_SIB4_DefUTRAN ( tcv_TmpCellInfo))
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [TRUE]
$Cref 
$VerdictId I
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$End_TestStepGroup
$TestStepGroup
$TestStepGroupId BasicM_TC_Steps
$Begin_TestStep
$TestStepId ts_TC_ActivateRB_TestMode (p_CellId: INTEGER )
$TestStepRef MACv520/BasicM_TC_Steps/
$Objective /* Activate UE radio bearer test mode. */
$DefaultsRef NAS_OtherwiseFailActRB_TM
$Comment /* tcv_TestModeActivated is assigned to TRUE to keep track that RB test mode has been activated during the test case; to be used in the postamble. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain  = cs_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc!RRC_DataReq START t_Dly (tsc_TT01)
$Cref ca_DataReq ( tsc_CellDedicated, tsc_RB3, c_ActivateRB_TestMode )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSP1
$Line [2] Dc?RRC_DataInd CANCEL t_Dly
$Cref car_UplinkDirectTransfer ( tsc_CellDedicated, tsc_RB3, c_ActivateRB_TestModeCmpl)
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_RB_TestModeActivated := TRUE )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId TSF1
$Line [2] ?TIMEOUT t_Dly
$Cref 
$VerdictId (F)
$Comment /* no answer received */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain  = ps_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc!RRC_DataReq START t_Dly (tsc_TT01)
$Cref ca_PS_DataReq ( tsc_CellDedicated, tsc_RB3, c_ActivateRB_TestMode )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSP2
$Line [2] Dc?RRC_DataInd CANCEL t_Dly
$Cref car_PS_UplinkDirectTransfer ( tsc_CellDedicated, tsc_RB3, c_ActivateRB_TestModeCmpl)
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_RB_TestModeActivated := TRUE )
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId TSF2
$Line [2] ?TIMEOUT t_Dly
$Cref 
$VerdictId (F)
$Comment /* no answer received */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_TC_CloseUE_TestLoop(p_CellId: INTEGER; p_UE_TestLoopMode: UE_TestLoopMode; p_UE_TestLoopMode1LB_Setup: UE_TestLoopMode1LB_Setup)
$TestStepRef MACv520/BasicM_TC_Steps/
$Objective /* Close UE test loop */
$DefaultsRef NAS_OtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain  = cs_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc!RRC_DataReq START t_Dly (tsc_TT01)
$Cref ca_DataReq( tsc_CellDedicated, tsc_RB3,c_CloseUE_TestLoop(p_UE_TestLoopMode, p_UE_TestLoopMode1LB_Setup))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSP1
$Line [2] Dc?RRC_DataInd CANCEL t_Dly
$Cref car_UplinkDirectTransfer ( tsc_CellDedicated, tsc_RB3, c_CloseUE_TestLoopCmpl )
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId TSF1
$Line [2] ?TIMEOUT t_Dly
$Cref 
$VerdictId (F)
$Comment /* no answer received */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain  = ps_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc!RRC_DataReq START t_Dly (tsc_TT01)
$Cref ca_PS_DataReq( tsc_CellDedicated, tsc_RB3,c_CloseUE_TestLoop(p_UE_TestLoopMode, p_UE_TestLoopMode1LB_Setup))
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSP2
$Line [2] Dc?RRC_DataInd CANCEL t_Dly
$Cref car_PS_UplinkDirectTransfer ( tsc_CellDedicated, tsc_RB3, c_CloseUE_TestLoopCmpl )
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId TSF2
$Line [2] ?TIMEOUT t_Dly
$Cref 
$VerdictId (F)
$Comment /* no answer received */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_TC_DeactivateRB_TestMode(p_CellId: INTEGER )
$TestStepRef MACv520/BasicM_TC_Steps/
$Objective /* Deactivate UE radio bearer test mode */
$DefaultsRef NAS_OtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain  = cs_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc!RRC_DataReq START t_Dly (tsc_TT01)
$Cref ca_DataReq( tsc_CellDedicated, tsc_RB3,c_DeactivateRB_TestMode)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSP1
$Line [2] Dc?RRC_DataInd CANCEL t_Dly
$Cref car_UplinkDirectTransfer ( tsc_CellDedicated, tsc_RB3, c_DeactivateRB_TestModeCmpl )
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId TSF1
$Line [2] ?TIMEOUT t_Dly
$Cref 
$VerdictId (F)
$Comment /* no answer received */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [ tcv_CN_Domain  = ps_domain ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc!RRC_DataReq START t_Dly (tsc_TT01)
$Cref ca_PS_DataReq( tsc_CellDedicated, tsc_RB3,c_DeactivateRB_TestMode)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId TSP2
$Line [2] Dc?RRC_DataInd CANCEL t_Dly
$Cref car_PS_UplinkDirectTransfer ( tsc_CellDedicated, tsc_RB3, c_DeactivateRB_TestModeCmpl )
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId TSF2
$Line [2] ?TIMEOUT t_Dly
$Cref 
$VerdictId (F)
$Comment /* no answer received */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$End_TestStepGroup
$TestStepGroup
$TestStepGroupId BasicM_UT_Steps
$Begin_TestStep
$TestStepId ts_AT_TriggerGMM_Attach
$TestStepRef MACv520/BasicM_UT_Steps/
$Objective /* Trigger UE to start GMM Attach procedure via AT command +CGATT */
$DefaultsRef UT_OtherwiseFail
$Comment /* (see 3GPP 27.007 / 10.1.9) */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] Ut ! AT_CmdReq
$Cref ca_AT_CmdReq ( "AT+CGATT=1<CR>" )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ? AT_CmdCnf
$Cref ca_AT_CmdCnf
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MMI_UE_PwrOff
$TestStepRef MACv520/BasicM_UT_Steps/
$Objective /* To make the operator power off the UE */
$DefaultsRef UT_OtherwiseFail
$Comment /*  */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ tcv_UE_SwitchedOn = TRUE]
$Cref 
$VerdictId 
$Comment /* UE is ON */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "Please power off the UE")
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_UE_SwitchedOn := FALSE)
$Cref 
$VerdictId 
$Comment /* UE is now OFF */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [  TRUE]
$Cref 
$VerdictId 
$Comment /* UE is Already OFF */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MMI_UE_PwrOn
$TestStepRef MACv520/BasicM_UT_Steps/
$Objective /* To make the operator power on the UE */
$DefaultsRef UT_OtherwiseFail
$Comment /*  */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ tcv_UE_SwitchedOn = FALSE]
$Cref 
$VerdictId 
$Comment /* UE is OFF */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "Please power on the UE")
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_UE_SwitchedOn := TRUE)
$Cref 
$VerdictId 
$Comment /* UE is now ON */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [  TRUE]
$Cref 
$VerdictId 
$Comment /* UE is Already ON */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MMI_UE_SwitchOff
$TestStepRef MACv520/BasicM_UT_Steps/
$Objective /* To make the operator switch off the UE */
$DefaultsRef UT_OtherwiseFail
$Comment /*  */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ tcv_UE_SwitchedOn = TRUE]
$Cref 
$VerdictId 
$Comment /* UE is ON */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "Please switch off the UE")
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_UE_SwitchedOn := FALSE)
$Cref 
$VerdictId 
$Comment /* UE is now OFF */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [  TRUE]
$Cref 
$VerdictId 
$Comment /* UE is Already OFF */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MMI_UE_SwitchOn
$TestStepRef MACv520/BasicM_UT_Steps/
$Objective /* To make the operator switch on the UE */
$DefaultsRef UT_OtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] [ tcv_UE_SwitchedOn = FALSE]
$Cref 
$VerdictId 
$Comment /* UE is OFF */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "Please switch on the UE")
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] ( tcv_UE_SwitchedOn := TRUE)
$Cref 
$VerdictId 
$Comment /* UE is now ON */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] [  TRUE]
$Cref 
$VerdictId 
$Comment /* UE is Already ON */
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MMI_USIM_Insert
$TestStepRef MACv520/BasicM_UT_Steps/
$Objective /* To make the operator insert the USIM card */
$DefaultsRef UT_OtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "Please insert the USIM card into the UE")
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$Begin_TestStep
$TestStepId ts_MMI_USIM_Remove
$TestStepRef MACv520/BasicM_UT_Steps/
$Objective /* To make the operator remove the USIM card */
$DefaultsRef UT_OtherwiseFail
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "Please remove the USIM card from the UE")
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_TestStep
$End_TestStepGroup
$End_TestStepLibrary
$DefaultsLibrary
$DefaultGroup
$DefaultGroupId Init_Defaults
$Begin_Default
$DefaultId InitOtherwiseFail
$DefaultRef MACv520/Init_Defaults/
$Objective /*  */
$Comment /* Handle any irrelevant sync/outsync indications during cell setup */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CPHY?CPHY_Sync_IND
$Cref ca_SyncInd (?)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?CPHY_Out_of_Sync_IND
$Cref ca_OutOfSyncInd (?)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?CRLC_Integrity_Failure_IND
$Cref car_CRLC_IntegrityFail
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF1
$Line [1] [ tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI8
$Line [2] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF8
$Line [2] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_Default
$End_DefaultGroup
$DefaultGroup
$DefaultGroupId NAS_Defaults
$Begin_Default
$DefaultId NAS_OtherwiseFail
$DefaultRef MACv520/NAS_Defaults/
$Objective /* To match unexpected events and fail the test case. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT t_Guard
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "The guard timer has run out. Please take appropriate measures")
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI1
$Line [4] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF1
$Line [4] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd[tcv_MM_TestExecution]
$Cref car_PS_InitDirectTransfer ( tsc_CellDedicated,  
tsc_RB3,  
cr_AttachReq ( 
c_AttachTypeAny, c_MobileIdAny_lv, c_RAI_Any_v,?))
$VerdictId 
$Comment /* 6. 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc ! RRC_DataReq
$Cref ca_PS_DataReq ( tsc_CellDedicated,  
tsc_RB3, 
cs_AttachRej( 
'07'O))
$VerdictId 
$Comment /* 7. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT t_TimeoutInDefault
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_TimeoutInDefault := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI8
$Line [2] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF8
$Line [2] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_GMM_AttachExpect = TRUE] ( 
tcv_TmpAttachReqPDU := RRC_DataInd.msg, 
tcv_TmpB3:= tcv_TmpAttachReqPDU.attachType.type, 
tcv_CellIndInfo.start_PS := RRC_DataInd.start , tcv_GMM_AttachRec := TRUE )
$Cref car_PS_InitDirectTransfer (tsc_CellDedicated, tsc_RB3,  
cr_AttachReq ( 
c_AttachTypeAny, c_MobileIdAny_lv, c_RAI_Any_v,  
?))
$VerdictId 
$Comment /* ATTACH REQUEST 
 - Extract Attach type requested 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_ReceivePS_ServiceReq = TRUE ]
$Cref car_InitDirectTransfer ( tsc_CellDedicated , tsc_RB3, cr_ServiceRequest ( c_ServiceType_v(?), c_MobileIdAny_lv, ? ) 
)
$VerdictId 
$Comment /* SERVICE REQUEST */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_GMM_RAU_Expect = TRUE ]( 
tcv_TmpRAU_ReqPDU := RRC_DataInd.msg, 
tcv_CellIndInfo.start_PS := RRC_DataInd.start , 
tcv_GMM_RAU_Rec := TRUE )
$Cref car_PS_InitDirectTransfer ( tsc_CellDedicated , tsc_RB3, 
cbr_RA_UpdReqAny ( 
c_GMM_UpdateType_v(?,?), 
c_RAI_Any_v, 
? ) 
)
$VerdictId 
$Comment /* ROUTING AREA UPDATE REQUEST
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_GMM_DetachExpect = TRUE ]( tcv_GMM_DetachExpect := FALSE )
$Cref car_PS_UplinkDirectTransfer ( tsc_CellDedicated , tsc_RB3,          
cr_DetachRequest_MO )
$VerdictId 
$Comment /* DETACH REQUEST 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI2
$Line [0] Dc?OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId (I)
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CANCEL
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId DFF2
$Line [0] Dc?OTHERWISE [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId (F)
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CANCEL
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?CRLC_Integrity_Failure_IND
$Cref car_CRLC_IntegrityFail
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF3
$Line [1] [ tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. The guard timer times out, inconclusive. 
2. If unexpectied data is received in the preambles or postambles, a preliminary inconclusive verdict is assigned, and the test case is terminated. 
3. Cancel of all running timers. 
4. Depending upon the context appropriate measures may differ: the guard timer duration may be increased, operator action during a test may be speeded up, ... 
5. If unexpected data is received in the test body, a preliminary failure verdict is assigned, and the test case is terminated. 
6. ATTACH REQUEST with any contents received during MM_TestExecution 
7. ATTACH REJECT  with cause 'GPRS services not allowed' 
8. DETACH REQUEST received during MM_TestExecution 
9. DETACH ACCEPT */
$End_Default
$Begin_Default
$DefaultId NAS_OtherwiseFailActRB_TM
$DefaultRef MACv520/NAS_Defaults/
$Objective /* To match unexpected events and fail the test case. 
Any Setup or Activate PDP context request message can be received and ignored. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_CN_Domain = cs_domain ]
$Cref car_UplinkDirectTransfer ( tsc_CellDedicated,  tsc_RB3, cr_SetupMO_Any )
$VerdictId 
$Comment /* 0. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_CN_Domain = ps_domain ]
$Cref car_UplinkDirectTransfer ( tsc_CellDedicated,  tsc_RB3, cr_ActPDP_ContextReqMO_Any )
$VerdictId 
$Comment /* 0. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT t_Guard
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "The guard timer has run out. Please take appropriate measures")
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI1
$Line [4] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF1
$Line [4] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_ReceivePS_ServiceReq = TRUE ]
$Cref car_InitDirectTransfer ( tsc_CellDedicated , tsc_RB3, cr_ServiceRequest ( c_ServiceType_v(?), c_MobileIdAny_lv, ? ) 
)
$VerdictId 
$Comment /* SERVICE REQUEST */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI2
$Line [0] Dc?OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId (I)
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CANCEL
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId DFF2
$Line [0] Dc?OTHERWISE [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId (F)
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] CANCEL
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?CRLC_Integrity_Failure_IND
$Cref car_CRLC_IntegrityFail
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF3
$Line [1] [ tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 0. UE may send the SETUP or the Activate PDP context request message, then it shall be ignored 
1. The guard timer times out, inconclusive. 
2. If unexpectied data is received in the preambles or postambles, a preliminary inconclusive verdict is assigned, and the test case is terminated. 
3. Cancel of all running timers. 
4. Depending upon the context appropriate measures may differ: the guard timer duration may be increased, operator action during a test may be speeded up, ... 
5. If unexpected data is received in the test body, a preliminary failure verdict is assigned, and the test case is terminated. */
$End_Default
$End_DefaultGroup
$DefaultGroup
$DefaultGroupId RRC_Defaults
$Begin_Default
$DefaultId RRC_Def1
$DefaultRef MACv520/RRC_Defaults/
$Objective /* To match unexpected events and fail the test case. */
$Comment /*  */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] TM?RxStatus [ tcv_RLC_IgnoreStatus = TRUE ]
$Cref car_StatusInd(tsc_RB_AM_7_RLC)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_GMM_AttachExpect = TRUE] ( 
tcv_TmpAttachReqPDU := RRC_DataInd.msg, 
tcv_TmpB3:= tcv_TmpAttachReqPDU.attachType.type, 
tcv_CellIndInfo.start_PS := RRC_DataInd.start , tcv_GMM_AttachRec := TRUE )
$Cref car_PS_InitDirectTransfer (tsc_CellDedicated, tsc_RB3,  
cr_AttachReq ( 
c_AttachTypeAny, c_MobileIdAny_lv, c_RAI_Any_v,  
?))
$VerdictId 
$Comment /* ATTACH REQUEST 
 - Extract Attach type requested 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_GMM_RAU_Expect = TRUE ]( 
tcv_TmpRAU_ReqPDU := RRC_DataInd.msg, 
tcv_CellIndInfo.start_PS := RRC_DataInd.start , 
tcv_GMM_RAU_Rec := TRUE )
$Cref car_PS_InitDirectTransfer ( tsc_CellDedicated , tsc_RB3, 
cbr_RA_UpdReqAny ( 
c_GMM_UpdateType_v(?,?), 
c_RAI_Any_v, 
? ) 
)
$VerdictId 
$Comment /* ROUTING AREA UPDATE REQUEST
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_GMM_DetachExpect = TRUE ]( tcv_GMM_DetachExpect := FALSE )
$Cref car_PS_UplinkDirectTransfer ( tsc_CellDedicated , tsc_RB3,          
cr_DetachRequest_MO )
$VerdictId 
$Comment /* DETACH REQUEST 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] AM?RLC_AM_DATA_IND
$Cref car_RRC_Status(?, 
tsc_RB2,  
cr_RRC_RrcStatus)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] AM?RLC_AM_DATA_IND
$Cref car_MeasRepAM(?,  
 tsc_RB2,   
cr_RRC_MeasRep)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] UM?RLC_UM_DATA_IND
$Cref car_MeasRepUM(?, 
tsc_RB1,  
cr_RRC_MeasRep)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] AM?RLC_AM_DATA_CNF
$Cref car_AM_DataCnf(?, tsc_RB2)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?CPHY_Sync_IND 
CANCEL t_T312
$Cref ca_SyncInd ( tsc_UL_DPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?CPHY_Out_of_Sync_IND 
CANCEL t_T312
$Cref ca_OutOfSyncInd ( tsc_UL_DPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?CRLC_Integrity_Failure_IND
$Cref car_CRLC_IntegrityFail
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF0
$Line [1] [ tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd[tcv_MM_TestExecution]
$Cref car_PS_InitDirectTransfer ( tsc_CellDedicated,  
tsc_RB3,  
cr_AttachReq ( 
c_AttachTypeAny, c_MobileIdAny_lv, c_RAI_Any_v,?))
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc ! RRC_DataReq
$Cref ca_PS_DataReq ( tsc_CellDedicated,  
tsc_RB3, 
cs_AttachRej( 
'07'O))
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_ReceivePS_ServiceReq = TRUE ]
$Cref car_InitDirectTransfer ( tsc_CellDedicated , tsc_RB3, cr_ServiceRequest ( c_ServiceType_v(?), c_MobileIdAny_lv, ? ) 
)
$VerdictId 
$Comment /* SERVICE REQUEST */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT t_Guard
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "The guard timer has run out. Please take appropriate measures")
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI1
$Line [4] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF1
$Line [4] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT t_TimeoutInDefault
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_TimeoutInDefault := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI8
$Line [2] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF8
$Line [2] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] AM?OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI2
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] UM?OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI3
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] TM?OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI4
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc?RRC_DataInd [ tcv_TestBody = FALSE ]
$Cref car_PS_UplinkDirectTransfer (tsc_CellDedicated, tsc_RB3, cbr_Deact_PDP_ContextReq_MO(?))
$VerdictId (I)
$Comment /* 2. 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId DFI5
$Line [1] CANCEL
$Cref 
$VerdictId 
$Comment /* 3.  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] AM?OTHERWISE [ tcv_TestBody = TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF2
$Line [1] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] UM?OTHERWISE [ tcv_TestBody = TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF3
$Line [1] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] TM?OTHERWISE [ tcv_TestBody = TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF4
$Line [1] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc?RRC_DataInd [ tcv_TestBody = TRUE ]
$Cref car_PS_UplinkDirectTransfer (tsc_CellDedicated, tsc_RB3, cbr_Deact_PDP_ContextReq_MO(?))
$VerdictId (F)
$Comment /* 5. */
$End_BehaviourLine
$BehaviourLine
$LabelId DFF5
$Line [1] CANCEL
$Cref 
$VerdictId 
$Comment /* 3. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?OTHERWISE
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI6
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CMAC?OTHERWISE
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI7
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?OTHERWISE
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI9
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_Default
$Begin_Default
$DefaultId RRC_DefConnEst
$DefaultRef MACv520/RRC_Defaults/
$Objective /* To match unexpected events during an RRC connection establishment i.e to match the repetition of RRC CONNECTION REQUEST. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] TM?RLC_TR_DATA_IND
$Cref car_RRC_ConnReq(?,  
tsc_RB0, cr_RRC_RrcConnReqAny)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] AM?RLC_AM_DATA_IND
$Cref car_RRC_Status(?, 
tsc_RB2,  
cr_RRC_RrcStatus)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?CPHY_Sync_IND 
CANCEL t_T312
$Cref ca_SyncInd ( tsc_UL_DPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?CPHY_Out_of_Sync_IND 
CANCEL t_T312
$Cref ca_OutOfSyncInd ( tsc_UL_DPCH1 )
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] AM?RLC_AM_DATA_IND
$Cref car_MeasRepAM(?,  
 tsc_RB2,   
cr_RRC_MeasRep)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] UM?RLC_UM_DATA_IND
$Cref car_MeasRepUM(?, 
tsc_RB1,  
cr_RRC_MeasRep)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] AM?RLC_AM_DATA_CNF
$Cref car_AM_DataCnf(?, tsc_RB2)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?CRLC_Integrity_Failure_IND
$Cref car_CRLC_IntegrityFail
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF0
$Line [1] [ tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_ReceivePS_ServiceReq = TRUE ]
$Cref car_InitDirectTransfer ( tsc_CellDedicated , tsc_RB3, cr_ServiceRequest ( c_ServiceType_v(?), c_MobileIdAny_lv, ? ) 
)
$VerdictId 
$Comment /* SERVICE REQUEST */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT t_Guard
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "The guard timer has run out. Please take appropriate measures")
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI1
$Line [4] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF1
$Line [4] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT t_TimeoutInDefault
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_TimeoutInDefault := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI8
$Line [2] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF8
$Line [2] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] AM?OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI2
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] UM?OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI3
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] TM?OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI4
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] AM?OTHERWISE [ tcv_TestBody = TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF2
$Line [1] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] UM?OTHERWISE [ tcv_TestBody = TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF3
$Line [1] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] TM?OTHERWISE [ tcv_TestBody = TRUE]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF4
$Line [1] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?OTHERWISE
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI5
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CMAC?OTHERWISE
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI6
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?OTHERWISE
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI7
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_Default
$End_DefaultGroup
$DefaultGroup
$DefaultGroupId UT_Defaults
$Begin_Default
$DefaultId UT_OtherwiseFail
$DefaultRef MACv520/UT_Defaults/
$Objective /* To match unexpected events and fail the test case at the UtT PCO. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] Ut?OTHERWISE
$Cref 
$VerdictId 
$Comment /* 1. */
$End_BehaviourLine
$BehaviourLine
$LabelId DFI1
$Line [1] CANCEL
$Cref 
$VerdictId I
$Comment /* 2. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?CRLC_Integrity_Failure_IND
$Cref car_CRLC_IntegrityFail
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF2
$Line [1] [ tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI8
$Line [2] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF8
$Line [2] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. Unexpected UT MMI events, fail. 
2. Cancel of all running timers. */
$End_Default
$End_DefaultGroup
$DefaultGroup
$DefaultGroupId SS_Defaults
$Begin_Default
$DefaultId SS_Def_Special
$DefaultRef MACv520/SS_Defaults/
$Objective /* To match unexpected events during SS configuration/reconfiguration steps.
This default does not send any message. */
$Comment /*  */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT t_Guard
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "The guard timer has run out. Please take appropriate measures")
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI5
$Line [4] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF7
$Line [4] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT t_TimeoutInDefault
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_TimeoutInDefault := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI8
$Line [2] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF8
$Line [2] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?CPHY_Sync_IND
$Cref ca_SyncInd (?)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?CPHY_Out_of_Sync_IND
$Cref ca_OutOfSyncInd (?)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_ReceivePS_ServiceReq = TRUE ]
$Cref car_InitDirectTransfer ( tsc_CellDedicated , tsc_RB3, cr_ServiceRequest ( c_ServiceType_v(?), c_MobileIdAny_lv, ? ) 
)
$VerdictId 
$Comment /* SERVICE REQUEST */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_GMM_AttachExpect = TRUE] ( 
tcv_TmpAttachReqPDU := RRC_DataInd.msg, 
tcv_TmpB3:= tcv_TmpAttachReqPDU.attachType.type, 
tcv_CellIndInfo.start_PS := RRC_DataInd.start , tcv_GMM_AttachRec := TRUE )
$Cref car_PS_InitDirectTransfer (tsc_CellDedicated, tsc_RB3,  
cr_AttachReq ( 
c_AttachTypeAny, c_MobileIdAny_lv, c_RAI_Any_v,  
?))
$VerdictId 
$Comment /* ATTACH REQUEST 
 - Extract Attach type requested 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?CRLC_Integrity_Failure_IND
$Cref car_CRLC_IntegrityFail
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId DFF5
$Line [1] [ tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?OTHERWISE
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId DFI2
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CMAC?OTHERWISE
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI3
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?OTHERWISE
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI4
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_Default
$Begin_Default
$DefaultId SS_Def
$DefaultRef MACv520/SS_Defaults/
$Objective /* To match unexpected events during SS configuration/reconfiguration steps. */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT t_Guard
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "The guard timer has run out. Please take appropriate measures")
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI5
$Line [4] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF7
$Line [4] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT t_TimeoutInDefault
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] (tcv_TimeoutInDefault := TRUE)
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI8
$Line [2] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF8
$Line [2] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?CPHY_Sync_IND
$Cref ca_SyncInd (?)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?CPHY_Out_of_Sync_IND
$Cref ca_OutOfSyncInd (?)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd[tcv_MM_TestExecution]
$Cref car_PS_InitDirectTransfer ( tsc_CellDedicated,  
tsc_RB3,  
cr_AttachReq ( 
c_AttachTypeAny, c_MobileIdAny_lv, c_RAI_Any_v,?))
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Dc ! RRC_DataReq
$Cref ca_PS_DataReq ( tsc_CellDedicated,  
tsc_RB3, 
cs_AttachRej( 
'07'O))
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_ReceivePS_ServiceReq = TRUE ]
$Cref car_InitDirectTransfer ( tsc_CellDedicated , tsc_RB3, cr_ServiceRequest ( c_ServiceType_v(?), c_MobileIdAny_lv, ? ) 
)
$VerdictId 
$Comment /* SERVICE REQUEST */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] Dc ? RRC_DataInd [ tcv_GMM_AttachExpect = TRUE] ( 
tcv_TmpAttachReqPDU := RRC_DataInd.msg, 
tcv_TmpB3:= tcv_TmpAttachReqPDU.attachType.type, 
tcv_CellIndInfo.start_PS := RRC_DataInd.start , tcv_GMM_AttachRec := TRUE )
$Cref car_PS_InitDirectTransfer (tsc_CellDedicated, tsc_RB3,  
cr_AttachReq ( 
c_AttachTypeAny, c_MobileIdAny_lv, c_RAI_Any_v,  
?))
$VerdictId 
$Comment /* ATTACH REQUEST 
 - Extract Attach type requested 
 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?CRLC_Integrity_Failure_IND
$Cref car_CRLC_IntegrityFail
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId DFF5
$Line [1] [ tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY?OTHERWISE
$Cref 
$VerdictId 
$Comment /*  */
$End_BehaviourLine
$BehaviourLine
$LabelId DFI2
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CMAC?OTHERWISE
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI3
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?OTHERWISE
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI4
$Line [1] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_Default
$End_DefaultGroup
$DefaultGroup
$DefaultGroupId RLC_Defaults
$Begin_Default
$DefaultId RLC_Default
$DefaultRef MACv520/RLC_Defaults/
$Objective /*  */
$BehaviourDescription
$BehaviourLine
$LabelId DFI1
$Line [0] TM ? OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId (I)
$Comment /* 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF1
$Line [0] TM ? OTHERWISE [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId (F)
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId DFI2
$Line [0] AM ? OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId (I)
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF2
$Line [0] AM ? OTHERWISE [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId (F)
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId DFI3
$Line [0] UM ? OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId (I)
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF3
$Line [0] UM ? OTHERWISE [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId (F)
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CRLC?CRLC_Integrity_Failure_IND
$Cref car_CRLC_IntegrityFail
$VerdictId 
$Comment /* 10 */
$End_BehaviourLine
$BehaviourLine
$LabelId DFF4
$Line [1] [ tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ NOT tcv_CellIndInfo.integrityStarted ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI4
$Line [0] ? TIMEOUT t_Guard
$Cref 
$VerdictId 
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] Ut ! MMI_CmdReq
$Cref ca_MMI_CmdReq ( "The guard timer has run out. Please take appropriate measures")
$VerdictId 
$Comment /* 4. */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] Ut ? MMI_CmdCnf
$Cref ca_MMI_CmdCnf
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI5
$Line [4] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF7
$Line [4] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId DFI6
$Line [0] ? TIMEOUT t_Poll
$Cref 
$VerdictId (I)
$Comment /* 6 */
$End_BehaviourLine
$BehaviourLine
$LabelId DFI7
$Line [0] ? TIMEOUT t_Status
$Cref 
$VerdictId (I)
$Comment /* 7 */
$End_BehaviourLine
$BehaviourLine
$LabelId DFI8
$Line [0] ? TIMEOUT t_Reset
$Cref 
$VerdictId (I)
$Comment /* 8 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ?TIMEOUT
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFI9
$Line [2] CANCEL
$Cref 
$VerdictId (I)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId DFF8
$Line [2] CANCEL
$Cref 
$VerdictId (F)
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. If unexpected data is received on the TM PCO outside of the test body,  the 
   preambles / postambles  have failed, and an inconclusive verdict is assigned. 
 
2.  If unexpected data is received on the TM PCO within the test body, the test 
    purpose has not been met, and a fail verdict is assigned. 
 
3. If unexpected data is received on the AM or UM PCO outside of the test body, 
   the preambles / postambles have failed, and an inconclusive verdict is  
   assigned. 
 
4. If unexpected data is received on the AM or UM PCO within the test body, the 
   test purpose has not been met, and a fail verdict is assigned. 
 
5. If the guard timer expires at any time, the test case has timed out, and an  
   inconclusive verdict is assigned. 
 
6. The poll timer is used to measure the time between poll events by using the  
   READTIMER operation. It is not expected to expire, so if expiry of this timer  
   occurs, an inconclusive verdict is assigned indicating a test case error. 
 
7. The status timer is used to measure the time between STATUS PDUs by using the 
   READTIMER operation. It is not expected to expire, so if expiry of this timer  
   occurs, an inconclusive verdict is assigned indicating a test case error. 
 
8.  The reset timer is used to measure the time between RESET PDUs by using the 
   READTIMER operation. It is not expected to expire, so if expiry of this timer  
   occurs, an inconclusive verdict is assigned indicating a test case error. 
 
9. If any other timer expires and is not explicitly handled in the test case, 
   an inconclusive verdict is assigned. 
 
10.  If an Integrity failure indication occurrs, a fail verdict is assigned. */
$End_Default
$End_DefaultGroup
$Begin_Default
$DefaultId MAC_Default
$DefaultRef MACv520/
$Objective /*  */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] AM ? RLC_AM_DATA_IND [ (tcv_ReceiveSigConnRelInd = TRUE) AND ( tcv_TestBody = TRUE ) ]
$Cref car_RRC_SigConnRelInd (
tsc_CellDedicated,
?,
cr_RRC_SigConnRelInd ( tcv_CN_Domain )
 )
$VerdictId (P)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] ( tcv_ReceiveSigConnRelInd := FALSE )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] TM ? OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId (I)
$Comment /* 1 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] TM ? OTHERWISE [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId (F)
$Comment /* 2 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] AM ? OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId (I)
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] AM ? OTHERWISE [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId (F)
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] UM ? OTHERWISE [ tcv_TestBody = FALSE ]
$Cref 
$VerdictId (I)
$Comment /* 3 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] UM ? OTHERWISE [ tcv_TestBody = TRUE ]
$Cref 
$VerdictId (F)
$Comment /* 4 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY ? CPHY_PRACH_Measurement_Report_IND
$Cref car_PRACH_Measurement_Report_IND( ?,  ?,  ?)
$VerdictId (I)
$Comment /* 6 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ? TIMEOUT t_Guard
$Cref 
$VerdictId (I)
$Comment /* 5 */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] ? TIMEOUT
$Cref 
$VerdictId (I)
$Comment /* 9 */
$End_BehaviourLine
$BehaviourLine
$LabelId DFF1
$Line [1] CRLC?CRLC_Integrity_Failure_IND
$Cref car_CRLC_IntegrityFail
$VerdictId (F)
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /* 1. If unexpected data is received on the TM PCO outside of the test body,  the
   preambles / postambles  have failed, and an inconclusive verdict is assigned.

2.  If unexpected data is received on the TM PCO within the test body, the test
    purpose has not been met, and a fail verdict is assigned.

3. If unexpected data is received on the AM or UM PCO outside of the test body,
   the preambles / postambles have failed, and an inconclusive verdict is 
   assigned.

4. If unexpected data is received on the AM or UM PCO within the test body, the
   test purpose has not been met, and a fail verdict is assigned.

5. If the guard timer expires at any time, the test case has timed out, and an 
   inconclusive verdict is assigned.

6. If any undesired PRACH measurement report is received the test case result Inconclusive
  

9. If any other timer expires and is not explicitly handled in the test case,
   an inconclusive verdict is assigned. */
$End_Default
$Begin_Default
$DefaultId MAC_PRACH_MeasRecDef
$DefaultRef MACv520/
$Objective /*  */
$BehaviourDescription
$BehaviourLine
$LabelId 
$Line [0] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_PreambleSigUsed :=CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_Signature ,
tcv_PRACH_AccessSlotUsed :=CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1, cs_PRACH_PreamMeasRep)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( 0 <= tcv_PRACH_PreambleSigUsed) AND ( tcv_PRACH_PreambleSigUsed <= 7) AND 
(   (tcv_PRACH_AccessSlotUsed = 1) OR (tcv_PRACH_AccessSlotUsed = 4) OR (tcv_PRACH_AccessSlotUsed = 7) OR (tcv_PRACH_AccessSlotUsed = 10) OR (tcv_PRACH_AccessSlotUsed = 13)    )AND (tcv_AccessServiceClass = '0010'B) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_PRACH_ExpAccessSlot := (  (tcv_PRACH_AccessSlotUsed + 3)  MOD 15) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ ( 0 <= tcv_PRACH_PreambleSigUsed) AND ( tcv_PRACH_PreambleSigUsed <= 7) AND 
(   (tcv_PRACH_AccessSlotUsed = 0) OR (tcv_PRACH_AccessSlotUsed = 3) OR (tcv_PRACH_AccessSlotUsed = 6) OR (tcv_PRACH_AccessSlotUsed = 9) OR (tcv_PRACH_AccessSlotUsed = 12)    )AND (tcv_AccessServiceClass = '0001'B) ]
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] ( tcv_PRACH_ExpAccessSlot := (  (tcv_PRACH_AccessSlotUsed + 3)  MOD 15) )
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [3] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [0] CPHY ? CPHY_PRACH_Measurement_Report_IND
( tcv_PRACH_AccessSlotUsed := CPHY_PRACH_Measurement_Report_IND.measurementReport.usedPRACH_AcessSlot )
$Cref car_PRACH_Measurement_Report_IND( tsc_DefaultCellId,  tsc_PRACH1,  cs_PRACH_MsgMeasRep)
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [  (  tcv_PRACH_AccessSlotUsed = tcv_PRACH_ExpAccessSlot) ]
$Cref 
$VerdictId (P)
$Comment /* Difference of 3 access slot match */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [1] [ TRUE]
$Cref 
$VerdictId (F)
$Comment /* The Difference of 3 access slot does not match */
$End_BehaviourLine
$BehaviourLine
$LabelId 
$Line [2] RETURN
$Cref 
$VerdictId 
$End_BehaviourLine
$End_BehaviourDescription
$Comment /*  */
$End_Default
$End_DefaultsLibrary
$End_DynamicPart
$End_Suite
